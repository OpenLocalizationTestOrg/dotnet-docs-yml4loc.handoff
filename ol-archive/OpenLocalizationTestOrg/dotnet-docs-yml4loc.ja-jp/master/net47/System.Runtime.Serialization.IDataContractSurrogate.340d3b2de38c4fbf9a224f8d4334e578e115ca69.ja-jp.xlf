<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6a8a8b227a59ecb7bfdf39a88f1626aea14de2a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.Serialization.IDataContractSurrogate.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d99a2c427ca18eb1b20325fadf8df7c2ca844bc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55b7e68b766037d247ed1364392c5ea660ab612d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the methods needed to substitute one type for another by the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> during serialization, deserialization, and export and import of XML schema documents (XSD).</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IDataContractSurrogate&gt;</ph> when using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> if you need to do one of the following: substitute one type or object for another, or to dynamically generate schema variations.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a sample application, see <bpt id="p1">[</bpt>DataContract Surrogate<ept id="p1">](~/docs/framework/wcf/samples/datacontract-surrogate.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about data contracts, see <bpt id="p1">[</bpt>Using Data Contracts<ept id="p1">](~/docs/framework/wcf/feature-details/using-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>At run time, you can find the specific <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> for any operation in a service by using the <ph id="ph2">&lt;xref:System.ServiceModel.Description.OperationDescription&gt;</ph> to find the <ph id="ph3">&lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about implementing the interface to create a surrogate, see <bpt id="p1">[</bpt>Data Contract Surrogates<ept id="p1">](~/docs/framework/wcf/extending/data-contract-surrogates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IDataContractSurrogate&gt;</ph> to affect the import and export of XML schemas when you are using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> and <ph id="ph3">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can do so by assigning the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IDataContractSurrogate&gt;</ph> to the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Runtime.Serialization.ExportOptions&gt;</ph> class, or to the <ph id="ph4">&lt;xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A&gt;</ph> property of the <ph id="ph5">&lt;xref:System.Runtime.Serialization.ImportOptions&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Schema Import and Export<ept id="p1">](~/docs/framework/wcf/feature-details/schema-import-and-export.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>During schema export operations, inserts annotations into the schema for non-null return values.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Reflection.MemberInfo"&gt;&lt;/xref&gt;</ph> that describes the member.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An object that represents the annotation to be inserted into the XML schema definition.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>During schema export operations, inserts annotations into the schema for non-null return values.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The CLR type to be replaced.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The data contract type to be annotated.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An object that represents the annotation to be inserted into the XML schema definition.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The CLR type <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> to substitute.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> to substitute for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">type</ph><ept id="p1">&lt;/code&gt;</ept> value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This type must be serializable by the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, it must be marked with the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractAttribute"&gt;&lt;/xref&gt;</ph> attribute or other mechanisms that the serializer recognizes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>During deserialization, returns an object that is a substitute for the specified object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a simple implementation, use an if…then…else control structure to test whether the <ph id="ph1">`obj`</ph> value is of the surrogated type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If so, transform it as necessary and return the substituted object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The substituted object can be a new instance or the same <ph id="ph1">`obj`</ph> instance.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The deserialized object to be substituted.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that the substituted object should be assigned to.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The substituted deserialized object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This object must be of a type that is serializable by the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, it must be marked with the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractAttribute"&gt;&lt;/xref&gt;</ph> attribute or other mechanisms that the serializer recognizes.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Sets the collection of known types to use for serialization and deserialization of the custom data objects.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is required during schema export or schema import only if annotations are inserted into the schema using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.ObjectModel.Collection`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> to add known types to.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>During serialization, returns an object that substitutes the specified object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method must not return <ph id="ph1">`null`</ph> because on deserialization the data will be cast to type <ph id="ph2">&lt;xref:System.Object&gt;</ph> and an <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The object to substitute.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that the substituted object should be assigned to.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The substituted object that will be serialized.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The object must be serializable by the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, it must be marked with the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractAttribute"&gt;&lt;/xref&gt;</ph> attribute or other mechanisms that the serializer recognizes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>During schema import, returns the type referenced by the schema.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Null`</ph> should be returned if a CLR type does not exist for representing the schema type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will cause a new type to be generated during schema import.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The name of the type in schema.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The namespace of the type in schema.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> to use for the referenced type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Processes the type that has been generated from the imported schema.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The input <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> or other information in the <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> can be modified by the user in this method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`null`</ph> is returned, it will cause the type to not be generated.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a new <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> is returned, it will replace the original type generated.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;&lt;/xref&gt;</ph> to process that represents the type declaration generated during schema import.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;&lt;/xref&gt;</ph> that contains the other code generated during schema import.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;&lt;/xref&gt;</ph> that contains the processed type.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>