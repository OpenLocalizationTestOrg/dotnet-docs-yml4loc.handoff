<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc4c990577bee2ef0822472cbff3b1a7488a69ea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Resources.ResourceManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7a4028edc81648218571cc6d37df9e0ba8636aa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">baaf7d11daaa96d087804d7f9b6662e444315365</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a resource manager that provides convenient access to culture-specific resources at run time.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept>: Calling methods in this class with untrusted data is a security risk.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Call the methods in the class only with trusted data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class retrieves resources from a binary .resources file that is embedded in an assembly or from a standalone .resources file.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an app has been localized and localized resources have been deployed in <bpt id="p1">[</bpt>satellite assemblies<ept id="p1">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept>, it looks up culture-specific resources, provides resource fallback when a localized resource does not exist, and supports resource serialization.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating and managing resources in desktop apps and <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, see the following sections:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Desktop Apps<ept id="p1">](#desktop)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Creating Resources<ept id="p1">](#creating_resources)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Instantiating a ResourceManager Object<ept id="p1">](#instantiating)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>ResourceManager and Culture-Specific Resources<ept id="p1">](#CultureSpecific)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Retrieving Resources<ept id="p1">](#retrieving)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions<ept id="p1">](#exception)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Resource Versioning<ept id="p1">](#versioning)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>satelliteassemblies&gt; Configuration File Node<ept id="p1">](#config)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Windows Store Apps<ept id="p1">](#ws)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Desktop Apps</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For desktop apps, the<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class retrieves resources from binary resource (.resources) files.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, a language compiler or the  <bpt id="p1">[</bpt>Assembly Linker (AL.exe)<ept id="p1">](~/docs/framework/tools/al-exe-assembly-linker.md)</ept> embeds these resource files in an assembly.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object to retrieve resources directly from a .resources file that is not embedded in an assembly, by calling the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using standalone .resources files in an ASP.NET app will break XCOPY deployment, because the resources remain locked until they are explicitly released by the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to deploy resources with your ASP.NET apps, you should compile your .resources files into satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a resource-based app, one .resources file contains the resources of the default culture whose resources are used if no culture-specific resources can be found.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an app's default culture is English (en), the English language resources are used whenever localized resources cannot be found for a specific culture, such as English (United States) (en-US) or French (France) (fr-FR).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the resources for the default culture are embedded in the main app assembly, and resources for other localized cultures are embedded in satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Satellite assemblies contain only resources.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>They have the same root file name as the main assembly and an extension of .resources.dll.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For apps whose assemblies are not registered in the global assembly cache, satellite assemblies are stored in an app subdirectory whose name corresponds to the assembly's culture.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating Resources</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you develop a resource-based app, you store resource information in text files (files that have a .txt or .restext extension) or XML files (files that have a .resx extension).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>You then compile the text or XML files with the  <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to create a binary .resources file.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then embed the resulting .resources file in an executable or library by using a compiler option such as <ph id="ph1">`/resources`</ph> for the C# and Visual Basic compilers, or you can embed it in a satellite assembly by using the .</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you include a .resx file in your Visual Studio project, Visual Studio handles the compilation and embedding of default and localized resources automatically as part of the build process.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ideally, you should create resources for every language your app supports, or at least for a meaningful subset of each language.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The binary .resources file names follow the naming convention <bpt id="p1">*</bpt>basename<ept id="p1">*</ept>.<bpt id="p2">*</bpt>cultureName<ept id="p2">*</ept>.resources, where <bpt id="p3">*</bpt>basename<ept id="p3">*</ept> is the name of the app or the name of a class, depending on the level of detail you want.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.Name%2A?displayProperty=fullName&gt;</ph> property is used to determine <bpt id="p1">*</bpt>cultureName<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>A resource for the app's default culture should be named <bpt id="p1">*</bpt>basename<ept id="p1">*</ept>.resources.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose that an assembly has several resources in a resource file that has the base name MyResources.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>These resource files should have names such as MyResources.ja-JP.resources for the Japan (Japanese) culture, MyResources.de.resources for the German culture, MyResources.zh-CHS.resources for the simplified Chinese culture, and MyResources.fr-BE.resources for the French (Belgium) culture.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default resource file should be named MyResources.resources.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The culture-specific resource files are commonly packaged in satellite assemblies for each culture.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default resource file should be embedded in the app's main assembly.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that  allows resources to be marked as private, but you should always mark them as public so they can be accessed by other assemblies.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Because a satellite assembly contains no code, resources that are marked as private are unavailable to your app through any mechanism.)</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating, packaging, and deploying resources, see the articles <bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](~/docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept>, <bpt id="p2">[</bpt>Creating Satellite Assemblies<ept id="p2">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept>, and <bpt id="p3">[</bpt>Packaging and Deploying Resources<ept id="p3">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instantiating a ResourceManager Object</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>You instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object that retrieves resources from an embedded .resources file by calling one of its class constructor overloads.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>This tightly couples a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object with a particular .resources file and with any associated localized .resources files in satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The two most commonly called constructors are:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph> looks up resources based on two pieces of information that you supply: the base name of the .resources file, and the assembly in which the default .resources file resides.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base name includes the namespace and root name of the .resources file, without its culture or extension.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that .resources files that are compiled from the command line typically do not include a namespace name, whereas .resources files that are created in the Visual Studio environment do.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a resource file is named MyCompany.StringResources.resources and the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> constructor is called from a static method named <ph id="ph2">`Example.Main`</ph>, the following code instantiates a <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph> object that can retrieve resources from the .resources file:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Resources.Retrieving#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/ctor1.cs#1)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Resources.Retrieving#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/ctor1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.Type%29&gt;</ph> looks up resources in satellite assemblies based on information from a type object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type's fully qualified name corresponds to the base name of the .resources file without its file name extension.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>In desktop apps that are created by using the Visual Studio Resource Designer, Visual Studio creates a wrapper class whose fully qualified name is the same as the root name of the .resources file.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a resource file is named MyCompany.StringResources.resources and there is a wrapper class named <ph id="ph1">`MyCompany.StringResources`</ph>, the following code instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object that can retrieve resources from the .resources file:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Resources.Retrieving#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/ctor1.cs#2)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Resources.Retrieving#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/ctor1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the appropriate resources cannot be found, the constructor call creates a valid <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the attempt to retrieve a resource throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about dealing with the exception, see the <bpt id="p1">[</bpt>Handling MissingManifestResourceException and MissingSatelliteAssembly Exceptions<ept id="p1">](#exception)</ept> section later in this article.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows how to instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>It contains the source code for an executable named ShowTime.exe.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also includes the following text file named Strings.txt that contains a single string resource, <ph id="ph1">`TimeHeader`</ph>:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use a batch file to generate the resource file and embed it into the executable.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Here's the batch file to generate an executable by using the C# compiler:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the Visual Basic compiler, you can use the following batch file:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Resources.ResourceManager.Class#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showtime.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Resources.ResourceManager.Class#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showtime.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>ResourceManager and Culture-Specific Resources</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>A localized app requires resources to be deployed, as discussed in the article <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the assemblies are properly configured, the resource manager determines which resources to retrieve based on the current thread's <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>(That property also returns the current thread's UI culture.) For example, if an app is compiled with default English language resources in the main assembly and with French and Russian language resources in two satellite assemblies, and the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property is set to fr-FR, the resource manager retrieves the French resources.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A&gt;</ph> property explicitly or implicitly.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The way you set it determines how the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object retrieves resources based on culture:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you explicitly set the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property to a specific culture, the resource manager always retrieves the resources for that culture, regardless of the user's browser or operating system language.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider an app that is compiled with default English language resources and three satellite assemblies that contain resources for English (United States), French (France), and Russian (Russia).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A&gt;</ph> property is set to fr-FR, the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object always retrieves the French (France) resources, even if the user's operating system language is not French.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Make sure that this is the desired behavior before you set the property explicitly.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>In ASP.NET apps, you must set the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property explicitly, because it is unlikely that the setting on the server will match incoming client requests.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ASP.NET app can set the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property explicitly to the user's browser accept language.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Explicitly setting the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property defines the current UI culture for that thread.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not affect the current UI culture of any other threads in an app.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the UI culture of all threads in an app domain by assigning a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents that culture to the static <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not explicitly set the current UI culture and you do not define a default culture for the current app domain, the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property is set implicitly by the Windows <ph id="ph2">`GetUserDefaultUILanguage`</ph> function.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>This function is provided by the Multilingual User Interface (MUI), which enables the user to set the default language.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the UI language is not set by the user, it defaults to the system-installed language, which is the language of operating system resources.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following simple "Hello world" example sets the current UI culture explicitly.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>It contains resources for three cultures: English (United States) or en-US, French (France) or fr-FR, and Russian (Russia) or ru-RU.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The en-US resources are contained in a text file named Greetings.txt:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fr-FR resources are contained in a text file named Greetings.fr-FR.txt:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ru-RU resources are contained in a text file named Greetings.ru-RU.txt:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Here's the source code for the example (Example.vb for the Visual Basic version or Example.cs for the C# version):</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Resources.CurrentCulture#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.currentculture/cs/example.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Resources.CurrentCulture#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.currentculture/vb/example.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>To compile this example, create a batch (.bat) file that contains the following commands and run it from the command prompt.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you're using C#, specify <ph id="ph1">`csc`</ph> instead of <ph id="ph2">`vbc`</ph> and <ph id="ph3">`Example.cs`</ph> instead of <ph id="ph4">`Example.vb`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving Resources</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>You call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph> methods to access a specific resource.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%29&gt;</ph> method to retrieve non-string resources as a byte array.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, in an app that has localized resources, these methods return the resource for the culture determined by the current UI culture of the thread that made the call.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the previous section, <bpt id="p1">[</bpt>ResourceManager and Culture-Specific Resources<ept id="p1">](#CultureSpecific)</ept>, for more information about how the current UI culture of a thread is defined.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager cannot find the resource for the current thread's UI culture, it uses a fallback process to retrieve the specified resource.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager cannot find any localized resources, it uses the resources of the default culture.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about resource fallback rules, see the "Resource Fallback Process" section of the article <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the .resources file specified in the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class constructor cannot be found, the attempt to retrieve a resource throws a <ph id="ph2">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> or <ph id="ph3">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about dealing with the exception, see the <bpt id="p1">[</bpt>Handling  MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions<ept id="p1">](#exception)</ept> section later in this topic.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph> method to retrieve culture-specific resources.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>It consists of resources compiled from .txt files for the English (en), French (France) (fr-FR), and Russian (Russia) (ru-RU) cultures.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example changes the current culture and current UI culture to English (United States), French (France), Russian (Russia), and Swedish (Sweden).</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph> method to retrieve the localized string, which it displays along with the current day and month.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice that the output displays the appropriate localized string except when the current UI culture is Swedish (Sweden).</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because Swedish language resources are unavailable, the app instead uses the resources of the default culture, which is English.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example requires the text-based resource files listed in following table.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each has a single string resource named <ph id="ph1">`DateStart`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Culture</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>File name</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resource name</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resource value</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>en-US</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>DateStrings.txt</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Today is</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>fr-FR</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>DateStrings.fr-FR.txt</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Aujourd'hui, c'est le</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>ru-RU</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>DateStrings.ru-RU.txt</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Сегодня</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Here's the source code for the example (ShowDate.vb for the Visual Basic version or ShowDate.cs for the C# version of the code).</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Resources.ResourceManager.Class#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Resources.ResourceManager.Class#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>To compile this example, create a batch file that contains the following commands and run it from the command prompt.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you're using C#, specify <ph id="ph1">`csc`</ph> instead of <ph id="ph2">`vbc`</ph> and <ph id="ph3">`showdate.cs`</ph> instead of <ph id="ph4">`showdate.vb`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two ways to retrieve the resources of a specific culture other than the current UI culture:</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>,  <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>, or <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method to retrieve a resource for a specific culture.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a localized resource cannot be found, the resource manager uses the resource fallback process to locate an appropriate resource.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A&gt;</ph> method to obtain a <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> object that represents the resources for a particular culture.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the method call, you can determine whether the resource manager probes for parent cultures if it is unable to find localized resources, or whether it simply falls back to the resources of the default culture.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then use the <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> methods to access the resources (localized for that culture) by name, or to enumerate the resources in the set.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you try to retrieve a specific resource, but the resource manager cannot find that resource and either no default culture has been defined or the resources of the default culture cannot be located, the resource manager throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception if it expects to find the resources in the main assembly or a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> if it expects to find the resources in a satellite assembly.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the exception is thrown when you call a resource retrieval method such as <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>, and not when you instantiate a <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exception is typically thrown under the following conditions:</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The appropriate resource file or satellite assembly does not exist.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager expects the app's default resources to be embedded in the main app assembly, they are absent.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute indicates that the app's default resources reside in a satellite assembly, that assembly cannot be found.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you compile your app, make sure that resources are embedded in the main assembly or that the necessary satellite assembly is generated and is named appropriately.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its name should take the form <bpt id="p1">*</bpt>appName<ept id="p1">*</ept>.resources.dll, and it should be located in a directory named after the culture whose resources it contains.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your app doesn't have a default or neutral culture defined.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute to a source code file or to the project information file (AssemblyInfo.vb for a Visual Basic app or AssemblyInfo.cs for a C# app) file.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`baseName`</ph> parameter in the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph> constructor does not specify the name of a .resources file.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name should include the resource file's fully qualified namespace but not its file name extension.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, resource files that are created in Visual Studio include namespace names, but resource files that are created and compiled at the command prompt do not.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can determine the names of embedded .resources files by compiling and running the following utility.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a console app that accepts the name of a main assembly or satellite assembly as a command-line parameter.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>It displays the strings that should be provided as the <ph id="ph1">`baseName`</ph> parameter so that the resource manager can correctly identify the resource.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Resources.ResourceManager.Class#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/resourcenames.cs#4)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Resources.ResourceManager.Class#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/resourcenames.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are changing the current culture of your application explicitly, you should also remember that the resource manager retrieves a resource set based on the value of the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property, and not the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, if you change one value, you should also change the other.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resource Versioning</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the main assembly that contains an app's default resources is separate from the app's satellite assemblies, you can release a new version of your main assembly without redeploying the satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use the <ph id="ph1">&lt;xref:System.Resources.SatelliteContractVersionAttribute&gt;</ph> attribute to use existing satellite assemblies and instruct the resource manager not to redeploy them with a new version of your main assembly,</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about versioning support for satellite assemblies, see the article <bpt id="p1">[</bpt>Retrieving Resources<ept id="p1">](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph>satelliteassemblies&gt; Configuration File Node</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>For executables that are deployed and run from a website (HREF .exe files), the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object may probe for satellite assemblies over the web, which can hurt your app's performance.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>To eliminate the performance problem, you can limit this probing to the satellite assemblies that you have deployed with your app.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do this, you create a <ph id="ph1">`&lt;satelliteassemblies&gt;`</ph> node in your app's configuration file to specify that you have deployed a specific set of cultures for your app, and that the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object should not try to probe for any culture that is not listed in that node.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The preferred alternative to creating a <ph id="ph1">`&lt;satelliteassemblies&gt;`</ph> node is to use the <bpt id="p1">[</bpt>ClickOnce Deployment Manifest<ept id="p1">](http://msdn.microsoft.com/library/8457e615-e3b6-4990-8dcf-11bc590e4e9b)</ept> feature.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>In your app's configuration file, create a section similar to the following:</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>Edit this configuration information as follows:</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify one or more <ph id="ph1">`&lt;assembly&gt;`</ph> nodes for each main assembly that you deploy, where each node specifies a fully qualified assembly name.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify the name of your main assembly in place of <bpt id="p1">*</bpt>MainAssemblyName<ept id="p1">*</ept>, and specify the <ph id="ph1">`Version`</ph>, <ph id="ph2">`PublicKeyToken`</ph>, and <ph id="ph3">`Culture`</ph> attribute values that correspond to your main assembly.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the <ph id="ph1">`Version`</ph> attribute, specify the version number of your assembly.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the first release of your assembly might be version number 1.0.0.0.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the <ph id="ph1">`PublicKeyToken`</ph> attribute, specify the keyword <ph id="ph2">`null`</ph> if you have not signed your assembly with a strong name, or specify your public key token if you have signed your assembly.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the <ph id="ph1">`Culture`</ph> attribute, specify the keyword <ph id="ph2">`neutral`</ph> to designate the main assembly and cause the <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph> class to probe only for the cultures listed in the <ph id="ph4">`&lt;culture&gt;`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about fully qualified assembly names, see the article <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about strong-named assemblies, see the article <bpt id="p1">[</bpt>Creating and Using Strong-Named Assemblies<ept id="p1">](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify one or more <ph id="ph1">`&lt;culture&gt;`</ph> nodes with a specific culture name, such as "fr-FR", or a neutral culture name, such as "fr".</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>If resources are needed for any assembly not listed under the <ph id="ph1">`&lt;satelliteassemblies&gt;`</ph> node, the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class probes for cultures using standard probing rules.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> Apps</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is supported in <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, we do not recommend its use.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this class only when you develop <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph> projects that can be used with <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve resources from <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, use the <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept> class instead.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, the<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class retrieves resources from package resource index (PRI) files.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>A single PRI file (the application package PRI file) contains the resources for both the default culture and any localized cultures.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use the MakePRI utility to create a PRI file from one or more resource files that are in XML resource (.resw) format.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>For resources that are included in a Visual Studio project, Visual Studio handles the process of creating and packaging the PRI file automatically.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then use the .NET Framework <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class to access the app's or library's resources.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object for a <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app in the same way that you do for a desktop app.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then access the resources for a particular culture by passing the name of the resource to be retrieved to the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, this method returns the resource for the culture determined by the current UI culture of the thread that made the call.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also retrieve the resources for a specific culture by passing the name of the resource and a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the culture whose resource is to be retrieved to the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource for the current UI culture or the specified culture cannot be found, the resource manager uses a UI language fallback list to locate a suitable resource.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class with default values.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is useful only if you write your own class that derives from  the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class that looks up resources in satellite assemblies based on information from the specified type object.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>Desktop Apps</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>In desktop apps, the resource manager uses the <ph id="ph1">`resourceSource`</ph> parameter to load a particular resource file as follows:</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute is not used to indicate that the resources of the default culture reside in a satellite assembly, the resource manager assumes that the resource file for the default culture is found in the same assembly as the type specified by the <ph id="ph2">`resourceSource`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource manager assumes that the default resource file has the same base name as the type specified by the <ph id="ph1">`resourceSource`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource manager uses the default <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> class to manipulate the resource file.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, given a type named MyCompany.MyProduct.MyType, the resource manager looks for a .resources file named MyCompany.MyProduct.MyType.resources in the assembly that defines MyType.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Visual Studio, the Resource Designer automatically generates code that defines an <ph id="ph1">`internal`</ph> (in C#) or <ph id="ph2">`Friend`</ph> (in Visual Basic) class whose name is the same as the base name of the .resources file for the default culture.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>This makes it possible to instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object and couple it with a particular set of resources by getting a type object whose name corresponds to the name of the resource, because as long as the class is visible to the compiler, the resources must be as well.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a .resources file is named Resource1, the following statement instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object to manage the .resources file named Resource1:</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Resources.ResourceManager.ctor#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/ctor1.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you're not using Visual Studio, you can create a class with no members whose namespace and name are the same as that of the default .resources file.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example provides an illustration.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> Apps</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is supported in <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, we do not recommend its use.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this class only when you develop <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph> projects that can be used with <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve resources from <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, use the <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept> class instead.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> uses the <ph id="ph3">`resourceSource`</ph> parameter to infer the assembly, base name, and the namespace where the resource items can be located within the app's package resource index (PRI) file.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, given a type named MyCompany.MyProduct.MyType that is defined in <ph id="ph1">`MyAssembly`</ph>, the resource manager looks for a resource set identifier named MyAssembly and looks for a scope MyCompany.MyProduct.MyType within that resource set.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource manager searches for resource items under the default context (current culture, current high contrast setting, and so on) within this scope.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A type from which the resource manager derives all information for finding .resources files.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resourceSource</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class that looks up resources contained in files with the specified root name in the given assembly.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>Desktop Apps</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>In desktop apps, the individual culture-specific resource files should be contained in satellite assemblies, and the default culture's resource file should be contained in the main assembly.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>A satellite assembly is assumed to contain resources for a single culture specified in that assembly's manifest, and is loaded as necessary.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve resources from .resources files directly instead of retrieving them from assemblies, you must call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A&gt;</ph> method instead to instantiate a <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource file identified by <ph id="ph1">`baseName`</ph> cannot be found in <ph id="ph2">`assembly`</ph>, the method instantiates a <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph> object, but the attempt to retrieve a specific resource throws an exception, typically <ph id="ph4">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about diagnosing the cause of the exception, see the "Handling the MissingManifestResourceException Exception" section of the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> Apps</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is supported in <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, we do not recommend its use.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this class only when you develop <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph> projects that can be used with <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve resources from <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, use the <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept> class instead.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, the resource manager uses the simple name of the <ph id="ph2">`assembly`</ph> parameter to look up a matching resource set in the app's package resource index (PRI) file.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`baseName`</ph> parameter is used to look up a resource item within the resource set.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the root name for PortableLibrary1.Resource1.de-DE.resources is PortableLibrary1.Resource1.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The root name of the resource file without its extension but including any fully qualified namespace name.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>For example, the root name for the resource file named MyApplication.MyResource.en-US.resources is MyApplication.MyResource.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The main assembly for the resources.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">baseName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">assembly</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class that uses a specified <ph id="ph2">&lt;xref href="System.Resources.ResourceSet"&gt;&lt;/xref&gt;</ph> class to look up resources contained in files with the specified root name in the given assembly.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>The individual culture-specific resource files should be contained in satellite assemblies, and the default culture's resource file should be contained in the main assembly.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>A satellite assembly is assumed to contain resources for a single culture specified in that assembly's manifest, and is loaded as necessary.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve resources from .resources files directly instead of retrieving them from assemblies, you must call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A&gt;</ph> method instead to instantiate a <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource file identified by <ph id="ph1">`baseName`</ph> cannot be found in <ph id="ph2">`assembly`</ph>, the method instantiates a <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph> object, but the attempt to retrieve a specific resource throws an exception, typically <ph id="ph4">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about diagnosing the cause of the exception, see the "Handling the MissingManifestResourceException Exception" section of the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`usingResourceSet`</ph> parameter is used to support your own resource format, and will commonly be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is different from the constructor that takes a <ph id="ph1">&lt;xref:System.Type&gt;</ph> only.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The root name of the resource file without its extension but including any fully qualified namespace name.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>For example, the root name for the resource file named MyApplication.MyResource.en-US.resources is MyApplication.MyResource.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The main assembly for the resources.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The type of the custom <ph id="ph1">&lt;xref href="System.Resources.ResourceSet"&gt;&lt;/xref&gt;</ph> to use.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`null`</ph>, the default runtime <ph id="ph2">&lt;xref href="System.Resources.ResourceSet"&gt;&lt;/xref&gt;</ph> object is used.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;usingResourceset&lt;/code&gt;</ph> is not a derived class of <ph id="ph2">&lt;xref href="System.Resources.ResourceSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">baseName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">assembly</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Gets the root name of the resource files that the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> searches for resources.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property reflects the fully qualified namespace name and the root resource name of a resource file, without its culture or file name extension.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an app's default resource file is named <ph id="ph1">`SampleApps.StringResources.resources`</ph>, the value of the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property  is "SampleApps.StringResources".</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an app's default resource file is named <ph id="ph1">`SampleApps.StringResources.en-US.resources`</ph> and is embedded in a satellite assembly, the value of the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property is still "SampleApps.StringResources".</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property value of a resource file that is compiled and embedded from the command line does not include a namespace name unless you explicitly include one when compiling the file.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>On the other hand, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property value of a resource file that is compiled and embedded within the Visual Studio environment typically does include the default namespace name.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property value is the same as the string passed to the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph> or <ph id="ph3">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29&gt;</ph> constructor when instantiating a <ph id="ph4">&lt;xref:System.Resources.ResourceManager&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The root name of the resource files that the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> searches for resources.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Specifies the root name of the resource files that the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> searches for resources.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseNameField&gt;</ph> field is useful only if you write your own class that derives from the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> object that searches a specific directory instead of an assembly manifest for resources.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a resource manager that retrieves resources from a .resources file that is not embedded in an assembly.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object to load resources for an ASP.NET page or to test a <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example that retrieves resources from a standalone .resources file, see the <bpt id="p1">[</bpt>Retrieving Resources<ept id="p1">](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method lets you specify a <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not want a specific <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> implementation, but would like to use a custom resource file format, you should derive from the <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> class, override the <ph id="ph3">&lt;xref:System.Resources.ResourceSet.GetDefaultReader%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Resources.ResourceSet.GetDefaultWriter%2A&gt;</ph> methods, and pass that type to this constructor.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using standalone .resources files in an ASP.NET app will break XCOPY deployment, because the resources remain locked until they are explicitly released by the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to deploy resources with your ASP.NET apps, compile your .resources files into satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The root name of the resources.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>For example, the root name for the resource file named "MyResource.en-US.resources" is "MyResource".</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The name of the directory to search for the resources.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resourceDir</ph><ept id="p1">&lt;/code&gt;</ept> can be an absolute path or a relative path from the application directory.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The type of the custom <ph id="ph1">&lt;xref href="System.Resources.ResourceSet"&gt;&lt;/xref&gt;</ph> to use.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`null`</ph>, the default runtime <ph id="ph2">&lt;xref href="System.Resources.ResourceSet"&gt;&lt;/xref&gt;</ph> object is used.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>A new instance of a resource manager that searches the specified directory instead of an assembly manifest for resources.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">baseName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">resourceDir</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Gets or sets the location from which to retrieve default fallback resources.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.FallbackLocation%2A&gt;</ph> property is useful only if you write your own class that derives from the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute to inform the resource manager where to find the default culture for an app: in the main assembly (default) or in a satellite assembly.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies where the resource manager can look for fallback resources.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Returns culture-specific information for the main assembly's default resources by retrieving the value of the <ph id="ph1">&lt;xref href="System.Resources.NeutralResourcesLanguageAttribute"&gt;&lt;/xref&gt;</ph> attribute on a specified assembly.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The assembly for which to return culture-specific information.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The culture from the <ph id="ph1">&lt;xref href="System.Resources.NeutralResourcesLanguageAttribute"&gt;&lt;/xref&gt;</ph> attribute, if found; otherwise, the invariant culture.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Returns the value of the specified non-string resource.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph> method is used to retrieve non-string resources.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>These include values that belong to primitive data types such as <ph id="ph1">&lt;xref:System.Int32&gt;</ph> or <ph id="ph2">&lt;xref:System.Double&gt;</ph>, bitmaps (such as a <ph id="ph3">&lt;xref:System.Drawing.Bitmap?displayProperty=fullName&gt;</ph> object), or custom serialized objects.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the returned object must be cast (in C#) or converted (in Visual Basic) to an object of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned resource is localized for the UI culture of the current thread, which is defined by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource is not localized for that culture, the resource manager uses fallback rules to load an appropriate resource.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no usable set of localized resources is found, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> falls back on the default culture's resources.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a resource set for the default culture is not found, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can throw more exceptions than are listed.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>One reason this might occur is if a method that this method calls throws an exception.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> exception might be thrown if an error was made deploying or installing a satellite assembly, or a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception might be thrown if a user-defined type throws a user-defined exception when the type is deserialized.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>Performance Considerations</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph> method multiple times with the same <ph id="ph2">`name`</ph> parameter, do not depend on the method returning a reference to the same object with each call.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph> method can return a reference to an existing resource object in a cache, or it can reload the resource and return a reference to a new resource object.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The name of the resource to get.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The value of the resource localized for the caller's current culture settings.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>If an appropriate resource set exists but <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> cannot be found, the method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>No usable set of localized resources has been found, and there are no default culture resources.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Gets the value of the specified non-string resource localized for the specified culture.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method is used to retrieve non-string resources.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>These include values that belong to primitive data types such as <ph id="ph1">&lt;xref:System.Int32&gt;</ph> or <ph id="ph2">&lt;xref:System.Double&gt;</ph>, bitmaps (such as a <ph id="ph3">&lt;xref:System.Drawing.Bitmap?displayProperty=fullName&gt;</ph> object), or custom serialized objects.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the returned object must be cast (in C#) or converted (in Visual Basic) to an object of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned resource is localized for the culture that is specified by <ph id="ph1">`culture`</ph>, or for the culture that is specified by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property if <ph id="ph3">`culture`</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource is not localized for that culture, the resource manager uses fallback rules to load an appropriate resource.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no usable set of localized resources is found, the resource manager falls back on the default culture's resources.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a resource set for the default culture is not found, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can throw more exceptions than are listed.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>One reason this might occur is if a method that this method calls throws an exception.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> exception might be thrown if an error was made deploying or installing a satellite assembly, or a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception might be thrown if a user-defined type throws a user-defined exception when the type is deserialized.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>Performance Considerations</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph> method multiple times with the same <ph id="ph2">`name`</ph> parameter, do not depend on the method returning a reference to the same object with each call.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph> method can return a reference to an existing resource object in a cache, or it can reload the resource and return a reference to a new resource object.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The name of the resource to get.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The culture for which the resource is localized.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>If the resource is not localized for this culture, the resource manager uses fallback rules to locate an appropriate resource.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>If this value is <ph id="ph1">`null`</ph>, the <ph id="ph2">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> object is obtained by using the <ph id="ph3">&lt;xref href="System.Globalization.CultureInfo.CurrentUICulture"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The value of the resource, localized for the specified culture.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>If an appropriate resource set exists but <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> cannot be found, the method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>No usable set of resources have been found, and there are no default culture resources.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Generates the name of the resource file for the given <ph id="ph1">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetResourceFileName%2A&gt;</ph> method is useful only if you write your own class that derives from the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.Name%2A?displayProperty=fullName&gt;</ph> property as part of the file name for all cultures other than the invariant culture.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not look in an assembly's manifest or touch the disk, and is used only to construct a resource file name (suitable for passing to the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> constructor) or a manifest resource blob name.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>A derived class can override this method to look for a different extension, such as ".ResX", or a completely different scheme for naming resource files.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the method can be used to customize the name of a resource file within a satellite assembly, and not to customize the name of the satellite assembly itself.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The culture object for which a resource file name is constructed.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The name that can be used for a resource file for the given <ph id="ph1">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Retrieves the resource set for a particular culture.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource set that is returned represents the resources that are localized for the specified culture.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resources have not been localized for that culture and <ph id="ph1">`tryParents`</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A&gt;</ph> uses resource fallback rules to load an appropriate resource.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`tryParents`</ph> is <ph id="ph2">`false`</ph> and a culture-specific resource set cannot be found, the method returns <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about resource fallback, see "The Resource Fallback Process" section in the <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The culture whose resources are to be retrieved.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to load the resource set, if it has not been loaded yet; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to use resource fallback to load an appropriate resource if the resource set cannot be found; <ph id="ph2">`false`</ph> to bypass the resource fallback process.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The resource set for the specified culture.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">culture</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;tryParents&lt;/code&gt;</ph> is <ph id="ph2">`true`</ph>, no usable set of resources has been found, and there are no default culture resources.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Returns the version specified by the <ph id="ph1">&lt;xref href="System.Resources.SatelliteContractVersionAttribute"&gt;&lt;/xref&gt;</ph> attribute in the given assembly.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about satellite assembly versioning, see the <ph id="ph1">&lt;xref:System.Resources.SatelliteContractVersionAttribute&gt;</ph> reference topic.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The assembly to check for the <ph id="ph1">&lt;xref href="System.Resources.SatelliteContractVersionAttribute"&gt;&lt;/xref&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The satellite contract version of the given assembly, or <ph id="ph1">`null`</ph> if no version was found.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Version"&gt;&lt;/xref&gt;</ph> found in the assembly <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">a</ph><ept id="p1">&lt;/code&gt;</ept> is invalid.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;a&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Returns an unmanaged memory stream object from the specified resource.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph> method takes the name of a resource that is stored as a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph> object, gets the value of the <ph id="ph3">&lt;xref:System.Object&gt;</ph> resource, and returns an <ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>It requires that you work directly with a stream of bytes, which you then convert to an object.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is useful primarily for performance reasons: Retrieving a resource as a byte stream instead of an explicit object can improve performance.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned resource is localized for the UI culture of the current thread, which is defined by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource is not localized for that culture, the resource manager uses fallback rules to load an appropriate resource.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no usable set of localized resources is found, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> falls back on the default culture's resources.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a resource set for the default culture is not found, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The name of a resource.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>An unmanaged memory stream object that represents a resource .</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The value of the specified resource is not a <ph id="ph1">&lt;xref href="System.IO.MemoryStream"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>No usable set of resources is found, and there are no default resources.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Returns an unmanaged memory stream object from the specified resource, using the specified culture.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph> method takes the name of a resource that is stored as a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph> object, gets the value of the <ph id="ph3">&lt;xref:System.Object&gt;</ph> resource, and returns an <ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>It requires that you work directly with a stream of bytes, which you then convert to an object.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is useful primarily for performance reasons: Retrieving a resource as a byte stream instead of an explicit object can improve performance.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned resource is localized for the culture that is specified by <ph id="ph1">`culture`</ph>, or for the culture that is specified by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property if <ph id="ph3">`culture`</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource is not localized for that culture, the resource manager uses fallback rules to load an appropriate resource.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no usable set of localized resources is found, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> falls back on the default culture's resources.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a resource set for the default culture is not found, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The name of a resource.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>An  object that specifies the culture to use for the resource lookup.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">culture</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the culture for the current thread is used.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>An unmanaged memory stream object that represents a resource.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The value of the specified resource is not a <ph id="ph1">&lt;xref href="System.IO.MemoryStream"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>No usable set of resources is found, and there are no default resources.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Returns the value of the specified string resource.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>Desktop Apps</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>In desktop apps, the resource that is returned is localized for the UI culture of the current thread, as defined by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource has not been localized for that culture, the resource manager probes for a resource by following the steps outlined in the "Resource Fallback Process" section of the <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no usable set of localized resources is found, the resource manager falls back on the default culture's resources.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager cannot load the default culture's resource set, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can throw more exceptions than are listed.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>One reason this might occur is if a method that this method calls throws an exception.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> exception might be thrown if an error was made deploying or installing a satellite assembly, or a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception might be thrown if a user-defined type throws a user-defined exception when the type is deserialized.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> Apps</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is supported in <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, we do not recommend its use.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this class only when you develop <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph> projects that can be used with <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve resources from <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, use the <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept> class instead.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph> method returns the value of the <ph id="ph3">`name`</ph> string resource, localized for the caller's current UI culture settings.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>The list of cultures is derived from the operating system's preferred UI language list.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager cannot match <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The name of the resource to retrieve.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The value of the resource localized for the caller's current UI culture, or <ph id="ph1">`null`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">name</ph><ept id="p1">&lt;/code&gt;</ept> cannot be found in a resource set.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The value of the specified resource is not a string.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>No usable set of resources has been found, and there are no resources for the default culture.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Returns the value of the string resource localized for the specified culture.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>Desktop Apps</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>In desktop apps, if <ph id="ph1">`culture`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method uses the current UI culture obtained from the <ph id="ph4">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource that is returned is localized for the culture specified by the <ph id="ph1">`culture`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource has not been localized for <ph id="ph1">`culture`</ph>, the resource manager probes for a resource by following the steps outlined in the "Resource Fallback Process" section of the <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no usable set of resources is found, the resource manager falls back on the default culture's resources.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager cannot load the default culture's resource set, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can throw more exceptions than are listed.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>One reason this might occur is if a method that this method calls throws an exception.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> exception might be thrown if an error was made deploying or installing a satellite assembly, or a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception might be thrown if a user-defined type throws a user-defined exception when the type is deserialized.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> Apps</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>class is supported in <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, we do not recommend its use.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this class only when you develop <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph> projects that can be used with <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve resources from <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, use the <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept> class instead.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method returns the value of the <ph id="ph3">`name`</ph> string resource, localized for the culture specified by the <ph id="ph4">`culture`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource is not localized for the <ph id="ph1">`culture`</ph> culture, the lookup uses the entire <ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph> language fallback list, and stops after looking in the default culture.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the resource manager cannot match <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>The name of the resource to retrieve.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>An object that represents the culture for which the resource is localized.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>The value of the resource localized for the specified culture, or <ph id="ph1">`null`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">name</ph><ept id="p1">&lt;/code&gt;</ept> cannot be found in a resource set.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The value of the specified resource is not a string.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>No usable set of resources has been found, and there are no resources for a default culture.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Specifies the version of resource file headers that the current implementation of <ph id="ph1">&lt;xref href="System.Resources.ResourceManager"&gt;&lt;/xref&gt;</ph> can interpret and produce.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the resource manager allows case-insensitive resource lookups in the <ph id="ph1">&lt;xref href="System.Resources.ResourceManager.GetString(System.String)"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Resources.ResourceManager.GetObject(System.String)"&gt;&lt;/xref&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property is <ph id="ph2">`false`</ph>, a resource with the name "Resource" is not equivalent to the resource with the name "resource".</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> is <ph id="ph2">`true`</ph>, a resource with the name "Resource" is equivalent to the resource with the name "resource".</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note, however, that when <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetString%2A?displayProperty=fullName&gt;</ph> and <ph id="ph4">&lt;xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=fullName&gt;</ph> methods perform case-insensitive string comparisons by using the invariant culture.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>The advantage is that results of case-insensitive string comparisons performed by these methods are the same on all computers regardless of culture.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>The disadvantage is that the results are not consistent with the casing rules of all cultures.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131).</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130).</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture "tr-TR" (Turkish in Turkey).</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, because the comparison is conducted by using the casing rules of the invariant culture if <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> is <ph id="ph2">`true`</ph>, this comparison succeeds.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>For performance reasons, it is best to always specify the correct case for your resource names.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> to <ph id="ph2">`true`</ph> can cause a significant increase in working set and a significant decline in performance.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to ignore case during resource lookup; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Provides the implementation for finding a resource set.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The culture object to look for.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to load the resource set, if it has not been loaded yet; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to check parent <ph id="ph2">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> objects if the resource set cannot be loaded; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>The specified resource set.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>The main assembly does not contain a .resources file, which is required to look up a resource.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>There was an internal error in the runtime.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The satellite assembly associated with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">culture</ph><ept id="p1">&lt;/code&gt;</ept> could not be located.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Holds the number used to identify resource files.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is set to 0xBEEFCACE.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first four bytes of the system default file format contain a 32-bit signed integer in little-endian format (see <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.MagicNumber&gt;</ph> is found, the bytes following it will be a version number for a <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> header, followed by a number indicating how many bytes should be skipped to get past this header.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>The next number indicates the version of the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> that created the header, followed by version specific information.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>The version number for the current implementation is one.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>The next bytes are a length-prefixed string containing the name of an <ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph>, which can read this file.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Specifies the main assembly that contains the resources.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.MainAssembly&gt;</ph> field is useful only if you write your own class that derives from the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Tells the resource manager to call the <ph id="ph1">&lt;xref href="System.Resources.ResourceSet.Close"&gt;&lt;/xref&gt;</ph> method on all <ph id="ph2">&lt;xref href="System.Resources.ResourceSet"&gt;&lt;/xref&gt;</ph> objects and release all resources.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will shrink the working set in a running app.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any future resource lookups on this <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object will be as expensive as the first lookup, because the resource manager will have to search and load resources again.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be useful in some complex threading scenarios, where creating a new <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object is the appropriate behavior.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph> method is not thread safe with respect to <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph> operations.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>The advantage of this change is a performance improvement for multiple threads that access resources.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph> method in one thread while simultaneously getting a resource in another thread, the get operation can throw an <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use this method in situations where the managed instances for the resources created by the current resource manager have to be released deterministically, without waiting for the resource manager to go completely out of scope and be garbage collected.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method does not unload satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>To unload satellite assemblies, use the <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph> method .</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Contains a <ph id="ph1">&lt;xref href="System.Collections.Hashtable"&gt;&lt;/xref&gt;</ph> that returns a mapping from cultures to <ph id="ph2">&lt;xref href="System.Resources.ResourceSet"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Gets the type of the resource set object that the resource manager uses to construct a <ph id="ph1">&lt;xref href="System.Resources.ResourceSet"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>The type of the resource set object that the resource manager uses to construct a <ph id="ph1">&lt;xref href="System.Resources.ResourceSet"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>