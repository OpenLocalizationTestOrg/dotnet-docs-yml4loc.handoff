<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e736e2b39b6a18ecd6dafe380e46c860c0988c8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.FrameworkCompatibilityPreferences.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e69535e22ae9d0a961812bce05730a412fda4f39</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa62c474ff338167bf3612c38f0e28f42ebf6b2c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Contains properties that specify how an application should behave relative to WPF features that are in the PresentationFramework assembly.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the application should use the <ph id="ph1">&lt;xref href="System.Windows.SystemColors.InactiveSelectionHighlightBrush"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Windows.SystemColors.InactiveSelectionHighlightTextBrush"&gt;&lt;/xref&gt;</ph> properties for the colors of inactive selected items.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value of this property depends which version of WPF that your app targets.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your app targets WPF 4.0 or earlier, the default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your app targets WPF 4.5, the default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this property to change the behavior of WPF, you must change the property’s value early in the app’s lifetime, such in the constructor of the class that inherits from Application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the value is read, you cannot change it again.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the application should use the <ph id="ph2">&lt;xref href="System.Windows.SystemColors.InactiveSelectionHighlightBrush"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Windows.SystemColors.InactiveSelectionHighlightTextBrush"&gt;&lt;/xref&gt;</ph> properties for the colors of inactive selected items; otherwise, <ph id="ph4">`false`</ph></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a data-bound <ph id="ph1">&lt;xref href="System.Windows.Controls.TextBox"&gt;&lt;/xref&gt;</ph> should display a string that is identical to the value of the source its <ph id="ph2">&lt;xref href="System.Windows.Controls.TextBox.Text"&gt;&lt;/xref&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value of this property depends which version of WPF that your app targets.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your app targets WPF 4.0 or earlier, the default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your app targets WPF 4.5, the default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this property to change the behavior of WPF, you must change the property’s value early in the app’s lifetime, such in the constructor of the class that inherits from Application.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the value is read, you cannot change it again.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a data-bound <ph id="ph2">&lt;xref href="System.Windows.Controls.TextBox"&gt;&lt;/xref&gt;</ph> should display a string that is identical to the value of the source its <ph id="ph3">&lt;xref href="System.Windows.Controls.TextBox.Text"&gt;&lt;/xref&gt;</ph> property; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a failed copy or cut operation in a <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase"&gt;&lt;/xref&gt;</ph> instance results in a <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ExternalException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a clipboard operation fails, such as with a <bpt id="p1">**</bpt>HRESULT 0x800401D0 (CLIPBRD_E_CANT_OPEN)<ept id="p1">**</ept> error, a corresponding <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ExternalException&gt;</ph> (which is a type of ExternalException) is thrown.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the Win32 <ph id="ph1">`OpenClipboard`</ph> API acts globally, well-written applications should call the corresponding <ph id="ph2">`CloseClipboard`</ph> API as soon as they have completed their clipboard operations.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, other applications running in the same session will be unable to access clipboard functions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>In WPF, such a denial of access to the clipboard is normally ignored silently.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, applications can opt to receive an <ph id="ph1">`ExternalException`</ph> upon failure by setting the <ph id="ph2">&lt;xref:System.Windows.FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure%2A&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, opting to receive exceptions also requires the application to handle <ph id="ph1">&lt;xref:System.Windows.Input.ApplicationCommands.Cut%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Copy%2A&gt;</ph> RoutedUICommands through a <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>, and then apply that binding to all TextBoxBase controls (<ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>)  in the application.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application should ensure that it handles ExternalExceptions resulting from copy and cut operations in the CommandBinding's Executed handler.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a failed copy or cut operation in a <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase"&gt;&lt;/xref&gt;</ph> instance results in a <ph id="ph3">&lt;xref href="System.Runtime.InteropServices.ExternalException"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>