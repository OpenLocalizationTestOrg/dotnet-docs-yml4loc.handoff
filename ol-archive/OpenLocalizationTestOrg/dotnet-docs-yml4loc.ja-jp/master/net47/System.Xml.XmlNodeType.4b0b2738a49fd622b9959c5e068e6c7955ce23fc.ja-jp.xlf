<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">80c582a0372e35f0e2005f03682eb421a7e3d557</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.XmlNodeType.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e571c6deac2adba42acb30333b02db2b0c2e07ab</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12300a17f07429a76e0d163e6b9331af65be6317</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies the type of node.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>An attribute (for example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">id='123'</ph><ept id="p1">&lt;/code&gt;</ept> ).</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">`Attribute`</ph> node can have the following child node types: <ph id="ph2">`Text`</ph> and <ph id="ph3">`EntityReference`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Attribute`</ph> node does not appear as the child node of any other node type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is not considered a child node of an <ph id="ph1">`Element`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A CDATA section (for example, <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">&lt;![CDATA[my escaped text]]&gt;</ph><ph id="ph3">&lt;/code&gt;</ph> ).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>CDATA sections are used to escape blocks of text that would otherwise be recognized as markup.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`CDATA`</ph> node cannot have any child nodes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can appear as the child of the <ph id="ph1">`DocumentFragment`</ph>, <ph id="ph2">`EntityReference`</ph>, and <ph id="ph3">`Element`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A comment (for example, <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">&lt;!-- my comment --&gt;</ph><ph id="ph3">&lt;/code&gt;</ph> ).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`Comment`</ph> node cannot have any child nodes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can appear as the child of the <ph id="ph1">`Document`</ph>, <ph id="ph2">`DocumentFragment`</ph>, <ph id="ph3">`Element`</ph>, and <ph id="ph4">`EntityReference`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A document object that, as the root of the document tree, provides access to the entire XML document.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`Document`</ph> node can have the following child node types: <ph id="ph2">`XmlDeclaration`</ph>, <ph id="ph3">`Element`</ph> (maximum of one), <ph id="ph4">`ProcessingInstruction`</ph>, <ph id="ph5">`Comment`</ph>, and <ph id="ph6">`DocumentType`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>It cannot appear as the child of any node types.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A document fragment.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`DocumentFragment`</ph> node associates a node or subtree with a document without actually being contained within the document.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`DocumentFragment`</ph> node can have the following child node types: <ph id="ph2">`Element`</ph>, <ph id="ph3">`ProcessingInstruction`</ph>, <ph id="ph4">`Comment`</ph>, <ph id="ph5">`Text`</ph>, <ph id="ph6">`CDATA`</ph>, and <ph id="ph7">`EntityReference`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>It cannot appear as the child of any node types.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The document type declaration, indicated by the following tag (for example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">&lt;!DOCTYPE...&gt;</ph><ept id="p1">&lt;/code&gt;</ept> ).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`DocumentType`</ph> node can have the following child node types: <ph id="ph2">`Notation`</ph> and <ph id="ph3">`Entity`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can appear as the child of the <ph id="ph1">`Document`</ph> node.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An element (for example, <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">&lt;item&gt;</ph><ph id="ph3">&lt;/code&gt;</ph> ).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">`Element`</ph> node can have the following child node types: <ph id="ph2">`Element`</ph>, <ph id="ph3">`Text`</ph>, <ph id="ph4">`Comment`</ph>, <ph id="ph5">`ProcessingInstruction`</ph>, <ph id="ph6">`CDATA`</ph>, and <ph id="ph7">`EntityReference`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be the child of the <ph id="ph1">`Document`</ph>, <ph id="ph2">`DocumentFragment`</ph>, <ph id="ph3">`EntityReference`</ph>, and <ph id="ph4">`Element`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An end element tag (for example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">&lt;/item&gt;</ph><ept id="p1">&lt;/code&gt;</ept> ).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`EndElement`</ph> nodes are returned when <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> gets to the end of an element.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returned when <ph id="ph1">`XmlReader`</ph> gets to the end of the entity replacement as a result of a call to <ph id="ph2">&lt;xref href="System.Xml.XmlReader.ResolveEntity"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An entity declaration (for example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">&lt;!ENTITY...&gt;</ph><ept id="p1">&lt;/code&gt;</ept> ).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">`Entity`</ph> node can have child nodes that represent the expanded entity (for example, <ph id="ph2">`Text`</ph> and <ph id="ph3">`EntityReference`</ph> nodes).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can appear as the child of the <ph id="ph1">`DocumentType`</ph> node.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A reference to an entity (for example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">&amp;num;</ph><ept id="p1">&lt;/code&gt;</ept> ).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">`EntityReference`</ph> node can have the following child node types: <ph id="ph2">`Element`</ph>, <ph id="ph3">`ProcessingInstruction`</ph>, <ph id="ph4">`Comment`</ph>, <ph id="ph5">`Text`</ph>, <ph id="ph6">`CDATA`</ph>, and <ph id="ph7">`EntityReference`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can appear as the child of the <ph id="ph1">`Attribute`</ph>, <ph id="ph2">`DocumentFragment`</ph>, <ph id="ph3">`Element`</ph>, and <ph id="ph4">`EntityReference`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is returned by the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> if a <ph id="ph2">`Read`</ph> method has not been called.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A notation in the document type declaration (for example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">&lt;!NOTATION...&gt;</ph><ept id="p1">&lt;/code&gt;</ept> ).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`Notation`</ph> node cannot have any child nodes.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can appear as the child of the <ph id="ph1">`DocumentType`</ph> node.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A processing instruction (for example, <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">&lt;?pi test?&gt;</ph><ph id="ph3">&lt;/code&gt;</ph> ).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`ProcessingInstruction`</ph> node cannot have any child nodes.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can appear as the child of the <ph id="ph1">`Document`</ph>, <ph id="ph2">`DocumentFragment`</ph>, <ph id="ph3">`Element`</ph>, and <ph id="ph4">`EntityReference`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>White space between markup in a mixed content model or white space within the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">xml:space="preserve"</ph><ept id="p1">&lt;/code&gt;</ept> scope.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The text content of a node.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`Text`</ph> node cannot have any child nodes.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can appear as the child node of the <ph id="ph1">`Attribute`</ph>, <ph id="ph2">`DocumentFragment`</ph>, <ph id="ph3">`Element`</ph>, and <ph id="ph4">`EntityReference`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>White space between markup.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The XML declaration (for example, <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">&lt;?xml version='1.0'?&gt;</ph><ph id="ph3">&lt;/code&gt;</ph> ).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`XmlDeclaration`</ph> node must be the first node in the document.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>It cannot have children.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is a child of the <ph id="ph1">`Document`</ph> node.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can have attributes that provide version and encoding information.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>