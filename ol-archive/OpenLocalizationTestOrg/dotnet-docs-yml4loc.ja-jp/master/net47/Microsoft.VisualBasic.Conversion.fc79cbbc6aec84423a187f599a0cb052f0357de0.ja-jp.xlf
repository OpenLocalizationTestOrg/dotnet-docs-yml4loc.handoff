<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">245eb742228b8453545405763633bd333a95c940</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Microsoft.VisualBasic.Conversion.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e3dafea6e519683e9cc1193ce0a91aeffbf73f3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2cf6b97bd03f37151da0f78697fbed97124bed89</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Conversion`</ph> module contains the procedures used to perform various conversion operations.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Converts an object to the specified type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`CTypeDynamic`</ph> method converts the object passed as the <ph id="ph2">`Expression`</ph> parameter to the type specified by the <ph id="ph3">`TargetType`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object is a dynamic object, the <ph id="ph1">`CTypeDynamic`</ph> method applies available dynamic conversions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`CTypeDynamic`</ph> method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dynamic object inherits from <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>, the <ph id="ph2">`CTypeDynamic`</ph> method first attempts to perform the conversion by using a user-defined, static conversion.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user-defined, static conversion fails, the <ph id="ph1">`CTypeDynamic`</ph> method attempts to perform the conversion by using dynamic conversions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dynamic object implements <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, the <ph id="ph2">`CTypeDynamic`</ph> method gives precedence to dynamic conversions over user-defined, static conversions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The object to convert.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The type to which to convert the object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An object whose type at run time is the requested target type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Converts an object to the specified generic type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`CTypeDynamic`</ph> method converts the object passed as the <ph id="ph2">`Expression`</ph> parameter to the type specified by the type of the generic parameter.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object is a dynamic object, the <ph id="ph1">`CTypeDynamic`</ph> method applies available dynamic conversions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`CTypeDynamic`</ph> method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dynamic object inherits from <ph id="ph1">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>, the <ph id="ph2">`CTypeDynamic`</ph> method first attempts to perform the conversion by using a user-defined, static conversion.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user-defined, static conversion fails, the <ph id="ph1">`CTypeDynamic`</ph> method attempts to perform the conversion by using dynamic conversions.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dynamic object implements <ph id="ph1">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, the <ph id="ph2">`CTypeDynamic`</ph> method gives precedence to dynamic conversions over user-defined, static conversions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The object to convert.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The type to which to convert the object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An object statically typed as the requested generic type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns the error message that corresponds to a given error number.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ErrorToString`</ph> function examines the property settings of the <ph id="ph2">`Err`</ph> object to identify the most recent run-time error.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of the <ph id="ph1">`ErrorToString`</ph> function corresponds to the <ph id="ph2">`Description`</ph> property of the <ph id="ph3">`Err`</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no run-time error has occurred, <ph id="ph1">`ErrorToString`</ph> returns a zero-length string ("").</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Visual Basic version 6.0 and earlier, this functionality was provided by the <ph id="ph1">`Error`</ph> function.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The error message that corresponds to the most recent run-time error.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;ErrorNumber&lt;/code&gt;</ph> is out of range.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns the error message that corresponds to a given error number.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ErrorToString`</ph> function examines the property settings of the <ph id="ph2">`Err`</ph> object to identify the most recent run-time error.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of the <ph id="ph1">`ErrorToString`</ph> function corresponds to the <ph id="ph2">`Description`</ph> property of the <ph id="ph3">`Err`</ph> object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`ErrorNumber`</ph> is a valid error number but is not defined, <ph id="ph2">`ErrorToString`</ph> returns the string <ph id="ph3">`"Application-defined or object-defined error."`</ph> If <ph id="ph4">`ErrorNumber`</ph> is not valid, an error occurs.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`ErrorNumber`</ph> is omitted, the message corresponding to the most recent run-time error is returned.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no run-time error has occurred or <ph id="ph1">`ErrorNumber`</ph> is 0, <ph id="ph2">`ErrorToString`</ph> returns a zero-length string ("").</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Visual Basic version 6.0 and earlier, this functionality was provided by the <ph id="ph1">`Error`</ph> function.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Any valid error number.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The error message that corresponds to a given error number.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;ErrorNumber&lt;/code&gt;</ph> is out of range.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hex returns</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any numeric value</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to sixteen hexadecimal characters</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hex returns</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any numeric value</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to sixteen hexadecimal characters</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hex returns</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any numeric value</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to sixteen hexadecimal characters</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hex returns</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any numeric value</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to sixteen hexadecimal characters</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hex returns</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any numeric value</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to sixteen hexadecimal characters</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hex returns</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any numeric value</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to sixteen hexadecimal characters</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hex returns</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any numeric value</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to sixteen hexadecimal characters</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hex returns</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any numeric value</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to sixteen hexadecimal characters</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hex returns</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any numeric value</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to sixteen hexadecimal characters</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;H`</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Returns a string representing the hexadecimal value of a number.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions remove the fractional part of <ph id="ph3">`Number`</ph> and return the resulting integer value.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">`Int`</ph> and <ph id="ph2">`Fix`</ph> functions is that if <ph id="ph3">`Number`</ph> is negative, <ph id="ph4">`Int`</ph> returns the first negative integer less than or equal to <ph id="ph5">`Number`</ph>, whereas <ph id="ph6">`Fix`</ph> returns the first negative integer greater than or equal to <ph id="ph7">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Int`</ph> converts -8.4 to -9, and <ph id="ph2">`Fix`</ph> converts -8.4 to -8.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fix(number)`</ph> is equivalent to <ph id="ph2">`Sign(number) * Int(Abs(number)).`</ph></source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>A number of type <ph id="ph1">`Double`</ph> or any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Number</ph><ept id="p1">&lt;/code&gt;</ept> contains <ph id="ph2">`Nothing`</ph>, <ph id="ph3">`Nothing`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Return the integer portion of a number.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Number is not specified.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Number is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Number is</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>Oct returns</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other number</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to 22 octal characters</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Number is</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>Oct returns</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other number</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to 22 octal characters</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Number is</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>Oct returns</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other number</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to 22 octal characters</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Number is</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>Oct returns</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other number</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to 22 octal characters</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Number is</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>Oct returns</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other number</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to 22 octal characters</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Number is</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>Oct returns</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other number</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to 22 octal characters</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Number is</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>Oct returns</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other number</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to 22 octal characters</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Number is</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>Oct returns</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other number</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to 22 octal characters</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Number is</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT">
          <source>Oct returns</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero (0)</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other number</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up to 22 octal characters</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can represent octal numbers directly by preceding numbers in the proper range with <ph id="ph1">`&amp;O`</ph>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`&amp;O10`</ph> is the octal notation for decimal 8.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Any valid numeric expression or <ph id="ph1">`String`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Returns a string representing the octal value of a number.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`String`</ph> representation of a number.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT">
          <source>When numbers are converted to strings, a leading space is always reserved for the sign of <ph id="ph1">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Number`</ph> is positive, the returned string contains a leading space, and the plus sign is implied.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT">
          <source>A negative number will include the minus sign (-) and no leading space.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`Format`</ph> function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the <ph id="ph1">`Str`</ph> function, the <ph id="ph2">`Format`</ph> function does not include a leading space for the sign of <ph id="ph3">`Number`</ph>.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Str`</ph> function recognizes only the period (<ph id="ph2">`.`</ph>) as a valid decimal separator.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>If different decimal separators are used (for example, in international applications), use the <ph id="ph1">`CStr`</ph> or <ph id="ph2">`Format`</ph> functions to convert a number to a string.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get the string representation of a number in a particular culture, use the number's <ph id="ph1">`ToString(IFormatProvider)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, use <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> when converting a value of type <ph id="ph2">`Double`</ph> to a string.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Object`</ph> containing any valid numeric expression.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`String`</ph> representation of a number.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the function recognizes the radix prefixes <ph id="ph1">`&amp;O`</ph> (for octal) and <ph id="ph2">`&amp;H`</ph> (for hexadecimal).</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>Blanks, tabs, and linefeed characters are removed from the argument.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following call returns the value 1234123.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following call returns the decimal value -1.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Val`</ph> function recognizes only the period (<ph id="ph2">`.`</ph>) as a valid decimal separator.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>When other decimal separators are used, as in international applications, use <ph id="ph1">`CDbl`</ph> or <ph id="ph2">`CInt`</ph> instead to convert a string to a number.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id="ph1">`Parse(String, IFormatProvider)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, use <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=fullName&gt;</ph> when converting a string to a <ph id="ph2">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> exception might be raised in response to certain uncommon number formats.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following code raises this exception.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>The conflict between the number formatted as a <ph id="ph1">`Double`</ph> and the <ph id="ph2">`Integer`</ph> and <ph id="ph3">`Long`</ph> type characters would be caught by the compiler if the conflict were not contained in strings.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Any valid <ph id="ph1">`String`</ph> expression, <ph id="ph2">`Object`</ph> variable, or <ph id="ph3">`Char`</ph> value.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Expression</ph><ept id="p1">&lt;/code&gt;</ept> is of type <ph id="ph2">`Object`</ph>, its value must be convertible to <ph id="ph3">`String`</ph> or an <ph id="ph4">&lt;xref href="System.ArgumentException"&gt;&lt;/xref&gt;</ph> error occurs.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;InputStr&lt;/code&gt;</ph> is too large.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Expression&lt;/code&gt;</ph> is an <ph id="ph2">`Object`</ph> type expression that is not convertible to <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the function recognizes the radix prefixes <ph id="ph1">`&amp;O`</ph> (for octal) and <ph id="ph2">`&amp;H`</ph> (for hexadecimal).</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT">
          <source>Blanks, tabs, and linefeed characters are stripped from the argument.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following call returns the value 1615198.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following call returns the decimal value -1.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Val`</ph> function recognizes only the period (<ph id="ph2">`.`</ph>) as a valid decimal separator.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT">
          <source>When different decimal separators are used, as in international applications, use <ph id="ph1">`CDbl`</ph> or <ph id="ph2">`CInt`</ph> instead to convert a string to a number.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT">
          <source>To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id="ph1">`Parse(String, IFormatProvider)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, use <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=fullName&gt;</ph> when converting a string to a <ph id="ph2">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> exception might be raised in response to certain uncommon number formats.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following code raises this exception.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT">
          <source>The conflict between the number formatted as a <ph id="ph1">`Double`</ph> and the <ph id="ph2">`Integer`</ph> and <ph id="ph3">`Long`</ph> type characters would be caught by the compiler if it were not contained in a string.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Any valid <ph id="ph1">`String`</ph> expression, <ph id="ph2">`Object`</ph> variable, or <ph id="ph3">`Char`</ph> value.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Expression</ph><ept id="p1">&lt;/code&gt;</ept> is of type <ph id="ph2">`Object`</ph>, its value must be convertible to <ph id="ph3">`String`</ph> or an <ph id="ph4">&lt;xref href="System.ArgumentException"&gt;&lt;/xref&gt;</ph> error occurs.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;InputStr&lt;/code&gt;</ph> is too large.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Expression&lt;/code&gt;</ph> is an <ph id="ph2">`Object`</ph> type expression that is not convertible to <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the function recognizes the radix prefixes <ph id="ph1">`&amp;O`</ph> (for octal) and <ph id="ph2">`&amp;H`</ph> (for hexadecimal).</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>Blanks, tabs, and linefeed characters are removed from the argument.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following call returns the value 1234123.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following call returns the decimal value -1.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Val`</ph> function recognizes only the period (<ph id="ph2">`.`</ph>) as a valid decimal separator.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source>When other decimal separators are used, as in international applications, use <ph id="ph1">`CDbl`</ph> or <ph id="ph2">`CInt`</ph> instead to convert a string to a number.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source>To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id="ph1">`Parse(String, IFormatProvider)`</ph> method.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, use <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=fullName&gt;</ph> when converting a string to a <ph id="ph2">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> exception might be raised in response to certain uncommon number formats.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following code raises this exception.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>The conflict between the number formatted as a <ph id="ph1">`Double`</ph> and the <ph id="ph2">`Integer`</ph> and <ph id="ph3">`Long`</ph> type characters would be caught by the compiler if the conflict were not contained in strings.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Any valid <ph id="ph1">`String`</ph> expression, <ph id="ph2">`Object`</ph> variable, or <ph id="ph3">`Char`</ph> value.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Expression</ph><ept id="p1">&lt;/code&gt;</ept> is of type <ph id="ph2">`Object`</ph>, its value must be convertible to <ph id="ph3">`String`</ph> or an <ph id="ph4">&lt;xref href="System.ArgumentException"&gt;&lt;/xref&gt;</ph> error occurs.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Returns the numbers contained in a string as a numeric value of appropriate type.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;InputStr&lt;/code&gt;</ph> is too large.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Expression&lt;/code&gt;</ph> is an <ph id="ph2">`Object`</ph> type expression that is not convertible to <ph id="ph3">`String`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>