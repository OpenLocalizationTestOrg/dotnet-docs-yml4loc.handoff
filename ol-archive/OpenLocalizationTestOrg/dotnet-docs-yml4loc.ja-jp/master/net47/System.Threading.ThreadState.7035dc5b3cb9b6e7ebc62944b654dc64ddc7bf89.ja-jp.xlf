<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5d7970e3c96b295e193d3f84a24292a2fe969ee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Threading.ThreadState.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">514c6abe5e00504a76f9642ec5e0b683ef092074</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ce68d370cf092d986844acdbd923e75017e2cba</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies the execution states of a <ph id="ph1">&lt;xref href="System.Threading.Thread"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> enumeration is of interest only in a few debugging scenarios.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your code should never use the thread state to synchronize the activities of threads.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> defines a set of all possible execution states for threads.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once a thread is created, it is in at least one of the states until it terminates.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Threads created within the common language runtime are initially in the <ph id="ph1">`Unstarted`</ph> state, while external threads that come into the runtime are already in the <ph id="ph2">`Running`</ph> state.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">`Unstarted`</ph> thread is transitioned into the <ph id="ph2">`Running`</ph> state by calling <ph id="ph3">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all combinations of <ph id="ph1">`ThreadState`</ph> values are valid; for example, a thread cannot be in both the <ph id="ph2">`Aborted`</ph> and <ph id="ph3">`Unstarted`</ph> states.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two thread state enumerations,<ph id="ph1">&lt;xref:System.Threading.ThreadState?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the actions that cause a change of state.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Action</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>ThreadState</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>A thread is created within the common language runtime.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unstarted</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another thread calls the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;</ph> method on the new thread, and the call returns.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> method does not return until the new thread has started running.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no way to know at what point the new thread will start running, during the call to <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Running</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>WaitSleepJoin</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> on another object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>WaitSleepJoin</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> on another thread.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>WaitSleepJoin</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Running</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>SuspendRequested</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread responds to a <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph> request.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Suspended</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Running</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>AbortRequested</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread responds to a <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> request.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Stopped</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>A thread is terminated.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Stopped</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the states noted above, there is also the <ph id="ph1">`Background`</ph> state, which indicates whether the thread is running in the background or foreground.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>A thread can be in more than one state at a given time.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a thread is blocked on a call to <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph>, and another thread calls <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> on the blocked thread, the blocked thread will be in both the <ph id="ph3">`WaitSleepJoin`</ph> and the <ph id="ph4">`AbortRequested`</ph> states at the same time.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, as soon as the thread returns from the call to <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> or is interrupted, it will receive the <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> to begin aborting.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt;</ph> property of a thread provides the current state of a thread.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications must use a bitmask to determine whether a thread is running.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the value for <ph id="ph1">`Running`</ph> is zero (0), test whether a thread is running by using C# code such as <ph id="ph2">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph> or Visual Basic code such as <ph id="ph3">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The thread state includes <ph id="ph1">&lt;xref href="System.Threading.ThreadState.AbortRequested"&gt;&lt;/xref&gt;</ph> and the thread is now dead, but its state has not yet changed to <ph id="ph2">&lt;xref href="System.Threading.ThreadState.Stopped"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.Thread.Abort(System.Object)"&gt;&lt;/xref&gt;</ph> method has been invoked on the thread, but the thread has not yet received the pending <ph id="ph2">&lt;xref href="System.Threading.ThreadAbortException"&gt;&lt;/xref&gt;</ph> that will attempt to terminate it.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The thread is being executed as a background thread, as opposed to a foreground thread.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This state is controlled by setting the <ph id="ph1">&lt;xref href="System.Threading.Thread.IsBackground"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The thread has been started, it is not blocked, and there is no pending <ph id="ph1">&lt;xref href="System.Threading.ThreadAbortException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The thread has stopped.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The thread is being requested to stop.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This is for internal use only.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The thread has been suspended.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The thread is being requested to suspend.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.Thread.Start"&gt;&lt;/xref&gt;</ph> method has not been invoked on the thread.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The thread is blocked.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This could be the result of calling <ph id="ph1">&lt;xref href="System.Threading.Thread.Sleep(System.Int32)"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Threading.Thread.Join"&gt;&lt;/xref&gt;</ph>, of requesting a lock — for example, by calling <ph id="ph3">&lt;xref href="System.Threading.Monitor.Enter(System.Object)"&gt;&lt;/xref&gt;</ph> or <ph id="ph4">&lt;xref href="System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)"&gt;&lt;/xref&gt;</ph> — or of waiting on a thread synchronization object such as <ph id="ph5">&lt;xref href="System.Threading.ManualResetEvent"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>