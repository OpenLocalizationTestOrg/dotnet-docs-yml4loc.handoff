<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa7147de0522b151d984486784ef9b2693a6af01</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Security.Cryptography.SymmetricAlgorithm.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8274e43246855b6d599f98a7d8db3f20a906bada</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0a3de39273505ffa2b01d76ca4468e1fdc9318e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the abstract base class from which all implementations of symmetric algorithms must inherit.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The classes that derive from the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> class use a chaining mode called cipher block chaining (CBC), which requires a key (<ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt;</ph>) and an initialization vector (<ph id="ph3">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;</ph>) to perform cryptographic transformations on data.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>To decrypt data that was encrypted using one of the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> classes, you must set the <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt;</ph> property and the <ph id="ph3">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;</ph> property to the same values that were used for encryption.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a symmetric algorithm to be useful, the secret key must be known only to the sender and the receiver.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.RijndaelManaged&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.Cryptography.DESCryptoServiceProvider&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.Cryptography.RC2CryptoServiceProvider&gt;</ph>, and <ph id="ph4">&lt;xref:System.Security.Cryptography.TripleDESCryptoServiceProvider&gt;</ph> are implementations of symmetric algorithms.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that when using derived classes, it is not enough, from a security perspective, to simply force a garbage collection after you have finished using the object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must explicitly call the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A&gt;</ph> method on the object to zero out any sensitive data within the object before it is released.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that garbage collection does not zero out the contents of collected objects but simply marks the memory as available for reallocation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus the data contained within a garbage collected object may still be present in the memory heap in unallocated memory.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of cryptographic objects, this data could contain sensitive information such as key data or a block of plain text.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>All cryptographic classes in the .NET Framework that hold sensitive data implement a <ph id="ph1">`Clear`</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>When called, the <ph id="ph1">`Clear`</ph> method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the object has been zeroed and released, you should then call the <ph id="ph1">`Dispose`</ph> method with the <ph id="ph2">`disposing`</ph> parameter set to <ph id="ph3">`True`</ph> to dispose of all managed and unmanaged resources associated with the object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot create an instance of an abstract class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application code creates a new instance of a derived class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The implementation of the class derived from the symmetric algorithm is not valid.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Gets or sets the block size, in bits, of the cryptographic operation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The block size is the basic unit of data that can be encrypted or decrypted in one operation.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Valid block sizes are determined by the symmetric algorithm used.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The block size, in bits.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The block size is invalid.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Represents the block size, in bits, of the cryptographic operation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The block size is the basic unit of data that can be encrypted or decrypted in one operation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Valid block sizes are determined by the symmetric algorithm used.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is accessed through the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that when using derived classes, it is not enough, from a security perspective, to simply force a garbage collection after you have finished using the object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must explicitly call the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A&gt;</ph> method on the object to zero out any sensitive data within the object before it is released.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that garbage collection does not zero out the contents of collected objects but simply marks the memory as available for reallocation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus the data contained within a garbage collected object may still be present in the memory heap in unallocated memory.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of cryptographic objects, this data could contain sensitive information such as key data or a block of plain text.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>All cryptographic classes in the .NET Framework that hold sensitive data implement a <ph id="ph1">`Clear`</ph> method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>When called, the <ph id="ph1">`Clear`</ph> method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the object has been zeroed and released, you should then call the <ph id="ph1">`Dispose`</ph> method with the <ph id="ph2">`disposing`</ph> parameter set to <ph id="ph3">`True`</ph> to dispose of all managed and unmanaged resources associated with the object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Creates a default cryptographic object used to perform the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A default cryptographic object used to perform the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Creates the specified cryptographic object used to perform the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The name of the specific implementation of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm"&gt;&lt;/xref&gt;</ph> class to use.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A cryptographic object used to perform the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Creates a symmetric decryptor object with the current <ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.Key"&gt;&lt;/xref&gt;</ph> property and initialization vector (<ph id="ph2">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.IV"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method decrypts an encrypted message created using the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A&gt;</ph> overload with the same signature.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A symmetric decryptor object.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a symmetric decryptor object with the specified <ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.Key"&gt;&lt;/xref&gt;</ph> property and initialization vector (<ph id="ph2">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.IV"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method decrypts an encrypted message created using the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A&gt;</ph> overload with the same parameters.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The secret key to use for the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The initialization vector to use for the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A symmetric decryptor object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Creates a symmetric encryptor object with the current <ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.Key"&gt;&lt;/xref&gt;</ph> property and initialization vector (<ph id="ph2">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.IV"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A&gt;</ph> method is called to create a new random <ph id="ph4">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A&gt;</ph> method is called to create a new random <ph id="ph4">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A&gt;</ph> overload with the same signature to decrypt the result of this method.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A symmetric encryptor object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a symmetric encryptor object with the specified <ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.Key"&gt;&lt;/xref&gt;</ph> property and initialization vector (<ph id="ph2">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.IV"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A&gt;</ph> overload with the same parameters to decrypt the result of this method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The secret key to use for the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The initialization vector to use for the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A symmetric encryptor object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> in an unusable state.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> was occupying.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">`Finalize`</ph> method.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> references.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Gets or sets the feedback size, in bits, of the cryptographic operation.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The feedback size determines the amount of data that is fed back to successive encryption or decryption operations.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The feedback size cannot be greater than the block size.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The feedback size in bits.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The feedback size is larger than the block size.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Represents the feedback size, in bits, of the cryptographic operation.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The feedback size determines the amount of data that is fed back to successive encryption or decryption operations.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The feedback size cannot be greater than the block size.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is accessed through the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, generates a random initialization vector (<ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.IV"&gt;&lt;/xref&gt;</ph>) to use for the algorithm.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, there is no reason to use this method, because <ph id="ph1">`CreateEncryptor()`</ph> or <ph id="ph2">`CreateEncryptor(null, null)`</ph> automatically generates both an initialization vector and a key.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you may want to use the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A&gt;</ph> method to reuse a symmetric algorithm instance with a different initialization vector.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, generates a random key (<ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.Key"&gt;&lt;/xref&gt;</ph>) to use for the algorithm.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, there is no reason to use this method, because <ph id="ph1">`CreateEncryptor()`</ph> or <ph id="ph2">`CreateEncryptor(null, null)`</ph> automatically generates both an initialization vector and a key.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you may want to use the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A&gt;</ph> method to reuse a symmetric algorithm instance with a different key.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Gets or sets the initialization vector (<ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.IV"&gt;&lt;/xref&gt;</ph>) for the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;</ph> property is automatically set to a new random value whenever you create a new instance of one of the <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> classes or when you manually call the <ph id="ph3">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The size of the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;</ph> property must be the same as the <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A&gt;</ph> property divided by 8.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The classes that derive from the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> class use a chaining mode called cipher block chaining (CBC), which requires a key and an initialization vector to perform cryptographic transformations on data.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>To decrypt data that was encrypted using one of the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> classes, you must set the <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt;</ph> property and <ph id="ph3">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;</ph> property to the same values that were used for encryption.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a given secret key <bpt id="p1">*</bpt>k<ept id="p1">*</ept>, a simple block cipher that does not use an initialization vector will encrypt the same input block of plain text into the same output block of cipher text.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have duplicate blocks within your plain text stream, you will have duplicate blocks within your cipher text stream.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>If unauthorized users know anything about the structure of a block of your plain text, they can use that information to decipher the known cipher text block and possibly recover your key.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>To combat this problem, information from the previous block is mixed into the process of encrypting the next block.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, the output of two identical plain text blocks is different.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this technique uses the previous block to encrypt the next block, an initialization vector is needed to encrypt the first block of data.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The initialization vector.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>An attempt was made to set the initialization vector to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>An attempt was made to set the initialization vector to an invalid size.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Represents the initialization vector (<ph id="ph1">&lt;xref href="System.Security.Cryptography.SymmetricAlgorithm.IV"&gt;&lt;/xref&gt;</ph>) for the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is accessed through the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Gets or sets the secret key for the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The secret key is used both for encryption and for decryption.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is <ph id="ph1">`null`</ph> when it is used, the <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A&gt;</ph> method is called to create a new random value.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The secret key to use for the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An attempt was made to set the key to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The key size is invalid.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The size, in bits, of the secret key used by the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The key size is not valid.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Represents the size, in bits, of the secret key used by the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is accessed through the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Represents the secret key for the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The secret key is used both for encryption and for decryption.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is accessed through the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Gets the block sizes, in bits, that are supported by the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The symmetric algorithm supports only block sizes that match an entry in this array.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>An array that contains the block sizes supported by the algorithm.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Specifies the block sizes, in bits, that are supported by the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The symmetric algorithm supports only block sizes that match an entry in this array.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is accessed through the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Gets the key sizes, in bits, that are supported by the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The symmetric algorithm supports only key sizes that match an entry in this array.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>An array that contains the key sizes supported by the algorithm.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Specifies the key sizes, in bits, that are supported by the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>The symmetric algorithm supports only key sizes that match an entry in this array.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is accessed through the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Gets or sets the mode for operation of the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Security.Cryptography.CipherMode&gt;</ph> enumeration for a description of specific modes.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The mode for operation of the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Security.Cryptography.CipherMode.CBC"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The cipher mode is not one of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.CipherMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Represents the cipher mode used in the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Security.Cryptography.CipherMode&gt;</ph> enumeration for a description of specific modes.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is accessed through the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Gets or sets the padding mode used in the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most plain text messages do not consist of a number of bytes that completely fill blocks.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Often, there are not enough bytes to fill the last block.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, a padding string is added to the text.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the <ph id="ph1">&lt;xref:System.Security.Cryptography.PaddingMode&gt;</ph> enumeration for a description of specific modes.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The padding mode used in the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Security.Cryptography.PaddingMode.PKCS7"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The padding mode is not one of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.PaddingMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Represents the padding mode used in the symmetric algorithm.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most plain text messages do not consist of a number of bytes that completely fill blocks.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Often, there are not enough bytes to fill the last block.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, a padding string is added to the text.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the <ph id="ph1">&lt;xref:System.Security.Cryptography.PaddingMode&gt;</ph> enumeration for a description of specific modes.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is accessed through the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Determines whether the specified key size is valid for the current algorithm.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The length, in bits, to check for a valid key size.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified key size is valid for the current algorithm; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>