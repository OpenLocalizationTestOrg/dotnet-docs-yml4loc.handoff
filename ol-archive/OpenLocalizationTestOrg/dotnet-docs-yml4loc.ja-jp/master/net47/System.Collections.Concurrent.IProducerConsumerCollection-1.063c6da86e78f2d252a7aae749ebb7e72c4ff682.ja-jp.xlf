<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9880f3044a1f78ed5380681f815c42a627ee395</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Collections.Concurrent.IProducerConsumerCollection-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07cbf63ea0d1528e34d19f83cca655c5e0578a2b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b38b959f9a6bfe24d7f3ec36f2ee2d6efa70d3e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines methods to manipulate thread-safe collections intended for producer/consumer usage.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This interface provides a unified representation for producer/consumer collections so that higher level abstractions such as <ph id="ph1">&lt;xref href="System.Collections.Concurrent.BlockingCollection`1"&gt;&lt;/xref&gt;</ph> can use the collection as the underlying storage mechanism.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Thread-Safe Collections<ept id="p1">](http://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd)</ept> and <bpt id="p2">[</bpt>BlockingCollection Overview<ept id="p2">](~/docs/standard/collections/thread-safe/blockingcollection-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Specifies the type of elements in the collection.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Copies the elements of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.IProducerConsumerCollection`1"&gt;&lt;/xref&gt;</ph> to an <ph id="ph2">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph>, starting at a specified index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method provides a snapshot of the underlying collection.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is possible for other threads to add or remove items immediately after the copy is made.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The one-dimensional <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;xref href="System.Collections.Concurrent.IProducerConsumerCollection`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The array must have zero-based indexing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The zero-based index in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> at which copying begins.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than the length of the <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph> -or- The number of elements in the collection is greater than the available space from <ph id="ph3">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id="ph4">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Copies the elements contained in the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.IProducerConsumerCollection`1"&gt;&lt;/xref&gt;</ph> to a new array.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method provides a snapshot of the underlying collection.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is possible for other threads to add or remove items immediately after the array is made.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A new array containing the elements copied from the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.IProducerConsumerCollection`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Attempts to add an object to the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.IProducerConsumerCollection`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The object to add to the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.IProducerConsumerCollection`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>true if the object was added successfully; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">item</ph><ept id="p1">&lt;/code&gt;</ept> was invalid for this collection.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Attempts to remove and return an object from the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.IProducerConsumerCollection`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When this method returns, if the object was removed and returned successfully, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">item</ph><ept id="p1">&lt;/code&gt;</ept> contains the removed object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If no object was available to be removed, the value is unspecified.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>true if an object was removed and returned successfully; otherwise, false.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>