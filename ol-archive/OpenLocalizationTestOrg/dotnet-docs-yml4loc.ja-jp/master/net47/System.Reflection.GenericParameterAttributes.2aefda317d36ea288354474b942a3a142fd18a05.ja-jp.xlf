<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1871e7a64a42a9d8b1b068b547daf3a58dcb94a7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Reflection.GenericParameterAttributes.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a84930f8ace232df76ca6d3426a64ba7a81ae958</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d37f4d77a1eeff6d77ce97df3dcfe6e18c9d885d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Describes the constraints on a generic type parameter of a generic type or method.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The members of the <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> enumeration are divided into two groups, the variance group and the special constraints group.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>To test a <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> value for variance flags, first perform a bitwise AND operation with VarianceMask.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the result is None, there are no variance flags.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, use SpecialConstraintMask to test for constraint flags.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The generic type parameter is contravariant.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A contravariant type parameter can appear as a parameter type in method signatures.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The generic type parameter is covariant.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A covariant type parameter can appear as the result type of a method, the type of a read-only field, a declared base type, or an implemented interface.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A type can be substituted for the generic type parameter only if it has a parameterless constructor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are no special flags.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A type can be substituted for the generic type parameter only if it is a value type and is not nullable.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A type can be substituted for the generic type parameter only if it is a reference type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Selects the combination of all special constraint flags.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This value is the result of using logical OR to combine the following flags: <ph id="ph1">&lt;xref href="System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint"&gt;&lt;/xref&gt;</ph>, <ph id="ph2">&lt;xref href="System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint"&gt;&lt;/xref&gt;</ph>, and <ph id="ph3">&lt;xref href="System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Selects the combination of all variance flags.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This value is the result of using logical OR to combine the following flags: <ph id="ph1">&lt;xref href="System.Reflection.GenericParameterAttributes.Contravariant"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Reflection.GenericParameterAttributes.Covariant"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>