<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc1a6a6be5575e7db81fc6b7dce7364abc4eadd4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.IO.Pipes.PipeSecurity.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8241602a6d220d0c3cc7fe916c794adb203cc73</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13b96990d900a411308e4158ed5faf2ba484f067</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the access control and audit security for a pipe.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> class specifies the access rights for a pipe and how access attempts are audited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class represents access and audit rights as a set of rules.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each access rule is represented by a <ph id="ph1">&lt;xref:System.IO.Pipes.PipeAccessRule&gt;</ph> object, while each audit rule is represented by a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAuditRule&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> class is an abstraction of the underlying Microsoft Windows file security system.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this system, each pipe has a discretionary access control list (DACL), which controls access to the pipe, and a system access control list (SACL), which specifies the access control attempts that are audited.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeAccessRule&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAuditRule&gt;</ph> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> class to retrieve, add, or change the access rules that represent the DACL and SACL of a pipe.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>To persist new or changed access or audit rules to a pipe, use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.SetAccessControl%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve access or audit rules from an existing file, use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.GetAccessControl%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates an empty <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> object that is not based on an existing pipe.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then populate the object with access control information and apply it to a pipe.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add access or audit rules to the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> object using the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeSecurity.AddAccessRule%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can remove access or audit rules using the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.RemoveAccessRule%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>To persist new or changed access or audit rules to a pipe, use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.SetAccessControl%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve access or audit rules from an existing file, use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.GetAccessControl%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the securable object that is associated with the current <ph id="ph2">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A&gt;</ph> property and return the type they use to represent access rights.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The type of the securable object that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.AccessControl.AccessRule"&gt;&lt;/xref&gt;</ph> class with the specified values.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended way to create access control rules is to use the constructors of the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeAccessRule&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The identity that the access rule applies to.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It must be an object that can be cast as a <ph id="ph1">&lt;xref href="System.Security.Principal.SecurityIdentifier"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The access mask of this rule.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this rule is inherited from a parent container; otherwise false.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Security.AccessControl.InheritanceFlags"&gt;&lt;/xref&gt;</ph> values that specifies the inheritance properties of the access rule.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Security.AccessControl.PropagationFlags"&gt;&lt;/xref&gt;</ph> values that specifies whether inherited access rules are automatically propagated.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The propagation flags are ignored if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">inheritanceFlags</ph><ept id="p1">&lt;/code&gt;</ept> is set to <ph id="ph2">&lt;xref href="System.Security.AccessControl.InheritanceFlags.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Specifies the valid access control type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Security.AccessControl.AccessRule"&gt;&lt;/xref&gt;</ph> object that this method creates.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;accessMask&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;inheritanceFlags&lt;/code&gt;</ph>, <ph id="ph3">&lt;code&gt;propagationFlags&lt;/code&gt;</ph>, or <ph id="ph4">&lt;code&gt;type&lt;/code&gt;</ph> specifies an invalid value.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;identityReference&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;accessMask&lt;/code&gt;</ph> is zero.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;identityReference&lt;/code&gt;</ph> is neither of type <ph id="ph2">&lt;xref href="System.Security.Principal.SecurityIdentifier"&gt;&lt;/xref&gt;</ph> nor of a type, such as <ph id="ph3">&lt;xref href="System.Security.Principal.NTAccount"&gt;&lt;/xref&gt;</ph>, that can be converted to type <ph id="ph4">&lt;xref href="System.Security.Principal.SecurityIdentifier"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the object that is associated with the access rules of the current <ph id="ph2">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A&gt;</ph> property and return the type they use to represent access rights.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The type of the object that is associated with the access rules of the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Adds an access rule to the Discretionary Access Control List (DACL) that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.AddAccessRule%2A&gt;</ph> method adds a new rule to the list of rules that a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> object contains.If an access control list (ACL) already exists for the specified rule, the <ph id="ph3">&lt;xref:System.IO.Pipes.PipeSecurity.AddAccessRule%2A&gt;</ph> method will still add the rule, with one exception: a <ph id="ph4">&lt;xref:System.IO.Pipes.PipeAccessRule&gt;</ph> object that is created using the <ph id="ph5">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> value supersedes an object that is created using the <ph id="ph6">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The access rule to add.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rule</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Adds an audit rule to the System Access Control List (SACL)that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.AddAuditRule%2A&gt;</ph> method adds a new audit rule to the list of rules that a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> object contains.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an audit rule already exists for the specified rule, the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.AddAuditRule%2A&gt;</ph> method will still add the rule.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The audit rule to add.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rule</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.AccessControl.AuditRule"&gt;&lt;/xref&gt;</ph> class with the specified values.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended way to create audit rules is to use the constructors of the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeAuditRule&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The identity that the access rule applies to.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It must be an object that can be cast as a <ph id="ph1">&lt;xref href="System.Security.Principal.SecurityIdentifier"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The access mask of this rule.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this rule is inherited from a parent container; otherwise, false..</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Security.AccessControl.InheritanceFlags"&gt;&lt;/xref&gt;</ph> values that specifies the inheritance properties of the access rule.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Security.AccessControl.PropagationFlags"&gt;&lt;/xref&gt;</ph> values that specifies whether inherited access rules are automatically propagated.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The propagation flags are ignored if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">inheritanceFlags</ph><ept id="p1">&lt;/code&gt;</ept> is set to <ph id="ph2">&lt;xref href="System.Security.AccessControl.InheritanceFlags.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Security.AccessControl.AuditFlags"&gt;&lt;/xref&gt;</ph> values that specifies the valid access control type.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Security.AccessControl.AuditRule"&gt;&lt;/xref&gt;</ph> object that this method creates.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">accessMask</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">inheritanceFlags</ph><ept id="p2">&lt;/code&gt;</ept>, <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">propagationFlags</ph><ept id="p3">&lt;/code&gt;</ept>, or <bpt id="p4">&lt;code&gt;</bpt><ph id="ph4">flags</ph><ept id="p4">&lt;/code&gt;</ept> properties specify an invalid value.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">identityReference</ph><ept id="p1">&lt;/code&gt;</ept> property is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">accessMask</ph><ept id="p1">&lt;/code&gt;</ept> property is zero.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">identityReference</ph><ept id="p1">&lt;/code&gt;</ept> property is neither of type <ph id="ph2">&lt;xref href="System.Security.Principal.SecurityIdentifier"&gt;&lt;/xref&gt;</ph> nor of a type, such as <ph id="ph3">&lt;xref href="System.Security.Principal.NTAccount"&gt;&lt;/xref&gt;</ph>, that can be converted to type <ph id="ph4">&lt;xref href="System.Security.Principal.SecurityIdentifier"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object associated with the audit rules of the current <ph id="ph2">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Classes that derive from the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity&gt;</ph> class override the <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A&gt;</ph> property and return the type they use to represent access rights.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The type of the object that is associated with the audit rules of the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Saves the specified sections of the security descriptor that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object to permanent storage.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The name of the securable object that the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object is associated with.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Saves the specified sections of the security descriptor that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object to permanent storage.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The handle of the securable object that the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object is associated with.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Removes an access rule from the Discretionary Access Control List (DACL) that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.RemoveAccessRule%2A&gt;</ph> method removes either all matching <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> access rules or all matching <ph id="ph3">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> access rules from the current <ph id="ph4">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method to remove all <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> access rules for a user by passing a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRule&gt;</ph> object created using the <ph id="ph3">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> value, the <ph id="ph4">&lt;xref:System.IO.Pipes.PipeAccessRights.Read&gt;</ph> value, and a user account.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.RemoveAccessRule%2A&gt;</ph> method removes any deny rules that specify the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRights.Read&gt;</ph> value or the <ph id="ph3">&lt;xref:System.IO.Pipes.PipeAccessRights.Write&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The access rule to remove.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the operation is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rule</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Removes the specified access rule from the Discretionary Access Control List (DACL) that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.RemoveAccessRule%2A&gt;</ph> method removes either all matching <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> access rules or all matching <ph id="ph3">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> access rules from the current <ph id="ph4">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method to remove all <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> access rules for a user by passing a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRule&gt;</ph> object created using the <ph id="ph3">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> value, the <ph id="ph4">&lt;xref:System.IO.Pipes.PipeAccessRights.Read&gt;</ph> value, and a user account.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.RemoveAccessRule%2A&gt;</ph> method removes any deny rules that specify the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRights.Read&gt;</ph> value or the <ph id="ph3">&lt;xref:System.IO.Pipes.PipeAccessRights.Write&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The access rule to remove.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rule</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Removes an audit rule from the System Access Control List (SACL) that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.RemoveAuditRule%2A&gt;</ph> method removes either all matching <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> audit rules or all matching <ph id="ph3">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> audit rules from the current <ph id="ph4">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method to remove all <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> audit rules for a user by passing a <ph id="ph2">&lt;xref:System.Security.AccessControl.FileSystemAuditRule&gt;</ph> object created using the <ph id="ph3">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> value, the <ph id="ph4">&lt;xref:System.Security.AccessControl.AuditFlags.Failure&gt;</ph> value, and a user account.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you do this, the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.RemoveAuditRule%2A&gt;</ph> method removes any deny rules that specify the <ph id="ph2">&lt;xref:System.Security.AccessControl.AuditFlags.Failure&gt;</ph> value or the <ph id="ph3">&lt;xref:System.Security.AccessControl.AuditFlags.Success&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The audit rule to remove.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the audit rule was removed; otherwise, <ph id="ph2">`false`</ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rule</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Removes all audit rules that have the same security identifier as the specified audit rule from the System Access Control List (SACL) that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll%2A&gt;</ph> method removes all audit rules for the specified user.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>It ignores all values in the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeAuditRule&gt;</ph> object except the user account.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The audit rule to remove.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rule</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Removes the specified audit rule from the System Access Control List (SACL) that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific%2A&gt;</ph> method removes the specified matching <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> audit rule or the specified matching <ph id="ph3">&lt;xref:System.Security.AccessControl.AccessControlType.Allow&gt;</ph> audit rule from the current <ph id="ph4">&lt;xref:System.IO.Pipes.PipeSecurity&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method to remove a specified <ph id="ph1">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> audit rule for a user by passing a <ph id="ph2">&lt;xref:System.Security.AccessControl.FileSystemAuditRule&gt;</ph> object created using the <ph id="ph3">&lt;xref:System.Security.AccessControl.AccessControlType.Deny&gt;</ph> value, the <ph id="ph4">&lt;xref:System.Security.AccessControl.AuditFlags.Failure&gt;</ph> value, and a user account.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you do this, the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific%2A&gt;</ph> method removes only a deny rule that specifies the <ph id="ph2">&lt;xref:System.Security.AccessControl.AuditFlags.Failure&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not remove any deny rules that specify the <ph id="ph1">&lt;xref:System.Security.AccessControl.AuditFlags.Success&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The audit rule to remove.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rule</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Removes all access rules in the Discretionary Access Control List (DACL) that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object and then adds the specified access rule.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.ResetAccessRule%2A&gt;</ph> method adds the specified access control list (ACL) rule or overwrites any identical ACL rules that match the <ph id="ph2">`rule`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the <ph id="ph1">`rule`</ph> parameter specifies a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRights.Read&gt;</ph> value and the <ph id="ph3">&lt;xref:System.IO.Pipes.PipeSecurity.ResetAccessRule%2A&gt;</ph> method finds an identical ACL rule that specifies the <ph id="ph4">&lt;xref:System.IO.Pipes.PipeAccessRights.Read&gt;</ph> value, the identical rule will be overwritten.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.ResetAccessRule%2A&gt;</ph> method finds an identical ACL rule that specifies the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRights.Write&gt;</ph> value, the identical rule will also be overwritten.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The access rule to add.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rule</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Sets an access rule in the Discretionary Access Control List (DACL) that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.SetAccessRule%2A&gt;</ph> method adds the specified access control list (ACL) rule or overwrites any identical ACL rules that match the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRights&gt;</ph> value of the <ph id="ph3">`rule`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the <ph id="ph1">`rule`</ph> parameter specifies a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRights.Read&gt;</ph> value and the <ph id="ph3">&lt;xref:System.IO.Pipes.PipeSecurity.SetAccessRule%2A&gt;</ph> method finds an identical ACL rule that specifies the <ph id="ph4">&lt;xref:System.IO.Pipes.PipeAccessRights.Read&gt;</ph> value, the identical rule will be overwritten.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.SetAccessRule%2A&gt;</ph> method finds an identical ACL rule that specifies the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRights.Write&gt;</ph> value, the identical rule will not be overwritten.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The rule to set.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rule</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Sets an audit rule in the System Access Control List (SACL) that is associated with the current <ph id="ph1">&lt;xref href="System.IO.Pipes.PipeSecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.SetAuditRule%2A&gt;</ph> method adds the specified audit rule or overwrites any identical audit rules that match the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRights&gt;</ph> value of the <ph id="ph3">`rule`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the <ph id="ph1">`rule`</ph> parameter specifies a <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRights.Read&gt;</ph> value and the <ph id="ph3">&lt;xref:System.IO.Pipes.PipeSecurity.SetAuditRule%2A&gt;</ph> method finds an identical audit rule that specifies the <ph id="ph4">&lt;xref:System.IO.Pipes.PipeAccessRights.Read&gt;</ph> value, the identical rule will be overwritten.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeSecurity.SetAuditRule%2A&gt;</ph> method finds an identical audit rule that specifies the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeAccessRights.Write&gt;</ph> value, the identical rule will not be overwritten.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The rule to set.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rule</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>