<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a7c664cceb6de945cc44ebaf497644d1c78ae3e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Threading.Tasks.TaskExtensions.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5a8d64e25aad2f7849f052ecfd6d188c1ef925f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49fc0ba5de2ce8fae095bafca9bd5ef333c7b8c4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task"&gt;&lt;/xref&gt;</ph> instances.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creates a proxy <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation of a <ph id="ph2">&lt;xref href="System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is often useful to be able to return a Task from a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, where the inner Task represents work done as part of the outer <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, doing so results in a <ph id="ph1">`Task&lt;Task&gt;`</ph> (C#) or <ph id="ph2">`Task (Of Task)`</ph> (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unwrap solves this problem by creating a proxy Task that represents the entire asynchronous operation of such a task.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Task&lt;Task&gt;`</ph> (C#) or <ph id="ph2">`Task (Of Task)`</ph> (Visual Basic) to unwrap.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A Task that represents the asynchronous operation of the provided <ph id="ph1">`System.Threading.Tasks.Task(Of Task)`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The exception that is thrown if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">task</ph><ept id="p1">&lt;/code&gt;</ept> argument is null.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creates a proxy <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation of a <ph id="ph2">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id="ph3">`Task (Of Task(Of T))`</ph> (Visual Basic).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is often useful to be able to return a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> from a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, where the inner <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> represents work done as part of the outer <ph id="ph4">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, doing so results in a <ph id="ph1">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id="ph2">`Task (Of Task(Of T))`</ph> (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unwrap solves this problem by creating a proxy <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> that represents the entire asynchronous operation of such a <ph id="ph2">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id="ph3">`Task (Of Task(Of T))`</ph> (Visual Basic).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id="ph2">`Task (Of Task(Of T))`</ph> (Visual Basic) to unwrap.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The type of the task's result.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation of the provided <ph id="ph2">`Task&lt;Task&lt;T&gt;&gt;`</ph> (C#) or <ph id="ph3">`Task (Of Task(Of T))`</ph> (Visual Basic).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The exception that is thrown if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">task</ph><ept id="p1">&lt;/code&gt;</ept> argument is null.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>