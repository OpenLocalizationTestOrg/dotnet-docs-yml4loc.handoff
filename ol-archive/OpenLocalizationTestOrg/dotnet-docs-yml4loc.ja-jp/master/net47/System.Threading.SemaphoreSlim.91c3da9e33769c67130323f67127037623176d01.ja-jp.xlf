<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8ef416e611a06fd5168f0772af6f80f47b6924e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Threading.SemaphoreSlim.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50b3a6212bed055ab473ea6d6cc581304df037d4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc73f8cd897956152e47e5e2faf05178819403d1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a lightweight alternative to <ph id="ph1">&lt;xref href="System.Threading.Semaphore"&gt;&lt;/xref&gt;</ph> that limits the number of threads that can access a resource or pool of resources concurrently.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Semaphores are of two types: local semaphores and named system semaphores.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The former is local to an app.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The latter is visible throughout the operating system and is suitable for inter-process synchronization.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> is a lightweight alternative to the <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> class that doesn't use Windows kernel semaphores.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class doesn't support named system semaphores.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use it as a local semaphore only.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class is the recommended semaphore for synchronization within a single app.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>A lightweight semaphore controls access to a pool of resources that is local to your application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You also specify the initial number of threads that can enter the semaphore concurrently.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This defines the semaphore's count.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enter the semaphore, a thread calls one of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> overloads.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>To release the semaphore, it calls one of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> overloads.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the count reaches zero, subsequent calls to one of the <ph id="ph1">`Wait`</ph> methods block until other threads release the semaphore.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The basic structure for code that uses a semaphore to protect resources is:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The semaphore's count is available from the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class doesn't enforce thread or task identity on calls to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, if the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29&gt;</ph> constructor is used to instantiate the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object, the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property can increase beyond the value set by the constructor.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is the programmer's responsibility to ensure that calls to <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> methods are appropriately paired with calls to <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph> class, specifying the initial number of requests that can be granted concurrently.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`initialCount`</ph> parameter defines the number of concurrent requests to enter the semaphore that can be granted.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it doesn't define the maximum number of requests that can be granted concurrently.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>A   <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object instantiated by calling this constructor doesn't throw a <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> exception if a call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> method increases the value of the <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property beyond <ph id="ph5">`initialCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurs if there are more calls to <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods than there are to <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The initial number of requests for the semaphore that can be granted concurrently.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;initialCount&lt;/code&gt;</ph> is less than 0.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph> class, specifying the initial and maximum number of requests that can be granted concurrently.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The initial number of requests for the semaphore that can be granted concurrently.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The maximum number of requests for the semaphore that can be granted concurrently.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;initialCount&lt;/code&gt;</ph> is less than 0, or <ph id="ph2">&lt;code&gt;initialCount&lt;/code&gt;</ph> is greater than <ph id="ph3">&lt;code&gt;maxCount&lt;/code&gt;</ph>, or <ph id="ph4">&lt;code&gt;maxCount&lt;/code&gt;</ph> is equal to or less than 0.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&lt;xref href="System.Threading.WaitHandle"&gt;&lt;/xref&gt;</ph> that can be used to wait on the semaphore.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>A successful wait on the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A&gt;</ph> does not imply a successful wait on the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> itself, nor does it decrement the semaphore's count.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the available wait handle is signaled, you should wait on the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> specifically.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.WaitHandle"&gt;&lt;/xref&gt;</ph> that can be used to wait on the semaphore.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph> has been disposed.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets the number of remaining threads that can enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is set by the call to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%2A&gt;</ph> class constructor.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is decremented by each call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method, and incremented by each call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The number of remaining threads that can enter the semaphore.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> in an unusable state.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> was occupying.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Releases the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph> object once.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>A call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release&gt;</ph> method increments the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method to enter the semaphore.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The previous count of the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph> has already reached its maximum size.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Releases the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph> object a specified number of times.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>A call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> method increments the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by <ph id="ph3">`releaseCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is zero before this method is called, the method also allows <ph id="ph2">`releaseCount`</ph> threads or tasks blocked by a call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method to enter the semaphore.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The number of times to exit the semaphore.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The previous count of the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;releaseCount&lt;/code&gt;</ph> is less than 1.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph> has already reached its maximum size.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, using a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies the timeout, while observing a <ph id="ph3">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>It tests the state of the wait handle and returns immediately.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, or if a thread or task is blocked when calling <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> and the timeout interval specified by <ph id="ph3">`millisecondsTimeout`</ph> expires:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread or task doesn't enter the semaphore.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the method throws an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> to observe.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current thread successfully entered the <ph id="ph2">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The semaphoreSlim instance has been disposed <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">.</ph><ept id="p1">&lt;/code&gt;</ept><bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">-or-</ph><ept id="p2">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationTokenSource"&gt;&lt;/xref&gt;</ph> that created <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">cancellationToken</ph><ept id="p1">&lt;/code&gt;</ept> has already been disposed.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, using a 32-bit signed integer that specifies the timeout, while observing a <ph id="ph2">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>It tests the state of the wait handle and returns immediately.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, or if a thread or task is blocked when calling <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> and the timeout interval specified by <ph id="ph3">`millisecondsTimeout`</ph> expires:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread or task doesn't enter the semaphore.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the method throws an   <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;xref href="System.Threading.Timeout.Infinite"&gt;&lt;/xref&gt;</ph>(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> to observe.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current thread successfully entered the <ph id="ph2">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph> instance has been disposed, or the <ph id="ph2">&lt;xref href="System.Threading.CancellationTokenSource"&gt;&lt;/xref&gt;</ph> that created <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">cancellationToken</ph><ept id="p1">&lt;/code&gt;</ept> has been disposed.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, using a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> to specify the timeout.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>It tests the state of the wait handle and returns immediately.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a thread or task is blocked when calling <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29&gt;</ph> and the timeout interval specified by <ph id="ph2">`millisecondsTimeout`</ph> expires:</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread or task doesn't enter the semaphore.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current thread successfully entered the <ph id="ph2">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The semaphoreSlim instance has been disposed <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">.</ph><ept id="p1">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, using a 32-bit signed integer that specifies the timeout.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>It tests the state of the wait handle and returns immediately.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a thread or task is blocked when calling <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29&gt;</ph> and the timeout interval specified by <ph id="ph2">`millisecondsTimeout`</ph> expires:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread or task doesn't enter the semaphore.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;xref href="System.Threading.Timeout.Infinite"&gt;&lt;/xref&gt;</ph>(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current thread successfully entered the <ph id="ph2">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, while observing a <ph id="ph2">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the thread or task doesn't enter the semaphore, and the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the method throws an <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> token to observe.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationTokenSource"&gt;&lt;/xref&gt;</ph> that created <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">cancellationToken</ph><ept id="p1">&lt;/code&gt;</ept> has already been disposed.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, using a 32-bit signed integer to measure the time interval, while observing a <ph id="ph2">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>It tests the state of the wait handle and returns immediately.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;xref href="System.Threading.Timeout.Infinite"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> to observe.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A task that will complete with a result of <ph id="ph1">`true`</ph> if the current thread successfully entered the <ph id="ph2">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, otherwise with a result of <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A task that will complete when the semaphore has been entered.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, using a 32-bit signed integer to measure the time interval.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>It tests the state of the wait handle and returns immediately.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;xref href="System.Threading.Timeout.Infinite"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A task that will complete with a result of <ph id="ph1">`true`</ph> if the current thread successfully entered the <ph id="ph2">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, otherwise with a result of <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, while observing a <ph id="ph2">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> token to observe.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A task that will complete when the semaphore has been entered.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, using a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> to measure the time interval.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>It tests the state of the wait handle and returns immediately.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A task that will complete with a result of <ph id="ph1">`true`</ph> if the current thread successfully entered the <ph id="ph2">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, otherwise with a result of <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The current instance has already been disposed.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, using a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> to measure the time interval, while observing a <ph id="ph3">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>It tests the state of the wait handle and returns immediately.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> token to observe.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A task that will complete with a result of <ph id="ph1">`true`</ph> if the current thread successfully entered the <ph id="ph2">&lt;xref href="System.Threading.SemaphoreSlim"&gt;&lt;/xref&gt;</ph>, otherwise with a result of <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>