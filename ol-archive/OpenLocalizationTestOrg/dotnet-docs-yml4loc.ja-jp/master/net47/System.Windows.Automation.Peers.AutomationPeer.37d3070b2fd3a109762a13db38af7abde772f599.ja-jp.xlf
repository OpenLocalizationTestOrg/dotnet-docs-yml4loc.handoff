<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">712c38632d1485d38eb824cfb18fd51e6f99d42e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Automation.Peers.AutomationPeer.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87ea53dc6b6c0ab0f1d9cc62c886645185a3a466</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe944fd8e4eedb2191d73dcbdef52ba57963cfa6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class that exposes an element to UI Automation.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> queries the root of a <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> application about an element, the root returns the <ph id="ph3">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> peer for that element.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The peer also responds to <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> queries about its corresponding element.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Provides initialization for base class values when they are called by the constructor of a derived class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Gets or sets an <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> that is reported to the automation client as a source for all the events that come from this <ph id="ph2">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> that is the source of events.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Gets the accelerator key combinations for the element that is associated with the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> peer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The accelerator key.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application responds to keyboard events to provide shortcut key behavior, it should return a string that contains the keyboard shortcut combination.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, for an element that can copy text to the clipboard, this attached property might be set to the value "CTRL+C".</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The accelerator key.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Gets the access key for the element that is associated with the automation peer.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The string that contains the access key.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetAccessKey"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>An access key (sometimes referred to as a keyboard shortcut or mnemonic) is a character in the text of a menu, menu item, or label of a control such as a button that invokes the associated menu function.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to provide a shortcut way to open the <ph id="ph1">`File`</ph> menu (for which the access key is typically F), an element might have this attached property set to "ALT+F".</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The string that contains the access key.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets the control type for the element that is associated with the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> peer.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The control type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The control type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Automation.AutomationProperties.AutomationId"&gt;&lt;/xref&gt;</ph> of the element that is associated with the automation peer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the automation identifier is the <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationProperties.AutomationId%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that property is not set, the value is the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The identifier.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetAutomationId"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the automation identifier is the <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationProperties.AutomationId%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that property is not set, the value is the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The string that contains the identifier.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Rect"&gt;&lt;/xref&gt;</ph> object that represents the screen coordinates of the element that is associated with the automation peer.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The bounding rectangle.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets the collection of <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetChildren"&gt;&lt;/xref&gt;</ph> elements that are represented in the UI Automation tree as immediate child elements of the automation peer.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The collection of child elements.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetChildren"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The collection of child elements.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets a name that is used with <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationControlType"&gt;&lt;/xref&gt;</ph>, to differentiate the control that is represented by this <ph id="ph2">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The class name.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetClassName"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The class name.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Windows.Point"&gt;&lt;/xref&gt;</ph> on the element that is associated with the automation peer that responds to a mouse click.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the element represents a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, a clickable point is any point in the visible client area of the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> that issues the command that the button represents when it is clicked by the mouse.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A point in the clickable area of the element.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A point within the clickable area of the element.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Gets text that describes the functionality of the control that is associated with the automation peer.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned string typically provides the same text that is provided by the tooltip for the control.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The help text.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetHelpText"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The help text.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Tells <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> where in the <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> tree to place the <ph id="ph3">`hwnd`</ph> being hosted by a <ph id="ph4">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> element.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the hosted <ph id="ph1">`hwnd`</ph> to <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> for controls that host <ph id="ph3">`hwnd`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph> that is associated with an element that immediately hosts an <ph id="ph2">`hwnd`</ph> must override this method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is not overridden, <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> places the <ph id="ph2">`hwnd`</ph> as a child element of the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> that hosts the whole application.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you want to override this default behavior and set <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> to position the hosted <ph id="ph2">`hwnd`</ph> parallel to the place where it is located in the <ph id="ph3">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> logical tree.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Except in hosting scenarios, do not allow <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph> types to override this method.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to overriding this method, the <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph> types that are associated with an element that immediately hosts an <ph id="ph2">`hwnd`</ph> must return the <ph id="ph3">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph> that is cast to <ph id="ph4">&lt;xref:System.Windows.Automation.Provider.IRawElementProviderSimple&gt;</ph> in response to WM_GETOBJECT coming to the hosted <ph id="ph5">`hwnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get a pointer to <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.IRawElementProviderSimple&gt;</ph>, call <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.AutomationInteropProvider.HostProviderFromHandle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This method returns the hosted <ph id="ph1">`hwnd`</ph> to <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> for controls that host <ph id="ph3">`hwnd`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets text that conveys the visual status of the element that is associated with this automation peer.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the status of a messenger contact might be "Busy" or "Online".</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The status.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetItemStatus"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The status.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets a string that describes what kind of item an object represents.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of the returned string are "Mail Message", "Contact", and "Document".</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The kind of item.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetItemType"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The kind of item.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">&lt;xref href="System.Windows.Controls.Label"&gt;&lt;/xref&gt;</ph> that is targeted to the element.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the element is a <ph id="ph1">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> control, the <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy%2A&gt;</ph> method gets the <ph id="ph3">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph> for the <ph id="ph4">&lt;xref:System.Windows.Controls.Label&gt;</ph> that is associated with the <ph id="ph5">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following image, the <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> "Themes" is targeted to the <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph>; therefore the <ph id="ph3">&lt;xref:System.Windows.Controls.AccessText.AccessKey%2A&gt;</ph> for the <ph id="ph4">&lt;xref:System.Windows.Controls.Label&gt;</ph> also targets the <ph id="ph5">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the user presses <bpt id="p1">**</bpt>ALT<ept id="p1">**</ept><ph id="ph1">+</ph><bpt id="p2">**</bpt>T<ept id="p2">**</ept>, the <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> gets focus instead of the <ph id="ph3">&lt;xref:System.Windows.Controls.Label&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Display properties shows labeled by usage<ept id="p1">]</ept><bpt id="p2">(~/add/media/labeledby.JPG "</bpt>Display properties shows labeled by usage<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy%2A&gt;</ph> method for <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.ComboBoxAutomationPeer&gt;</ph> returns the <ph id="ph3">&lt;xref:System.Windows.Automation.Peers.LabelAutomationPeer&gt;</ph> for the corresponding <ph id="ph4">&lt;xref:System.Windows.Controls.Label&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables an automation client to get the text string that describes the <ph id="ph1">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.LabelAutomationPeer"&gt;&lt;/xref&gt;</ph> for the element that is targeted by the <ph id="ph2">&lt;xref href="System.Windows.Controls.Label"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.LabelAutomationPeer"&gt;&lt;/xref&gt;</ph> for the element that is targeted by the <ph id="ph2">&lt;xref href="System.Windows.Controls.Label"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Gets a human-readable localized string that represents the <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationControlType"&gt;&lt;/xref&gt;</ph> value for the control that is associated with this automation peer.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The type of the control.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The type of the control.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Gets text that describes the element that is associated with this automation peer.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls the derived implementation of <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetNameCore%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The name.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetName"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can think of this value as a string that users use to explain the control they are referring to.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is used by tools such as Narrator to tell the user what the control is.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a button with a string "OK" should return "OK".</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> control that lets users select a color might return "Colors".</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Make sure that you have assigned a name to all controls in the <ph id="ph1">[!INCLUDE[TLA#tla_gui](~/includes/tlasharptla-gui-md.md)]</ph> so that accessibility tools such as screen readers can refer to each control in a localized manner.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The string that contains the label.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates the explicit control orientation, if any.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The orientation of the control.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetOrientation"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The orientation of the control.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> that is the parent of this <ph id="ph2">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The parent automation peer.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the control pattern that is associated with the specified <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.PatternInterface"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A value from the <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.PatternInterface"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The object that implements the pattern interface; <ph id="ph1">`null`</ph> if this peer does not support this interface.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Gets an <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> from the specified point.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The position on the screen to get the <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> at the specified point.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called from <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetPeerFromPoint(System.Windows.Point)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The position on the screen to get the <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> at the specified point.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the element that is associated with this automation peer currently has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element has keyboard focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element has keyboard focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Triggers recalculation of the main properties of the <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> and raises the <ph id="ph2">&lt;xref href="System.ComponentModel.INotifyPropertyChanged.PropertyChanged"&gt;&lt;/xref&gt;</ph> notification to the Automation Client if the properties changed.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of main properties include, but are not limited to, <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl.LogicalChildren%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, updates and notifications happen automatically after the update of the layout in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>(The update occurs in response to the <ph id="ph1">&lt;xref:System.Windows.UIElement.LayoutUpdated&gt;</ph> event.) Sometimes, however, properties change without raising the <ph id="ph2">&lt;xref:System.Windows.UIElement.LayoutUpdated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when the whole <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> moves, the <ph id="ph2">&lt;xref:System.Windows.UIElement.LayoutUpdated&gt;</ph> event is not raised.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this example, the set of <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle%2A&gt;</ph> objects change because the objects are expressed in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> must call <ph id="ph2">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.InvalidatePeer%2A&gt;</ph> on its peer on <ph id="ph3">&lt;xref:System.Windows.Automation.Peers.WindowAutomationPeer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the element that is associated with this automation peer contains data that is presented to the user.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>A content element contains data that is presented to the user.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example of a content element is an item in a list box or a button in a dialog box.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically use non-content elements (which are also referred to as peripheral elements) to work with the content in a composite control.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example of a non-content element is the button in a drop-down control.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element is a content element; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.IsContentElement"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element is a content element; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the <ph id="ph1">[!INCLUDE[TLA2#tla_gui](~/includes/tla2sharptla-gui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element is a control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.IsControlElement"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element is a control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the element associated with this automation peer supports interaction.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element supports interaction; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.IsEnabled"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the automation peer can receive and send events; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the element that is associated with this <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> hosts <ph id="ph2">`hwnds`</ph> in <ph id="ph3">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two examples of elements that host <ph id="ph1">`hwnds`</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> are <ph id="ph3">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>These peers must also override <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetHostRawElementProviderCore%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element that is associated with this <ph id="ph2">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> hosts <ph id="ph3">`hwnds`</ph> in <ph id="ph4">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>; otherwise, <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the element can accept keyboard focus.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element can accept keyboard focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element can accept keyboard focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether an element is off the screen.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property does not indicate whether the element is visible.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some circumstances, an element is on the screen but is still not visible.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the element is on the screen but obscured by other elements, it might not be visible.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the method returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element is not on the screen; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.IsOffscreen"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element is not on the screen; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the element contains sensitive content.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element contains sensitive content such as a password; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.IsPassword"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element contains sensitive content; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the element that is associated with this peer must be completed on a form.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element must be completed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element is must be completed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> is listening for the specified event.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you call this method before creating the <ph id="ph1">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph> that raises the event.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is a performance measure because if <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> does not listen for the event, it does not make sense to create a peer to raise one.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is static and only answers if a delegate listens for the specified event in <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph>, not for an event on a specific element.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> can create broadcast listeners; therefore the per-element information is irrelevant.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>One of the enumeration values.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`boolean`</ph> that indicates whether <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> is listening for the event.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Gets an <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> for the specified <ph id="ph2">&lt;xref href="System.Windows.Automation.Provider.IRawElementProviderSimple"&gt;&lt;/xref&gt;</ph> proxy.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The class that implements <ph id="ph1">&lt;xref href="System.Windows.Automation.Provider.IRawElementProviderSimple"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> for the specified <ph id="ph2">&lt;xref href="System.Windows.Automation.Provider.IRawElementProviderSimple"&gt;&lt;/xref&gt;</ph> proxy.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Automation.Provider.IRawElementProviderSimple"&gt;&lt;/xref&gt;</ph> for the specified <ph id="ph2">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The automation peer.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The proxy.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Called by the <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> to raise the <ph id="ph2">&lt;xref href="System.Windows.Automation.AutomationElement.AsyncContentLoadedEvent"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Raises an automation event.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The event identifier.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Raises an event to notify the automation client of a changed property value.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The property that changed.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The previous value of the property.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The new value of the property.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Synchronously resets the tree of child elements by calling <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method in certain peer implementations that change the set of child elements in response to a call to a control pattern interface.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example is <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider&gt;</ph>, which can change the child elements of the peer by moving the <ph id="ph2">&lt;xref:System.Windows.Documents.TextRange&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Sets the keyboard focus on the element that is associated with this automation peer.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, is called by <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer.SetFocus"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>