<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc92e5b4ac491778299c17926f2abb695773a98b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Data.Binding.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53a43ab1bb16d4df70d48cba49373649b6bcc5b0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64d1430a1f70f5be92e241633e1613e83d5ea9f4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides high-level access to the definition of a binding, which connects the properties of binding target objects (typically, WPF elements), and any data source (for example, a database, an XML file, or any object that contains data).</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> data binding provides a simple and consistent way for applications to present and interact with data.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data binding enables you to synchronize the values of the properties of two different objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>To establish a binding, use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> class or one of the other classes that inherit <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Regardless of what object you are binding and the nature of your data source, each binding follows the model illustrated by the following figure.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Basic data binding diagram<ept id="p1">]</ept><bpt id="p2">(~/add/media/databindingmostbasic.png "</bpt>Basic data binding diagram<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The figure demonstrates the following fundamental <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> data binding concepts.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each binding typically has these four components: a binding target object, a target property, a binding source, and a <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> to the value in the binding source to use.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you want to bind the content of a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> to the Name property of an Employee object, your target object is the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, the target property is the <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox.Text%2A&gt;</ph> property, the value to use is Name, and the source object is the Employee object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The target property must be a dependency property.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This also means that you cannot bind a field.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most properties of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> objects are dependency properties and most dependency properties, except read-only ones, support data binding by default.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Only <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> types can define dependency properties and all <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> objects derive from <ph id="ph3">&lt;xref:System.Windows.DependencyObject&gt;</ph>.)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although not specified in the figure, it should be noted that the binding source object is not restricted to being a custom <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> data binding supports data in the form of <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> objects and <ph id="ph3">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To provide some examples, your binding source may be a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, any list object, a <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> object that is associated with <ph id="ph3">[!INCLUDE[TLA#tla_adonet](~/includes/tlasharptla-adonet-md.md)]</ph> data or Web Services, or an XmlNode that contains your <ph id="ph4">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph> data.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;</ph> property to specify the direction of the data flow.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To detect source changes in one-way or two-way bindings, the source must implement a suitable property change notification mechanism such as <ph id="ph1">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Implement Property Change Notification<ept id="p1">](~/docs/framework/wpf/data/how-to-implement-property-change-notification.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> property specifies the timing of source updates.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see "Basic Data Binding Concepts" in <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>declaration<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more attribute-assignment clauses separated by commas (,).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Binding Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/binding-markup-extension.md)</ept> or <bpt id="p2">[</bpt>Binding Declarations Overview<ept id="p2">](~/docs/framework/wpf/data/binding-declarations-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding"&gt;&lt;/xref&gt;</ph> class with an initial path.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The initial <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.Path"&gt;&lt;/xref&gt;</ph> for the binding.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Adds a handler for the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.SourceUpdated"&gt;&lt;/xref&gt;</ph> attached event.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method supports attached event usage in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.UIElement"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.ContentElement"&gt;&lt;/xref&gt;</ph> that listens to the event.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The handler to add.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Adds a handler for the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.TargetUpdated"&gt;&lt;/xref&gt;</ph> attached event.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method supports attached event usage in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.UIElement"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.ContentElement"&gt;&lt;/xref&gt;</ph> that listens to the event.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The handler to add.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets or sets opaque data passed to the asynchronous data dispatcher.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Data passed to the asynchronous data dispatcher.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether to evaluate the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.Path"&gt;&lt;/xref&gt;</ph> relative to the data item or the <ph id="ph2">&lt;xref href="System.Windows.Data.DataSourceProvider"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The normal behavior (when this property is <ph id="ph1">`false`</ph>) includes special treatment for <ph id="ph2">&lt;xref:System.Windows.Data.DataSourceProvider&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the binding engine evaluates the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> relative to the object obtained from the <ph id="ph2">&lt;xref:System.Windows.Data.DataSourceProvider.Data%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, the binding listens for the <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.DataChanged&gt;</ph> event and reacts accordingly.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property to <ph id="ph1">`true`</ph> overrides this behavior and gives the binding access to properties of the <ph id="ph2">&lt;xref:System.Windows.Data.DataSourceProvider&gt;</ph> object itself.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> to evaluate the path relative to the data item itself; otherwise, <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Gets or sets the converter to use.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>A binding implicitly uses a default converter that tries to do a type conversion between the source value and the target value.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a conversion cannot be made, the default converter returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to associate a custom value converter with a binding, you should create a class that implements the <ph id="ph1">&lt;xref:System.Windows.Data.IValueConverter&gt;</ph> interface and supply implementations for the <ph id="ph2">&lt;xref:System.Windows.Data.IValueConverter.Convert%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Data.IValueConverter.ConvertBack%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value converters can change data from one type to another, translate between cultural details such as character sets, or modify other aspects of their presentation.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>For examples of typical conversion scenarios, see "Data Conversion" in the <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>myConverter<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>A resource reference to a class that implements the <ph id="ph1">&lt;xref:System.Windows.Data.IValueConverter&gt;</ph> interface, which includes implementations of the <ph id="ph2">&lt;xref:System.Windows.Data.IValueConverter.Convert%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Data.IValueConverter.ConvertBack%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>To refer to a value converter, use the <bpt id="p1">[</bpt>StaticResource Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;xref href="System.Windows.Data.IValueConverter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets or sets the culture in which to evaluate the converter.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not set this property, the binding engine uses the <ph id="ph1">`Language`</ph> property of the binding target object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> this defaults to "en-US" or inherits the value from the root element (or any element) of the page, if one has been explicitly set.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about data conversion, see the Data Conversion section in the <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets or sets the parameter to pass to the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.Converter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ConverterParameter%2A&gt;</ph> property to specify how an object is converted.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property passes additional information to a converter that you use on a binding.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you specify a <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ConverterParameter%2A&gt;</ph>, the value is passed to the <ph id="ph2">&lt;xref:System.Windows.Data.IValueConverter.Convert%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Data.IValueConverter.ConvertBack%2A&gt;</ph> methods as the <ph id="ph4">`parameter`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Produce a Value Based on a List of Bound Items<ept id="p1">](~/docs/framework/wpf/data/how-to-produce-a-value-based-on-a-list-of-bound-items.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>That example shows an implementation of an <ph id="ph1">&lt;xref:System.Windows.Data.IMultiValueConverter&gt;</ph> but the usage still applies.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The parameter to pass to the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.Converter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Used as a returned value to instruct the binding engine not to perform any action.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>A binding source property or a converter can return <ph id="ph1">&lt;xref:System.Windows.Data.Binding.DoNothing?displayProperty=fullName&gt;</ph> to instruct the binding engine not to perform any action.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to instruct the binding engine not to transfer a value to the binding target, not to move to the next <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph>, or not to use the <ph id="ph3">`FallBackValue`</ph> or default value.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the element to use as the binding source object.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is useful when you want to bind to the property of another element in your application.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you want to use a <ph id="ph1">&lt;xref:System.Windows.Controls.Slider&gt;</ph> to control the height of another control in your application, or if you want to bind the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> of your control to the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A&gt;</ph> property of your <ph id="ph4">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, bindings inherit the data context specified by the <ph id="ph1">`DataContext`</ph> property, if one has been set.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph> property is one of the ways you can explicitly set the source of a <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> and override the inherited data context.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Specify the Binding Source<ept id="p1">](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph> class also enable you to set the source of the binding explicitly.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, only one of the three properties, <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph>, should be set for each binding, or a conflict might occur.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property throws an exception if there is a binding source conflict.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`Name`</ph> property or <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](~/docs/framework/xaml-services/x-name-directive.md)</ept> of the element of interest.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can refer to elements in code only if they are registered to the appropriate <ph id="ph1">&lt;xref href="System.Windows.NameScope"&gt;&lt;/xref&gt;</ph> through <ph id="ph2">`RegisterName`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">[!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)]</ph> namespace manager object used by the binding attached to the specified object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method supports attached property usage for the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.XmlNamespaceManager%2A&gt;</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph> namespace managers are relevant only if the data in the binding came from an <ph id="ph2">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph> binding source (<ph id="ph3">&lt;xref:System.Windows.Data.XmlDataProvider&gt;</ph> object).</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a namespace manager was not specifically applied either in the original data source creation or by subsequently calling <ph id="ph1">&lt;xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A&gt;</ph> on the binding, then this method will return <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will always return <ph id="ph1">`null`</ph> if the data behind the binding is not <ph id="ph2">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The object from which to get namespace information.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A returned object used for viewing <ph id="ph1">[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]</ph> namespaces that relate to the binding on the passed object element.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This object should be cast as <ph id="ph1">&lt;xref href="System.Xml.XmlNamespaceManager"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">target</ph><ept id="p1">&lt;/code&gt;</ept> parameter cannot be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Used as the <ph id="ph1">&lt;xref href="System.ComponentModel.PropertyChangedEventArgs.PropertyName"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.ComponentModel.PropertyChangedEventArgs"&gt;&lt;/xref&gt;</ph> to indicate that an indexer property has changed.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding"&gt;&lt;/xref&gt;</ph> should get and set values asynchronously.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.IsAsync%2A&gt;</ph> property when the <ph id="ph2">`get`</ph> accessor of your binding source property might take a long time.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>One example is an image property with a <ph id="ph1">`get`</ph> accessor that downloads from the Web.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Data.Binding.IsAsync%2A&gt;</ph> to <ph id="ph2">`true`</ph> avoids blocking the <ph id="ph3">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> while the download occurs.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>While waiting for the value to arrive, the binding reports the <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.FallbackValue%2A&gt;</ph>, if one is available, or the default value of the binding target property.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, there should not be many scenarios where you need to use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.IsAsync%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)]</ph> guidelines recommend against defining properties that are orders of magnitude slower than a field set would be.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are creating your class, consider handling extremely slow operations outside of the <ph id="ph1">`get`</ph> accessor and caching the result.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Choosing Between Properties and Methods<ept id="p1">](http://msdn.microsoft.com/en-us/55825e8f-7e2e-448a-9505-7217cc91b1af)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates the direction of the data flow in the binding.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>To support <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode.OneWay&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.BindingMode.TwoWay&gt;</ph> bindings, the underlying data must implement <ph id="ph3">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>How to: Implement Property Change Notification<ept id="p1">](~/docs/framework/wpf/data/how-to-implement-property-change-notification.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode.TwoWay&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Data.BindingMode.OneWayToSource&gt;</ph> bindings, you can control the target-to-source updates by setting the <ph id="ph3">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on the different binding modes, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Data.BindingMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Data.BindingMode.Default"&gt;&lt;/xref&gt;</ph>, which returns the default binding mode value of the target dependency property.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>However, the default value varies for each dependency property.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>In general, user-editable control properties, such as those of text boxes and check boxes, default to two-way bindings, whereas most other properties default to one-way bindings.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A programmatic way to determine whether a dependency property binds one-way or two-way by default is to get the property metadata of the property using <ph id="ph1">&lt;xref href="System.Windows.DependencyProperty.GetMetadata(System.Type)"&gt;&lt;/xref&gt;</ph> and then check the Boolean value of the <ph id="ph2">&lt;xref href="System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether to raise the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.SourceUpdated"&gt;&lt;/xref&gt;</ph> event when a value is transferred from the binding target to the binding source.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Data.Binding.SourceUpdated"&gt;&lt;/xref&gt;</ph> event should be raised when the binding source value is updated; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether to raise the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.TargetUpdated"&gt;&lt;/xref&gt;</ph> event when a value is transferred from the binding source to the binding target.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Data.Binding.TargetUpdated"&gt;&lt;/xref&gt;</ph> event should be raised when the binding target value is updated; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether to raise the <ph id="ph1">&lt;xref href="System.Windows.Controls.Validation.Error"&gt;&lt;/xref&gt;</ph> attached event on the bound object.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the binding has <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ValidationRules%2A&gt;</ph> associated with it, the binding engine checks each rule each time it transfers the target property value to the source property.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a rule invalidates a value, the binding engine creates a <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationError&gt;</ph> object and adds it to the <ph id="ph2">&lt;xref:System.Windows.Controls.Validation&gt;</ph>.<ph id="ph3">&lt;xref:System.Windows.Controls.Validation.Errors%2A&gt;</ph> collection of the bound object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName&gt;</ph> property is not empty, the <ph id="ph2">&lt;xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName&gt;</ph> attached property of the object is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.NotifyOnValidationError%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> is set to <ph id="ph3">`true`</ph>, then the binding engine raises the <ph id="ph4">&lt;xref:System.Windows.Controls.Validation.Error?displayProperty=fullName&gt;</ph> attached event on the object.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed discussion of the validation process, see the Data Validation section in the <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Controls.Validation.Error"&gt;&lt;/xref&gt;</ph> attached event should be raised on the bound object when there is a validation error during source updates; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Gets or sets the path to the binding source property.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each binding typically has these four components: a binding target object, a target property, a binding source, and a path to the value in the binding source to use.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about these data binding concepts, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property to specify the source value you want to bind to:</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the simplest case, the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property value is the name of the property of the source object to use for the binding, such as <ph id="ph2">`Path=PropertyName`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subproperties of a property can be specified by a syntax similar to that used in <ph id="ph1">[!INCLUDE[TLA#tla_cshrp](~/includes/tlasharptla-cshrp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, the clause <ph id="ph1">`Path=ShoppingCart.Order`</ph> sets the binding to the subproperty <ph id="ph2">`Order`</ph> of the object or property <ph id="ph3">`ShoppingCart`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>To bind to an attached property, place parentheses around the attached property.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to bind to the attached property <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt;</ph>, the syntax is <ph id="ph2">`Path=(DockPanel.Dock)`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Indexers of a property can be specified within square brackets following the property name where the indexer is applied.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, the clause <ph id="ph1">`Path=ShoppingCart[0]`</ph> sets the binding to the index that corresponds to how your property's internal indexing handles the literal string "0".</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Multiple indexers are also supported.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Indexers and subproperties can be mixed in a <ph id="ph1">`Path`</ph> clause; for example, <ph id="ph2">`Path=ShoppingCart.ShippingInfo[MailingAddress,Street].`</ph></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Inside indexers you can have multiple indexer parameters separated by commas (,).</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of each parameter can be specified with parentheses.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can have <ph id="ph1">`Path="[(sys:Int32)42,(sys:Int32)24]"`</ph>, where <ph id="ph2">`sys`</ph> is mapped to the <ph id="ph3">`System`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the source is a collection view, the current item can be specified with a slash (/).</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the clause <ph id="ph1">`Path=/`</ph> sets the binding to the current item in the view.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the source is a collection, this syntax specifies the current item of the default collection view.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property names and slashes can be combined to traverse properties that are collections.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Path=/Offices/ManagerName`</ph> specifies the current item of the source collection, which contains an <ph id="ph2">`Offices`</ph> property that is also a collection.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its current item is an object that contains a <ph id="ph1">`ManagerName`</ph> property.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optionally, a period (.) path can be used to bind to the current source.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Text="{Binding}"`</ph> is equivalent to <ph id="ph2">`Text="{Binding Path=.}"`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about path syntax, see <bpt id="p1">[</bpt>Binding Declarations Overview<ept id="p1">](~/docs/framework/wpf/data/binding-declarations-overview.md)</ept> or <bpt id="p2">[</bpt>PropertyPath XAML Syntax<ept id="p2">](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">[!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)]</ph> bindings, see the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>To bind to an entire object, you do not need to specify the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see "Specifying the Path to the Value" in <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The path to the binding source.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Gets or sets the binding source by specifying its location relative to the position of the binding target.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is commonly used to bind one property of an object to another property of the same object, or to define a binding in a style or template.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, bindings inherit the data context specified by the <ph id="ph1">`DataContext`</ph> property, if one has been set.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph> property is one of the ways you can explicitly set the source of a <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> and override the inherited data context.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Specify the Binding Source<ept id="p1">](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName&gt;</ph> properties also enable you to set the source of the binding explicitly.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, only one of the three properties, <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph>, should be set for each binding, or a conflict can occur.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property throws an exception if there is a binding source conflict.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>RelativeSource MarkupExtension<ept id="p1">](~/docs/framework/wpf/advanced/relativesource-markupextension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Data.RelativeSource"&gt;&lt;/xref&gt;</ph> object specifying the relative location of the binding source to use.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Removes a handler for the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.SourceUpdated"&gt;&lt;/xref&gt;</ph> attached event.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method supports attached event usage in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.UIElement"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.ContentElement"&gt;&lt;/xref&gt;</ph> that listens to the event.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The handler to remove.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Removes a handler for the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.TargetUpdated"&gt;&lt;/xref&gt;</ph> attached event.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method supports attached event usage in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.UIElement"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.ContentElement"&gt;&lt;/xref&gt;</ph> that listens to the event.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The handler to remove.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Sets a namespace manager object used by the binding attached to the provided element.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method supports attached property usage for the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.XmlNamespaceManager%2A&gt;</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The object from which to get namespace information.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlNamespaceManager"&gt;&lt;/xref&gt;</ph> to use for namespace evaluation in the passed element.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.Path"&gt;&lt;/xref&gt;</ph> property should be persisted.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property does not have a simple default value.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method indicates whether the property has changed from its default value.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically invoke this method if you are either developing a designer for the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> or developing your own control incorporating the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the property value has changed from its default; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.Source"&gt;&lt;/xref&gt;</ph> property should be persisted.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph> property does not have a simple default value.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method indicates whether the property has changed from its default value.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically invoke this method if you are either developing a designer for the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> or developing your own control incorporating the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the property value has changed from its default; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Indicates whether the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.ValidationRules"&gt;&lt;/xref&gt;</ph> property should be persisted.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ValidationRules%2A&gt;</ph> property does not have a simple default value.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method indicates whether the property has changed from its default value.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically invoke this method if you are either developing a designer for the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> or developing your own control incorporating the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the property value has changed from its default; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Gets or sets the object to use as the binding source.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, bindings inherit the data context specified by the <ph id="ph1">`DataContext`</ph> property, if one has been set.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph> property is one of the ways you can explicitly set the source of a <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> and override the inherited data context.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not need the functionality of establishing a scope in which several properties inherit the same data context, you can use the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph> property instead of the <ph id="ph2">`DataContext`</ph> property.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName&gt;</ph> properties also enable you to set the source of the binding explicitly.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, only one of the three properties, <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph>, should be set for each binding, or a conflict can occur.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property throws an exception if there is a binding source conflict.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>To clear this property, set it to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>object<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>An existing object.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>To refer to an existing object, use the <bpt id="p1">[</bpt>StaticResource Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept></source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The object to use as the binding source.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.SourceUpdated"&gt;&lt;/xref&gt;</ph> attached event.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.TargetUpdated"&gt;&lt;/xref&gt;</ph> attached event.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Gets or sets a handler you can use to provide custom logic for handling exceptions that the binding engine encounters during the update of the binding source value.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>This is only applicable if you have associated an <ph id="ph1">&lt;xref href="System.Windows.Controls.ExceptionValidationRule"&gt;&lt;/xref&gt;</ph> with your binding.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> is a built-in validation rule that checks for exceptions thrown during the update of the binding source property.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have associated the <ph id="ph1">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> with your <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> object, you can use this property to set a handler to provide custom logic for handling these exceptions.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A&gt;</ph> is not specified on the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>, the binding engine creates a <ph id="ph3">&lt;xref:System.Windows.Controls.ValidationError&gt;</ph> with the exception and adds it to the <ph id="ph4">&lt;xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName&gt;</ph> collection of the bound element.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A method that provides custom logic for handling exceptions that the binding engine encounters during the update of the binding source value.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that determines the timing of binding source updates.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bindings that are <ph id="ph1">&lt;xref:System.Windows.Data.BindingMode.TwoWay&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Data.BindingMode.OneWayToSource&gt;</ph> listen for changes in the target property and propagate them back to the source.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is known as updating the source.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, these updates happen whenever the target property changes.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is fine for check boxes and other simple controls, but it is usually not appropriate for text fields.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Updating after every keystroke can diminish performance and it denies the user the usual opportunity to backspace and fix typing errors before committing to the new value.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the default <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> value of the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox.Text%2A&gt;</ph> property is <ph id="ph3">&lt;xref:System.Windows.Data.UpdateSourceTrigger.LostFocus&gt;</ph> and not <ph id="ph4">&lt;xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> value to <ph id="ph2">&lt;xref:System.Windows.Data.UpdateSourceTrigger.Explicit&gt;</ph>, you must call the <ph id="ph3">&lt;xref:System.Windows.Data.BindingExpression.UpdateSource%2A&gt;</ph> method or the changes will not propagate back to the source.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger.Default"&gt;&lt;/xref&gt;</ph>, which returns the default <ph id="ph2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;&lt;/xref&gt;</ph> value of the target dependency property.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>However, the default value for most dependency properties is <ph id="ph1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger.PropertyChanged"&gt;&lt;/xref&gt;</ph>, while the <ph id="ph2">&lt;xref href="System.Windows.Controls.TextBox.Text"&gt;&lt;/xref&gt;</ph> property has a default value of <ph id="ph3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger.LostFocus"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>A programmatic way to determine the default <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.UpdateSourceTrigger"&gt;&lt;/xref&gt;</ph> value of a dependency property is to get the property metadata of the property using <ph id="ph2">&lt;xref href="System.Windows.DependencyProperty.GetMetadata(System.Type)"&gt;&lt;/xref&gt;</ph> and then check the value of the <ph id="ph3">&lt;xref href="System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether to include the <ph id="ph1">&lt;xref href="System.Windows.Controls.DataErrorValidationRule"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property provides an alternative to using the <ph id="ph1">&lt;xref:System.Windows.Controls.DataErrorValidationRule&gt;</ph> element explicitly.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.DataErrorValidationRule&gt;</ph> is a built-in validation rule that checks for errors that are raised by the <ph id="ph2">&lt;xref:System.ComponentModel.IDataErrorInfo&gt;</ph> implementation of the source object.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an error is raised, the binding engine creates a <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationError&gt;</ph> with the error and adds it to the <ph id="ph2">&lt;xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName&gt;</ph> collection of the bound element.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>The lack of an error clears this validation feedback, unless another rule raises a validation issue.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A&gt;</ph> is introduced in the .NET Framework version 3.5.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>.NET Framework Versions and Dependencies<ept id="p1">](~/docs/framework/migration-guide/versions-and-dependencies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to include the <ph id="ph2">&lt;xref href="System.Windows.Controls.DataErrorValidationRule"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether to include the <ph id="ph1">&lt;xref href="System.Windows.Controls.ExceptionValidationRule"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property provides an alternative to using the <ph id="ph1">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> element explicitly.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> is a built-in validation rule that checks for exceptions that are thrown during the update of the source property.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception is thrown, the binding engine creates a <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationError&gt;</ph> with the exception and adds it to the <ph id="ph2">&lt;xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName&gt;</ph> collection of the bound element.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The lack of an error clears this validation feedback, unless another rule raises a validation issue.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A&gt;</ph> is introduced in the .NET Framework version 3.5.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>.NET Framework Versions and Dependencies<ept id="p1">](~/docs/framework/migration-guide/versions-and-dependencies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to include the <ph id="ph2">&lt;xref href="System.Windows.Controls.ExceptionValidationRule"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether to include the <ph id="ph1">&lt;xref href="System.Windows.Controls.NotifyDataErrorValidationRule"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the binding checks for and reports errors that are raised by a data source that implements <ph id="ph3">&lt;xref:System.ComponentModel.INotifyDataErrorInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to include the <ph id="ph2">&lt;xref href="System.Windows.Controls.NotifyDataErrorValidationRule"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Gets a collection of rules that check the validity of the user input.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> data binding model enables you to associate <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ValidationRules%2A&gt;</ph> with your <ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create custom rules by deriving from the <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> class and implementing the <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method, or you can use the built-in <ph id="ph3">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph>, which invalidates a value if there are exceptions during source updates.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>The binding engine checks each <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> associated with a binding each time an input value (the binding target property value) is transferred to the binding source property.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed discussion of the validation process, see the Data Validation section in the <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be set in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> only by using the collection syntax shown, or by accessing the collection object and using its various methods, such as <ph id="ph2">`Add`</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property to access the collection object is read-only, whereas the collection itself is read-write.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Property Element Usage</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>oneOrMoreValidationRules<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> class or create custom rules by subclassing the <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>A collection of <ph id="ph1">&lt;xref href="System.Windows.Controls.ValidationRule"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding.XmlNamespaceManager"&gt;&lt;/xref&gt;</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Gets or sets an <ph id="ph1">`XPath`</ph> query that returns the value on the <ph id="ph2">[!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)]</ph> binding source to use.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the binding source is <ph id="ph1">[!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)]</ph> data instead of a <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> object, the <ph id="ph3">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> property is used instead of the <ph id="ph4">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property to indicate the path to the value on the binding source to use.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>By setting the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> property, you are creating an <ph id="ph2">`XPath`</ph> query to select a node or a collection of nodes (<ph id="ph3">&lt;xref:System.Xml.XmlElement?displayProperty=fullName&gt;</ph> and <ph id="ph4">&lt;xref:System.Xml.XmlAttribute?displayProperty=fullName&gt;</ph> both derive from <ph id="ph5">&lt;xref:System.Xml.XmlNode?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlNode?displayProperty=fullName&gt;</ph> is a <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> object, which means you can bind to its properties using the <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName&gt;</ph> method handles the <ph id="ph2">`XPath`</ph> expressions from the <ph id="ph3">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`XPath`</ph> functions are not supported.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">`XPath`</ph> expression information, see the <ph id="ph2">&lt;xref:System.Xml.XmlNode.SelectNodes%2A&gt;</ph> documentation and some examples provided in the Example section.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>LINQ to XML objects <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> do not use <ph id="ph3">`XPath`</ph>.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>How to: Bind to XDocument, XElement, or LINQ for XML Query Results<ept id="p1">](~/docs/framework/wpf/data/how-to-bind-to-xdocument-xelement-or-linq-for-xml-query-results.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XPath`</ph> query.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>