<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bfcd75bb6a8a5061dfc69578f59832d15ef5e36</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Threading.Interlocked.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b82eb8b7330eb8b0ac8cbe3f03b2a703068d782a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26467a62a651d7309e603636410f11527a748cf7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides atomic operations for variables that are shared by multiple threads.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The methods of this class help protect against errors that can occur when the scheduler switches contexts while a thread is updating a variable that can be accessed by other threads, or when two threads are executing concurrently on separate processors.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The members of this class do not throw exceptions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph> methods increment or decrement a variable and store the resulting value in a single operation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>On most computers, incrementing a variable is not an atomic operation, requiring the following steps:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Load a value from an instance variable into a register.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Increment or decrement the value.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Store the value in the instance variable.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not use <ph id="ph1">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, a thread can be preempted after executing the first two steps.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another thread can then execute all three steps.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the first thread resumes execution, it overwrites the value in the instance variable, and the effect of the increment or decrement performed by the second thread is lost.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%2A&gt;</ph> method atomically exchanges the values of the specified variables.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method combines two operations: comparing two values and storing a third value in one of the variables, based on the outcome of the comparison.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method handles an overflow condition by wrapping: if the value at <ph id="ph1">`location1`</ph> is <ph id="ph2">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph> and <ph id="ph3">`value`</ph> is 1, the result is <ph id="ph4">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>; if <ph id="ph5">`value`</ph> is 2, the result is (<ph id="ph6">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph> + 1); and so on.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception is thrown.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A variable containing the first value to be added.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The sum of the two values is stored in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The value to be added to the integer at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The new value stored at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method handles an overflow condition by wrapping: if the value at <ph id="ph1">`location1`</ph> is <ph id="ph2">&lt;xref:System.Int64?displayProperty=fullName&gt;</ph> and <ph id="ph3">`value`</ph> is 1, the result is <ph id="ph4">&lt;xref:System.Int64?displayProperty=fullName&gt;</ph>; if <ph id="ph5">`value`</ph> is 2, the result is (<ph id="ph6">&lt;xref:System.Int64?displayProperty=fullName&gt;</ph> + 1); and so on.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception is thrown.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> method and the 64-bit overloads of the <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> methods are truly atomic only on systems where a <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=fullName&gt;</ph> is 64 bits long.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A variable containing the first value to be added.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The sum of the two values is stored in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The value to be added to the integer at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The new value stored at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Compares two double-precision floating point numbers for equality and, if they are equal, replaces the first value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, no operation is performed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> is the original value in <ph id="ph2">`location1`</ph>, whether or not the exchange takes place.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The destination, whose value is compared with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">comparand</ph><ept id="p1">&lt;/code&gt;</ept> and possibly replaced.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The value that replaces the destination value if the comparison results in equality.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The value that is compared to the value at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The original value in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, no operation is performed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> is the original value in <ph id="ph2">`location1`</ph>, whether or not the exchange takes place.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The destination, whose value is compared with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">comparand</ph><ept id="p1">&lt;/code&gt;</ept> and possibly replaced.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The value that replaces the destination value if the comparison results in equality.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The value that is compared to the value at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The original value in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Compares two 64-bit signed integers for equality and, if they are equal, replaces the first value.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, no operation is performed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> is the original value in <ph id="ph2">`location1`</ph>, whether or not the exchange takes place.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The destination, whose value is compared with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">comparand</ph><ept id="p1">&lt;/code&gt;</ept> and possibly replaced.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The value that replaces the destination value if the comparison results in equality.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The value that is compared to the value at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The original value in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Compares two platform-specific handles or pointers for equality and, if they are equal, replaces the first one.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, no operation is performed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of this method is the original value in <ph id="ph1">`location1`</ph>, whether or not the exchange takes place.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> is a platform-specific type.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The destination <ph id="ph1">&lt;xref href="System.IntPtr"&gt;&lt;/xref&gt;</ph>, whose value is compared with the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">comparand</ph><ept id="p1">&lt;/code&gt;</ept> and possibly replaced by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">value</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IntPtr"&gt;&lt;/xref&gt;</ph> that replaces the destination value if the comparison results in equality.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IntPtr"&gt;&lt;/xref&gt;</ph> that is compared to the value at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The original value in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Compares two objects for reference equality and, if they are equal, replaces the first object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparand`</ph> and the object in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, no operation is performed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> is the original value in <ph id="ph2">`location1`</ph>, whether or not the exchange takes place.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29&gt;</ph> method overload provides a type-safe alternative for reference types.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The objects are compared for reference equality, rather than <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, two boxed instances of the same value type (for example, the integer 3) always appear to be unequal, and no operation is performed.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not use this overload with value types.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The destination object that is compared with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">comparand</ph><ept id="p1">&lt;/code&gt;</ept> and possibly replaced.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The object that replaces the destination object if the comparison results in equality.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The object that is compared to the object at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The original value in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Compares two single-precision floating point numbers for equality and, if they are equal, replaces the first value.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, no operation is performed.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> is the original value in <ph id="ph2">`location1`</ph>, whether or not the exchange takes place.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The destination, whose value is compared with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">comparand</ph><ept id="p1">&lt;/code&gt;</ept> and possibly replaced.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The value that replaces the destination value if the comparison results in equality.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The value that is compared to the value at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The original value in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Compares two instances of the specified reference type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">T</ph><ept id="p1">&lt;/code&gt;</ept> for equality and, if they are equal, replaces the first one.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, no operation is performed.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The comparison and the exchange are performed as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of this method is the original value in <ph id="ph1">`location1`</ph>, whether or not the exchange takes place.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method only supports reference types.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are overloads of the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method for the value types <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, <ph id="ph3">&lt;xref:System.Int64&gt;</ph>, <ph id="ph4">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph5">&lt;xref:System.Single&gt;</ph>, and <ph id="ph6">&lt;xref:System.Double&gt;</ph>, but there is no support for other value types.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overload is preferable to the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Object%40%2CSystem.Object%2CSystem.Object%29&gt;</ph> method overload, because the latter requires the destination object to be accessed late-bound.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The destination, whose value is compared with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">comparand</ph><ept id="p1">&lt;/code&gt;</ept> and possibly replaced.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This is a reference parameter (<ph id="ph1">`ref`</ph> in C#, <ph id="ph2">`ByRef`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The value that replaces the destination value if the comparison results in equality.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The value that is compared to the value at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The type to be used for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p2">&lt;/code&gt;</ept>, and <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">comparand</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This type must be a reference type.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The original value in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Decrements a specified variable and stores the result, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method handles an overflow condition by wrapping: If <ph id="ph1">`location`</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>, <ph id="ph4">`location`</ph> - 1 = <ph id="ph5">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception is thrown.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The variable whose value is to be decremented.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The decremented value.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Decrements the specified variable and stores the result, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method handles an overflow condition by wrapping: if <ph id="ph1">`location`</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;xref:System.Int64?displayProperty=fullName&gt;</ph>, <ph id="ph4">`location`</ph> - 1 = <ph id="ph5">&lt;xref:System.Int64?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception is thrown.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> method and the 64-bit overloads of the <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> methods are truly atomic only on systems where a <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=fullName&gt;</ph> is 64 bits long.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The variable whose value is to be decremented.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The decremented value.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Sets a single-precision floating point number to a specified value and returns the original value, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The variable to set to the specified value.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The value to which the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The original value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Sets an object to a specified value and returns a reference to the original object, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29&gt;</ph> method overload provides a type-safe alternative for reference types.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The variable to set to the specified value.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The value to which the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The original value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Sets a platform-specific handle or pointer to a specified value and returns the original value, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The variable to set to the specified value.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The value to which the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The original value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Sets a double-precision floating point number to a specified value and returns the original value, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The variable to set to the specified value.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The value to which the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The original value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The variable to set to the specified value.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The value to which the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The original value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The variable to set to the specified value.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The value to which the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The original value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Sets a variable of the specified type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">T</ph><ept id="p1">&lt;/code&gt;</ept> to a specified value and returns the original value, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method only supports reference types.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are overloads of the <ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%2A&gt;</ph> method for the <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, <ph id="ph3">&lt;xref:System.Int64&gt;</ph>, <ph id="ph4">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph5">&lt;xref:System.Single&gt;</ph>, and <ph id="ph6">&lt;xref:System.Double&gt;</ph> value types, but there is no support for other value types.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overload is preferable to the <ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%28System.Object%40%2CSystem.Object%29&gt;</ph> method overload, because the latter requires late-bound access to the destination object .</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The variable to set to the specified value.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>This is a reference parameter (<ph id="ph1">`ref`</ph> in C#, <ph id="ph2">`ByRef`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The value to which the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The type to be used for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>This type must be a reference type.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The original value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location1</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Increments a specified variable and stores the result, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method handles an overflow condition by wrapping: if <ph id="ph1">`location`</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>, <ph id="ph4">`location`</ph> + 1 = <ph id="ph5">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception is thrown.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The variable whose value is to be incremented.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The incremented value.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Increments a specified variable and stores the result, as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method handles an overflow condition by wrapping: if <ph id="ph1">`location`</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;xref:System.Int64?displayProperty=fullName&gt;</ph>, <ph id="ph4">`location`</ph> + 1 = <ph id="ph5">&lt;xref:System.Int64?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception is thrown.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> method and the 64-bit overloads of the <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> methods are truly atomic only on systems where a <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=fullName&gt;</ph> is 64 bits long.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The variable whose value is to be incremented.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The incremented value.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The address of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">location</ph><ept id="p1">&lt;/code&gt;</ept> is a null pointer.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Synchronizes memory access as follows: The processor that executes the current thread cannot reorder instructions in such a way that memory accesses before the call to <ph id="ph1">&lt;xref href="System.Threading.Interlocked.MemoryBarrier"&gt;&lt;/xref&gt;</ph> execute after memory accesses that follow the call to <ph id="ph2">&lt;xref href="System.Threading.Interlocked.MemoryBarrier"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method was added to the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class in the <ph id="ph2">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> as a convenience; it's a wrapper for the <ph id="ph3">&lt;xref:System.Threading.Thread.MemoryBarrier%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Threading.Interlocked.MemoryBarrier%2A&gt;</ph> is required only on multiprocessor systems that have weak memory ordering (for example, a system that employs multiple Intel Itanium processors).</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>For most purposes, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, or the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier ways to synchronize data.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Returns a 64-bit value, loaded as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> method is unnecessary on 64-bit systems, because 64-bit read operations are already atomic.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>On 32-bit systems, 64-bit read operations are not atomic unless performed using <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> method and the 64-bit overloads of the <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> methods are truly atomic only on systems where a <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=fullName&gt;</ph> is 64 bits long.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> is a platform-specific type.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The 64-bit value to be loaded.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The loaded value.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>