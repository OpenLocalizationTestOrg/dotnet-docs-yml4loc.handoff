<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ee93595d3640d69dc3caffe5bf04a93c1b6f19e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Data.OracleClient.OracleCommandBuilder.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8caff138e6dbc117fa9a007058f219fc89e614f8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">134f16ec59fb7be39bc6e1f68b470e1f57408db2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Automatically generates single-table commands used to reconcile changes made to a <ph id="ph1">&lt;xref href="System.Data.DataSet"&gt;&lt;/xref&gt;</ph> with the associated database.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type is deprecated and will be removed in a future version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Oracle and ADO.NET<ept id="p1">](~/docs/framework/data/adonet/oracle-and-adonet.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> does not automatically generate the SQL statements required to reconcile changes made to a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> associated with the database.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can create an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> object that generates SQL statements for single-table updates by setting the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then, the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> generates any additional SQL statements that you do not set.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The relationship between an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> and its corresponding <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> is always one-to-one.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create this correspondence, you set the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This causes the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> to register itself as a listener, which produces the output of <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleDataAdapter.RowUpdating&gt;</ph> events that affect the <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To generate INSERT, UPDATE, or DELETE statements, the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> uses the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt;</ph> property to retrieve a required set of metadata.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> also uses the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.Connection%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommand.Transaction%2A&gt;</ph> properties referenced by the <ph id="ph4">&lt;xref:System.Data.OracleClient.OracleDataAdapter.SelectCommand%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Dispose%2A&gt;</ph>, the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> is disassociated from the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph>, and the generated commands are no longer used.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommandBuilder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> registers itself as a listener for <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleDataAdapter.RowUpdating&gt;</ph> events that are generated by the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> specified in this property.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create a new instance of <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph>, any existing <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> associated with this <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> is released.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommandBuilder"&gt;&lt;/xref&gt;</ph> class with the associated <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> registers itself as a listener for <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleDataAdapter.RowUpdating&gt;</ph> events that are generated by the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> specified in this property.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create a new instance of <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph>, any existing <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> associated with this <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> is released.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;&lt;/xref&gt;</ph> object to associate with this <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleCommandBuilder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Sets or gets the <ph id="ph1">&lt;xref href="System.Data.Common.CatalogLocation"&gt;&lt;/xref&gt;</ph> for an instance of the <ph id="ph2">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.Common.CatalogLocation"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Sets or gets a string used as the catalog separator for an instance of the <ph id="ph1">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A string indicating the catalog separator for use with an instance of the <ph id="ph1">&lt;xref href="System.Data.Common.DbCommandBuilder"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets or sets an <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;&lt;/xref&gt;</ph> object for which this <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleCommandBuilder"&gt;&lt;/xref&gt;</ph> object will generate SQL statements.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> registers itself as a listener for <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleDataAdapter.RowUpdating&gt;</ph> events that are generated by the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> specified in this property.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create a new instance of <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph>, any existing <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder&gt;</ph> associated with this <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> is released.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleDataAdapter"&gt;&lt;/xref&gt;</ph> object that is associated with this <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleCommandBuilder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Retrieves parameter information from the stored procedure specified in the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> and populates the <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleCommand.Parameters"&gt;&lt;/xref&gt;</ph> collection of the specified <ph id="ph3">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.DeriveParameters%2A&gt;</ph> overwrites any existing parameter information for the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.DeriveParameters%2A&gt;</ph> requires an extra call to the database to obtain the information.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the parameter information is known in advance, it is more efficient to populate the parameters collection by setting the information explicitly.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can only use <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.DeriveParameters%2A&gt;</ph> with stored procedures.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot use <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.DeriveParameters%2A&gt;</ph> to populate the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleParameterCollection&gt;</ph> with arbitrary Transact-SQL statements, such as a parameterized SELECT statement.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Configuring Parameters and Parameter Data Types<ept id="p1">](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> referencing the stored procedure from which the parameter information is to be derived.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The derived parameters are added to the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand.Parameters"&gt;&lt;/xref&gt;</ph> collection of the <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The command text is not a valid stored procedure name, or the <ph id="ph1">&lt;xref href="System.Data.CommandType"&gt;&lt;/xref&gt;</ph> specified was not <ph id="ph2">&lt;xref href="System.Data.CommandType.StoredProcedure"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform deletions on the database.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> object to be executed.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand%2A&gt;</ph> as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand%2A&gt;</ph> and modify the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> value, and then explicitly set that on the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SQL statements are first generated when the application calls either <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Generating Commands with CommandBuilders<ept id="p1">](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform deletions.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform deletions on the database.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> object to be executed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand%2A&gt;</ph> as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand%2A&gt;</ph> and modify the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> value, and then explicitly set that on the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SQL statements are first generated when the application calls either <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Passing <ph id="ph1">`true`</ph> for the <ph id="ph2">`useColumnsForParameterNames`</ph> parameter allows you to force the <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> to generate parameters based on the column names instead.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>This succeeds only if the following conditions are met:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt;</ph> has been specified and its length is equal to or greater than the generated parameter name.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generated parameter name meets the criteria specified in the <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt;</ph> regular expression.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt;</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Generating Commands with CommandBuilders<ept id="p1">](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If true, generate parameter names matching column names, if possible.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If false, generate <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform deletions.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform insertions on the database.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> object to be executed.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand%2A&gt;</ph> as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand%2A&gt;</ph> and modify the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> value, and then explicitly set that on the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SQL statements are first generated when the application calls either <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Passing <ph id="ph1">`true`</ph> for the <ph id="ph2">`useColumnsForParameterNames`</ph> parameter allows you to force the <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> to generate parameters based on the column names instead.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>This succeeds only if the following conditions are met:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt;</ph> has been specified and its length is equal to or greater than the generated parameter name.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generated parameter name meets the criteria specified in the <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt;</ph> regular expression.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt;</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Generating Commands with CommandBuilders<ept id="p1">](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If true, generate parameter names matching column names, if possible.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If false, generate <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform insertions.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform insertions on the database.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> object to be executed.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand%2A&gt;</ph> as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand%2A&gt;</ph> and modify the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> value, and then explicitly set that on the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SQL statements are first generated when the application calls either <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Generating Commands with CommandBuilders<ept id="p1">](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform insertions.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform updates on the database.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> object to be executed.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand%2A&gt;</ph> as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand%2A&gt;</ph> and modify the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> value, and then explicitly set that on the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SQL statements are first generated when the application calls either <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Generating Commands with CommandBuilders<ept id="p1">](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform updates.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets the automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform updates on the database.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand%2A&gt;</ph> method for informational or troubleshooting purposes because it returns the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> object to be executed.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand%2A&gt;</ph> as the basis of a modified command.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you might call <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand%2A&gt;</ph> and modify the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand.CommandText%2A&gt;</ph> value, and then explicitly set that on the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SQL statements are first generated when the application calls either <ph id="ph1">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default behavior, when generating parameter names, is to use <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on for the various parameters.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>Passing <ph id="ph1">`true`</ph> for the <ph id="ph2">`useColumnsForParameterNames`</ph> parameter allows you to force the <ph id="ph3">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> to generate parameters based on the column names instead.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>This succeeds only if the following conditions are met:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength&gt;</ph> has been specified and its length is equal to or greater than the generated parameter name.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generated parameter name meets the criteria specified in the <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern&gt;</ph> regular expression.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat&gt;</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Generating Commands with CommandBuilders<ept id="p1">](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If true, generate parameter names matching column names, if possible.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If false, generate <ph id="ph1">@p1</ph>, <ph id="ph2">@p2</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The automatically generated <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleCommand"&gt;&lt;/xref&gt;</ph> object required to perform updates.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The original unquoted identifier.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The quoted version of the identifier.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Embedded quotes within the identifier are properly escaped.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, database servers indicate the schema for a identifier by separating the schema name from the identifier with some character.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, SQL Server uses a colon, creating complete identifiers such as Person:CustomerName, where "Person" is the schema name and "CustomerName" is the identifier.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property allows developers to modify this behavior.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The character to be used as the schema separator.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The identifier that will have its embedded quotes removed.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The unquoted identifier, with embedded quotes properly un-escaped.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>