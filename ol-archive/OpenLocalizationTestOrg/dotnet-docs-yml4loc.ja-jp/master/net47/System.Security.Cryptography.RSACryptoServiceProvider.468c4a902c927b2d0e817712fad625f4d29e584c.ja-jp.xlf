<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8a1b68c8bb277ff52dc6562b1bdc8b0545f2b86</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Security.Cryptography.RSACryptoServiceProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">77ab17f71efd8d0a47f0646562fbed78792b4afe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e947f9053342dfc518e0e9f41394526b00dc44bf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Performs asymmetric encryption and decryption using the implementation of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> algorithm provided by the cryptographic service provider (CSP).</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the default implementation of <ph id="ph1">&lt;xref:System.Security.Cryptography.RSA&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows CSPs enable keys sizes of 384 to 16384 bits for Windows versions prior to <ph id="ph1">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, and key sizes of 512 to 16384 bits for <ph id="ph2">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>CryptGenKey<ept id="p1">](http://msdn.microsoft.com/library/aa379941\(v=vs.85\).aspx)</ept> function in the Windows documentation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Interoperation with the Microsoft Cryptographic API (CAPI)</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the RSA implementation in unmanaged CAPI, the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class reverses the order of an encrypted array of bytes after encryption and before decryption.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, data encrypted by the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class cannot be decrypted by the CAPI <ph id="ph2">`CryptDecrypt`</ph> function and data encrypted by the CAPI <ph id="ph3">`CryptEncrypt`</ph> method cannot be decrypted by the <ph id="ph4">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not compensate for the reverse ordering when interoperating between APIs, the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class throws a <ph id="ph2">&lt;xref:System.Security.Cryptography.CryptographicException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>To interoperate with CAPI, you must manually reverse the order of encrypted bytes before the encrypted data interoperates with another API.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can easily reverse the order of a managed byte array by calling the <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSACryptoServiceProvider"&gt;&lt;/xref&gt;</ph> class using the default key.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no default key is found, a new key is created.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates an <ph id="ph1">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generated key corresponds to a key generated using the <ph id="ph1">`AT_KEYEXCHANGE`</ph> value used in the unmanaged Microsoft Cryptographic API (CAPI).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The cryptographic service provider (CSP) cannot be acquired.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSACryptoServiceProvider"&gt;&lt;/xref&gt;</ph> class with the specified key size.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no default key is found, a new key is created.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates an <ph id="ph1">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generated key corresponds to a key generated using the <ph id="ph1">`AT_KEYEXCHANGE`</ph> value used in the unmanaged Microsoft Cryptographic API (CAPI).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The size of the key to use in bits.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The cryptographic service provider (CSP) cannot be acquired.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSACryptoServiceProvider"&gt;&lt;/xref&gt;</ph> class with the specified parameters.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates or reuses a key container specified using the <ph id="ph1">&lt;xref:System.Security.Cryptography.CspParameters.KeyContainerName&gt;</ph> field of the <ph id="ph2">`parameters`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, this constructor creates an <ph id="ph1">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generated key corresponds to a key generated using the <ph id="ph1">`AT_KEYEXCHANGE`</ph> value used in the unmanaged Microsoft Cryptographic API (CAPI).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create a <ph id="ph1">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> key pair suitable for authenticating (digitally signed) messages or files by setting the <ph id="ph2">&lt;xref:System.Security.Cryptography.CspParameters.KeyNumber&gt;</ph> field of the <ph id="ph3">`parameters`</ph> parameter to the <ph id="ph4">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type of key corresponds to the <ph id="ph1">`AT_SIGNATURE`</ph> value used in CAPI.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object with the <ph id="ph2">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> value specified and then create another <ph id="ph3">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object with the <ph id="ph4">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> value specified, both keys will be placed in a single container if both objects specify the same key container name.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a key that is compatible with stong-name signing using the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class, you must create a <ph id="ph2">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> key pair.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The parameters to be passed to the cryptographic service provider (CSP).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The CSP cannot be acquired.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSACryptoServiceProvider"&gt;&lt;/xref&gt;</ph> class with the specified key size and parameters.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates or reuses a key container specified using the <ph id="ph1">&lt;xref:System.Security.Cryptography.CspParameters.KeyContainerName&gt;</ph> field of the <ph id="ph2">`parameters`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, this constructor creates an <ph id="ph1">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generated key corresponds to a key generated using the <ph id="ph1">`AT_KEYEXCHANGE`</ph> value used in the unmanaged Microsoft Cryptographic API (CAPI).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create a <ph id="ph1">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> key pair suitable for authenticating (digitally signed) messages or files by setting the <ph id="ph2">&lt;xref:System.Security.Cryptography.CspParameters.KeyNumber&gt;</ph> field of the <ph id="ph3">`parameters`</ph> parameter to the <ph id="ph4">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type of key corresponds to the <ph id="ph1">`AT_SIGNATURE`</ph> value used in CAPI.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object with the <ph id="ph2">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> value specified and then create another <ph id="ph3">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object with the <ph id="ph4">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> value specified, both keys will be placed in a single container if both objects specify the same key container name.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a key that is compatible with stong-name signing using the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class, you must create a <ph id="ph2">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> key pair.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The size of the key to use in bits.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The parameters to be passed to the cryptographic service provider (CSP).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The CSP cannot be acquired.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The key cannot be created.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.Cryptography.CspKeyContainerInfo"&gt;&lt;/xref&gt;</ph> object that describes additional information about a cryptographic key pair.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo%2A&gt;</ph> property to retrieve additional information about a cryptographic key pair.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Security.Cryptography.CspKeyContainerInfo&gt;</ph> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>In cases where a random key is generated, a key container will not be created until you call a method that uses the key.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some properties of the <ph id="ph1">&lt;xref:System.Security.Cryptography.CspKeyContainerInfo&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A&gt;</ph> property will throw a <ph id="ph3">&lt;xref:System.Security.Cryptography.CryptographicException&gt;</ph> if a key container has not been created.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>To make sure that a key container has been created, call a method such as <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A&gt;</ph>, and so on, before you call the <ph id="ph5">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Security.Cryptography.CspKeyContainerInfo"&gt;&lt;/xref&gt;</ph> object that describes additional information about a cryptographic key pair.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Decrypts data with the <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> algorithm.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A&gt;</ph> to encrypt data for decryption with this method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The data to be decrypted.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to perform direct <ph id="ph2">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> decryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, <ph id="ph3">`false`</ph> to use PKCS#1 v1.5 padding.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The decrypted data, which is the original plain text before encryption.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The cryptographic service provider (CSP) cannot be acquired.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">fOAEP</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`true`</ph> and the length of the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">rgb</ph><ept id="p2">&lt;/code&gt;</ept> parameter is greater than <ph id="ph4">&lt;xref href="System.Security.Cryptography.RSACryptoServiceProvider.KeySize"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">fOAEP</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`true`</ph> and OAEP is not supported.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The key does not match the encrypted data.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, the exception wording may not be accurate.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, it may say <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Not enough storage is available to process this command</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rgb&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Decrypts data that was previously encrypted with the <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> algorithm by using the specified padding.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`padding`</ph> must be either <ph id="ph2">&lt;xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName&gt;</ph> or <ph id="ph3">&lt;xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The data to decrypt.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The padding.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The decrypted data.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;padding&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The padding mode is not supported.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This method is not supported in the current version.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The data to be decrypted.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The decrypted data, which is the original plain text before encryption.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This method is not supported in the current version.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Encrypts data with the <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> algorithm.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes the padding supported by different versions of Microsoft Windows and the maximum length of <ph id="ph1">`rgb`</ph> allowed by the different combinations of operating systems and padding.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Padding</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Operating System Supported</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Maximum Length of rgb Parameter</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>OAEP padding (PKCS#1 v2)</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows XP or later.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modulus size -2 -2*hLen, where hLen is the size of the hash.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct Encryption (PKCS#1 v1.5)</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Microsoft Windows 2000 or later with the high encryption pack installed.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modulus size - 11.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>(11 bytes is the minimum padding possible.)</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct Encryption and OAEP padding not supported</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Microsoft Windows 98, Windows Millennium Edition, or Windows 2000 or later without the high encryption pack installed.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The maximum size allowed for a symmetric key.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A&gt;</ph> to decrypt the results of this method.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The data to be encrypted.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to perform direct <ph id="ph2">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> encryption using OAEP padding (only available on a computer running Windows XP or later); otherwise, <ph id="ph3">`false`</ph> to use PKCS#1 v1.5 padding.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The encrypted data.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The cryptographic service provider (CSP) cannot be acquired.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The length of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rgb</ph><ept id="p1">&lt;/code&gt;</ept> parameter is greater than the maximum allowed length.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">fOAEP</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`true`</ph> and OAEP padding is not supported.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rgb&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Encrypts data with the <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> algorithm using the specified padding.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`padding`</ph> must be either <ph id="ph2">&lt;xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName&gt;</ph> or <ph id="ph3">&lt;xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The data to encrypt.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The padding.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The encrypted data.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;padding&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The padding mode is not supported.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This method is not supported in the current version.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The data to be encrypted.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The encrypted data.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This method is not supported in the current version.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Exports a blob containing the key information associated with an <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSACryptoServiceProvider"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob%2A&gt;</ph> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to include the private key; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A byte array containing the key information associated with an <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSACryptoServiceProvider"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Exports the <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSAParameters"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to include private parameters; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The parameters for <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The key cannot be exported.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Imports a blob that represents RSA key information.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob%2A&gt;</ph> method initializes the key data of an <ph id="ph2">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A byte array that represents an RSA key blob.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Imports the specified <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSAParameters"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The parameters for <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The cryptographic service provider (CSP) cannot be acquired.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">parameters</ph><ept id="p1">&lt;/code&gt;</ept> parameter has missing fields.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Gets the name of the key exchange algorithm available with this implementation of <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property indicates the name of the algorithm, not of the type.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, RSA-PKCS1-KeyEx is a key exchange algorithm name.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The name of the key exchange algorithm if it exists; otherwise, <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Gets the size of the current key.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows CSPs enable key sizes of 384 to 16384 bits for Windows versions prior to <ph id="ph1">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, and key sizes of 512 to 16384 bits for <ph id="ph2">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>CryptGenKey<ept id="p1">](http://msdn.microsoft.com/library/aa379941\(v=vs.85\).aspx)</ept> function in the Windows documentation.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class does not allow you to change key sizes using the <ph id="ph2">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.KeySize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any value written to this property will fail to update the property without error.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the key size, use one of the constructor overloads.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The size of the key in bits.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to persist a key in a key container.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A&gt;</ph> property is automatically set to <ph id="ph2">`true`</ph> when you specify a key container name in the <ph id="ph3">&lt;xref:System.Security.Cryptography.CspParameters.KeyContainerName&gt;</ph> field of a <ph id="ph4">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> object and use it to initialize an <ph id="ph5">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object by calling one of the constructors with a <ph id="ph6">`parameters`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A&gt;</ph> property has no effect if the <ph id="ph2">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object is created with a <ph id="ph3">`null`</ph> key container name.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the key should be persisted in the CSP; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSACryptoServiceProvider"&gt;&lt;/xref&gt;</ph> object contains only a public key.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class can be initialized either with a public key only or with both a public and private key.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly%2A&gt;</ph> property to determine whether the current instance contains only a public key or both a public and private key.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Security.Cryptography.RSACryptoServiceProvider"&gt;&lt;/xref&gt;</ph> object contains only a public key; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Gets the name of the signature algorithm available with this implementation of <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is used in XML digital signature classes to indicate the algorithm URI.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this implementation, this property always returns http://www.w3.org/2000/09/xmldsig#rsa-sha1.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The name of the signature algorithm.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method creates a digital signature that is verified using the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`halg`</ph> parameter can accept a <ph id="ph2">&lt;xref:System.String&gt;</ph>, a <ph id="ph3">&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;</ph>, or a <ph id="ph4">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The input data for which to compute the hash.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The hash algorithm to use to create the hash value.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> signature for the specified data.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">halg</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">halg</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not a valid type.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Computes the hash value of the specified input stream using the specified hash algorithm, and signs the resulting hash value.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`halg`</ph> parameter can accept a <ph id="ph2">&lt;xref:System.String&gt;</ph>, a <ph id="ph3">&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;</ph>, or a <ph id="ph4">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The input data for which to compute the hash.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The hash algorithm to use to create the hash value.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> signature for the specified data.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">halg</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">halg</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not a valid type.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Computes the hash value of a subset of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method creates a digital signature that is verified using the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`halg`</ph> parameter can accept a <ph id="ph2">&lt;xref:System.String&gt;</ph>, a <ph id="ph3">&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;</ph>, or a <ph id="ph4">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string value can be one of the following:</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The object identifier (OID) friendly name of the hash algorithm to use, either a name registered in the crypto config file or one in the Crypto API OID table.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OID value.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OID must be one recognized by the Crypto API.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you could use SignData(new byte[5], "1.3.14.3.2.26") or SignData(new byte[5], "sha1"), or SignData(new byte[5], "SHA1").</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The input data for which to compute the hash.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The offset into the array from which to begin using data.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The number of bytes in the array to use as data.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The hash algorithm to use to create the hash value.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> signature for the specified data.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">halg</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">halg</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not a valid type.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Computes the signature for the specified hash value by encrypting it with the private key.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method creates a digital signature that is verified using the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>The valid hash algorithms are <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.Cryptography.MD5&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>The algorithm identifier can be derived from the hash name by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The hash value of the data to be signed.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The hash algorithm identifier (OID) used to create the hash value of the data.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> signature for the specified hash value.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rgbHash</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The cryptographic service provider (CSP) cannot be acquired.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>There is no private key.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Computes the signature for the specified hash value by encrypting it with the private key using the specified padding.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The hash value of the data to be signed.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The hash algorithm name used to create the hash value of the data.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The padding.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Security.Cryptography.RSA"&gt;&lt;/xref&gt;</ph> signature for the specified hash value.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or <ph id="ph3">&lt;xref href="System.String.Empty"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hash&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;padding&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;padding&lt;/code&gt;</ph> does not equal <ph id="ph2">&lt;xref href="System.Security.Cryptography.RSASignaturePadding.Pkcs1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property to <ph id="ph1">`true`</ph> is equivalent to passing the <ph id="ph2">&lt;xref:System.Security.Cryptography.CspProviderFlags.UseMachineKeyStore&gt;</ph> flag to a <ph id="ph3">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A&gt;</ph> property applies to all code in the current application domain, whereas the <ph id="ph2">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> object applies only to classes that explicitly reference it.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>These settings are useful when impersonating or running under an account whose user profile is not loaded.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A&gt;</ph> affects the key store location only if <ph id="ph2">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> is initialized with no parameters.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the key should be persisted in the computer key store; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the hash value of the provided data.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method verifies the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSA&gt;</ph> digital signature produced by the <ph id="ph2">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`halg`</ph> parameter can accept a <ph id="ph2">&lt;xref:System.String&gt;</ph>, a <ph id="ph3">&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;</ph>, or a <ph id="ph4">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The data that was signed.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The name of the hash algorithm used to create the hash value of the data.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The signature data to be verified.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the signature is valid; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">halg</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">halg</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not a valid type.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the provided hash value.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method verifies the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSA&gt;</ph> digital signature produced by the <ph id="ph2">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The valid hash algorithms are <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.Cryptography.MD5&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>The algorithm identifier can be derived from the hash name by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The hash value of the signed data.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The hash algorithm identifier (OID) used to create the hash value of the data.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The signature data to be verified.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the signature is valid; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rgbHash</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">rgbSignature</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The cryptographic service provider (CSP) cannot be acquired.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The signature cannot be verified.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Verifies that a digital signature is valid by determining the hash value in the signature using the specified hashing algorithm and padding, and comparing it to the provided hash value.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The hash value of the signed data.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The signature data to be verified.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The hash algorithm name used to create the hash value.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The padding.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the signature is valid; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or <ph id="ph3">&lt;xref href="System.String.Empty"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hash&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;padding&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;padding&lt;/code&gt;</ph> does not equal <ph id="ph2">&lt;xref href="System.Security.Cryptography.RSASignaturePadding.Pkcs1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>