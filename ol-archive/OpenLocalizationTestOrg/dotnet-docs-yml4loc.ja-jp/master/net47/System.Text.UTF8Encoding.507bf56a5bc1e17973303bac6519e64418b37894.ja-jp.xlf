<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9302ba1384f10386568db61ca9e81129eb4822ba</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Text.UTF8Encoding.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">366710abf0eab2bed4f4c02fcdf5d04c1299f368</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a288432387a7bfba4c944eb83dc7df0c3dc71302</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a UTF-8 encoding of Unicode characters.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>UTF-8 is a Unicode encoding that represents each code point as a sequence of one to four bytes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the UTF-16 and UTF-32 encodings, the UTF-8 encoding does not require "endianness"; the encoding scheme is the same regardless of whether the processor is big-endian or little-endian.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> corresponds to the Windows code page 65001.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the UTFs and other encodings supported by <ph id="ph1">&lt;xref:System.Text&gt;</ph>, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM) and whether you want to enable error detection.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists the constructors and the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> property that return a <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>BOM</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Error detection</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>No (Replacement fallback)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>No</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>No (Replacement fallback)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Configurable</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>No (Replacement fallback)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Configurable</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Configurable</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetChars%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.UTF8Encoding.GetString%2A&gt;</ph> methods perform the actual decoding.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetEncoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetDecoder%2A&gt;</ph> properties, respectively.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optionally, the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the beginning of the byte stream that results from the encoding process.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a UTF-8 encoded byte stream is prefaced with a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note, however, that the Unicode Standard neither requires nor recommends a BOM in UTF-8 encoded streams.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on byte order and the byte order mark, see The Unicode Standard at the <bpt id="p1">[</bpt>Unicode home page<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=37123)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the encoder is configured to provide a BOM, you can retrieve it by calling the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetPreamble%2A&gt;</ph> method; otherwise, the method returns an empty array.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that, even if a <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> class do not do this automatically.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable error detection and to make the class instance more secure, you should call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29&gt;</ph> constructor and set the <ph id="ph2">`throwOnInvalidBytes`</ph> parameter to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection enabled, a method that detects an invalid sequence of characters or bytes throws an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The state of a UTF-8 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.UTF8Encoding"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates an instance that does not provide a Unicode byte order mark and does not throw an exception when an invalid encoding is detected.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For security reasons, we recommend that you enable error detection by calling a constructor with a <ph id="ph1">`throwOnInvalidBytes`</ph> parameter and setting its value to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.UTF8Encoding"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A parameter specifies whether to provide a Unicode byte order mark.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>For security reasons, you should enable error detection by calling a constructor that includes a <ph id="ph1">`throwOnInvalidBytes`</ph> parameter and setting its value to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`encoderShouldEmitUTF8Identifier`</ph> parameter controls the operation of the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetPreamble%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`true`</ph>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`false`</ph>, it returns a zero-length byte array.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, setting <ph id="ph1">`encoderShouldEmitUTF8Identifier`</ph> to <ph id="ph2">`true`</ph> does not cause the <ph id="ph3">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> method to prefix the BOM at the beginning of the byte array, nor does it cause the <ph id="ph4">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method to include the number of bytes in the BOM in the byte count.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to specify that the <ph id="ph2">&lt;xref href="System.Text.UTF8Encoding.GetPreamble"&gt;&lt;/xref&gt;</ph> method returns a Unicode byte order mark; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.UTF8Encoding"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`encoderShouldEmitUTF8Identifier`</ph> parameter controls the operation of the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetPreamble%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`true`</ph>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-8 format.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`false`</ph>, it returns a zero-length byte array.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, setting <ph id="ph1">`encoderShouldEmitUTF8Identifier`</ph> to <ph id="ph2">`true`</ph> does not cause the <ph id="ph3">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> method to prefix the BOM at the beginning of the byte array, nor does it cause the <ph id="ph4">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method to include the number of bytes in the BOM in the byte count.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`throwOnInvalidBytes`</ph> is <ph id="ph2">`true`</ph>, a method that detects an invalid byte sequence throws an <ph id="ph3">&lt;xref:System.ArgumentException?displayProperty=fullName&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>For security reasons, you should enable error detection by calling a constructor that includes a <ph id="ph1">`throwOnInvalidBytes`</ph> parameter and setting that parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to specify that the <ph id="ph2">&lt;xref href="System.Text.UTF8Encoding.GetPreamble"&gt;&lt;/xref&gt;</ph> method should return a Unicode byte order mark; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to throw an exception when an invalid encoding is detected; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Determines whether the specified object is equal to the current <ph id="ph1">&lt;xref href="System.Text.UTF8Encoding"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> objects are considered equal if all of the following conditions are true:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both objects provide the byte order mark, or both do not.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both objects use the same encoder fallback.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both objects use the same decoder fallback.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The object to compare with the current instance.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> is an instance of <ph id="ph3">&lt;xref href="System.Text.UTF8Encoding"&gt;&lt;/xref&gt;</ph> and is equal to the current object; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Calculates the number of bytes produced by encoding the characters in the specified <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> containing the set of characters to encode.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The number of bytes produced by encoding the specified characters.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Error detection is enabled, and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept> contains an invalid sequence of characters.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.EncoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> method to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A pointer to the first character to encode.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The number of characters to encode.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The number of bytes produced by encoding the specified characters.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Error detection is enabled, and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept> contains an invalid sequence of characters.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for a complete explanation)</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.EncoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the uses <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The character array containing the set of characters to encode.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The index of the first character to encode.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The number of characters to encode.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The number of bytes produced by encoding the specified characters.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;code&gt;chars&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Error detection is enabled, and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept> contains an invalid sequence of characters.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Text.Encoding.EncoderFallback"&gt;&lt;/xref&gt;</ph> property is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Text.UTF8Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UTF8Encoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A pointer to the first character to encode.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The number of characters to encode.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A pointer to the location at which to start writing the resulting sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The actual number of bytes written at the location indicated by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Error detection is enabled, and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept> contains an invalid sequence of characters.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than the resulting number of bytes.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.EncoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Encodes a set of characters from the specified character array into the specified byte array.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.UTF8Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UTF8Encoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The character array containing the set of characters to encode.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The index of the first character to encode.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The number of characters to encode.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The byte array to contain the resulting sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The index at which to start writing the resulting sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The actual number of bytes written into <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charIndex&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charIndex&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;charCount&lt;/code&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;code&gt;chars&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is not a valid index in <ph id="ph2">&lt;code&gt;bytes&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Error detection is enabled, and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept> contains an invalid sequence of characters.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;code&gt;byteIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting bytes.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.EncoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Encodes a set of characters from the specified <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> into the specified byte array.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.UTF8Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UTF8Encoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> containing the set of characters to encode.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The index of the first character to encode.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The number of characters to encode.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The byte array to contain the resulting sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The index at which to start writing the resulting sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The actual number of bytes written into <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charIndex&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charIndex&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;charCount&lt;/code&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;code&gt;chars&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is not a valid index in <ph id="ph2">&lt;code&gt;bytes&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Error detection is enabled, and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">s</ph><ept id="p1">&lt;/code&gt;</ept> contains an invalid sequence of characters.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;code&gt;byteIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting bytes.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.EncoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetChars%2A&gt;</ph> to store the resulting characters, call the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The byte array containing the sequence of bytes to decode.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The index of the first byte to decode.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The number of bytes to decode.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The number of characters produced by decoding the specified sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;code&gt;bytes&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Error detection is enabled, and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> contains an invalid sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.DecoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.DecoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetChars%2A&gt;</ph> to store the resulting characters, call the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>A pointer to the first byte to decode.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The number of bytes to decode.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The number of characters produced by decoding the specified sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Error detection is enabled, and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> contains an invalid sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.DecoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.DecoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetChars%2A&gt;</ph> to store the resulting characters, call the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can remove it by calling the <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id="ph3">&lt;xref:System.Text.UTF8Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UTF8Encoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>A pointer to the first byte to decode.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The number of bytes to decode.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A pointer to the location at which to start writing the resulting set of characters.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The maximum number of characters to write.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The actual number of characters written at the location indicated by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;byteCount&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Error detection is enabled, and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> contains an invalid sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than the resulting number of characters.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.DecoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.DecoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Decodes a sequence of bytes from the specified byte array into the specified character array.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetChars%2A&gt;</ph> to store the resulting characters, call the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can remove it by calling the <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.UTF8Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UTF8Encoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The byte array containing the sequence of bytes to decode.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The index of the first byte to decode.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The number of bytes to decode.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The character array to contain the resulting set of characters.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The index at which to start writing the resulting set of characters.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The actual number of characters written into <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;byteIndex&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;byteCount&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;charIndex&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;byteindex&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;byteCount&lt;/code&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;code&gt;bytes&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charIndex&lt;/code&gt;</ph> is not a valid index in <ph id="ph2">&lt;code&gt;chars&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Error detection is enabled, and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> contains an invalid sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;code&gt;charIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting characters.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.DecoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.DecoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName&gt;</ph> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetChars%2A&gt;</ph> method of this class.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, a <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> maintains state information between calls so it can correctly decode byte sequences that span blocks.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetDecoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>If error detection is enabled, that is, the <ph id="ph1">`throwOnInvalidCharacters`</ph> parameter of the constructor is set to <ph id="ph2">`true`</ph>, error detection is also enabled in the <ph id="ph3">&lt;xref:System.Text.Decoder&gt;</ph> returned by this method.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName&gt;</ph> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, a <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> maintains state information between calls so it can correctly encode character sequences that span blocks.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetDecoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>If error detection is enabled, that is, the <ph id="ph1">`throwOnInvalidCharacters`</ph> parameter of the constructor is set to <ph id="ph2">`true`</ph>, error detection is also enabled in the <ph id="ph3">&lt;xref:System.Text.Encoder&gt;</ph> returned by this method.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Text.Encoder"&gt;&lt;/xref&gt;</ph> that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Returns the hash code for the current instance.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The hash code for the current instance.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Calculates the maximum number of bytes produced by encoding the specified number of characters.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> is a worst-case number, including the worst case for the currently selected <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a fallback is chosen with a potentially large string, <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> can return large values.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, this method returns reasonable numbers for small strings.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might also want to consider a different approach using <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, text in English and many other languages often needs only one UTF-8 byte to represent a character, but the number returned by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> has to allow for the possibility that the string to be converted will consist entirely of characters that each require four bytes.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph> has no relation to <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetChars%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application needs a similar function to use with <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetChars%2A&gt;</ph>, it should use <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1"> `GetMaxByteCount(N)`</ph> is not necessarily the same value as <ph id="ph2">`N* GetMaxByteCount(1)`</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The number of characters to encode.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes produced by encoding the specified number of characters.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.EncoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Calculates the maximum number of characters produced by decoding the specified number of bytes.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetChars%2A&gt;</ph> to store the resulting characters, you call the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> is a worst-case number, including the worst case for the currently selected <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a fallback is chosen with a potentially large string, <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> can return large values.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, this method returns reasonable numbers for small strings.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might also want to consider a different approach using <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetCharCount%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetMaxCharCount%2A&gt;</ph> has no relation to <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application needs a similar function to use with <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph>, it should use <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetMaxByteCount%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1"> `GetMaxCharCount(N)`</ph> is not necessarily the same value as <ph id="ph2">`N* GetMaxCharCount(1)`</ph>.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The number of bytes to decode.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The maximum number of characters produced by decoding the specified number of bytes.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.DecoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.DecoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Returns a Unicode byte order mark encoded in UTF-8 format, if the <ph id="ph1">&lt;xref href="System.Text.UTF8Encoding"&gt;&lt;/xref&gt;</ph> encoding object is configured to supply one.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes that result from the encoding process.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Unicode byte order mark (BOM) is serialized as 0xEF 0xBB 0xBF.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the Unicode Standard neither requires nor recommends the use of a BOM for UTF-8 encoded streams.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object whose <ph id="ph2">&lt;xref:System.Text.UTF8Encoding.GetPreamble%2A&gt;</ph> method returns a valid BOM in the following ways:</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Text.Encoding.UTF8%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling a <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> constructor with a <ph id="ph2">`encoderShouldEmitUTF8Identifier`</ph> parameter and setting its value set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>All other <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> objects are configured to return an empty array rather than a valid BOM.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>The BOM provide nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>Often user problems might be avoided if data is consistently and properly tagged.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>For standards that provide an encoding type, a BOM is somewhat redundant.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it can be used to help a server send the correct encoding header.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are some disadvantages to using a BOM.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, knowing how to limit the database fields that use a BOM can be difficult.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>In spite of the few disadvantages, however, the use of a BOM is highly recommended.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on byte order and the byte order mark, see The Unicode Standard at the <bpt id="p1">[</bpt>Unicode home page<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=37123)</ept>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix the beginning of a stream of encoded bytes with a preamble.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetBytes%2A&gt;</ph> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>A byte array containing the Unicode byte order mark, if the <ph id="ph1">&lt;xref href="System.Text.UTF8Encoding"&gt;&lt;/xref&gt;</ph> encoding object is configured to supply one.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Otherwise, this method returns a zero-length byte array.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Decodes a range of bytes from a byte array into a string.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>With error detection, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can remove it by calling the <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.UTF8Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UTF8Encoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The byte array containing the sequence of bytes to decode.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The index of the first byte to decode.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The number of bytes to decode.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> containing the results of decoding the specified sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;code&gt;bytes&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Error detection is enabled, and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> contains an invalid sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoding.DecoderFallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.DecoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>