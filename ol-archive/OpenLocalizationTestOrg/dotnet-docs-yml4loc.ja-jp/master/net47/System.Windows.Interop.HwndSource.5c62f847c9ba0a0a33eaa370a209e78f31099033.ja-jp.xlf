<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c91abcf492e3f5d8f6321e491b699dccf296bcc5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Interop.HwndSource.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbeba6724aa479dbff513d394cfef4daf56ab5da</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">193b9d38d13871eefadaa276e4f05d27c5a09704</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Presents Windows Presentation Foundation (WPF) content in a Win32 window.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many members of this class are unavailable in the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> implements a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> window that can contain <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> content in the window is arranged, measured, and rendered; and is interactive to input.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> is specifically designed to interoperate with <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>, this class exposes several low-level <ph id="ph3">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> features.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this class to do the following:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify window styles, window class styles, and extended window styles.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hook the window procedure.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Provide access to the window handle (HWND).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Destroy the window.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> class is designed for general interoperability and is not designed as a managed HWND wrapper.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, it does not provide managed methods for manipulating the window or properties for inspecting its state.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> class provides access to the <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> window handle (HWND) through the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt;</ph> property, which can be passed by means of PInvoke techniques to <ph id="ph4">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph5">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in order to manipulate the window.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Construction<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many aspects of the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> can only be specified at construction time.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>, first create an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> structure and populate it with the desired parameters.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>These parameters include the following:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The class, window, and extended window styles.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use PInvoke to change the styles after the window is created.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all styles can be changed after the window is created.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consult the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> documentation before changing window styles.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial position of the window.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial size of the window, which includes whether the size is specified or should be determined from the determined size of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parent window.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceHook&gt;</ph> to include in the window procedure chain.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a hook at construction time, it receives all messages for the window.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> to add a hook after the window is created.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The transparency settings.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>A top-level window can be configured to blend with the other windows on the desktop according to the per-pixel transparency of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable this, set the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity%2A&gt;</ph> property in the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can only be specified at construction time, and only through the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;</ph> constructor signature, and it imposes several limitations.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you populate the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> structure, pass it to the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;</ph> constructor for the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Object Lifetime<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> is a regular <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> object, and its lifetime is managed by the garbage collector.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> represents an unmanaged resource, <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> implements <ph id="ph3">&lt;xref:System.IDisposable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Synchronously calling <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> immediately destroys the <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> window if called from the owner thread.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If called from another thread, the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> window is destroyed asynchronously.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> explicitly from the interoperating code might be necessary for certain interoperation scenarios.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Window Procedures<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> class implements its own window procedure.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>This window procedure is used to process important window messages, such as those related to layout, rendering, and input.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can also hook the window procedure for your own use.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify your own hook during construction by setting the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters.HwndSourceHook%2A?displayProperty=fullName&gt;</ph> property, or you can also use <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.RemoveHook%2A&gt;</ph> to add and remove hooks after the window is created.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The hooks are called by last-in first-out order, which enables your hooks to execute before the built-in processing.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The actual hooks are held by a weak reference.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, make sure that you manage the lifetime of your hook delegate.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> and other interoperation classes, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice how the constructors for <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> take parameters that resemble the parameters for <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> functions such as <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=98462)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scale transformations should not be applied to the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> of an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph> class by using a structure that contains the initial settings.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not available in the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor signature might be more convenient in certain situations, because the default structure contains some appropriate initial default values.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this signature, do not use the default <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> constructor to construct the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> structure for the <ph id="ph3">`parameters`</ph> value.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> constructor that enables you to specify an initial window name.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the default <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> constructor and create an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> with it, that <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> does not display because an initial window name is a construction requirement for the represented HWND.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A structure that contains the parameters that are required to create the window.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph> class with a specified class style, style, extended style, x-y position, name, and parent window.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not available in the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> class styles for the window.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The extended <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The position of the window's left edge.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The position of the window's upper edge.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The name of the window.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The handle of the window's parent window.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph> class with a specified class style, style, extended style, x-y position, width, height, name, and parent window.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not available in the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> class styles for the window.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The extended <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The position of the window's left edge.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The position of the window's upper edge.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The width of the window.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The height of the window.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The name of the window.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The handle of the window's parent window.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph> class with a specified class style, style, extended style, x-y position, width, height, name, and parent window, and by specifying whether the window is autosized.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not available in the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> class styles for the window.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The extended <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The position of the window's left edge.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The position of the window's upper edge.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The width of the window.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The height of the window.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The name of the window.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The handle of the window's parent window.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to have the layout manager include the non-client area for sizing; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Gets the value that determines whether to acquire Win32 focus for the WPF containing window for this <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is set when you create the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> by setting the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters.AcquireHwndFocusInMenuMode%2A&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value is determined by the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.DefaultAcquireHwndFocusInMenuMode%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to acquire Win32 focus for the WPF containing window when the user interacts with menus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Adds an event handler that receives all window messages.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not available in the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> messages that reach the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> have an approximate <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> equivalent.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> to handle the cases where the message has no <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> equivalent.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceHook&gt;</ph> delegate resembles the parameter profile of a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> main window procedure.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>All window messages that the main window procedure of the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> parent window receives are also forwarded to the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceHook&gt;</ph> delegates.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hooks are called in the order that they were added.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If any hook returns <ph id="ph1">`handled`</ph><ph id="ph2">=</ph><ph id="ph3">`true`</ph> for a message, the hooks after it in the call order are not called for that message.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The handler implementation (based on the <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSourceHook"&gt;&lt;/xref&gt;</ph> delegate) that receives the window messages.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Occurs when layout causes the <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph> to automatically resize.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The native behavior of <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> is to automatically resize content and the window region based on changes reported through the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> layout system.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The window does not resize if it is currently minimized or if <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Gets a sequence of registered input sinks.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>An enumeration of keyboard input sinks.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Gets the visual manager for the hosted window.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.GetCompositionTargetCore%2A&gt;</ph> in order to override the value that <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.CompositionTarget%2A&gt;</ph> returns.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The visual manager.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Gets the window handle for the <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The window handle is packaged as part of a <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.HandleRef"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the handle that is obtained from <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.CreateHandleRef%2A&gt;</ph> to reference the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> from <ph id="ph3">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> code.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the handle for operations such as message handling and window behavior.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get just the handle, use <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A structure that contains the window handle for this <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Gets or sets the default <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource.AcquireHwndFocusInMenuMode"&gt;&lt;/xref&gt;</ph> value for new instances of <ph id="ph2">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>New instances of <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> have <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.AcquireHwndFocusInMenuMode%2A&gt;</ph> set to this default value, unless a different value is passed as a parameter to the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> constructor for a specific instance, by using the <ph id="ph4">&lt;xref:System.Windows.Interop.HwndSourceParameters.AcquireHwndFocusInMenuMode%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to acquire Win32 focus for the WPF containing window when the user interacts with menus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Releases all managed resources that are used by the <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph>, and raises the <ph id="ph2">&lt;xref href="System.Windows.Interop.HwndSource.Disposed"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not available in the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> initiates related cleanup work for the HWND.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> is called through a thread that is different from the main UI thread, the cleanup work may be deferred until it can be posted to the main UI thread.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> explicitly from the interoperating code might be necessary for certain interoperation scenarios, because an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> in some interoperation scenarios can generate several references to it across the interoperation boundaries that might prevent timely garbage collection.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource.Dispose"&gt;&lt;/xref&gt;</ph> method is called on this object.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> event is raised before any resources are released by the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> event indicates that the object that raises the event is about to have all references to it removed.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.IsDisposed%2A&gt;</ph> property to avoid calling <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> twice (which raises an exception).</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Occurs when the DPI of the monitor of this Hwnd has changed, or the Hwnd is moved to a monitor with a different DPI.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph> object of the specified window.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not available in the Internet security zone, or for partial trust in general.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to return an <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> for a window that is not explicitly an interoperation window.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The procedure for this is:</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create a <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> instance (providing the main <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> as a constructor parameter).</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get the value of the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> property from that <ph id="ph2">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass that HWND value as a parameter to <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.FromHwnd%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>This technique can be useful if you then want to add general <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> message processing to the window.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, whenever you create an <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>, you are also responsible for destroying it.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is true even if the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object for an application <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> is disposed.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see Remarks on <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The provided window handle.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph> object for the window that is specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">hwnd</ph><ept id="p1">&lt;/code&gt;</ept> window handle.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Gets the visual target of the window.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns the same result as <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.CompositionTarget%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Returns the visual target of the window.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Gets the window handle for this <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is not available in the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The window handle.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the sink or one of its contained components has focus.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the sink or one of its contained components has focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource.Dispose"&gt;&lt;/xref&gt;</ph> has been called on this <ph id="ph2">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> initiates related cleanup work for the HWND.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> is called through a thread that is different from the main UI thread, the cleanup work may be deferred until it can be posted to the main UI thread.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> event is raised and the value of <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.IsDisposed%2A&gt;</ph> becomes <ph id="ph3">`false`</ph> as soon as <ph id="ph4">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>During this time, if you call <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> again, <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> raises an exception.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the object has had <ph id="ph2">&lt;xref href="System.Windows.Interop.HwndSource.Dispose"&gt;&lt;/xref&gt;</ph> called on it; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Gets or sets a reference to the component's container's <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSite"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A reference to the container's <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSite"&gt;&lt;/xref&gt;</ph> interface; or <ph id="ph2">`null`</ph> if no site is assigned.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Called when the DPI is going to change for the window.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user handles this event,         WPF does not scale any visuals.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method accesses critical data <ph id="ph1">&lt;xref:System.Windows.Interop.HwndTarget&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The event arguments</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Called when one of the mnemonics (access keys) for this sink is invoked.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The message for the mnemonic and associated data.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Modifier keys.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was handled; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;msg&lt;/code&gt;</ph> is not WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, or WM_DEADCHAR.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Registers the <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink"&gt;&lt;/xref&gt;</ph> interface of a contained component.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink"&gt;&lt;/xref&gt;</ph> sink of the contained component.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSite"&gt;&lt;/xref&gt;</ph> site of the contained component.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Removes the event handlers that were added by <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not available in the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The event handler to remove.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Input.RestoreFocusMode"&gt;&lt;/xref&gt;</ph> for the window.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be set only in the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29?displayProperty=fullName&gt;</ph> constructor by using the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters.RestoreFocusMode%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.RestoreFocusMode"&gt;&lt;/xref&gt;</ph> for the window.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Media.CompositionTarget.RootVisual"&gt;&lt;/xref&gt;</ph> of the window.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to connect a <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> or another root visual to the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scale transformations should not be applied to the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> of an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> because this can disable <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.SizeToContent%2A&gt;</ph> behavior.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content will scale, but the enclosing window will not.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of applying the transformation to the object that is the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>, apply the transformation to an object that is a child element of the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might need to add an extra enclosing element to the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> content, such as a panel, in order to provide a scaleable object.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> as the root visual, but only as a top-level window (with WS_OVERLAPPED), not as a child window.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The root visual object of the window.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Get or sets whether and how the window is sized to its content.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>End users might indirectly set this property through application UI, if that functionality is exposed by the application.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scale transformations should not be applied to the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> of an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>, because this can disable <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.SizeToContent%2A&gt;</ph> behavior.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>One of the enumeration values.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.Windows.SizeToContent.Manual"&gt;&lt;/xref&gt;</ph>, which specifies that the window is not sized to its content.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource.SizeToContent"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.SizeToContentChanged&gt;</ph> event is only raised when user interaction causes the change.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> in code, the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.SizeToContentChanged&gt;</ph> event is not raised.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Sets focus on either the first tab stop or the last tab stop of the sink.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Specifies whether focus should be set to the first or the last tab stop.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the focus has been set as requested; <ph id="ph2">`false`</ph>, if there are no tab stops.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;request&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Processes keyboard input at the key-down message level.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The message and associated data.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Do not modify this structure.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>It is passed by reference for performance reasons only.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Modifier keys.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was handled by the method implementation; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before the <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)"&gt;&lt;/xref&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The message and associated data.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Do not modify this structure.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>It is passed by reference for performance reasons only.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Modifier keys.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was processed and <ph id="ph2">&lt;xref href="System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)"&gt;&lt;/xref&gt;</ph> should not be called; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Gets a value that declares whether the per-pixel opacity of the source window content is respected.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you enable per-pixel opacity, the system no longer draws the non-client area.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because the intended purpose of <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.UsesPerPixelOpacity%2A&gt;</ph> is to show non-rectangular top-level UI that works in interoperation scenarios.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, showing the rectangular non-client area defeats that purpose.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the system uses per-pixel opacity; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#Remove(System.Object)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the sink or one of its contained components has focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A reference to the container's <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSite"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The message for the mnemonic and associated data.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Do not modify this message structure.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>It is passed by reference for performance reasons only.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Modifier keys.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was handled; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink"&gt;&lt;/xref&gt;</ph> sink of the contained component.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSite"&gt;&lt;/xref&gt;</ph> site of the contained component.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Specifies whether focus should be set to the first or the last tab stop.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the focus has been set as requested; <ph id="ph2">`false`</ph>, if there are no tab stops.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The message and associated data.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Do not modify this structure.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>It is passed by reference for performance reasons only.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Modifier keys.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was handled by the method implementation; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The message and associated data.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Do not modify this structure.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>It is passed by reference for performance reasons only.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Modifier keys.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was processed and <ph id="ph2">&lt;xref href="System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)"&gt;&lt;/xref&gt;</ph> should not be called; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>