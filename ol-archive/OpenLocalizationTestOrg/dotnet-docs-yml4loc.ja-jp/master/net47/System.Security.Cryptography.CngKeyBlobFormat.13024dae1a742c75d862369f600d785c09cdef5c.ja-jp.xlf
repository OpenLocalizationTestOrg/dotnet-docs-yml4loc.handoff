<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">800236becfc38539fee99bc62b43876346fe1cd7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Security.Cryptography.CngKeyBlobFormat.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79a8a1b02fdf85e452c39650ace4642cd1dbac13</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e6788df3adfd47da760f1d073eef7f1c98e5536</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies a key BLOB format for use with Microsoft Cryptography Next Generation (CNG) objects.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.CngKeyBlobFormat&gt;</ph> class is a utility class.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It consists of static properties, comparison methods, and a private, internally maintained string that specifies the key BLOB format name.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The static properties return <ph id="ph1">&lt;xref:System.Security.Cryptography.CngKeyBlobFormat&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each object's internal string name is initialized to the key BLOB format name that corresponds to the name of the static property.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use this class to create objects for key BLOB formats that are not covered by the static properties.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Several CNG classes (such as <ph id="ph1">&lt;xref:System.Security.Cryptography.CngKey&gt;</ph>) accept <ph id="ph2">&lt;xref:System.Security.Cryptography.CngKeyBlobFormat&gt;</ph> objects through a <ph id="ph3">`format`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the class receives the <ph id="ph1">&lt;xref:System.Security.Cryptography.CngKeyBlobFormat&gt;</ph> object, it retrieves the embedded name of the key BLOB format by calling the object's <ph id="ph2">&lt;xref:System.Security.Cryptography.CngKeyBlobFormat.Format%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Security.Cryptography.CngKeyBlobFormat&gt;</ph> serves as an enumeration of well-known key BLOB formats.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>It lets you identify a well-known key BLOB format by using a strongly typed value instead of a string.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> class by using the specified format.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The primary purpose of this constructor is to provide a method for creating <ph id="ph1">&lt;xref:System.Security.Cryptography.CngKeyBlobFormat&gt;</ph> objects for format types that are not represented by the static properties of the <ph id="ph2">&lt;xref:System.Security.Cryptography.CngKeyBlobFormat&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This capacity allows future <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> releases, service packs, and third-party developers to add new key BLOB formats, which can be accessed just like the key BLOB formats that are currently available.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The key BLOB format to initialize.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">format</ph><ept id="p1">&lt;/code&gt;</ept> parameter length is 0 (zero).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object that specifies a private key BLOB for an elliptic curve cryptography (ECC) key which contains explicit curve parameters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An object describing a private key BLOB.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object that specifies a public key BLOB for an elliptic curve cryptography (ECC) key which contains explicit curve parameters.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An object describing a public key BLOB.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object that specifies a private key BLOB for an elliptic curve cryptography (ECC) key.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ECC private key BLOB format contains both the public and private portions of an ECC key.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An object that specifies an ECC private key BLOB.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object that specifies a public key BLOB for an elliptic curve cryptography (ECC) key.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ECC public key BLOB format contains only the public portion of an ECC key.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An object that specifies an ECC public key BLOB.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Compares the specified object to the current <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An object to be compared to the current <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter is a <ph id="ph3">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object that specifies the same key BLOB format as the current object; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Compares the specified <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object to the current <ph id="ph2">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An object to be compared to the current <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">other</ph><ept id="p1">&lt;/code&gt;</ept> parameter specifies the same key BLOB format as the current object; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets the name of the key BLOB format that the current <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object specifies.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The embedded key BLOB format name.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object that specifies a generic private key BLOB.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>A generic private key BLOB can contain a private key of any type and does not necessarily contain the corresponding public key.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of key that the BLOB contains can be determined only by examining the BLOB.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An object that specifies a generic private key BLOB.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object that specifies a generic public key BLOB.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>A generic public key BLOB can contain a public key of any type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of public key that the BLOB contains can be determined only by examining the BLOB.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An object that specifies a generic public key BLOB.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Generates a hash value for the embedded key BLOB format in the current <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The hash value of the embedded key BLOB format.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Determines whether two <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> objects specify the same key BLOB format.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An object that specifies a key BLOB format.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A second object, to be compared to the object identified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two objects specify the same key BLOB format; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Determines whether two <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> objects do not specify the same key BLOB format.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An object that specifies a key BLOB format.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A second object, to be compared to the object identified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">left</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two objects do not specify the same key BLOB format; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object that specifies an opaque transport key BLOB.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The format of an opaque transport key BLOB is determined by, and associated with, each key storage provider.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Importing and exporting a key in opaque transport format requires using the same key storage provider for both operations.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An object that specifies an opaque transport key BLOB.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object that specifies a Private Key Information Syntax Standard (PKCS #8) key BLOB.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>A PKCS #8 private key BLOB contains both private and public key material in PKCS #8 format.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An object that specifies a PKCS #8 private key BLOB.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets the name of the key BLOB format that the current <ph id="ph1">&lt;xref href="System.Security.Cryptography.CngKeyBlobFormat"&gt;&lt;/xref&gt;</ph> object specifies.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The embedded key BLOB format name.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>