<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a28d30ca96718606112bacba7d616c4704a218b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.CompilerServices.ConditionalWeakTable-2.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86755a2941e773b68420dd33ff7c2307ad9ba76a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">008e350916a46b5622df6bf0559e3cb1698c587f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enables compilers to dynamically attach object fields to managed objects.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class enables language compilers to attach arbitrary properties to managed objects at run time.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The object's keys are the individual instances of the <ph id="ph1">`TKey`</ph> class to which the property is attached, and its values are the property values that are assigned to the corresponding objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Keys must be unique; in other words, the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class supports one attached value per managed object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two keys are equal if passing them to the <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot control equality comparisons by overriding <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;</ph> to explicitly set the hash code for a key.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class does not use the <ph id="ph2">&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;</ph> method to compute hash codes, and therefore does not invoke <ph id="ph3">&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;</ph> overrides.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class differs from a dictionary in several ways:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not persist keys.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, a key is not kept alive only because it is a member of the collection.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not include all the methods (such as <ph id="ph1">`GetEnumerator`</ph> or <ph id="ph2">`Contains`</ph>) that a dictionary typically has.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class differs from other collection objects in its management of the object lifetime of keys stored in the collection.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> automatically removes the key/value entry as soon as no other references to a key exist outside the table.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example provides an illustration.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The reference type to which the field is attached.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The field's type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This must be a reference type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.CompilerServices.ConditionalWeakTable`2"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A&gt;</ph> constructor instantiates an empty <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table; that is, the table contains no key/value pairs.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add key/value pairs by calling the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> object must be unique.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method returns <ph id="ph2">`true`</ph>).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Adds a key to the table.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> object must be unique.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method returns <ph id="ph2">`true`</ph>).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The key to add.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept> represents the object to which the property is attached.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The key's property value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> already exists.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;xref href="System.Runtime.CompilerServices.ConditionalWeakTable`2"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The garbage collector calls <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A&gt;</ph> when the current object is ready to be finalized.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Atomically searches for a specified key in the table and returns the corresponding value.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`key`</ph> does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the <ph id="ph2">`TValue`</ph> generic type parameter.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`TValue`</ph> class has no default constructor, a <ph id="ph2">&lt;xref:System.MissingMethodException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the recommended method of retrieving an existing value or adding a new value to the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table if the class of the table's value defines a default constructor.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it does not define a default constructor, you can instead call the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> method, which relies on a callback-provided method to instantiate the object representing the table's value</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The key to search for.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept> represents the object to which the property is attached.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The value that corresponds to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept>, if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">key</ph><ept id="p2">&lt;/code&gt;</ept> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">TValue</ph><ept id="p3">&lt;/code&gt;</ept> generic type parameter.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;xref href="System.MissingMemberException"&gt;&lt;/xref&gt;</ph>, instead.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The class that represents the table's value does not define a default constructor.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Atomically searches for a specified key in the table and returns the corresponding value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`key`</ph> does not exist in the table, <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> invokes the method that is defined by the <ph id="ph3">`createValueCallback`</ph> parameter and passes it the key.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>A new value is bound to the key in the table and returned as a result.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method only when the class that represents the table's value does not define a default constructor.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it does define a default constructor, use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple threads try to create the same key, <ph id="ph1">`createValueCallback`</ph> may be invoked multiple times with the same key.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one of these calls will succeed, and its returned value will be added to the table.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Which thread succeeds in creating the value is indeterminate.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>This rule permits the table to invoke <ph id="ph1">`createValueCallback`</ph> outside the internal table lock to prevent deadlocks.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The key to search for.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept> represents the object to which the property is attached.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A delegate to a method that can create a value for the given <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It has a single parameter of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TKey</ph><ept id="p1">&lt;/code&gt;</ept>, and returns a value of type <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">TValue</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The value attached to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept>, if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">key</ph><ept id="p2">&lt;/code&gt;</ept> already exists in the table; otherwise, the new value returned by the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">createValueCallback</ph><ept id="p3">&lt;/code&gt;</ept> delegate.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;createValueCallback&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Removes a key and its value from the table.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The key to remove.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the key is found and removed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Gets the value of the specified key.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the key is garbage-collected during this operation, the method may return <ph id="ph1">`false`</ph> and set <ph id="ph2">`value`</ph> to the default value (as if the key were not present).</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The key that represents an object with an attached property.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the attached property value.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept> is not found, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p2">&lt;/code&gt;</ept> contains the default value.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">key</ph><ept id="p1">&lt;/code&gt;</ept> is found; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>