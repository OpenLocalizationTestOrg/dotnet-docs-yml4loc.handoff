<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">157e434a379511203bcb442ba4e2480ea4637992</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Reflection.CallingConventions.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">296b23215b9e4f57c8d7872b5d8e1f8ca840560f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e601c692d8fca7ba076f2adcff46289d7c5c7788</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the valid calling conventions for a method.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The native calling convention is the set of rules governing the order and layout of arguments passed to compiled methods.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also governs how to pass the return value, what registers to use for arguments, and whether the called or the calling method removes arguments from the stack.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Specifies that either the <ph id="ph1">`Standard`</ph> or the <ph id="ph2">`VarArgs`</ph> calling convention may be used.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`ExplicitThis`</ph> is set, <ph id="ph2">`HasThis`</ph> must also be set.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The first argument passed to the called method is still a <ph id="ph1">`this`</ph> pointer, but the type of the first argument is now unknown.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Therefore, a token that describes the type (or class) of the <ph id="ph1">`this`</ph> pointer is explicitly stored into its metadata signature.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Specifies an instance or virtual method (not a static method).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>At run-time, the called method is passed a pointer to the target object as its first argument (the <ph id="ph1">`this`</ph> pointer).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Specifies the default calling convention as determined by the common language runtime.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use this calling convention for static methods.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For instance or virtual methods use <ph id="ph1">`HasThis`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Specifies the calling convention for methods with variable arguments.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>