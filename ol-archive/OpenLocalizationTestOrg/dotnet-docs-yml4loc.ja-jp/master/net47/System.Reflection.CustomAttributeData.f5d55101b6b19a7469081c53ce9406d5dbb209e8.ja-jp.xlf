<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d93beaca944b80128a5ab2c964948a4e64ee6a5d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Reflection.CustomAttributeData.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e11e5834f8c01d574c5d8e0dfb7e2e8e2b92daa0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94c6644e30bd782f4b2cffe68bf27e0ecebff139</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The members of this class can be used to obtain the positional arguments and named arguments of the attribute.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph> property to get a list of <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structures that represent the positional arguments, and use the <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph> property to get a list of <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structures that represent the named arguments.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structure only provides information about the attribute property used to get and set the argument value.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain the type and value of the argument, use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=fullName&gt;</ph> property to obtain a <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have a <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure for an argument, whether named or positional, use the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=fullName&gt;</ph> property to get the type and the <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName&gt;</ph> property to get the value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an array argument, the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName&gt;</ph> property returns a generic <ph id="ph2">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> of <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> object in the collection represents the corresponding element of the array.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> can be used in the execution context as well as in the reflection-only context.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you might want to avoid loading the assembly that contains the code for a custom attribute.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class is different from using methods like <ph id="ph2">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The properties and methods of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The properties and methods of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> do not allow you to retrieve the custom attributes inherited from base classes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create instances of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class, use the <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> factory methods.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeData"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is invoked by derived classes during the construction of <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the type of the attribute.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The type of the attribute.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Reflection.ConstructorInfo"&gt;&lt;/xref&gt;</ph> object that represents the constructor that would have initialized the custom attribute.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeData"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the list of positional arguments specified for the attribute instance represented by the <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeData"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, it can be used in the reflection-only context.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph> method to get the named arguments specified for the attribute instance.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A collection of structures that represent the positional arguments specified for the custom attribute instance.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An object to compare with this instance, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> is equal to the current instance; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns a list of <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeData"&gt;&lt;/xref&gt;</ph> objects representing data about the attributes that have been applied to the target assembly.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method provides an alternative to the <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A&gt;</ph> method that can always be used in the Reflection-only context.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The assembly whose custom attribute data is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A list of objects that represent data about the attributes that have been applied to the target assembly.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns a list of <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeData"&gt;&lt;/xref&gt;</ph> objects representing data about the attributes that have been applied to the target member.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overload gets custom attribute data for types, nested types, and type members, because the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class and the classes in the <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> namespace that represent type members all derive from <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The member whose attribute data is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A list of objects that represent data about the attributes that have been applied to the target member.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Returns a list of <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeData"&gt;&lt;/xref&gt;</ph> objects representing data about the attributes that have been applied to the target module.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The module whose custom attribute data is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A list of objects that represent data about the attributes that have been applied to the target module.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Returns a list of <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeData"&gt;&lt;/xref&gt;</ph> objects representing data about the attributes that have been applied to the target parameter.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method provides an alternative to the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A&gt;</ph> method that can always be used in the Reflection-only context.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The parameter whose attribute data is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A list of objects that represent data about the attributes that have been applied to the target parameter.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Serves as a hash function for a particular type.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A hash code for the current <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Gets the list of named arguments specified for the attribute instance represented by the <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeData"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, it can be used in the Reflection-only context.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The list that is returned contains only the named arguments that were specified for the attribute instance.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph> method to get the positional arguments that were specified for the attribute instance.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A collection of structures that represent the named arguments specified for the custom attribute instance.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns a string representation of the custom attribute.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string value includes the attribute type, the attribute parameters, and the named parameters.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A string value that represents the custom attribute.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>