<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4f42b1baaccc61a4c854cdef09dd1917a580b22</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ArgIterator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6503a247ac63874fa788ab1e40a8bfd8764e0a90</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">051e4178578a13e5cf66c3f45b1002089d9ec972</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a variable-length argument list; that is, the parameters of a function that takes a variable number of arguments.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Developers who write compilers use the <ph id="ph1">&lt;xref:System.ArgIterator&gt;</ph> structure to enumerate the mandatory and optional arguments in an argument list.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ArgIterator&gt;</ph> structure is not generally useful for applications other than compilers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The functionality in the <ph id="ph1">&lt;xref:System.ArgIterator&gt;</ph> structure is typically hidden in the syntax of a specific programming language.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in the C++ programming language you declare a variable-length argument list by specifying an ellipsis ("...") at the end of the argument list.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ArgIterator&gt;</ph> structure is useful primarily when a development language does not provide direct support for accessing variable-length parameters.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ArgIterator"&gt;&lt;/xref&gt;</ph> structure using the specified argument list.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new <ph id="ph1">&lt;xref:System.ArgIterator&gt;</ph> object enumerates the argument list starting from the first optional argument.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An argument list consisting of mandatory and optional arguments.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ArgIterator"&gt;&lt;/xref&gt;</ph> structure using the specified argument list and a pointer to an item in the list.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new <ph id="ph1">&lt;xref:System.ArgIterator&gt;</ph> object enumerates the argument list starting from the argument specified by <ph id="ph2">`ptr`</ph>, or the first mandatory argument if <ph id="ph3">`ptr`</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An argument list consisting of mandatory and optional arguments.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A pointer to the argument in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">arglist</ph><ept id="p1">&lt;/code&gt;</ept> to access first, or the first mandatory argument in <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">arglist</ph><ept id="p2">&lt;/code&gt;</ept> if <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">ptr</ph><ept id="p3">&lt;/code&gt;</ept> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Concludes processing of the variable-length argument list represented by this instance.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conceptually, <ph id="ph1">&lt;xref:System.ArgIterator.End%2A&gt;</ph> concludes the processing of a variable-length argument list.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this method has no actual implementation; the <ph id="ph1">&lt;xref:System.ArgIterator.End%2A&gt;</ph> method body is empty.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method in your code as a marker to indicate where variable-length argument list processing logically ends.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ArgIterator.End%2A&gt;</ph> method corresponds to the <ph id="ph2">`va_end`</ph> method in the C standard library.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This method is not supported, and always throws <ph id="ph1">&lt;xref href="System.NotSupportedException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An object to be compared to this instance.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This comparison is not supported.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>No value is returned.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This method is not supported.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns the hash code of this object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer hash code.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns the next argument in a variable-length argument list.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The iterator is automatically advanced to the next argument.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The next argument as a <ph id="ph1">&lt;xref href="System.TypedReference"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An attempt was made to read beyond the end of the list.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns the next argument in a variable-length argument list that has a specified type.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The iterator is automatically advanced to the next argument.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A runtime type handle that identifies the type of the argument to retrieve.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The next argument as a <ph id="ph1">&lt;xref href="System.TypedReference"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An attempt was made to read beyond the end of the list.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The pointer to the remaining arguments is zero.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns the type of the next argument.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not advance the iterator to the next argument.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ArgIterator.GetNextArgType%2A&gt;</ph> returns the type of the argument as specified in the calling function.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an argument is type <ph id="ph1">&lt;xref:System.String&gt;</ph>, but the calling function specifies the argument as type <ph id="ph2">&lt;xref:System.Object&gt;</ph>, <ph id="ph3">&lt;xref:System.ArgIterator.GetNextArgType%2A&gt;</ph> reports the argument as type <ph id="ph4">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The type of the next argument.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns the number of arguments remaining in the argument list.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The number of remaining arguments.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>