<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44e005a0ed447f3f5425fe3e5616dc299c5c2b7b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.OperationContextScope.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1dc389d9bb9fa9b0faefb5fb6efa152eafcc24fc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0788dfd26e981564698593ba8a2d1e7c0faae61</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creates a block within which an <ph id="ph1">&lt;xref href="System.ServiceModel.OperationContext"&gt;&lt;/xref&gt;</ph> object is in scope.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> class to create a scope for a specific <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> object or a scope for a new <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> object using a specified <ph id="ph4">&lt;xref:System.ServiceModel.IContextChannel&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> can be used in a <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> service or <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> client application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> object has established the current operation context, you can use the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> to:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Access and modify incoming and outgoing message headers and other properties.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Access the runtime, including dispatchers, the host, channel, and extensions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Access other types of contexts, such as security, instance, and request contexts.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Access the channel associated with the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> object or (if the channel implements <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ISession?displayProperty=fullName&gt;</ph>) the associated channel's session identifier.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> is created, the current <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> is stored and the new <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> becomes the one returned by the <ph id="ph4">&lt;xref:System.ServiceModel.OperationContext.Current%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> is disposed, the original <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> is restored.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not use the asynchronous "await" pattern within a OperationContextScope block.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the continuation occurs, it may run on a different thread and OperationContextScope is thread specific.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to call "await" for an async call, use it outside of the OperationContextScope block.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceModel.OperationContextScope"&gt;&lt;/xref&gt;</ph> class that uses the specified <ph id="ph2">&lt;xref href="System.ServiceModel.IContextChannel"&gt;&lt;/xref&gt;</ph> to create a new <ph id="ph3">&lt;xref href="System.ServiceModel.OperationContext"&gt;&lt;/xref&gt;</ph> for the scope.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> constructor to create a new <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> for a client channel that can be used to add or modify outbound message headers, read incoming message headers, or access other run-time properties of the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The headers added to the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=fullName&gt;</ph> property of the newly created <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> apply only to the channel that was passed to the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user creates a new channel within its scope then the headers are not applied to messages sent on the new channel.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The channel to use when creating the scope for a new <ph id="ph1">&lt;xref href="System.ServiceModel.OperationContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceModel.OperationContextScope"&gt;&lt;/xref&gt;</ph> class to create a scope for the specified <ph id="ph2">&lt;xref href="System.ServiceModel.OperationContext"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> constructor to create a code block within which the specified <ph id="ph2">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> object is the current scope.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The active <ph id="ph1">&lt;xref href="System.ServiceModel.OperationContext"&gt;&lt;/xref&gt;</ph> in the created scope.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Restores the original <ph id="ph1">&lt;xref href="System.ServiceModel.OperationContext"&gt;&lt;/xref&gt;</ph> to the active context and recycles the <ph id="ph2">&lt;xref href="System.ServiceModel.OperationContextScope"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>