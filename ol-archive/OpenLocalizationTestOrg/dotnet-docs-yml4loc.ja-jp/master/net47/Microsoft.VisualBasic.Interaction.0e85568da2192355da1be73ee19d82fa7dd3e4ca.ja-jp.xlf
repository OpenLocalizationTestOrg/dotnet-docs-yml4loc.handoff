<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb9c42d20aef5d89e4c021e4b69db27525eb074e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Microsoft.VisualBasic.Interaction.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e6d4ab3121b8f9692c4b5f5c94009ac167abf3c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">318697d21caffd663644617a79225c3e98a74d75</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Interaction`</ph> module contains procedures used to interact with objects, applications, and systems.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This module supports the Visual Basic language keywords and run-time library members that run other programs, call a method or property, sound a beep from the computer, provide a command-line string, manipulate COM objects, and control dialog boxes.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Activates an application that is already running.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use <ph id="ph1">`AppActivate`</ph> to bring an application's active window into focus.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might not have a handle or a reference to the active window, or even know which window is active at a given moment.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>In such a case, you cannot use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`AppActivate`</ph> function changes the focus to the named application or window but does not affect whether it is maximized or minimized.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Focus moves away from the activated application window when the user takes some action to change the focus or close the window.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">`Shell`</ph> function to start an application and set the window style.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the <ph id="ph1">`Title`</ph> parameter, <ph id="ph2">`AppActivate`</ph> uses a case-insensitive comparison but otherwise requires an exact match with the contents of the title bar.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>It first looks through the top-level windows and then through the child windows.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it cannot find a match, it throws an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">`AppActivate`</ph> only with processes that own windows.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most console applications do not own windows, which means that they do not appear in the list of processes that <ph id="ph1">`AppActivate`</ph> searches.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>When running from a console application, the system creates a separate process to run the application and returns the output to the console process.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, when you request the current process ID, you get the process ID of this separate process, rather than the console application's process ID.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>At run time, the <ph id="ph1">`AppActivate`</ph> function activates any running application with a title that matches <ph id="ph2">`Title`</ph> or with a process ID that matches <ph id="ph3">`ProcessId`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no exact match, it activates any application whose title string ends with <ph id="ph1">`Title`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is more than one application named <ph id="ph1">`Title`</ph>, the <ph id="ph2">`AppActivate`</ph> function arbitrarily chooses one to activate.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`AppActivate`</ph> function requires <ph id="ph2">`UIPermission`</ph> at the <ph id="ph3">&lt;xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows&gt;</ph> level, which may affect its execution in partial-trust situations.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.Permissions.UIPermission&gt;</ph> .</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Integer`</ph> specifying the Win32 process ID number assigned to this process.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can use the ID returned by the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)"&gt;&lt;/xref&gt;</ph>, provided it is not zero.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Activates an application that is already running.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use <ph id="ph1">`AppActivate`</ph> to bring an application's active window into focus.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might not have a handle or a reference to the active window, or even know which window is active at a given moment.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>In such a case, you cannot use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`AppActivate`</ph> function changes the focus to the named application or window but does not affect whether it is maximized or minimized.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Focus moves away from the activated application window when the user takes some action to change the focus or close the window.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">`Shell`</ph> function to start an application and set the window style.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the <ph id="ph1">`Title`</ph> parameter, <ph id="ph2">`AppActivate`</ph> uses a case-insensitive comparison but otherwise requires an exact match with the contents of the title bar.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>It first looks through the top-level windows and then through the child windows.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it cannot find a match, it throws an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">`AppActivate`</ph> only with processes that own windows.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most console applications do not own windows, which means that they do not appear in the list of processes that <ph id="ph1">`AppActivate`</ph> searches.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>When running from a console application, the system creates a separate process to run the application and returns the output to the console process.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, when you request the current process ID, you get the process ID of this separate process, rather than the console application's process ID.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>At run time, the <ph id="ph1">`AppActivate`</ph> function activates any running application with a title that matches <ph id="ph2">`Title`</ph> or with a process ID that matches <ph id="ph3">`ProcessId`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no exact match, it activates any application whose title string ends with <ph id="ph1">`Title`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is more than one application named <ph id="ph1">`Title`</ph>, the <ph id="ph2">`AppActivate`</ph> function arbitrarily chooses one to activate.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`AppActivate`</ph> function requires <ph id="ph2">`UIPermission`</ph> at the <ph id="ph3">&lt;xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows&gt;</ph> level, which may affect its execution in partial-trust situations.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.Permissions.UIPermission&gt;</ph> .</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression specifying the title in the title bar of the application you want to activate.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can use the title assigned to the application when it was launched.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Sounds a tone through the computer's speaker.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The pitch and duration of the beep depend on your hardware and system software and therefore vary among computers.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Beep`</ph> function requires <ph id="ph2">`UIPermission`</ph> at the <ph id="ph3">&lt;xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows&gt;</ph> level, which may affect its execution in partial-trust situations.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.Permissions.UIPermission&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Executes a method on an object, or sets or returns a property on an object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`CallByName`</ph> function is used at runtime to get a property, set a property, or invoke a method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A pointer to the object exposing the property or method.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A string expression containing the name of the property or method on the object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An enumeration member of type <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.CallType"&gt;&lt;/xref&gt;</ph> representing the type of procedure being called.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`CallType`</ph> can be <ph id="ph2">`Method`</ph>, <ph id="ph3">`Get`</ph>, or <ph id="ph4">`Set`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ParamArray`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A parameter array containing the arguments to be passed to the property or method being called.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Executes a method on an object, or sets or returns a property on an object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Invalid <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">UseCallType</ph><ept id="p1">&lt;/code&gt;</ept> value; must be <ph id="ph2">`Method`</ph>, <ph id="ph3">`Get`</ph>, or <ph id="ph4">`Set`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Selects and returns a value from a list of arguments.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Choose`</ph> function returns a member of the list passed in <ph id="ph2">`Choice()`</ph>, based on the value of <ph id="ph3">`Index`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first member of the list is selected when <ph id="ph1">`Index`</ph> is 1.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The last member of the list is selected when <ph id="ph1">`Index`</ph> is <ph id="ph2">`UBound`</ph>(<ph id="ph3">`Choice()`</ph>).</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Index`</ph> is outside these limits, <ph id="ph2">`Choose`</ph> returns <ph id="ph3">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Index`</ph> is not a whole number, it is rounded to the nearest whole number before being evaluated.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">`Choose`</ph> to look up a value in a list of possibilities.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expressions in the argument list can include function calls.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of preparing the argument list for the call to <ph id="ph1">`Choose`</ph>, the Visual Basic compiler calls every function in every expression.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that you cannot rely on a particular function not being called if a different expression is selected by <ph id="ph1">`Index`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Numeric expression that results in a value between 1 and the number of elements passed in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Choice</ph><ept id="p1">&lt;/code&gt;</ept> argument.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Object`</ph> parameter array.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You can supply either a single variable or an expression that evaluates to the <ph id="ph1">`Object`</ph> data type, to a list of <ph id="ph2">`Object`</ph> variables or expressions separated by commas, or to a single-dimensional array of <ph id="ph3">`Object`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Selects and returns a value from a list of arguments.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Returns the argument portion of the command line used to start Visual Basic or an executable program developed with Visual Basic.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My`</ph> feature provides greater productivity and performance than the <ph id="ph2">`Command`</ph> function.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the arguments are returned, you can search for common delimiters, such as spaces, backward or forward slashes, hyphens, or quotation marks, to split or search the string for individual parameters.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>For applications developed with Visual Basic and compiled to an .exe file, the <ph id="ph1">`Command`</ph> function returns any arguments that appear after the name of the application on the command line, in this form: <ph id="ph2">`MyApp(cmdlineargs)`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Returns the argument portion of the command line used to start Visual Basic or an executable program developed with Visual Basic.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My`</ph> feature provides greater productivity and performance than the <ph id="ph2">`Command`</ph> function.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Creates and returns a reference to a COM object.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CreateObject`</ph> cannot be used to create instances of classes in Visual Basic unless those classes are explicitly exposed as COM components.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an instance of a COM component, assign the object returned by <ph id="ph1">`CreateObject`</ph> to an object variable:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of object variable you use to store the returned object can affect your application's performance.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Declaring an object variable with the <ph id="ph1">`As Object`</ph> clause creates a variable that can contain a reference to any type of object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, access to the object through that variable is <bpt id="p1">*</bpt>late-bound<ept id="p1">*</ept>, that is, the binding occurs when your program runs.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are many reasons you should avoid late binding, including slower application performance.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create an object variable that results in early binding—that is, binding when the program is compiled.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do so, add a reference to the type library for your object from the <bpt id="p1">**</bpt>COM<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept> dialog box on the <bpt id="p3">**</bpt>Project<ept id="p3">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then declare the object variable of the specific type of your object.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, it is more efficient to use the <ph id="ph1">`Dim`</ph> statement and a primary interop assembly to create objects than it is to use the <ph id="ph2">`CreateObject`</ph> function.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Interacting with Unmanaged Code</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another issue is that COM objects use unmanaged code — code without the benefit of the common language runtime.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is a fair degree of complexity involved in mixing the managed code of Visual Basic with unmanaged code from COM.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you add a reference to a COM object, Visual Basic searches for a primary interop assembly (PIA) for that library; if it finds one, then it uses it.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it does not find a PIA, then it creates an interoperability assembly that contains local interoperability classes for each class in the COM library.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>COM Interoperability in .NET Framework Applications<ept id="p1">](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should generally use strongly bound objects and primary interop assemblies whenever possible.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The examples below use the <ph id="ph1">`CreateObject`</ph> function with Microsoft Office objects for demonstration purposes only.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, these objects are easier to use and more reliable when used with the appropriate primary interop assembly.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating an Object on a Remote Computer</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create an object on a remote networked computer by passing the name of the computer to the <ph id="ph1">`ServerName`</ph> argument of the <ph id="ph2">`CreateObject`</ph> function.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>That name is the same as the Machine Name portion of a share name: for a share named "<ph id="ph1">\\</ph>\MyServer\Public," <ph id="ph2">`ServerName`</ph> is "MyServer."</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Refer to COM documentation (see Microsoft Developer Network) for additional information on making an application accessible on a remote networked computer.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may need to add a registry key for your application.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following code returns the version number of an instance of Excel running on a remote computer named <ph id="ph1">`MyServer`</ph>:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the remote server name is incorrect, or if it is unavailable, a run-time error occurs.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">`CreateObject`</ph> when there is no current instance of the object.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an instance of the object is already running, a new instance is started, and an object of the specified type is created.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use the current instance, or to start the application and have it load a file, use the <ph id="ph1">`GetObject`</ph> function.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times <ph id="ph1">`CreateObject`</ph> is executed.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating Framework Objects</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">`CreateObject`</ph> function only to create a COM object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>While there is no exact equivalent mechanism for creating a .NET Framework object, the <ph id="ph1">&lt;xref:System.Activator&gt;</ph> in the <ph id="ph2">&lt;xref:System&gt;</ph> namespace contains methods to create local or remote objects.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>In particular, the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Activator.CreateInstanceFrom%2A&gt;</ph> method might be useful.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`CreateObject`</ph> function requires unmanaged code permission, which might affect its execution in partial-trust situations.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> and <bpt id="p1">[</bpt>Code Access Permissions<ept id="p1">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The program ID of the object to create.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The name of the network server where the object will be created.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">ServerName</ph><ept id="p1">&lt;/code&gt;</ept> is an empty string (""), the local computer is used.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Creates and returns a reference to a COM object.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CreateObject`</ph> cannot be used to create instances of classes in Visual Basic unless those classes are explicitly exposed as COM components.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Server is unavailable</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>No object of the specified type exists</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Deletes a section or key setting from an application's entry in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My`</ph> feature gives you greater productivity and performance in registry operations than the <ph id="ph2">`DeleteSetting`</ph> function.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Devices.ServerComputer.Registry"&gt;&lt;/xref&gt;</ph> .</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>If all arguments are provided, the specified setting is deleted.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>A run-time error occurs if you attempt to use <ph id="ph1">`DeleteSetting`</ph> on a nonexistent section or key setting.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`DeleteSetting`</ph> requires that a user be logged on since it operates under the <ph id="ph2">`HKEY_LOCAL_USER`</ph> registry key, which is not active until a user logs on interactively.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the <ph id="ph1">`HKEY_LOCAL_MACHINE\Software\`</ph> or the <ph id="ph2">`HKEY_USER\DEFAULT\Software`</ph> registry keys.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression containing the name of the application or project to which the section or key setting applies.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression containing the name of the section from which the key setting is being deleted.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If only <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">AppName</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Section</ph><ept id="p2">&lt;/code&gt;</ept> are provided, the specified section is deleted along with all related key settings.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression containing the name of the key setting being deleted.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>User is not logged in.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Returns the string associated with an operating-system environment variable.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Expression`</ph> contains a string, the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Interaction.Environ%2A&gt;</ph> function returns the text assigned to the specified environment string—that is, the text following the equal sign (=) in the environment-string table for that environment variable.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the string in <ph id="ph1">`Expression`</ph> cannot be found in the environment-string table, a zero-length string ("") is returned.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Expression`</ph> contains an integer, the string occupying that numeric position in the environment-string table is returned.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Interaction.Environ%2A&gt;</ph> returns all of the text, including the name of the environment variable.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no environment string in the specified position, <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Interaction.Environ%2A&gt;</ph> returns a zero-length string.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Interaction.Environ%2A&gt;</ph> function requires environment permission, which might affect its execution in partial-trust situations.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> and <bpt id="p1">[</bpt>Code Access Permissions<ept id="p1">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Expression that evaluates either a string containing the name of an environment variable, or an integer corresponding to the numeric order of an environment string in the environment-string table.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Returns the string associated with an operating-system environment variable.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Expression&lt;/code&gt;</ph> is missing.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Returns the string associated with an operating-system environment variable.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Expression`</ph> contains a string, the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Interaction.Environ%2A&gt;</ph> function returns the text assigned to the specified environment string—that is, the text following the equal sign (=) in the environment-string table for that environment variable.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the string in <ph id="ph1">`Expression`</ph> cannot be found in the environment-string table, a zero-length string ("") is returned.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Expression`</ph> contains an integer, the string occupying that numeric position in the environment-string table is returned.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Interaction.Environ%2A&gt;</ph> returns all of the text, including the name of the environment variable.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no environment string in the specified position, <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Interaction.Environ%2A&gt;</ph> returns a zero-length string.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Interaction.Environ%2A&gt;</ph> function requires environment permission, which might affect its execution in partial-trust situations.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> and <bpt id="p1">[</bpt>Code Access Permissions<ept id="p1">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Expression that evaluates either a string containing the name of an environment variable, or an integer corresponding to the numeric order of an environment string in the environment-string table.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Returns the string associated with an operating-system environment variable.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Expression&lt;/code&gt;</ph> is missing.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Returns a list of key settings and their respective values (originally created with <ph id="ph1">`SaveSetting`</ph>) from an application's entry in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`My`</ph> feature gives you greater productivity and performance in registry operations than <ph id="ph2">`GetAllSettings`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Devices.ServerComputer.Registry"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`GetAllSettings`</ph> returns an uninitialized <ph id="ph2">`Object`</ph> if either <ph id="ph3">`AppName`</ph> or <ph id="ph4">`Section`</ph> does not exist.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because it operates under the <ph id="ph1">`HKEY_LOCAL_USER`</ph> registry key, which is not active until a user logs on interactively, <ph id="ph2">`GetAllSettings`</ph> requires that a user be logged on.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the <ph id="ph1">`HKEY_LOCAL_MACHINE\Software\`</ph> or the <ph id="ph2">`HKEY_USER\DEFAULT\Software`</ph> registry keys.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression containing the name of the application or project whose key settings are requested.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression containing the name of the section whose key settings are requested.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetAllSettings`</ph> returns an object that contains a two-dimensional array of strings.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The strings contain all the key settings in the specified section, plus their corresponding values.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Returns a list of key settings and their respective values (originally created with <ph id="ph1">`SaveSetting`</ph>) from an application's entry in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`My`</ph> feature gives you greater productivity and performance in registry operations than <ph id="ph2">`GetAllSettings`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Devices.ServerComputer.Registry"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>User is not logged in.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Returns a reference to an object provided by a COM component.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`GetObject`</ph> function to load an instance of a COM component from a file.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this code runs, the application associated with the specified <ph id="ph1">`PathName`</ph> is started and the object in the specified file is activated.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default Cases</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`PathName`</ph> is a zero-length string (<ph id="ph2">`""`</ph>), <ph id="ph3">`GetObject`</ph> returns a new object instance of the specified class type.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`PathName`</ph> argument is omitted, <ph id="ph2">`GetObject`</ph> returns a currently active object of the class type specified in <ph id="ph3">`Class`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no object of the specified type exists, an error occurs.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>Accessing a Subobject</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some applications allow you to activate a subobject associated with a file.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do this, add an exclamation point (<ph id="ph1">`!`</ph>) to the end of the file name and follow it with a string that identifies the part of the file you want to activate.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information on how to create this string, see the documentation for the application that created the object.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in a drawing application you might have multiple layers to a drawing stored in a file.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>You could use the following code to activate a layer within a drawing called <ph id="ph1">`schema.cad`</ph>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying a Class</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not specify the object's <ph id="ph1">`Class`</ph>, Automation determines the application to start and the object to activate, based on the file name you provide.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some files, however, can support more than one class of object.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a drawing might support three different types of objects: an <ph id="ph1">`Application`</ph> object, a <ph id="ph2">`Drawing`</ph> object, and a <ph id="ph3">`Toolbar`</ph> object, all of which are part of the same file.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify which object in a file you want to activate, use the optional <ph id="ph1">`Class`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the preceding example, <ph id="ph1">`Figment`</ph> is the name of a drawing application and <ph id="ph2">`Drawing`</ph> is one of the object types it supports.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the Object</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once an object is activated, you refer to it in code using the object variable you declared.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the preceding example, you access properties and methods of the new object using the object variable <ph id="ph1">`drawObj`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`GetObject`</ph> function when there is a current instance of the object or if you want to create the object with a file loaded.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no current instance, and you do not want the object started with a file loaded, use the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Interaction.CreateObject%2A&gt;</ph> function.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an object has registered itself as an ActiveX single-instance object, only one instance of the object is created, no matter how many times <ph id="ph1">`CreateObject`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>With a single-instance object, <ph id="ph1">`GetObject`</ph> always returns the same instance when called with the zero-length string (<ph id="ph2">`""`</ph>) syntax, and it causes an error if the <ph id="ph3">`PathName`</ph> argument is omitted.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot use <ph id="ph1">`GetObject`</ph> to obtain a reference to a class created with Visual Basic.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`GetObject`</ph> function requires unmanaged code permission, which might affect its execution in partial-trust situations.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> and <bpt id="p1">[</bpt>Code Access Permissions<ept id="p1">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The full path and name of the file containing the object to retrieve.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">PathName</ph><ept id="p1">&lt;/code&gt;</ept> is omitted, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Class</ph><ept id="p2">&lt;/code&gt;</ept> is required.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Required if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">PathName</ph><ept id="p1">&lt;/code&gt;</ept> is not supplied.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A string representing the class of the object.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Class</ph><ept id="p1">&lt;/code&gt;</ept> argument has the following syntax and parts:</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>[1|1] Parameter</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>[1|2] Description</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>[2|1] <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">appname</ph><ept id="p1">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>[2|2] Required.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The name of the application providing the object.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>[3|1] <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objecttype</ph><ept id="p1">&lt;/code&gt;</ept></source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>[3|2] Required.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The type or class of object to create.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Returns a reference to an object provided by a COM component.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>No object of the specified class type exists.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>No object with the specified path and file name exists.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Returns a key setting value from an application's entry in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My`</ph> feature gives you greater productivity and performance in registry operations than <ph id="ph2">`GetAllSettings`</ph>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Devices.ServerComputer.Registry"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>If any of the items named in the <ph id="ph1">`GetSetting`</ph> arguments do not exist, <ph id="ph2">`GetSetting`</ph> returns a value of <ph id="ph3">`Default`</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because it operates under the <ph id="ph1">`HKEY_LOCAL_USER`</ph> registry key, which is not active until a user logs on interactively, <ph id="ph2">`GetSetting`</ph> requires that a user be logged on.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the <ph id="ph1">`HKEY_LOCAL_MACHINE\Software\`</ph> or the <ph id="ph2">`HKEY_USER\DEFAULT\Software`</ph> registry keys.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`GetSetting`</ph> requires <ph id="ph2">`Read`</ph><ph id="ph3">&lt;xref:System.Security.Permissions.RegistryPermission&gt;</ph> .</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression containing the name of the application or project whose key setting is requested.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression containing the name of the section in which the key setting is found.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression containing the name of the key setting to return.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Expression containing the value to return if no value is set in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Key</ph><ept id="p1">&lt;/code&gt;</ept> setting.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>If omitted, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Default</ph><ept id="p1">&lt;/code&gt;</ept> is assumed to be a zero-length string ("").</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Returns a key setting value from an application's entry in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My`</ph> feature gives you greater productivity and performance in registry operations than <ph id="ph2">`GetAllSettings`</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>One or more arguments are not <ph id="ph1">`String`</ph> expressions, or user is not logged in.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Returns one of two objects, depending on the evaluation of an expression.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`IIf`</ph> function provides a counterpart for the ternary <bpt id="p1">[</bpt>Conditional Operator: ? :<ept id="p1">](http://msdn.microsoft.com/library/88643ee8-7100-4f86-880a-705ec22b6271)</ept> in Visual C++.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The expression you want to evaluate.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Returned if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Expression</ph><ept id="p1">&lt;/code&gt;</ept> evaluates to <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Returned if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Expression</ph><ept id="p1">&lt;/code&gt;</ept> evaluates to <ph id="ph2">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Returns one of two objects, depending on the evaluation of an expression.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Displays a prompt in a dialog box, waits for the user to input text or click a button, and then returns a string containing the contents of the text box.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user clicks <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept>, a zero-length string is returned.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify more than the first argument, you must use the <ph id="ph1">`InputBox`</ph> function in an expression.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you omit any positional arguments, you must retain the corresponding comma delimiter.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`InputBox`</ph> function requires <ph id="ph2">`UIPermission`</ph> at the <ph id="ph3">&lt;xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows&gt;</ph> level, which may affect its execution in partial-trust situations.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see  and <ph id="ph1">&lt;xref:System.Security.Permissions.UIPermission&gt;</ph> .</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Required <ph id="ph1">`String`</ph> expression displayed as the message in the dialog box.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The maximum length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Prompt</ph><ept id="p1">&lt;/code&gt;</ept> is approximately 1024 characters, depending on the width of the characters used.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Prompt</ph><ept id="p1">&lt;/code&gt;</ept> consists of more than one line, you can separate the lines using a carriage return character (<ph id="ph2">`Chr(`</ph>13<ph id="ph3">`)`</ph>), a line feed character (<ph id="ph4">`Chr(`</ph>10<ph id="ph5">`)`</ph>), or a carriage return/line feed combination (<ph id="ph6">`Chr(`</ph>13<ph id="ph7">`)`</ph><ph id="ph8"> &amp; </ph><ph id="ph9">`Chr(`</ph>10<ph id="ph10">`)`</ph>) between each line.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression displayed in the title bar of the dialog box.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>If you omit <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Title</ph><ept id="p1">&lt;/code&gt;</ept>, the application name is placed in the title bar.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression displayed in the text box as the default response if no other input is provided.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>If you omit <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">DefaultResponse</ph><ept id="p1">&lt;/code&gt;</ept>, the displayed text box is empty.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Numeric expression that specifies, in twips, the distance of the left edge of the dialog box from the left edge of the screen.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>If you omit <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">XPos</ph><ept id="p1">&lt;/code&gt;</ept>, the dialog box is centered horizontally.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Numeric expression that specifies, in twips, the distance of the upper edge of the dialog box from the top of the screen.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>If you omit <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">YPos</ph><ept id="p1">&lt;/code&gt;</ept>, the dialog box is positioned vertically approximately one-third of the way down the screen.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Displays a prompt in a dialog box, waits for the user to input text or click a button, and then returns a string containing the contents of the text box.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Displays a message in a dialog box, waits for the user to click a button, and then returns an integer indicating which button the user clicked.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you omit any positional arguments, you must retain the corresponding comma delimiter.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dialog box displays a <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button, pressing the ESC key has the same effect as clicking <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the dialog box contains a <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> button, context-sensitive Help is provided for the dialog box.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, no value is returned until one of the other buttons is chosen.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Windows Form applications, choosing the <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> button executes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HelpRequested&gt;</ph> event for the form.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`MsgBox`</ph> function requires <ph id="ph2">`UIPermission`</ph> at the <ph id="ph3">&lt;xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows&gt;</ph> level, which may affect its execution in partial-trust situations.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.Permissions.UIPermission&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`MsgBoxStyle`</ph> enumeration values are listed in the following table.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>0</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>Displays OK button only.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>1</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>Displays OK and Cancel buttons.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>2</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>Displays Abort, Retry, and Ignore buttons.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>3</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>Displays Yes, No, and Cancel buttons.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>4</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>Displays Yes and No buttons.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>5</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>Displays Retry and Cancel buttons.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>16</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>Displays Critical Message icon.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>32</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>Displays Warning Query icon.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>48</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>Displays Warning Message icon.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>64</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>Displays Information Message icon.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>0</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>First button is default.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>256</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>Second button is default.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>512</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>Third button is default.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>0</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application is modal.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user must respond to the message box before continuing work in the current application.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>4096</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>System is modal.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>All applications are suspended until the user responds to the message box.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>65536</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifies the message box window as the foreground window.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>524288</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>Text is right-aligned.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>1048576</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifies text should appear as right-to-left reading on Hebrew and Arabic systems.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first group of values (0–5) describes the number and type of buttons displayed in the dialog box.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second group (16, 32, 48, 64) describes the icon style.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>The third group (0, 256, 512) determines which button is the default.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fourth group (0, 4096) determines the modality of the message box, and the fifth group specifies whether or not the message box window is the foreground window, along with the alignment and direction of the text.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>When adding numbers to create a final value for the <ph id="ph1">`Buttons`</ph> argument, use only one number from each group.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression displayed as the message in the dialog box.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The maximum length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Prompt</ph><ept id="p1">&lt;/code&gt;</ept> is approximately 1024 characters, depending on the width of the characters used.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Prompt</ph><ept id="p1">&lt;/code&gt;</ept> consists of more than one line, you can separate the lines using a carriage return character (<ph id="ph2">`Chr(`</ph>13<ph id="ph3">`)`</ph>), a line feed character (<ph id="ph4">`Chr(`</ph>10<ph id="ph5">`)`</ph>), or a carriage return/linefeed character combination (<ph id="ph6">`Chr(`</ph>13<ph id="ph7">`)`</ph><ph id="ph8"> &amp; </ph><ph id="ph9">`Chr(`</ph>10<ph id="ph10">`)`</ph>) between each line.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>If you omit <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Buttons</ph><ept id="p1">&lt;/code&gt;</ept>, the default value is zero.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression displayed in the title bar of the dialog box.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>If you omit <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Title</ph><ept id="p1">&lt;/code&gt;</ept>, the application name is placed in the title bar.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Constant</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>5</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>6</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>7</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Prompt&lt;/code&gt;</ph> is not a <ph id="ph2">`String`</ph> expression, or <ph id="ph3">&lt;code&gt;Title&lt;/code&gt;</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Process is not running in User Interactive mode.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>One or more parameters not a member of <ph id="ph1">`MsgBoxResult`</ph> or <ph id="ph2">`MsgBoxStyle`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Returns a string representing the calculated range that contains a number.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Partition`</ph> function calculates a set of numeric ranges, each containing the number of values specified by <ph id="ph2">`Interval`</ph>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first range begins at <ph id="ph1">`Start`</ph>, and the last range ends at <ph id="ph2">`Stop`</ph>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Partition`</ph> function then identifies which range contains <ph id="ph2">`Number`</ph> and returns a string describing that range.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range is represented in the string as "<bpt id="p1">*</bpt>lowervalue<ept id="p1">*</ept>:<bpt id="p2">*</bpt>uppervalue<ept id="p2">*</ept>", where the low end of the range (<bpt id="p3">*</bpt>lowervalue<ept id="p3">*</ept>) is separated from the high end (<bpt id="p4">*</bpt>uppervalue<ept id="p4">*</ept>) by a colon (:).</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>If necessary, the <ph id="ph1">`Partition`</ph> function inserts leading spaces before <bpt id="p1">*</bpt>lowervalue<ept id="p1">*</ept> and <bpt id="p2">*</bpt>uppervalue<ept id="p2">*</ept> so that they both have the same number of characters as the string representation of the value (<ph id="ph2">`Stop`</ph> + 1).</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>This ensures that if you use the output of the <ph id="ph1">`Partition`</ph> function with several values of <ph id="ph2">`Number`</ph>, the resulting text will be handled properly during any subsequent sort operation.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows some sample strings for ranges calculated using three sets of <ph id="ph1">`Start`</ph>, <ph id="ph2">`Stop`</ph>, and <ph id="ph3">`Interval`</ph>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>The "First range" and "Last range" columns show the lowest and highest ranges possible given the values of <ph id="ph1">`Start`</ph> and <ph id="ph2">`Stop`</ph>.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>The "Before first range" and "After last range" columns show the strings returned for values of <ph id="ph1">`Number`</ph> less than <ph id="ph2">`Start`</ph> and greater than <ph id="ph3">`Stop`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before first range</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>First range</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>Last range</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>After last range</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>0</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>99</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>5</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>"   : -1"</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>"  0:  4"</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>" 95: 99"</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>"100:   "</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>20</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>199</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>10</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>"   : 19"</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>" 20: 29"</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>"190:199"</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>"200:   "</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>100</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>1010</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>20</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>"    : 99"</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>" 100: 119"</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>"1000:1010"</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>"1011:    "</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the preceding table, the third line shows the result when <ph id="ph1">`Start`</ph> and <ph id="ph2">`Stop`</ph> define a set of numbers that cannot be evenly divided by <ph id="ph3">`Interval`</ph>.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>The last range ends at <ph id="ph1">`Stop`</ph>, making it only 11 numbers long, even though <ph id="ph2">`Interval`</ph> is 20.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Interval`</ph> is 1, the range is "<ph id="ph2">`Number`</ph>:<ph id="ph3">`Number`</ph>", regardless of the <ph id="ph4">`Start`</ph> and <ph id="ph5">`Stop`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if <ph id="ph1">`Number`</ph> is 267, <ph id="ph2">`Stop`</ph> is 1000, and <ph id="ph3">`Interval`</ph> is 1, <ph id="ph4">`Partition`</ph> returns " 267: 267".</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Partition`</ph> can be useful when constructing database queries.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create a SELECT query that shows how many orders occur within various value ranges, for example with invoice values from 1 to 1000, 1001 to 2000, and so on.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Long`</ph>.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Whole number that you want to locate within one of the calculated ranges.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Long`</ph>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Whole number that indicates the start of the set of calculated ranges.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Start</ph><ept id="p1">&lt;/code&gt;</ept> cannot be less than 0.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Long`</ph>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Whole number that indicates the end of the set of calculated ranges.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Stop</ph><ept id="p1">&lt;/code&gt;</ept> cannot be less than or equal to <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Start</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Long`</ph>.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Whole number that indicates the size of each range calculated between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Start</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Stop</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Interval</ph><ept id="p1">&lt;/code&gt;</ept> cannot be less than 1.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Returns a string representing the calculated range that contains a number.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Start&lt;/code&gt;</ph> &lt; 0, <ph id="ph2">&lt;code&gt;Stop&lt;/code&gt;</ph><ph id="ph3"> &lt;= </ph><bpt id="p1">&lt;code&gt;</bpt>Start<ept id="p1">&lt;/code&gt;</ept>, or <ph id="ph4">&lt;code&gt;Interval&lt;/code&gt;</ph> &lt; 1.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Saves or creates an application entry in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`My`</ph> feature gives you greater productivity and performance in registry operations than <ph id="ph2">`SaveSetting`</ph>.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Devices.ServerComputer.Registry"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`SaveSetting`</ph> function adds the key to <ph id="ph2">`HKEY_CURRENT_USER\Software\VB and VBA Program Settings`</ph>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the key setting cannot be saved for any reason, an error occurs.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`SaveSetting`</ph> requires that a user be logged on since it operates under the <ph id="ph2">`HKEY_LOCAL_USER`</ph> registry key, which is not active until a user logs on interactively.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the <ph id="ph1">`HKEY_LOCAL_MACHINE\Software\`</ph> or the <ph id="ph2">`HKEY_USER\DEFAULT\Software`</ph> registry keys.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`SaveSetting`</ph> requires <ph id="ph2">`Write`</ph> and <ph id="ph3">`Create`</ph><ph id="ph4">&lt;xref:System.Security.Permissions.RegistryPermission&gt;</ph> .</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression containing the name of the application or project to which the setting applies.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression containing the name of the section in which the key setting is being saved.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> expression containing the name of the key setting being saved.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Expression containing the value to which <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Key</ph><ept id="p1">&lt;/code&gt;</ept> is being set.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Key registry could not be created, or user is not logged in.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Runs an executable program and returns an integer containing the program's process ID if it is still running.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value of the <ph id="ph1">`Shell`</ph> function depends on whether the program named in <ph id="ph2">`PathName`</ph> is still executing when <ph id="ph3">`Shell`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set <ph id="ph1">`Wait`</ph> to <ph id="ph2">`True`</ph> and the program finishes before the timeout expires, <ph id="ph3">`Shell`</ph> returns zero.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout expires, or if you omit <ph id="ph1">`Wait`</ph> or set it to <ph id="ph2">`False`</ph>, <ph id="ph3">`Shell`</ph> returns the process ID of the program.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>The process ID is a unique number that identifies the running program.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>Failure to Start</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`Shell`</ph> function cannot start the named program, a <ph id="ph2">&lt;xref:System.IO.FileNotFoundException&gt;</ph> error occurs.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can happen, for example, when you attempt to run a 16-bit program, such as <ph id="ph1">`command.com`</ph>, from an application using <ph id="ph2">&lt;xref:System.Windows.Forms?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a workaround, you can run a 32-bit program that calls the desired 16-bit program.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of <ph id="ph1">`command.com`</ph>, you can run <ph id="ph2">`cmd.exe`</ph> as an alternative.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>Waiting for Completion</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">`Shell`</ph> function runs the program asynchronously.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that a program started with the <ph id="ph1">`Shell`</ph> function might not finish executing before the statements following the <ph id="ph2">`Shell`</ph> function are executed.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to wait for the program to finish before you continue, set <ph id="ph1">`Wait`</ph> to <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT">
          <source>Determining the Exit Code</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process can return an <bpt id="p1">*</bpt>exit code<ept id="p1">*</ept> when it terminates.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you cannot use <ph id="ph1">`Shell`</ph> to retrieve this exit code, because <ph id="ph2">`Shell`</ph> returns zero if it waits for termination, and also because the process runs in a different object from <ph id="ph3">`Shell`</ph>.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve the exit code from a process, you must write your own code to initiate the process and wait for termination.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows how to initiate a process, wait for it to terminate, and retrieve its exit code.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>Protecting the File Specification</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should always enclose the entire path and file specification in quotation marks, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each pair of adjacent double quotation marks (<ph id="ph1">`" "`</ph>) within the string literal is interpreted as one double quotation character in the string.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the preceding example presents the following string to the <ph id="ph1">`Shell`</ph> function:</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you did not have the path enclosed in quotation marks, Windows would look for a file called <ph id="ph1">`Program.exe`</ph> in the C:\ directory, instead of <ph id="ph2">`display.exe`</ph> in the C:\Program Files directory.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not enclose the path and file specification in quotation marks, there is a security risk if the file name or a path node contains spaces.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the preceding example, the path node <ph id="ph1">`\Program Files`</ph> includes a space.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specification were not inside quotation marks and a program named <ph id="ph1">`Program.exe`</ph> had been installed in C:<ph id="ph2">\\</ph>, for example by illicit tampering, Windows would execute it instead of <ph id="ph3">`display.exe`</ph>.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Shell`</ph> function requires unmanaged code permission, which might affect its execution in partial-trust situations.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> and <bpt id="p1">[</bpt>Code Access Permissions<ept id="p1">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Name of the program to execute, together with any required arguments and command-line switches.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">PathName</ph><ept id="p1">&lt;/code&gt;</ept> can also include the drive and the directory path or folder.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>If you do not know the path to the program, you can use the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.FileIO.FileSystem.GetFiles*"&gt;&lt;/xref&gt;</ph> to locate it.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>For example, you can call <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")</ph><ept id="p1">&lt;/code&gt;</ept>, which returns the full path of every file named <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">testFile.txt</ph><ept id="p2">&lt;/code&gt;</ept> anywhere on drive C:<ph id="ph3">\\</ph>.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AppWinStyle`</ph>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>A value chosen from the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.AppWinStyle"&gt;&lt;/xref&gt;</ph> specifying the style of the window in which the program is to run.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Style</ph><ept id="p1">&lt;/code&gt;</ept> is omitted, <ph id="ph2">`Shell`</ph> uses <ph id="ph3">`AppWinStyle.MinimizedFocus`</ph>, which starts the program minimized and with focus.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>A value indicating whether the <ph id="ph1">`Shell`</ph> function should wait for completion of the program.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Wait</ph><ept id="p1">&lt;/code&gt;</ept> is omitted, <ph id="ph2">`Shell`</ph> uses <ph id="ph3">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>The number of milliseconds to wait for completion if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Wait</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Timeout</ph><ept id="p1">&lt;/code&gt;</ept> is omitted, <ph id="ph2">`Shell`</ph> uses -1, which means there is no timeout and <ph id="ph3">`Shell`</ph> does not return until the program finishes.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Therefore, if you omit <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Timeout</ph><ept id="p1">&lt;/code&gt;</ept> or set it to -1, it is possible that <ph id="ph2">`Shell`</ph> might never return control to your program.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Runs an executable program and returns an integer containing the program's process ID if it is still running.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;Style&lt;/code&gt;</ph> is not within range 0 through 9, inclusive.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Shell`</ph> cannot find the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">PathName</ph><ept id="p1">&lt;/code&gt;</ept> file.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;PathName&lt;/code&gt;</ph> is <ph id="ph2">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Evaluates a list of expressions and returns an <ph id="ph1">`Object`</ph> value corresponding to the first expression in the list that is <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>The argument supplied to <ph id="ph1">`VarExpr`</ph> consists of paired expressions and values.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Switch`</ph> function evaluates the odd-numbered expressions from lowest to highest index in <ph id="ph2">`VarExpr`</ph>, and returns the even-numbered value associated with the first expression that evaluates to <ph id="ph3">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if <ph id="ph1">`VarExpr(0)`</ph> is <ph id="ph2">`True`</ph>, <ph id="ph3">`Switch`</ph> returns <ph id="ph4">`VarExpr(1)`</ph>, and if <ph id="ph5">`VarExpr(0)`</ph> is <ph id="ph6">`False`</ph> but <ph id="ph7">`VarExpr(2)`</ph> is <ph id="ph8">`True`</ph>, <ph id="ph9">`Switch`</ph> returns <ph id="ph10">`VarExpr(3)`</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not supply the <ph id="ph1">`VarExpr`</ph> argument, <ph id="ph2">`Switch`</ph> returns <ph id="ph3">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expressions in the argument list can include function calls.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of preparing the argument list for the call to <ph id="ph1">`Switch`</ph>, the Visual Basic compiler calls every function in every expression.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that you cannot rely on a particular function not being called if an expression earlier in the argument list is <ph id="ph1">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Object`</ph> parameter array.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Must have an even number of elements.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>You can supply a list of <ph id="ph1">`Object`</ph> variables or expressions separated by commas, or a single-dimensional array of <ph id="ph2">`Object`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Evaluates a list of expressions and returns an <ph id="ph1">`Object`</ph> value corresponding to the first expression in the list that is <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Number of arguments is odd.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>