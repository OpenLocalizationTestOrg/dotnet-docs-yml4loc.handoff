<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ed8825d0ebb6d1e0b97d7ef12c52cb177bd71ef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Forms.Control.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c9d9a8cc7a99eab31b9384cf354e0d75a8c0d0e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f964c8d04e0ca90eee1c418653f6ed38882cc16f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the base class for controls, which are components with visual representation.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create your own control class, inherit from the <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> classes, or from the other Windows Forms provided controls.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about authoring custom controls, see <bpt id="p1">[</bpt>Developing Custom Windows Forms Controls with the .NET Framework<ept id="p1">](~/docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class implements very basic functionality required by classes that display information to the user.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>It handles user input through the keyboard and pointing devices.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>It handles message routing and security.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>It defines the bounds of a control (its position and size), although it does not implement painting.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>It provides a window handle (<ph id="ph1">`hWnd`</ph>).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows Forms controls use ambient properties so child controls can appear like their surrounding environment.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <bpt id="p1">*</bpt>ambient property<ept id="p1">*</ept> is a control property that, if not set, is retrieved from the parent control.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control does not have a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph>, and the property is not set, the control attempts to determine the value of the ambient property through the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Site%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is not sited, if the site does not support ambient properties, or if the property is not set on the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph>, the control uses its own default values.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, an ambient property represents a characteristic of a control, such as <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, that is communicated to a child control.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ambient properties provided by the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>class include: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To make your Windows Forms application support visual styles, be sure to set the <ph id="ph1">&lt;xref:System.Windows.Forms.FlatStyle&gt;</ph> property to <ph id="ph2">`System`</ph> and include a manifest with your executable.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>A manifest is an XML file that is included either as a resource within your application executable or as a separate file that resides in the same directory as the executable file.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of a manifest, see the Example section of the <ph id="ph1">&lt;xref:System.Windows.Forms.FlatStyle&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using visual styles, see<bpt id="p1">[</bpt>Visual Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773187.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows Forms has accessibility support built in, and provides information about your application that enables it to work with accessibility client applications such as screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sometimes you will want to provide additional information to accessibility client applications.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two ways of providing this additional information.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> property values, which will be reported to accessibility client applications.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is typically used to provide limited accessibility information for existing controls.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can write your own class deriving from the <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject&gt;</ph> classes, providing as much accessibility information as needed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>To maintain better performance, do not set the size of a control in its constructor.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The preferred method is to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not add data bindings for a <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> in its constructor.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so will cause errors in code generation and can cause unwanted behavior.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The majority of the controls in the <ph id="ph1">&lt;xref:System.Windows.Forms&gt;</ph> namespace use the underlying Windows common control as a base to build on.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the Windows common controls, see<bpt id="p1">[</bpt>General Control Reference<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775497.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>To identify Windows Forms controls from a separate process, use a standard <ph id="ph1">`SendMessage`</ph> call to pass the WM_GETCONTROLNAME message.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>WM_GETCONTROLNAME is independent of the language and Windows hierarchy.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the "Recommended Solution for Windows Forms" topic in<bpt id="p1">[</bpt>Automating Windows Forms<ept id="p1">](http://msdn.microsoft.com/library/ms996405.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property to synchronize access to the control from multiple threads.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about multithreaded Windows Forms controls, see <bpt id="p1">[</bpt>How to: Make Thread-Safe Calls to Windows Forms Controls<ept id="p1">](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> class with default settings.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is the base class for all controls used in a Windows Forms application.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> class with specific text.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is the base class for all controls used in a Windows Forms application.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>This version of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> constructor sets the initial <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value to the <ph id="ph3">`text`</ph> parameter value.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The text displayed by the control.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> class as a child control, with specific text.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is the base class for all controls used in a Windows Forms application.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>This version of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> constructor sets the initial <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value to the <ph id="ph3">`text`</ph> parameter value.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor also adds the control to the parent control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> to be the parent of the control.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The text displayed by the control.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> class with specific text, size, and location.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is the base class for all controls used in a Windows Forms application.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>This version of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> constructor sets the initial <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph>property value to the <ph id="ph3">`text`</ph> parameter value.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> of the control are determined by the <ph id="ph3">`left`</ph>, <ph id="ph4">`top`</ph>, <ph id="ph5">`width`</ph> and <ph id="ph6">`height`</ph> parameter values.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>To maintain better performance, do not set the size of a control in its constructor.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The preferred method is to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The text displayed by the control.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Point.X"&gt;&lt;/xref&gt;</ph> position of the control, in pixels, from the left edge of the control's container.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The value is assigned to the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Left"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Point.Y"&gt;&lt;/xref&gt;</ph> position of the control, in pixels, from the top edge of the control's container.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The value is assigned to the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Top"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The width of the control, in pixels.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The value is assigned to the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Width"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The height of the control, in pixels.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The value is assigned to the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Height"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> class as a child control, with specific text, size, and location.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is the base class for all controls used in a Windows Forms application.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>This version of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> constructor sets the initial <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value to the <ph id="ph3">`text`</ph> parameter value.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor also adds the control to the parent control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> of the control are determined by the <ph id="ph3">`left`</ph>, <ph id="ph4">`top`</ph>, <ph id="ph5">`width`</ph> and <ph id="ph6">`height`</ph> parameter values.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>To maintain better performance, do not set the size of a control in its constructor.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The preferred method is to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> to be the parent of the control.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The text displayed by the control.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Point.X"&gt;&lt;/xref&gt;</ph> position of the control, in pixels, from the left edge of the control's container.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The value is assigned to the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Left"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Point.Y"&gt;&lt;/xref&gt;</ph> position of the control, in pixels, from the top edge of the control's container.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The value is assigned to the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Top"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The width of the control, in pixels.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The value is assigned to the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Width"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The height of the control, in pixels.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The value is assigned to the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Height"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Notifies the accessibility client applications of the specified <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleEvents"&gt;&lt;/xref&gt;</ph> for the specified child control.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=fullName&gt;</ph> method for each <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleEvents&gt;</ph> the accessibility client applications are to be notified of.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A&gt;</ph> method is typically called when a property is set or from within an event handler.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you might call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A&gt;</ph> method and pass in an <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleEvents&gt;</ph> value of <ph id="ph3">`Hide`</ph> from within the event handler for the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleEvents"&gt;&lt;/xref&gt;</ph> to notify the accessibility client applications of.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The child <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> to notify of the accessible event.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Notifies the accessibility client applications of the specified <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleEvents"&gt;&lt;/xref&gt;</ph> for the specified child control .</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleEvents"&gt;&lt;/xref&gt;</ph> to notify the accessibility client applications of.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The identifier of the <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleObject"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The child <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> to notify of the accessible event.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleObject"&gt;&lt;/xref&gt;</ph> assigned to the control.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>To control the instance returned from this method, override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> is currently assigned to the control, a new instance of one is created.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get or set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibilityObject%2A&gt;</ph> property, you must add a reference to the <ph id="ph2">`Accessibility`</ph> assembly installed with the<ph id="ph3">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about accessible objects, see <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleObject"&gt;&lt;/xref&gt;</ph> assigned to the control.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Gets or sets the default action description of the control for use by accessibility client applications.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>An object's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A&gt;</ph> property describes the object's primary method of manipulation from the user's viewpoint.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property should be a verb or a short verb phrase.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all objects have default actions, and some objects might have a default action that is related to its <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=fullName&gt;</ph> property, such as in the following examples:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>A selected check box has a default action of "Uncheck" and a value of "Checked."</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>A cleared check box has a default action of "Check" and a value of "Unchecked."</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>A button labeled "Print" has a default action of "Press," with no value.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>A label or a text box control that shows "Printer" has no default action, but would have a value of "Printer."</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about properties of accessible objects, see <bpt id="p1">[</bpt>Content of Descriptive Properties<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The default action description of the control for use by accessibility client applications.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Gets or sets the description of the control used by accessibility client applications.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>An object's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> property provides a textual description about an object's visual appearance.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The description is primarily used to provide greater context for low-vision or blind users, but can also be used for context searching or other applications.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> property is needed if the description is not obvious, or if it is redundant based on the object's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.AccessibleObject.State%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.AccessibleObject.Value%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a button with "OK" would not need additional information, but a button that shows a picture of a cactus would.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph>, and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> (and perhaps <ph id="ph3">&lt;xref:System.Windows.Forms.AccessibleObject.Help%2A&gt;</ph>) properties for the cactus button would describe its purpose, but the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> property would convey information that is less tangible, such as "A button that shows a picture of a cactus."</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about properties of accessible objects, see <bpt id="p1">[</bpt>Content of Descriptive Properties<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The description of the control used by accessibility client applications.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the control used by accessibility client applications.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph> property is a label that briefly describes and identifies the object within its container, such as the text in a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph>, the name of a <ph id="ph3">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph>, or a label displayed next to a <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about properties of accessible objects, see the "<bpt id="p1">[</bpt>Content of Descriptive Properties<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The name of the control used by accessibility client applications.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Gets or sets the accessible role of the control</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> property describes what kind of user interface element an object is.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control's role cannot be determined, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> property is set to <ph id="ph2">`Default`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about properties of accessible objects, see <bpt id="p1">[</bpt>Content of Descriptive Properties<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>One of the values of <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleRole"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`Default`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The value assigned is not one of the <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleRole"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the control can accept data that the user drags onto it.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if drag-and-drop operations are allowed in the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> property to define how a control is automatically resized as its parent control is resized.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Anchoring a control to its parent control ensures that the anchored edges remain in the same position relative to the edges of the parent control when the parent control is resized.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can anchor a control to one or more edges of its container.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> whose <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> property value is set to <ph id="ph4">`Top`</ph> and <ph id="ph5">`Bottom`</ph>, the <ph id="ph6">&lt;xref:System.Windows.Forms.Button&gt;</ph> is stretched to maintain the anchored distance to the top and bottom edges of the <ph id="ph7">&lt;xref:System.Windows.Forms.Form&gt;</ph> as the <ph id="ph8">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> of the <ph id="ph9">&lt;xref:System.Windows.Forms.Form&gt;</ph> is increased.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> properties are mutually exclusive.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one can be set at a time, and the last one set takes precedence.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.Windows.Forms.AnchorStyles"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`Top`</ph> and <ph id="ph2">`Left`</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Gets or sets where this control is scrolled to in <ph id="ph1">&lt;xref href="System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> specifying the scroll location.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The default is the upper-left corner of the control.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if enabled; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Gets or sets the background color for the control.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> property does not support transparent colors unless the <ph id="ph2">`SupportsTransparentBackColor`</ph> value of <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles?displayProperty=fullName&gt;</ph> is set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> property is an ambient property.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ambient property is a control property that, if not set, is retrieved from the parent control.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about ambient properties, see the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class overview.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> that represents the background color of the control.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The default is the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DefaultBackColor"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BackColor"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Gets or sets the background image displayed in the control.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> property to place a graphic image onto a control.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Images with translucent or transparent colors are not supported by Windows Forms controls as background images.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is not supported on child controls whose <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> that represents the image to display in the background of the control.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BackgroundImage"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Gets or sets the background image layout as defined in the <ph id="ph1">&lt;xref href="System.Windows.Forms.ImageLayout"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> property to specify the position and behavior of an image you have placed onto a control.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> takes effect only if the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> property is set.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can increase performance for large images if you set <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> to something other than <ph id="ph2">&lt;xref:System.Windows.Forms.ImageLayout.Tile&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>One of the values of <ph id="ph1">&lt;xref href="System.Windows.Forms.ImageLayout"&gt;&lt;/xref&gt;</ph> (<ph id="ph2">&lt;xref href="System.Windows.Forms.ImageLayout.Center"&gt;&lt;/xref&gt;</ph> , <ph id="ph3">&lt;xref href="System.Windows.Forms.ImageLayout.None"&gt;&lt;/xref&gt;</ph>, <ph id="ph4">&lt;xref href="System.Windows.Forms.ImageLayout.Stretch"&gt;&lt;/xref&gt;</ph>, <ph id="ph5">&lt;xref href="System.Windows.Forms.ImageLayout.Tile"&gt;&lt;/xref&gt;</ph>, or <ph id="ph6">&lt;xref href="System.Windows.Forms.ImageLayout.Zoom"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Forms.ImageLayout.Tile"&gt;&lt;/xref&gt;</ph> is the default value.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The specified enumeration value does not exist.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BackgroundImageLayout"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> property changes either programmatically or by user interaction.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously on the thread that the control's underlying handle was created on.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate is called asynchronously, and this method returns immediately.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call this method from any thread, even the thread that owns the control's handle.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no appropriate handle can be found, <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> will throw an exception.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call <ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> to retrieve the return value from the delegate, if neccesary, but this is not required.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> will block until the return value can be retrieved.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most methods on a control can only be called from the thread where the control was created.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The invoke methods always invoke their callbacks on the control's thread.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception might be thrown if the thread that should process the message is no longer active.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes no parameters.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that represents the result of the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.BeginInvoke(System.Delegate)"&gt;&lt;/xref&gt;</ph> operation.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>No appropriate window handle can be found.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments, on the thread that the control's underlying handle was created on.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate is called asynchronously, and this method returns immediately.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call this method from any thread, even the thread that owns the control's handle.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no appropriate handle can be found, <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> will throw an exception.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call <ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> to retrieve the return value from the delegate, if neccesary, but this is not required.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> will block until the return value can be retrieved.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most methods on a control can only be called from the thread where the control was created.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>The invoke methods always invoke their callbacks on the control's thread.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception might be thrown if the thread that should process the message is no longer active.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters of the same number and type that are contained in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>This can be <ph id="ph1">`null`</ph> if no arguments are needed.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that represents the result of the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.BeginInvoke(System.Delegate)"&gt;&lt;/xref&gt;</ph> operation.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>No appropriate window handle can be found.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Forms.BindingContext"&gt;&lt;/xref&gt;</ph> for the control.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.BindingContext&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> is used to return a single<ph id="ph3">&lt;xref:System.Windows.Forms.BindingManagerBase&gt;</ph> for all data-bound controls contained by the <ph id="ph4">&lt;xref:System.Windows.Forms.Control&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.BindingManagerBase&gt;</ph> keeps all controls that are bound to the same data source synchronized.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, setting the <ph id="ph1">&lt;xref:System.Windows.Forms.BindingManagerBase.Position%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.BindingManagerBase&gt;</ph> specifies the item in the underlying list that all data-bound controls point to.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating a new <ph id="ph1">&lt;xref:System.Windows.Forms.BindingContext&gt;</ph> and assigning it to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BindingContext%2A&gt;</ph> property, see the <ph id="ph3">&lt;xref:System.Windows.Forms.BindingContext.%23ctor%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.BindingContext"&gt;&lt;/xref&gt;</ph> for the control.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.BindingContext"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>To add a new <ph id="ph1">&lt;xref:System.Windows.Forms.BindingContext&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> through the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BindingContext%2A&gt;</ph> property, see the <ph id="ph4">&lt;xref:System.Windows.Forms.BindingContext.%23ctor%2A&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BindingContext%2A&gt;</ph> property is changed is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Gets the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property is equal to the sum of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> property value, and the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> property is a read-only property.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can manipulate this property value by changing the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> properties or calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetBounds%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.UpdateBounds%2A&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Gets or sets the size and location of the control including its nonclient elements, in pixels, relative to the parent control.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>The bounds of the control include the nonclient elements such as scroll bars, borders, title bars, and menus.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph> method is called to set the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph>property is not always changed through its <ph id="ph2">`set`</ph> method so you should override the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph> method to ensure that your code is executed when the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> property is set.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> in pixels relative to the parent control that represents the size and location of the control including its nonclient elements.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Brings the control to the front of the z-order.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>The control is moved to the front of the z-order.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is a child of another control, the child control is moved to the front of the z-order.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.BringToFront%2A&gt;</ph> does not make a control a top-level control, and it does not raise the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ImeMode"&gt;&lt;/xref&gt;</ph> property can be set to an active value, to enable IME support.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived classes can override this property to return <ph id="ph1">`false`</ph> if IME is not supported.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> in all cases.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the control can receive focus.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for a control to receive input focus, the control must have a handle assigned to it, and the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> properties must both be set to <ph id="ph3">`true`</ph> for both the control and all its parent controls, and the control must be a form or the control's outermost parent must be a form.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control can receive focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Determines if events can be raised on the control.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this control is being hosted as an ActiveX control, this property will return <ph id="ph1">`false`</ph> if the ActiveX control has its events frozen.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control is hosted as an ActiveX control whose events are not frozen; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the control can be selected.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property returns <ph id="ph1">`true`</ph> if the <ph id="ph2">`Selectable`</ph> value of <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles?displayProperty=fullName&gt;</ph> is set to <ph id="ph4">`true`</ph>, is contained in another control, the control itself is visible and enabled, and all its parent controls are visible and enabled.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Windows Forms controls in the following list are not selectable and will return a value of <ph id="ph1">`false`</ph> for the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CanSelect%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls derived from these controls are also not selectable.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (when there is no link present in the control)</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control can be selected; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the control has captured the mouse.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a control has captured the mouse, it receives mouse input whether or not the cursor is within its borders.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>The mouse is typically only captured during drag operations.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the foreground window can capture the mouse.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a background window attempts to do so, the window receives messages only for mouse events that occur when the mouse cursor is within the visible portion of the window.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the mouse is captured, shortcut keys should not work.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control has captured the mouse; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property value is typically set to <ph id="ph2">`false`</ph> for controls such as a Help button.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.CausesValidation"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Occurs when the focus or keyboard user interface (UI) cues change.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether to catch calls on the wrong thread that access a control's <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Handle"&gt;&lt;/xref&gt;</ph> property when an application is being debugged.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a thread other than the creating thread of a control tries to access one of that control's methods or properties, it often leads to unpredictable results.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>A common invalid thread activity is a call on the wrong thread that accesses the control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A&gt;</ph> to <ph id="ph2">`true`</ph> to find and diagnose this thread activity more easily while debugging.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if calls on the wrong thread are caught; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Occurs when the control is clicked.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event passes an <ph id="ph2">&lt;xref:System.EventArgs&gt;</ph> to its event handler, so it only indicates that a click has occurred.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need more specific mouse information (button, number of clicks, wheel rotation, or location), use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event will not be raised if the click is caused by action other than that of the mouse, such as pressing the ENTER key.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>A double-click is determined by the mouse settings of the user's operating system.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event is raised every time a control is double-clicked.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you have event handlers for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> events of a <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>, the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> events are raised when the form is double-clicked and both methods are called.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a control is double-clicked and that control does not support the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> event, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event might be raised twice.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set the <ph id="ph1">`StandardClick`</ph> value of<ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> to <ph id="ph3">`true`</ph> for this event to be raised.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Gets the rectangle that represents the client area of the control.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because client coordinates are relative to the upper-left corner of the client area of the control, the coordinates of the upper-left corner of the rectangle returned by this property are (0,0).</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to obtain the size and coordinates of the client area of the control for tasks such as drawing on the surface of the control.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about drawing on controls, see <bpt id="p1">[</bpt>Rendering a Windows Forms Control<ept id="p1">](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that represents the client area of the control.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Gets or sets the height and width of the client area of the control.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> method is called to set the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph>property.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph> property is not always changed through its <ph id="ph2">`set`</ph> method so you should override the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> method to ensure that your code is executed when the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph> property is set.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Size.Width%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Drawing.Size.Height%2A?displayProperty=fullName&gt;</ph> properties represent the width and height of the client area of the control.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to obtain the size of the client area of the control for tasks such as drawing on the surface of the control.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about drawing on controls, see <bpt id="p1">[</bpt>Rendering a Windows Forms Control<ept id="p1">](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot bind application settings to this property.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on application settings, see <bpt id="p1">[</bpt>Application Settings Overview<ept id="p1">](~/docs/framework/winforms/advanced/application-settings-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> that represents the dimensions of the client area of the control.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ClientSize"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Gets the name of the company or creator of the application containing the control.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph> property is a read-only property.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the value of this property, set the <ph id="ph1">&lt;xref:System.Reflection.AssemblyCompanyAttribute.Company%2A&gt;</ph> property value of the <ph id="ph2">&lt;xref:System.Reflection.AssemblyCompanyAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following line of C# code sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is strongly recommended that you provide the company name, product name, and product version for your app.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The company name or creator of the application containing the control.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Retrieves a value indicating whether the specified control is a child of the control.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> to evaluate.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified control is a child of the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the control, or one of its child controls, currently has the input focus.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to determine whether a control or any of the controls contained within it has the input focus.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine whether the control has focus, regardless of whether any of its child controls have focus, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focused%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>To give a control the input focus, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control or one of its child controls currently has the input focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Gets or sets the shortcut menu associated with the control.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use a shortcut menus to give context-specific menu options to users when they right-click on the control.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.ContextMenu"&gt;&lt;/xref&gt;</ph> that represents the shortcut menu associated with the control.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ContextMenu"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ContextMenu%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Forms.ContextMenuStrip"&gt;&lt;/xref&gt;</ph> associated with this control.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> has also been assigned to the control, the <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> takes precedence over the <ph id="ph3">&lt;xref:System.Windows.Forms.ContextMenuStrip&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.ContextMenuStrip"&gt;&lt;/xref&gt;</ph> for this control, or <ph id="ph2">`null`</ph> if there is no <ph id="ph3">&lt;xref href="System.Windows.Forms.ContextMenuStrip"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ContextMenuStrip"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Occurs when a new control is added to the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ControlCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Occurs when a control is removed from the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ControlCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Gets the collection of controls contained within the control.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> can act as a parent to a collection of controls.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when several controls are added to a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, each of the controls is a member of the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> assigned to the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> property of the form, which is derived from the <ph id="ph4">&lt;xref:System.Windows.Forms.Control&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can manipulate the controls in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> assigned to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> property by using the methods available in the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>When adding several controls to a parent control, it is recommended that you call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method before initializing the controls to be added.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>After adding the controls to the parent control, call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so will increase the performance of applications with many controls.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> property to iterate through all controls of a form, including nested controls.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetNextControl%2A&gt;</ph> method to retrieve the previous or next child control in the tab order.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> property to get or set the active control of a container control.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ControlCollection"&gt;&lt;/xref&gt;</ph> representing the collection of controls contained within the control.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Creates a new accessibility object for the control.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not explicitly call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> method, it will be called when the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibilityObject%2A&gt;</ph> property is referenced.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get or set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibilityObject%2A&gt;</ph> property, you must add a reference to the <ph id="ph2">`Accessibility`</ph> assembly installed with the <ph id="ph3">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleObject"&gt;&lt;/xref&gt;</ph> for the control.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Forces the creation of the visible control, including the creation of the handle and any visible child controls.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateControl%2A&gt;</ph> method forces a handle to be created for the control and its child controls.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used when you need a handle immediately for manipulation of the control or its children; simply calling a control's constructor does not create the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateControl%2A&gt;</ph> does not create a control handle if the control's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property is <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can either call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> method or access the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> property to create the control's handle regardless of the control's visibility, but in this case, no window handles are created for the control's children.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the control collection for the control.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>A new instance of <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ControlCollection"&gt;&lt;/xref&gt;</ph> assigned to the control.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the control has been created.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Created%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> if the <ph id="ph3">&lt;xref:System.Windows.Forms.Control&gt;</ph> was successfully created even though the control's handle might not have been created or recreated yet.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control has been created; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Creates the <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> for the control.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object that you retrieve through the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> method should not normally be retained after the current Windows message has been processed, because anything painted with that object will be erased with the next WM_PAINT message.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore you cannot cache the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object for reuse, except to use non-visual methods like <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you must call <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> every time that you want to use the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object, and then call <ph id="ph3">&lt;xref:System.Drawing.Graphics.Dispose%2A&gt;</ph> when you are finished using it.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about Windows messages, see <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>By design, <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> sets ownership to the calling thread, and fails if it is called on other threads.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> for the control.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Creates a handle for the control.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically should not call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> method directly.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>The preferred method is to call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateControl%2A&gt;</ph> method, which forces a handle to be created for the control and its child controls when the control is created.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The object is in a disposed state.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Gets the required creation parameters when the control handle is created.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> property should not be overridden and used to adjust the properties of your derived control.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties such as the <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=fullName&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=fullName&gt;</ph> should be set by the corresponding properties in your control such as <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Text%2A?displayProperty=fullName&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Width%2A?displayProperty=fullName&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Height%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams&gt;</ph> should only be extended when you are wrapping a standard Windows control class or to set styles not provided by the Windows Forms namespace.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating control parameters, see the <ph id="ph1">`CreateWindow`</ph> and <ph id="ph2">`CreateWindowEx`</ph> functions and the <bpt id="p1">[</bpt>CREATESTRUCT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632603.aspx)</ept>structure documentation.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.CreateParams"&gt;&lt;/xref&gt;</ph> that contains the required creation parameters when the handle to the control is created.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Gets or sets the cursor that is displayed when the mouse pointer is over the control.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assign a <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph> property of the control to change the cursor displayed when the mouse pointer is over the control.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>To temporarily change the mouse cursor for all controls on your application set the <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically you would set the <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=fullName&gt;</ph> property to a wait cursor when populating a <ph id="ph2">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> or saving or loading a file.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph> property is an ambient property.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ambient property is a control property that, if not set, is retrieved from the parent control.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about ambient properties, see the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class overview.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Cursor"&gt;&lt;/xref&gt;</ph> that represents the cursor to display when the mouse pointer is over the control.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Cursor"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Gets the data bindings for the control.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DataBindings%2A&gt;</ph> property to access the <ph id="ph2">&lt;xref:System.Windows.Forms.ControlBindingsCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>By adding <ph id="ph1">&lt;xref:System.Windows.Forms.Binding&gt;</ph> objects to the collection, you can bind any property of a control to the property of an object.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.ControlBindingsCollection"&gt;&lt;/xref&gt;</ph> that contains the <ph id="ph2">&lt;xref href="System.Windows.Forms.Binding"&gt;&lt;/xref&gt;</ph> objects for the control.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Gets the default background color of the control.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the default <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> property value of a generic top-level control.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived classes can have different defaults.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The default background <ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Drawing.SystemColors.Control"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Gets or sets the default cursor for the control.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultCursor%2A&gt;</ph> to configure a default cursor for your control.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is more efficient than setting the cursor in the control's constructor, and gives automatic support for certain cursor-related designer functions.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>An object of type <ph id="ph1">&lt;xref href="System.Windows.Forms.Cursor"&gt;&lt;/xref&gt;</ph> representing the current default cursor.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Gets the default font of the control.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes the value returned by <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph> depending on the operating system and local culture.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>System/and or Culture</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>Font</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows NT 4x, Japanese version</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>MS UI Gothic, 9 point.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>Arabic Windows</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tahoma, 8 point.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other operating system/culture</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>MS Shell Dlg logical font, typically Microsoft San Serif 8 point.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>MS Shell Dlg maps to a font set in the system registry.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the previous fonts are not installed, the default font is Tahoma, 8 point.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>If Tahoma, 8 point, is not installed, <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph>returns the value of the <ph id="ph2">&lt;xref:System.Drawing.FontFamily.GenericSansSerif%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The value returned will vary depending on the user's operating system the local culture setting of their system.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>The default font or the regional alternative fonts are not installed on the client computer.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Gets the default foreground color of the control.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the default <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> property value of a nonparented control.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived classes can have different defaults.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The default foreground <ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Drawing.SystemColors.ControlText"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Gets the default Input Method Editor (IME) mode supported by the control.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>An Input Method Editor (IME) is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>As implemented in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class, this property always returns the <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode?displayProperty=fullName&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ImeMode.Inherit&gt;</ph> value specifies that the IME mode is inherited from the parent control.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.ImeMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Gets the space, in pixels, that is specified by default between controls.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Padding"&gt;&lt;/xref&gt;</ph> that represents the default space between controls.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Gets the length and height, in pixels, that is specified as the default maximum size of a control.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Point.#ctor(System.Drawing.Size)"&gt;&lt;/xref&gt;</ph> representing the size of the control.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Gets the length and height, in pixels, that is specified as the default minimum size of a control.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> representing the size of the control.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Gets the internal spacing, in pixels, of the contents of a control.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Padding"&gt;&lt;/xref&gt;</ph> that represents the internal spacing of the contents of a control.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Gets the default size of the control.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property represents the <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph> of the control when it is initially created.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can adjust the size of the control by setting its <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>To maintain better performance, do not set the <ph id="ph1">&lt;xref:System.Drawing.Size&gt;</ph> of a control in its constructor.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>The preferred method is to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>On Windows Server 2003 systems, the size of a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> is restricted by the maximum pixel width and height of the monitor.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Sends the specified message to the default window procedure.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about processing Windows messages, see the <bpt id="p1">[</bpt>WindowProc function<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=181565)</ept>.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>The Windows <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph> to process.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Destroys the handle associated with the control.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Gets the DPI value for the display device where the control is currently being displayed.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The DPI value of the display device.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Gets the rectangle that represents the display area of the control.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DisplayRectangle%2A&gt;</ph> property returns the client rectangle of the display area of the control.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the base control class, this is equal to the client rectangle.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, inheriting controls might want to change this if their client area differs from their display area.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>The display rectangle is the smallest <ph id="ph1">&lt;xref:System.Drawing.Rectangle&gt;</ph> that encloses a control and is used to lay out controls.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that represents the display area of the control.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> and its child controls and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.<ph id="ph3">`Dispose()`</ph></source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT">
          <source>invokes the protected <ph id="ph1">`Dispose(Boolean)`</ph> method with the <ph id="ph2">`disposing`</ph> parameter set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Windows.Forms.Control&gt;</ph> references.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the base <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> class is in the process of disposing.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property returns <ph id="ph1">`true`</ph>, the base<ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is in the process of disposing.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the control is disposed of, it can no longer be referenced as a valid Windows control.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a control is disposed of, you cannot call its <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the base <ph id="ph2">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> class is in the process of disposing; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> property to define how a control is automatically resized as its parent control is resized.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, setting <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.Forms.DockStyle?displayProperty=fullName&gt;</ph> causes the control to align itself with the left edges of its parent control and to resize as the parent control is resized.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls are docked in their Z-order, which is the visual layering of controls on a form along the form's Z-axis (depth).</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>A control can be docked to one edge of its parent container or can be docked to all edges and fill the parent container.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Margin%2A&gt;</ph> property on a docked control has no effect on the distance of the control from the the edges of its container.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> properties are mutually exclusive.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one can be set at a time, and the last one set takes precedence.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.DockStyle"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Forms.DockStyle.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>The value assigned is not one of the <ph id="ph1">&lt;xref href="System.Windows.Forms.DockStyle"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Dock"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Begins a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`allowedEffects`</ph> parameter determines which drag operations can occur.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the drag operation needs to interoperate with applications in another process, data should either be a base managed class (<ph id="ph1">&lt;xref:System.String&gt;</ph>, <ph id="ph2">&lt;xref:System.Drawing.Bitmap&gt;</ph>, or <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph>), or an object that implements <ph id="ph4">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Forms.IDataObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>It then checks to see if the control is a valid drop target.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a change in the keyboard or mouse button state, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method catches all exceptions and rethrows only the following security or critical exceptions:</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT">
          <source>SecurityException</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT">
          <source>NullReferenceException</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT">
          <source>StackOverflowException</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT">
          <source>OutOfMemoryException</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT">
          <source>ThreadAbortException</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExecutionEngineException</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT">
          <source>IndexOutOfRangeException</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>AccessViolationException</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The data to drag.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.DragDropEffects"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>A value from the <ph id="ph1">&lt;xref href="System.Windows.Forms.DragDropEffects"&gt;&lt;/xref&gt;</ph> enumeration that represents the final effect that was performed during the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>Buffered graphics require that the updated graphics data is first written to a buffer.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data in the graphics buffer is then quickly written to displayed surface memory.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleBuffered%2A&gt;</ph> is not a bindable property.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the surface of the control should be drawn using double buffering; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Occurs when the control is double-clicked.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>A double-click is determined by the mouse settings of the user's operating system.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event is raised every time a control is double-clicked.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you have event handlers for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> events of a <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>, the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> events are raised when the form is double-clicked and both methods are called.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a control is double-clicked and that control does not support the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> event, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event might be raised twice.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set the <ph id="ph1">`StandardDoubleClick`</ph> and <ph id="ph2">`StandardClick`</ph> values of <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> to <ph id="ph4">`true`</ph> for this event to be raised.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>These values might already be set to <ph id="ph1">`true`</ph> if you are inheriting from existing Windows Forms controls.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Occurs when the DPI setting for a control is changed programmatically after the DPI of it's parent control or form has changed.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Occurs when the DPI setting for a control is changed programmatically before a DPI change event for it's parent control or form has occurred.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Occurs when a drag-and-drop operation is completed.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.DragEventArgs&gt;</ph> are in screen coordinates, not client coordinates.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following line of <ph id="ph1">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> code converts the properties to a client <ph id="ph2">&lt;xref:System.Drawing.Point&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT">
          <source>In versions earlier than <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, if you put a <ph id="ph2">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> with <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> events on a Windows Form and drag and drop something onto the <ph id="ph5">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> at design time, the <ph id="ph6">`DropDrop`</ph> and <ph id="ph7">`DropEnter`</ph> events are raised.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when you close and reopen the solution, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> events are not raised again.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Occurs when an object is dragged into the control's bounds.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> event is raised when the user first drags the mouse cursor over the control during a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT">
          <source>In versions earlier than <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, if you put a <ph id="ph2">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> with <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> events on a Windows Form and drag and drop something onto the <ph id="ph5">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> at design time, the <ph id="ph6">`DropDrop`</ph> and <ph id="ph7">`DropEnter`</ph> events are raised.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when you close and reopen the solution, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> events are not raised again.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT">
          <source>It then checks to see if the control is a valid drop target.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a change in the keyboard or mouse button state, the<ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.DragEventArgs&gt;</ph> are in screen coordinates, not client coordinates.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following line of <ph id="ph1">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> code converts the properties to a client <ph id="ph2">&lt;xref:System.Drawing.Point&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Occurs when an object is dragged out of the control's bounds.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised when the user drags the cursor out of the control or the user cancels the current drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT">
          <source>It then checks to see if the control is a valid drop target.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a change in the keyboard or mouse button state, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Occurs when an object is dragged over the control's bounds.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised when the mouse cursor moves within the bounds of the control during a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT">
          <source>It then checks to see if the control is a valid drop target.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a change in the keyboard or mouse button state, the<ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> value is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.DragEventArgs&gt;</ph> are in screen coordinates, not client coordinates.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following line of C# code converts the properties to a client <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT">
          <source>Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Supports rendering to the specified bitmap.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> method is not supported for ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPrint%2A&gt;</ph> event and provide custom printing logic if required.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> method has the following limitations:</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> might be thrown for large bitmaps.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>The maximum allowable size varies by machine.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> does not support the <ph id="ph2">`Ink`</ph> controls for the Windows XP Tablet PC Edition 2005 operating system.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> does not draw a child <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> if the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> is set to <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls inside containers are rendered in reverse order.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> is not fully functional for the <ph id="ph2">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph>; only the border of a bitmap is drawn.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>The bitmap to be drawn to.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>The bounds within which the control is rendered.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the control can respond to user interaction.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>With the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property, you can enable or disable controls at run time.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can disable controls that do not apply to the current state of the application.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also disable a control to restrict its use.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a button can be disabled to prevent the user from clicking it.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a control is disabled, it cannot be selected.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property to <ph id="ph2">`false`</ph> does not disable the application's control box or prevent the application window from receiving the focus.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a container control has its enabled property set to <ph id="ph1">`false`</ph>, all its contained controls are disabled, as well.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the user clicks on any of the controls contained in a disabled <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> control, no events are raised.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a scrollable control is disabled, the scroll bars are also disabled.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a disabled multiline textbox is unable to scroll to display all the lines of text.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control can respond to user interaction; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Enabled"&gt;&lt;/xref&gt;</ph> property value has changed.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Retrieves the return value of the asynchronous operation represented by the <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> passed.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the asynchronous operation has not been completed, this function will block until the result is available.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that represents a specific invoke asynchronous operation, returned when calling <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.BeginInvoke(System.Delegate)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> generated by the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">asyncResult</ph><ept id="p1">&lt;/code&gt;</ept> parameter value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">asyncResult</ph><ept id="p1">&lt;/code&gt;</ept> object was not created by a preceding call of the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.BeginInvoke(System.Delegate)"&gt;&lt;/xref&gt;</ph> method from the same control.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>Occurs when the control is entered.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName&gt;</ph> property to the current form, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events are suppressed by the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent events in the <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class are the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, assume you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with two <ph id="ph2">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> controls, and each <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> control has one <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the caret is moved from one <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> to the other, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> event is raised for the <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> event is raised for the other <ph id="ph6">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and <ph id="ph7">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">`WM_KILLFOCUS`</ph> topic in the "Keyboard Input Reference" section and the "Message Deadlocks" section of the<bpt id="p1">[</bpt>About Messages and Message Queues<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)</ept>topic.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Retrieves the form that the control is on.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT">
          <source>The control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> property value might not be the same as the <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> returned by <ph id="ph3">&lt;xref:System.Windows.Forms.Control.FindForm%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a <ph id="ph1">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> control is contained within a <ph id="ph2">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> control, and the <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> is on a <ph id="ph4">&lt;xref:System.Windows.Forms.Form&gt;</ph>, the <ph id="ph5">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> control's <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> is the <ph id="ph7">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and the <ph id="ph8">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> control's <ph id="ph9">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> is the <ph id="ph10">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> that the control is on.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Sets input focus to the control.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> if the control successfully received input focus.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT">
          <source>The control can have the input focus while not displaying any visual cues of having the focus.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior is primarily observed by the nonselectable controls listed below, or any controls derived from them.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT">
          <source>A control can be selected and receive input focus if all the following are true: the <ph id="ph1">`Selectable`</ph> value of <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> is set to <ph id="ph3">`true`</ph>, it is contained in another control, and all its parent controls are both visible and enabled.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Windows Forms controls in the following list are not selectable.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls derived from these controls are also not selectable.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (when there is no link present in the control)</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> is a low-level method intended primarily for custom control authors.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, application programmers should use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> property for child controls, or the <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Activate%2A&gt;</ph> method for forms.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the input focus request was successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the control has input focus.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control has focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Gets or sets the font of the text displayed by the control.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> property is an ambient property.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ambient property is a control property that, if not set, is retrieved from the parent control.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about ambient properties, see the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class overview.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Drawing.Font&gt;</ph> is immutable (meaning that you cannot adjust any of its properties), you can only assign the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> property a new <ph id="ph3">&lt;xref:System.Drawing.Font&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can base the new font on the existing font.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT">
          <source>[Visual Basic, C#]</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following is an example of how to adjust the existing font to make it bold:</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> to apply to the text displayed by the control.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>The default is the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DefaultFont"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Font"&gt;&lt;/xref&gt;</ph> property value changes.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> property is changed by either a programmatic modification or through interaction.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Gets or sets the height of the font of the control.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FontHeight%2A&gt;</ph> property should not be set to any value other than the control's <ph id="ph2">&lt;xref:System.Drawing.Font.Height%2A?displayProperty=fullName&gt;</ph> value, or -1.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FontHeight%2A&gt;</ph> to -1 has the effect of clearing the cached height value, and the value is recalculated the next time the property is referenced.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>The height of the <ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> of the control in pixels.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Gets or sets the foreground color of the control.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> property is an ambient property.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ambient property is a control property that, if not set, is retrieved from the parent control.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about ambient properties, see the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class overview.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>The foreground <ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>The default is the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DefaultForeColor"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ForeColor"&gt;&lt;/xref&gt;</ph> property value changes.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> property is changed by either a programmatic modification or through interaction.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Retrieves the control that contains the specified handle.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method searches up the window handle parent chain until it finds a handle that is associated with a control.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is more reliable than the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FromHandle%2A&gt;</ph> method, because it correctly returns controls that own more than one handle.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>The window handle (<ph id="ph1">`HWND`</ph>) to search for.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> that represents the control associated with the specified handle; returns <ph id="ph2">`null`</ph> if no control with the specified handle is found.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Returns the control that is currently associated with the specified handle.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FromChildHandle%2A&gt;</ph> method if you need to return controls that own more than one handle.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>The window handle (<ph id="ph1">`HWND`</ph>) to search for.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> that represents the control associated with the specified handle; returns <ph id="ph2">`null`</ph> if no control with the specified handle is found.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Retrieves the specified <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleObject"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Int32`</ph> that identifies the <ph id="ph2">&lt;xref href="System.Windows.Forms.AccessibleObject"&gt;&lt;/xref&gt;</ph> to retrieve.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>The specified <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleObject"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Retrieves a value indicating how a control will behave when its <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.AutoSize"&gt;&lt;/xref&gt;</ph> property is enabled.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.AutoSizeMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Retrieves the child control that is located at the specified coordinates.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no child control at the specified point, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetChildAtPoint%2A&gt;</ph> method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> that contains the coordinates where you want to look for a control.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Coordinates are expressed relative to the upper-left corner of the control's client area.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> that represents the control that is located at the specified point.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Retrieves the child control that is located at the specified coordinates, specifying whether to ignore child controls of a certain type.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> that contains the coordinates where you want to look for a control.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Coordinates are expressed relative to the upper-left corner of the control's client area.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>One of the values of <ph id="ph1">&lt;xref href="System.Windows.Forms.GetChildAtPointSkip"&gt;&lt;/xref&gt;</ph>, determining whether to ignore child controls of a certain type.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>The child <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> at the specified coordinates.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Returns the next <ph id="ph1">&lt;xref href="System.Windows.Forms.ContainerControl"&gt;&lt;/xref&gt;</ph> up the control's chain of parent controls.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.IContainerControl"&gt;&lt;/xref&gt;</ph>, that represents the parent of the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Retrieves the next control forward or back in the tab order of child controls.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetNextControl%2A&gt;</ph> method is dependent on tab order.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT">
          <source>To iterate through all controls of a form, including nested controls, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get or set the active control of a container control, use the <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> to start the search with.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to search forward in the tab order; <ph id="ph2">`false`</ph> to search backward.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>The next <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> in the tab order.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Retrieves the size of a rectangular area into which a control can be fitted.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetPreferredSize%2A&gt;</ph> differs by control.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.LayoutEngine%2A&gt;</ph> might be unable to assign the returned size to the control.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can return a size larger than the constraints indicated in the <ph id="ph1">`proposedSize`</ph> parameter, but <ph id="ph2">`proposedSize`</ph> should decrease as the constraint decreases.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`GetPreferredSize(new Size(100, 0))`</ph> should not be wider than <ph id="ph2">`GetPreferredSize(new Size(200, 0))`</ph>.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exception is a <ph id="ph1">`proposedSize`</ph> of 0 or <ph id="ph2">`Size.Empty`</ph>, which are defined as unconstrained.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>The custom-sized area for a control.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>An ordered pair of type <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> representing the width and height of a rectangle.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Retrieves the bounds within which the control is scaled.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a helper method that is called by <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> to retrieve the bounds within which the control is scaled.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override this method to reuse the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> scaling logic, but you must supply your own bounds.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns scaled bounds that take into account the <ph id="ph1">`specified`</ph> bounds, whether the control is top level, whether the control is fixed width or auto size, and any adornments the control might have.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that specifies the area for which to retrieve the display bounds.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>The height and width of the control's bounds.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>One of the values of <ph id="ph1">&lt;xref href="System.Windows.Forms.BoundsSpecified"&gt;&lt;/xref&gt;</ph> that specifies the bounds of the control to use when defining its size and position.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> representing the bounds within which the control is scaled.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the specified control style bit for the control.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT">
          <source>Control style bit flags are used to categorize supported behavior.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT">
          <source>A control can enable a style by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> method and passing in the appropriate <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> bit and the Boolean value to set the bit to.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine the value assigned to a specified <ph id="ph1">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> bit, use the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetStyle%2A&gt;</ph> method and pass in the <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> member to evaluate.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.ControlStyles"&gt;&lt;/xref&gt;</ph> bit to return the value from.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified control style bit is set to <ph id="ph2">`true`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Determines if the control is a top-level control.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control is a top-level control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>Occurs during a drag operation.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised when a drag-and-drop operation is started.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT">
          <source>With the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event, the source of a drag event can modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT">
          <source>It then checks to see if the control is a valid drop target.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a change in the keyboard or mouse button state, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>Occurs when the control receives focus.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName&gt;</ph> property to the current form, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events are only used when updating <ph id="ph3">&lt;xref:System.Windows.Forms.UICues&gt;</ph> or when writing custom controls.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events should be used for all controls except the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> class, which uses the <ph id="ph4">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events, see the <bpt id="p1">[</bpt>WM_SETFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646283\(v=vs.85\).aspx)</ept>and<bpt id="p2">[</bpt>WM_KILLFOCUS<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> topics.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>Gets the window handle that the control is bound to.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> property is a Windows <ph id="ph2">`HWND`</ph>.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the handle has not yet been created, referencing this property will force the handle to be created.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IntPtr"&gt;&lt;/xref&gt;</ph> that contains the window handle (<ph id="ph2">`HWND`</ph>) of the control.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>Occurs when a handle is created for the control.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT">
          <source>A handle is created when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> is displayed for the first time.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> is created that has <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> set to <ph id="ph3">`false`</ph>, the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.HandleCreated&gt;</ph> event will not be raised until <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> is set to <ph id="ph6">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see<bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Occurs when the control's handle is in the process of being destroyed.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT">
          <source>During the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleDestroyed&gt;</ph> event, the control is still a valid Windows control and the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> can be recreated by calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the control contains one or more child controls.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> collection has a <ph id="ph2">&lt;xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A&gt;</ph> greater than zero, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.HasChildren%2A&gt;</ph> property will return <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT">
          <source>Accessing the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HasChildren%2A&gt;</ph> property does not force the creation of a <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> if the control has no children, so referencing this property can provide a performance benefit when walking a tree of controls.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control contains one or more child controls; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Gets or sets the height of the control.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes made to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> property values cause the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> property value of the control to change.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum height for the derived control <ph id="ph1">&lt;xref:System.Windows.Forms.Splitter&gt;</ph> is one pixel.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default height for the <ph id="ph1">&lt;xref:System.Windows.Forms.Splitter&gt;</ph> control is three pixels.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the height of the <ph id="ph1">&lt;xref:System.Windows.Forms.Splitter&gt;</ph> control to a value less than one will reset the property value to the default height.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>The height of the control in pixels.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>Occurs when the user requests help for a control.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HelpRequested&gt;</ph> event is commonly raised when the user presses the F1 key or an associated context-sensitive help button is clicked.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>Conceals the control from the user.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hiding the control is equivalent to setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Hide%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property returns a value of <ph id="ph3">`false`</ph> until the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Show%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Gets or sets the Input Method Editor (IME) mode of the control.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT">
          <source>An IME is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, using a standard keyboard.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> property is typically set to <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode?displayProperty=fullName&gt;</ph> for a <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control that is intended to only enter numeric values.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> property value is set to <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode?displayProperty=fullName&gt;</ph> for the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most classes that do not directly support Input Method Editors, or allow direct input from an IME, will set the value of this property to <ph id="ph1">&lt;xref:System.Windows.Forms.ImeMode.NoControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can interactively change the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> unless it has been programmatically set to <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the user will not be able to use the IME.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> property is ignored on Windows 8 when the global input mode is in effect.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more info, see<bpt id="p1">[</bpt>Switch Text Input Changed from Per-Thread to Per-User<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=256509)</ept>.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.ImeMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Forms.ImeMode.Inherit"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>The assigned value is not one of the <ph id="ph1">&lt;xref href="System.Windows.Forms.ImeMode"&gt;&lt;/xref&gt;</ph> enumeration values.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Gets or sets the IME mode of a control.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>The IME mode of the control.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ImeMode"&gt;&lt;/xref&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> property is changed by either a programmatic modification or through interaction.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls that do not support Input Method Managers will never raise this event.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Called after the control has been added to another container.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InitLayout%2A&gt;</ph> method is called immediately after adding a control to a container.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InitLayout%2A&gt;</ph> method enables a control to initialize its layout state based on its container.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you would typically apply anchoring and docking to the control in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InitLayout%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>Optionally, invalidates the child controls assigned to the control.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph> to invalidate.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to invalidate the control's child controls; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>Optionally, invalidates the child controls assigned to the control.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that represents the region to invalidate.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to invalidate the control's child controls; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph> to invalidate.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that represents the region to invalidate.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>Invalidates a specific region of the control and causes a paint message to be sent to the control.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>Optionally, invalidates the child controls assigned to the control.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to invalidate the control's child controls; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>Invalidates the entire surface of the control and causes the control to be redrawn.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>Occurs when a control's display requires redrawing.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate on the thread that owns the control's underlying window handle.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegates are similar to function pointers in C or C++ languages.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegates encapsulate a reference to a method inside a delegate object.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method searches up the control's parent chain until it finds a control or form that has a window handle if the current control's underlying window handle does not exist yet.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no appropriate handle can be found, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method will throw an exception.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions that are raised during the call will be propagated back to the caller.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate can be an instance of <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph>, in which case the sender parameter will contain this control, and the event parameter will contain <ph id="ph2">&lt;xref:System.EventArgs.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate can also be an instance of <ph id="ph1">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph>, or any other delegate that takes a void parameter list.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT">
          <source>A call to an <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph> delegate will be faster than a call to another type of delegate.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception might be thrown if the thread that should process the message is no longer active.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>A delegate that contains a method to be called in the control's thread context.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked, or <ph id="ph1">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate, on the thread that owns the control's underlying window handle, with the specified list of arguments.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegates are similar to function pointers in C or C++ languages.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegates encapsulate a reference to a method inside a delegate object.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no appropriate handle can be found, this method throws an exception.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions that are raised during the call will be propagated back to the caller.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate can be an instance of <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph>, in which case the sender parameter will contain this control, and the event parameter will contain <ph id="ph2">&lt;xref:System.EventArgs.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate can also be an instance of <ph id="ph1">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph>, or any other delegate that takes a void parameter list.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT">
          <source>A call to an <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph> delegate will be faster than a call to another type of delegate.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception might be thrown if the thread that should process the message is no longer active.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters of the same number and type that are contained in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>This parameter can be <ph id="ph1">`null`</ph> if the method takes no arguments.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> that contains the return value from the delegate being invoked, or <ph id="ph2">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.GotFocus"&gt;&lt;/xref&gt;</ph> event for the specified control.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> to assign the event to.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.LostFocus"&gt;&lt;/xref&gt;</ph> event for the specified control.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> to assign the event to.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Click"&gt;&lt;/xref&gt;</ph> event for the specified control.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> to assign the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.Click"&gt;&lt;/xref&gt;</ph> event to.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Paint"&gt;&lt;/xref&gt;</ph> event for the specified control.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> to assign the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.Paint"&gt;&lt;/xref&gt;</ph> event to.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.PaintEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">`PaintBackground`</ph> event for the specified control.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> to assign the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.Paint"&gt;&lt;/xref&gt;</ph> event to.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.PaintEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the caller must call an invoke method when making method calls to the control because the caller is on a different thread than the one the control was created on.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls in Windows Forms are bound to a specific thread and are not thread safe.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if you are calling a control's method from a different thread, you must use one of the control's invoke methods to marshal the call to the proper thread.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used to determine if you must call an invoke method, which can be useful if you do not know what thread owns a control.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe to call: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>,<ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all other method calls, you should use one of these invoke methods when calling from a different thread.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control's handle does not yet exist, <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> searches up the control's parent chain until it finds a control or form that does have a window handle.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no appropriate handle can be found, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> method returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph>can return <ph id="ph2">`false`</ph> if <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> is not required (the call occurs on the same thread), or if the control was created on a different thread but the control's handle has not yet been created.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case where the control's handle has not yet been created, you should not simply call properties, methods, or events on the control.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT">
          <source>This might cause the control's handle to be created on the background thread, isolating the control on a thread without a message pump and making the application unstable.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can protect against this case by also checking the value of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsHandleCreated%2A&gt;</ph> when <ph id="ph2">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> returns <ph id="ph3">`false`</ph> on a background thread.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control handle has not yet been created, you must wait until it has been created before calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, this happens only if a background thread is created in the constructor of the primary form for the application (as in <ph id="ph1">`Application.Run(new MainForm())`</ph>, before the form has been shown or <ph id="ph2">`Application.Run`</ph> has been called.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT">
          <source>One solution is to wait until the form's handle has been created before starting the background thread.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either force handle creation by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> property, or wait until the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> event to start the background process.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT">
          <source>An even better solution is to use the <ph id="ph1">`SynchronizationContext`</ph> returned by <ph id="ph2">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> rather than a control for cross-thread marshaling.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception might be thrown if the thread that should process the message is no longer active.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about multithreaded Windows Forms controls, see <bpt id="p1">[</bpt>How to: Use a Background Thread to Search for Files<ept id="p1">](~/docs/framework/winforms/controls/how-to-use-a-background-thread-to-search-for-files.md)</ept> and <bpt id="p2">[</bpt>How to: Make Thread-Safe Calls to Windows Forms Controls<ept id="p2">](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control's <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.Handle"&gt;&lt;/xref&gt;</ph> was created on a different thread than the calling thread (indicating that you must make calls to the control through an invoke method); otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the control is visible to accessibility applications.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control is visible to accessibility applications; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the control has been disposed of.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property returns <ph id="ph1">`true`</ph>, the control is disposed of and can no longer be referenced as a valid Windows control.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a control is disposed, you cannot call its <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control has been disposed of; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the control has a handle associated with it.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsHandleCreated%2A&gt;</ph> property to determine whether <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> has been called.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a handle has been assigned to the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Determines if a character is an input character that the control recognizes.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> method to determine whether the character specified by the <ph id="ph2">`charCode`</ph> parameter is an input character that the control wants.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called during window message preprocessing to determine whether the specified input character should be preprocessed or sent directly to the control.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, the specified character is sent directly to the control.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, the specified character is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT">
          <source>The preprocessing of a character includes checking whether the character is a mnemonic of another control.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>The character to test.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the character should be sent directly to the control and not preprocessed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method to determine whether the key specified by the <ph id="ph2">`keyData`</ph> parameter is an input key that the control wants.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called during window message preprocessing to determine whether the specified input key should be preprocessed or sent directly to the control.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, the specified key is sent directly to the control.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, the specified key is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT">
          <source>Keys that are preprocessed include the TAB, RETURN, ESC, and the UP ARROW, DOWN ARROW, LEFT ARROW, and RIGHT ARROW keys.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Keys"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified key is a regular input key; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsKeyLocked%2A&gt;</ph> property to determine whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK keys are on, whether individually or in combination.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>The CAPS LOCK, NUM LOCK, or SCROLL LOCK member of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Keys"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified key or keys are in effect; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keyVal</ph><ept id="p1">&lt;/code&gt;</ept> parameter refers to a key other than the CAPS LOCK, NUM LOCK, or SCROLL LOCK key.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the control is mirrored.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT">
          <source>A mirrored control displays both layout and text from right to left.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create Mirrored Windows Forms and Controls<ept id="p1">](http://msdn.microsoft.com/en-us/7c5c4ecc-9bfb-4508-8383-753e306719b1)</ept>.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control is mirrored; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>Determines if the specified character is the mnemonic character assigned to the control in the specified string.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT">
          <source>The mnemonic character is the character immediately following the first instance of "&amp;" in a <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>The character to test.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>The string to search.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">charCode</ph><ept id="p1">&lt;/code&gt;</ept> character is the mnemonic character assigned to the control; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>Occurs when a key is pressed while the control has focus.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT">
          <source>Key events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT">
          <source>To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName&gt;</ph> property in your form's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event-handling method to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT">
          <source>Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT">
          <source>To have these keys raise the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event, you must override the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method in each control on your form.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code for the override of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> would need to determine if one of the special keys is pressed and return a value of <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method, you can handle the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event and set the <ph id="ph3">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph>property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a code example, see the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Occurs when a character.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>space or backspace key is pressed while the control has focus.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT">
          <source>Key events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event is not raised by non-character keys other than space and backspace; however, the non-character keys do raise the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A&gt;</ph> property to sample keystrokes at run time and to consume or modify a subset of common keystrokes.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT">
          <source>To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName&gt;</ph> property in your form's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event-handling method to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>Occurs when a key is released while the control has focus.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT">
          <source>Key events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT">
          <source>To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName&gt;</ph> property in your form's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event-handling method to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT">
          <source>To have these keys raise the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> event, you must override the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method in each control on your form.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code for the override of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> would need to determine if one of the special keys is pressed and return a value of <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Occurs when a control should reposition its child controls.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event occurs when child controls are added or removed, when the bounds of the control changes, and when other changes occur that can affect the layout of the control.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The layout event can be suppressed using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Suspending layout enables you to perform multiple actions on a control without having to perform a layout for each change.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you resize and move a control, each operation would raise a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>Gets a cached instance of the control's layout engine.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.LayoutEngine%2A&gt;</ph> property gets the layout engine for the control's children rather than for the control itself.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Layout.LayoutEngine"&gt;&lt;/xref&gt;</ph> for the control's contents.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>Occurs when the input focus leaves the control.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName&gt;</ph> property to the current form, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events are suppressed by the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent events in the <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class are the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, assume you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with two <ph id="ph2">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> controls, and each <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> control has one <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the caret is moved from one <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> to the other, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> event is raised for the <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> event is raised for the other <ph id="ph6">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and <ph id="ph7">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>Gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> property value is equivalent to the <ph id="ph2">&lt;xref:System.Drawing.Point.X%2A?displayProperty=fullName&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes made to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> property values cause the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> property value of the control to change.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> representing the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>Gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> class is a value type (<ph id="ph2">`Structure`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, <ph id="ph4">`struct`</ph> in <ph id="ph5">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>), it is returned by value, meaning accessing the property returns a copy of the upper-left point of the control.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT">
          <source>So, adjusting the <ph id="ph1">&lt;xref:System.Drawing.Point.X%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Drawing.Point.Y%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> returned from this property will not affect the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph>, or <ph id="ph7">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> property values of the control.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT">
          <source>To adjust these properties set each property value individually, or set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property with a new <ph id="ph2">&lt;xref:System.Drawing.Point&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> is a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property value represents the upper-left corner of the <ph id="ph4">&lt;xref:System.Windows.Forms.Form&gt;</ph> in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> that represents the upper-left corner of the control relative to the upper-left corner of its container.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Location"&gt;&lt;/xref&gt;</ph> property value has changed.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property is changed by either a programmatic modification or through interaction.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>Converts a Logical DPI value to it's equivalent DeviceUnit DPI value.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>The Logical value to convert.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>The resulting DeviceUnit value.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Occurs when the control loses focus.</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName&gt;</ph> property to the current form, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> is set to <ph id="ph3">`true`</ph> in the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event delegate, all events that would usually occur after the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event are suppressed.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events are only used when updating <ph id="ph3">&lt;xref:System.Windows.Forms.UICues&gt;</ph> or when writing custom controls.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events should be used for all controls except the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> class, which uses the <ph id="ph4">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events, see the <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> and <bpt id="p2">[</bpt>WM_KILLFOCUS<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> topics.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>Gets or sets the space between controls.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls receive default values for <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Margin%2A&gt;</ph> that are reasonably close to Windows user interface guidelines.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some adjustments might still be necessary for particular applications.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Margin%2A&gt;</ph> property on a docked control has no effect on the distance of the control from the the edges of its container.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Padding"&gt;&lt;/xref&gt;</ph> representing the space between controls.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>Occurs when the control's margin changes.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>Gets or sets the size that is the upper limit that <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)"&gt;&lt;/xref&gt;</ph> can specify.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>An ordered pair of type <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> representing the width and height of a rectangle.</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>Gets or sets the size that is the lower limit that <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)"&gt;&lt;/xref&gt;</ph> can specify.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>An ordered pair of type <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> representing the width and height of a rectangle.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Keys"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Forms.Keys.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>Gets a value indicating which of the mouse buttons is in a pressed state.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseButtons"&gt;&lt;/xref&gt;</ph> enumeration values.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseButtons.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>Occurs when the control loses mouse capture.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT">
          <source>In rare scenarios, you might need to detect unexpected input.</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, consider the following scenarios.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT">
          <source>During a mouse operation, the user opens the Start menu by pressing the Windows key or CTRL+ESC.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT">
          <source>During a mouse operation, the user switches to another program by pressing ALT+TAB.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT">
          <source>During a mouse operation, another program displays a window or a message box that takes focus away from the current application.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse operations can include clicking and holding the mouse on a form or a control, or performing a mouse drag operation.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have to detect when a form or a control loses mouse capture for these and related unexpected scenarios, you can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseCaptureChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>Occurs when the control is clicked by the mouse.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depressing a mouse button when the cursor is over a control typically raises the following series of events from the control:</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this to occur, the various events cannot be disabled in the control's class.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two single clicks that occur close enough in time, as determined by the mouse settings of the user's operating system, will generate a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> event instead of the second <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> events are logically higher-level events of a control.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT">
          <source>They are often raised by other actions, such as pressing the ENTER key when the control has focus.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>Occurs when the control is double clicked by the mouse.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> event occurs when the user depresses a mouse button twice in quick succession when the cursor is over the control.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The time interval that separates two single clicks from a double-click is determined by the mouse settings of the user's operating system.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following series of events is raised by the control when such a user action takes place:</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this to occur, the various events cannot be disabled in the control's class.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> events are logically higher-level events of a control.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT">
          <source>They may be raised by other user actions, such as shortcut key combinations.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer is over the control and a mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer enters the control.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer rests on the control.</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT">
          <source>A typical use of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph> is to display a tool tip when the mouse pauses on a control within a specified area around the control (the "hover rectangle").</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The pause required for this event to be raised is specified in milliseconds by the <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph> event is defined and detected in connection with the <ph id="ph2">&lt;xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer leaves the control.</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer is moved over the control.</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typical uses of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> are to change the control's color or to paint a raised rectangle around the control.</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source>Gets the position of the mouse cursor in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MousePosition%2A&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.Drawing.Point&gt;</ph> that represents the mouse cursor position at the time the property was referenced.</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The coordinates indicate the position on the screen, not relative to the control, and are returned regardless of whether the cursor is positioned over the control.</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT">
          <source>The coordinates of the upper-left corner of the screen are 0,0.</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MousePosition%2A&gt;</ph> property is identical to the <ph id="ph2">&lt;xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> that contains the coordinates of the mouse cursor relative to the upper-left corner of the screen.</source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer is over the control and a mouse button is released.</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=fullName&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse wheel moves while the control has focus.</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT">
          <source>When handling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> event it is important to follow the user interface (UI) standards associated with the mouse wheel.</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=fullName&gt;</ph> property value indicates the amount the mouse wheel has been moved.</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UI should scroll when the accumulated delta is plus or minus 120.</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UI should scroll the number of logical lines returned by the <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=fullName&gt;</ph> property for every delta value reached.</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also scroll more smoothly in smaller that 120 unit increments, however the ratio should remain constant, that is <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=fullName&gt;</ph> lines scrolled per 120 delta units of wheel movement.</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling mouse wheel messages, see the<bpt id="p1">[</bpt>WM_MOUSEWHEEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645617\(v=vs.85\).aspx)</ept>topic.</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>Occurs when the control is moved.</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the control.</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> property can be used at run time to evaluate the object by name rather than type and programmatic name.</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.String&gt;</ph> type, it can be evaluated in case-style logic statements (<ph id="ph3">`Select`</ph> statement in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, <ph id="ph5">`switch`</ph> statement in <ph id="ph6">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> and <ph id="ph7">[!INCLUDE[vcprvc](~/includes/vcprvc-md.md)]</ph>).</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source>The name of the control.</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Invalidated"&gt;&lt;/xref&gt;</ph> event with a specified region of the control to invalidate.</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> representing the area to invalidate.</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.AutoSizeChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BackColorChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBackColorChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BackgroundImageChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BackgroundImageLayoutChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BindingContextChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBindingContextChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.CausesValidationChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ChangeUICues"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnChangeUICues%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.UICuesEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Click"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnClick%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ClientSizeChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnClientSizeChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ContextMenuChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnContextMenuChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ContextMenuStripChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ControlAdded"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT">
          <source>Called when a child control is added to the control.</source>
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnControlAdded%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.ControlEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ControlRemoved"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" extradata="MT">
          <source>Called when a child control is removed from the control.</source>
        </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnControlRemoved%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.ControlEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.CreateControl"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCreateControl%2A&gt;</ph> method is called when the control is first created.</source>
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCreateControl%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.CursorChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCursorChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DockChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDockChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DoubleClick"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDoubleClick%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DpiChangedAfterParent"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.DpiChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DpiChangedBeforeParent"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.DpiChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DragDrop"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragDrop%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DragEnter"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragEnter%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DragLeave"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragLeave%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DragOver"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragOver%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.EnabledChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnEnabledChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Enter"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnEnter%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.FontChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnFontChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ForeColorChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnForeColorChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.GiveFeedback"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnGiveFeedback%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.GiveFeedbackEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.GotFocus"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnGotFocus%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.HandleCreated"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnHandleCreated%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.HandleDestroyed"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnHandleDestroyed%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.HelpRequested"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnHelpRequested%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.HelpEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ImeModeChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnImeModeChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Invalidated"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnInvalidated%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.InvalidateEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.KeyDown"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyDown%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.KeyEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.KeyPress"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyPress%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.KeyPressEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.KeyUp"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyUp%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.KeyEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Layout"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLayout%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.LayoutEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Leave"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLeave%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.LocationChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLocationChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.LostFocus"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLostFocus%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MarginChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMarginChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseCaptureChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseClick"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseClick%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseDoubleClick"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseDown"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseDown%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseEnter"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseEnter%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseHover"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseHover%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseLeave"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseLeave%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseMove"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseMove%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseUp"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseUp%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseWheel"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseWheel%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Move"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMove%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>Notifies the control of Windows messages.</source>
        </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnNotifyMessage%2A&gt;</ph> method is called if the control's <ph id="ph2">`EnableNotifyMessage`</ph> style bit is set in <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`EnableNotifyMessage`</ph> style in <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> enables the control to be notified when the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> method receives a Windows message.</source>
        </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT">
          <source>With this method, semi-trusted controls can listen for Windows messages without enabling them to modify the message.</source>
        </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph> that represents the Windows message.</source>
        </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.PaddingChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaddingChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Paint"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.PaintEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source>Paints the background of the control.</source>
        </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> method enables derived classes to handle Windows background erase requests.</source>
        </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.PaintEventArgs"&gt;&lt;/xref&gt;</ph> that contains information about the control to paint.</source>
        </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BackColorChanged"&gt;&lt;/xref&gt;</ph> event when the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.BackColor"&gt;&lt;/xref&gt;</ph> property value of the control's container changes.</source>
        </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BackgroundImageChanged"&gt;&lt;/xref&gt;</ph> event when the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.BackgroundImage"&gt;&lt;/xref&gt;</ph> property value of the control's container changes.</source>
        </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BindingContextChanged"&gt;&lt;/xref&gt;</ph> event when the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.BindingContext"&gt;&lt;/xref&gt;</ph> property value of the control's container changes.</source>
        </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ParentChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.CursorChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentCursorChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.EnabledChanged"&gt;&lt;/xref&gt;</ph> event when the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.Enabled"&gt;&lt;/xref&gt;</ph> property value of the control's container changes.</source>
        </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.FontChanged"&gt;&lt;/xref&gt;</ph> event when the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.Font"&gt;&lt;/xref&gt;</ph> property value of the control's container changes.</source>
        </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentFontChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ForeColorChanged"&gt;&lt;/xref&gt;</ph> event when the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.ForeColor"&gt;&lt;/xref&gt;</ph> property value of the control's container changes.</source>
        </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.RightToLeftChanged"&gt;&lt;/xref&gt;</ph> event when the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.RightToLeft"&gt;&lt;/xref&gt;</ph> property value of the control's container changes.</source>
        </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.VisibleChanged"&gt;&lt;/xref&gt;</ph> event when the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.Visible"&gt;&lt;/xref&gt;</ph> property value of the control's container changes.</source>
        </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.PreviewKeyDown"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.PreviewKeyDownEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Paint"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`UserPaint`</ph> bit of the <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> is set, you can override <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnPrint%2A&gt;</ph> to do layered painting.</source>
        </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> for more information.</source>
        </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.PaintEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">e</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.QueryContinueDrag"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT">
          <source>After dragging has begun, this method is called repeatedly by the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> until the drag operation is either canceled or completed.</source>
        </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to change the point at which dragging is canceled or at which a drop occurs.</source>
        </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.QueryContinueDragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.RegionChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnRegionChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Resize"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnResize%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.RightToLeftChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.SizeChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnSizeChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.StyleChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnStyleChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.SystemColorsChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.TabIndexChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnTabIndexChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.TabStopChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnTabStopChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.TextChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnTextChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Validated"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnValidated%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Validating"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnValidating%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.CancelEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.VisibleChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnVisibleChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve">
          <source>Gets or sets padding within the control.</source>
        </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT">
          <source>For containers such as <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.TabControl&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph> property gets or sets their respective <ph id="ph4">&lt;xref:System.Windows.Forms.Control.DisplayRectangle%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=fullName&gt;</ph> property is equal to its <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Padding%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls receive default values for <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph> that are reasonably close to Windows user interface guidelines.</source>
        </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some adjustments might still be necessary for particular applications.</source>
        </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" extradata="MT">
          <source>All controls that implement <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetPreferredSize%2A&gt;</ph> are enlarged by the amount in <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph> when <ph id="ph3">&lt;xref:System.Windows.Forms.Control.AutoSize%2A&gt;</ph> is <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following controls do not use <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls that do not implement <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AutoSize%2A&gt;</ph> through <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetPreferredSize%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom controls that directly inherit from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph></source>
        </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Padding"&gt;&lt;/xref&gt;</ph> representing the control's internal spacing characteristics.</source>
        </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve">
          <source>Occurs when the control's padding changes.</source>
        </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve">
          <source>Occurs when the control is redrawn.</source>
        </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event is raised when the control is redrawn.</source>
        </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT">
          <source>It passes an instance of <ph id="ph1">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> to the method(s) that handles the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT">
          <source>When creating a new custom control or an inherited control with a different visual appearance, you must provide code to render the control by overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Overriding the OnPaint Method<ept id="p1">](~/docs/framework/winforms/controls/overriding-the-onpaint-method.md)</ept> and <bpt id="p2">[</bpt>Custom Control Painting and Rendering<ept id="p2">](~/docs/framework/winforms/controls/custom-control-painting-and-rendering.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve">
          <source>Gets or sets the parent container of the control.</source>
        </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> property value to <ph id="ph2">`null`</ph> removes the control from the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> of its current parent control.</source>
        </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> that represents the parent or container control of the control.</source>
        </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Parent"&gt;&lt;/xref&gt;</ph> property value changes.</source>
        </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve">
          <source>Forces the control to apply layout logic to all its child controls.</source>
        </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method was called before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is suppressed.</source>
        </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.LayoutEventArgs&gt;</ph> created are set to <ph id="ph4">`null`</ph> if no values were provided when the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> method was called.</source>
        </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve">
          <source>Forces the control to apply layout logic to all its child controls.</source>
        </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method was called before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is suppressed.</source>
        </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`affectedControl`</ph> and <ph id="ph2">`affectedProperty`</ph> parameters can both be set to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so causes the <ph id="ph1">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.LayoutEventArgs&gt;</ph> created to be set to <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> that represents the most recently changed control.</source>
        </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve">
          <source>The name of the most recently changed property on the control.</source>
        </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve">
          <source>Computes the location of the specified screen point into client coordinates.</source>
        </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve">
          <source>The screen coordinate <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> to convert.</source>
        </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> that represents the converted <ph id="ph2">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph>, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">p</ph><ept id="p1">&lt;/code&gt;</ept>, in client coordinates.</source>
        </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve">
          <source>Computes the location of the specified client point into screen coordinates.</source>
        </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve">
          <source>The client coordinate <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> to convert.</source>
        </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> that represents the converted <ph id="ph2">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph>, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">p</ph><ept id="p1">&lt;/code&gt;</ept>, in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve">
          <source>Gets the size of a rectangular area into which the control can fit.</source>
        </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> containing the height and width, in pixels.</source>
        </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve">
          <source>Preprocesses keyboard or input messages within the message loop before they are dispatched.</source>
        </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph> that represents the message to process.</source>
        </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.PreProcessControlState"&gt;&lt;/xref&gt;</ph> values, depending on whether <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)"&gt;&lt;/xref&gt;</ph> is <ph id="ph3">`true`</ph> or <ph id="ph4">`false`</ph> and whether <ph id="ph5">&lt;xref href="System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)"&gt;&lt;/xref&gt;</ph> or <ph id="ph6">&lt;xref href="System.Windows.Forms.Control.IsInputChar(System.Char)"&gt;&lt;/xref&gt;</ph> are <ph id="ph7">`true`</ph> or <ph id="ph8">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve">
          <source>Preprocesses keyboard or input messages within the message loop before they are dispatched.</source>
        </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph> is called by the application's message loop to preprocess input messages before they are dispatched.</source>
        </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for the <ph id="ph1">`msg`</ph> parameter are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</source>
        </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT">
          <source>When overriding <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph>, a control should return <ph id="ph2">`true`</ph> to indicate that it has processed the message.</source>
        </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" extradata="MT">
          <source>For messages that are not processed by the control, the result of <ph id="ph1">`base.PreProcessMessage`</ph> should be returned.</source>
        </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls will typically override one of the more specialized methods such as <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ProcessCmdKey%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph> instead of overriding <ph id="ph6">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph>, passed by reference, that represents the message to process.</source>
        </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve">
          <source>The possible values are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</source>
        </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was processed by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve">
          <source>Occurs before the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.KeyDown"&gt;&lt;/xref&gt;</ph> event when a key is pressed while focus is on this control.</source>
        </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some key presses, such as the TAB, RETURN, ESC, and arrow keys, are typically ignored by some controls because they are not considered input key presses.</source>
        </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, by default, a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> control ignores the arrow keys.</source>
        </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pressing the arrow keys typically causes the focus to move to the previous or next control.</source>
        </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arrow keys are considered navigation keys and pressing these keys typically do not raise the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event for a<ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, pressing the arrow keys for a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> does raise the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT">
          <source>By handling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event for a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> and setting the <ph id="ph3">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph> property to <ph id="ph4">`true`</ph>, you can raise the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event when the arrow keys are pressed.</source>
        </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you handle the arrow keys, the focus will no longer move to the previous or next control.</source>
        </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve">
          <source>Processes a command key.</source>
        </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called during message preprocessing to handle command keys.</source>
        </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" extradata="MT">
          <source>Command keys are keys that always take precedence over regular input keys.</source>
        </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of command keys include accelerators and menu shortcuts.</source>
        </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method must return <ph id="ph1">`true`</ph> to indicate that it has processed the command key, or <ph id="ph2">`false`</ph> to indicate that the key is not a command key.</source>
        </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</source>
        </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessCmdKey%2A&gt;</ph> method first determines whether the control has a <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph>, and if so, enables the <ph id="ph3">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> to process the command key.</source>
        </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the command key is not a menu shortcut and the control has a parent, the key is passed to the parent's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessCmdKey%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT">
          <source>The net effect is that command keys are "bubbled" up the control hierarchy.</source>
        </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the key the user pressed, the key data also indicates which, if any, modifier keys were pressed at the same time as the key.</source>
        </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modifier keys include the SHIFT, CTRL, and ALT keys.</source>
        </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph>, passed by reference, that represents the window message to process.</source>
        </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Keys"&gt;&lt;/xref&gt;</ph> values that represents the key to process.</source>
        </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the character was processed by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve">
          <source>Processes a dialog character.</source>
        </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called during message preprocessing to handle dialog characters, such as control mnemonics.</source>
        </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called only if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> method indicates that the control is not processing the character.</source>
        </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph> method simply sends the character to the parent's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph> method, or returns <ph id="ph3">`false`</ph> if the control has no parent.</source>
        </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class overrides this method to perform actual processing of dialog characters.</source>
        </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</source>
        </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve">
          <source>The character to process.</source>
        </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the character was processed by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve">
          <source>Processes a dialog key.</source>
        </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called during message preprocessing to handle dialog characters, such as TAB, RETURN, ESC, and arrow keys.</source>
        </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called only if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method indicates that the control is not processing the key.</source>
        </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph> simply sends the character to the parent's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph> method, or returns <ph id="ph3">`false`</ph> if the control has no parent.</source>
        </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class overrides this method to perform actual processing of dialog keys.</source>
        </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</source>
        </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Keys"&gt;&lt;/xref&gt;</ph> values that represents the key to process.</source>
        </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the key was processed by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve">
          <source>Processes a key message and generates the appropriate control events.</source>
        </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called when a control receives a keyboard message.</source>
        </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method is responsible for generating the appropriate key events for the message by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyPress%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnKeyDown%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnKeyUp%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`m`</ph> parameter contains the window message that must be processed.</source>
        </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for the <ph id="ph1">&lt;xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName&gt;</ph> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, and WM_IME_CHAR.</source>
        </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph>, passed by reference, that represents the window message to process.</source>
        </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was processed by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve">
          <source>Processes a keyboard message.</source>
        </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called when a control receives a keyboard message.</source>
        </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method first determines whether the control has a parent; if so, it calls the parent's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the parent's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> method does not process the message then the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A&gt;</ph> method is called to generate the appropriate keyboard events.</source>
        </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`m`</ph> parameter contains the window message that must be processed.</source>
        </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for the <ph id="ph1">&lt;xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName&gt;</ph> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</source>
        </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph>, passed by reference, that represents the window message to process.</source>
        </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was processed by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve">
          <source>Previews a keyboard message.</source>
        </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by a child control when the child control receives a keyboard message.</source>
        </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child control calls this method before generating any keyboard events for the message.</source>
        </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method returns <ph id="ph1">`true`</ph>, the child control considers the message processed and does not generate any keyboard events.</source>
        </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`m`</ph> parameter contains the window message to preview.</source>
        </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" extradata="MT">
          <source>Possible values for the <ph id="ph1">&lt;xref:System.Windows.Forms.Message.Msg%2A?displayProperty=fullName&gt;</ph> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</source>
        </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> method simply sends the character to the parent's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> method, or returns <ph id="ph3">`false`</ph> if the control has no parent.</source>
        </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class overrides this method to perform actual processing of dialog keys.</source>
        </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph>, passed by reference, that represents the window message to process.</source>
        </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was processed by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve">
          <source>Processes a mnemonic character.</source>
        </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called to give a control the opportunity to process a mnemonic character.</source>
        </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method should determine whether the control is in a state to process mnemonics and if whether the given character represents a mnemonic.</source>
        </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" extradata="MT">
          <source>If so, the method should perform the action associated with the mnemonic and return <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" extradata="MT">
          <source>If not, the method should return <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations of this method often use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsMnemonic%2A&gt;</ph> method to determine whether the given character matches a mnemonic in the control's text.</source>
        </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" extradata="MT">
          <source>This default implementation of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessMnemonic%2A&gt;</ph> method simply returns <ph id="ph2">`false`</ph> to indicate that the control has no mnemonic.</source>
        </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve">
          <source>The character to process.</source>
        </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the character was processed as a mnemonic by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve">
          <source>Gets the product name of the assembly containing the control.</source>
        </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> property is a read-only property.</source>
        </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the value of this property, set the <ph id="ph1">&lt;xref:System.Reflection.AssemblyProductAttribute.Product%2A&gt;</ph> property value of the <ph id="ph2">&lt;xref:System.Reflection.AssemblyProductAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following line of C# code sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is strongly recommended that you provide the company name, product name, and product version.</source>
        </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" extradata="MT">
          <source>Providing this information enables the use of Windows Forms features such as <ph id="ph1">&lt;xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=fullName&gt;</ph> that make it easier to write applications that comply with the "Certified for Windows" program.</source>
        </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification.</source>
        </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve">
          <source>The product name of the assembly containing the control.</source>
        </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve">
          <source>Gets the version of the assembly containing the control.</source>
        </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> property is a read-only property.</source>
        </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the value of this property, set the <ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute.Version%2A&gt;</ph> property value of the <ph id="ph2">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following line of C# code sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is strongly recommended that you provide the company name, product name, and product version.</source>
        </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" extradata="MT">
          <source>Providing this information enables the use of Windows Forms features such as <ph id="ph1">&lt;xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=fullName&gt;</ph> that make it easier to write applications that comply with the "Certified for Windows" program.</source>
        </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification.</source>
        </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve">
          <source>The file version of the assembly containing the control.</source>
        </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve">
          <source>Gets an object that represents a propagating IME mode.</source>
        </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve">
          <source>An object that represents a propagating IME mode.</source>
        </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve">
          <source>Occurs when <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleObject"&gt;&lt;/xref&gt;</ph> is providing help to accessibility applications.</source>
        </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use the <ph id="ph1">&lt;xref:System.Windows.Forms.HelpProvider&gt;</ph> class to enable users to invoke help on your accessible object by pressing the F1 key.</source>
        </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">&lt;xref:System.Windows.Forms.HelpProvider&gt;</ph> provides you with complete information in the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve">
          <source>Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled.</source>
        </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</source>
        </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
        </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
        </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" extradata="MT">
          <source>It then checks to see if the control is a valid drop target.</source>
        </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
        </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
        </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
        </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a change in the keyboard or mouse button state, the<ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
        </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
        </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
        </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event sets <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> to <ph id="ph3">`Cancel`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> if the ESC key was pressed and sets <ph id="ph5">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> to <ph id="ph6">`Drop`</ph> in <ph id="ph7">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> if the left, middle, or right mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve">
          <source>Raises the appropriate drag event.</source>
        </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve">
          <source>The event to raise.</source>
        </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve">
          <source>Raises the appropriate key event.</source>
        </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve">
          <source>The event to raise.</source>
        </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.KeyEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve">
          <source>Raises the appropriate mouse event.</source>
        </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve">
          <source>The event to raise.</source>
        </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve">
          <source>Raises the appropriate paint event.</source>
        </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve">
          <source>The event to raise.</source>
        </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.PaintEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve">
          <source>Forces the re-creation of the handle for the control.</source>
        </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> method is called whenever parameters are needed for a new control, but using a call from <ph id="ph2">&lt;xref:System.Windows.Forms.Control.UpdateStyles%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> is insufficient.</source>
        </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method also calls <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DestroyHandle%2A&gt;</ph> and<ph id="ph2">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> and sets <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RecreatingHandle%2A&gt;</ph> to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the control is currently re-creating its handle.</source>
        </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreatingHandle%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> if the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> method is still running on the control.</source>
        </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control is currently re-creating its handle; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve">
          <source>Computes the size and location of the specified screen rectangle in client coordinates.</source>
        </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve">
          <source>The screen coordinate <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> to convert.</source>
        </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that represents the converted <ph id="ph2">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph>, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">r</ph><ept id="p1">&lt;/code&gt;</ept>, in client coordinates.</source>
        </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve">
          <source>Computes the size and location of the specified client rectangle in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve">
          <source>The client coordinate <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> to convert.</source>
        </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that represents the converted <ph id="ph2">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph>, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">p</ph><ept id="p1">&lt;/code&gt;</ept>, in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve">
          <source>Reflects the specified message to the control that is bound to the specified handle.</source>
        </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ReflectMessage%2A&gt;</ph> method is an infrastructure method and typically should not be called from your code.</source>
        </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`hWnd`</ph> parameter does not represent a valid control, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ReflectMessage%2A&gt;</ph> method returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because Windows messages are returned to the top-level window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ReflectMessage%2A&gt;</ph> method is used to propagate the return message to the control that sent the message.</source>
        </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IntPtr"&gt;&lt;/xref&gt;</ph> representing the handle of the control to reflect the message to.</source>
        </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph> representing the Windows message to reflect.</source>
        </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was reflected; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve">
          <source>Forces the control to invalidate its client area and immediately redraw itself and any child controls.</source>
        </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve">
          <source>Gets or sets the window region associated with the control.</source>
        </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT">
          <source>The window region is a collection of pixels within the window where the operating system permits drawing.</source>
        </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operating system does not display any portion of a window that lies outside of the window region.</source>
        </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT">
          <source>The coordinates of a control's region are relative to the upper-left corner of the control, not the client area of the control.</source>
        </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" extradata="MT">
          <source>The collection of pixels contained with the region can be noncontiguous.</source>
        </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve">
          <source>The window <ph id="ph1">&lt;xref href="System.Drawing.Region"&gt;&lt;/xref&gt;</ph> associated with the control.</source>
        </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Region"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve">
          <source>This property is now obsolete.</source>
        </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control is rendered from right to left; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve">
          <source>Provides constants for rescaling the control when a DPI change occurs.</source>
        </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve">
          <source>The DPI value prior to the change.</source>
        </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve">
          <source>The DPI value after the change.</source>
        </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BackColor"&gt;&lt;/xref&gt;</ph> property to its default value.</source>
        </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve">
          <source>Causes a control bound to the <ph id="ph1">&lt;xref href="System.Windows.Forms.BindingSource"&gt;&lt;/xref&gt;</ph> to reread all the items in the list and refresh their displayed values.</source>
        </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Cursor"&gt;&lt;/xref&gt;</ph> property to its default value.</source>
        </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Font"&gt;&lt;/xref&gt;</ph> property to its default value.</source>
        </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ForeColor"&gt;&lt;/xref&gt;</ph> property to its default value.</source>
        </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ImeMode"&gt;&lt;/xref&gt;</ph> property to its default value.</source>
        </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve">
          <source>Resets the control to handle the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.MouseLeave"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.RightToLeft"&gt;&lt;/xref&gt;</ph> property to its default value.</source>
        </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Text"&gt;&lt;/xref&gt;</ph> property to its default value.</source>
        </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically use this method if you are either creating a designer for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> or creating your own control incorporating the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve">
          <source>Occurs when the control is resized.</source>
        </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the resized control, you can cast the <ph id="ph2">`sender`</ph> parameter of the registered <ph id="ph3">&lt;xref:System.Windows.Forms.ControlEventHandler&gt;</ph> method  to a <ph id="ph4">&lt;xref:System.Windows.Forms.Control&gt;</ph> and get its <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> property (or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> and <ph id="ph7">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> properties individually).</source>
        </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT">
          <source>To handle custom layouts, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event instead of the Resize event.</source>
        </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is raised in response to a <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> event, but also in response to other changes that affect the layout of the control.</source>
        </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the control redraws itself when resized.</source>
        </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResizeRedraw%2A&gt;</ph> property value is equivalent to the return value of the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetStyle%2A&gt;</ph> method when passing in the <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles?displayProperty=fullName&gt;</ph> value as a parameter.</source>
        </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control redraws itself when resized; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve">
          <source>Resumes usual layout logic.</source>
        </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method forces an immediate layout if there are any pending layout requests.</source>
        </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> methods are used in tandem to suppress multiple <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> events while you adjust multiple attributes of the control.</source>
        </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you would typically call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method, then set the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> properties of the control, and then call the <ph id="ph6">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method to enable the changes to take effect.</source>
        </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT">
          <source>There must be no pending calls to <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> for <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> to be successfully called.</source>
        </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve">
          <source>Resumes usual layout logic, optionally forcing an immediate layout of pending layout requests.</source>
        </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method forces an immediate layout if there are any pending layout requests.</source>
        </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`performLayout`</ph> parameter is set to <ph id="ph2">`true`</ph>, an immediate layout occurs if there are any pending layout requests.</source>
        </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> methods are used in tandem to suppress multiple <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> events while you adjust multiple attributes of the control.</source>
        </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you would typically call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method, then set the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> properties of the control, and then call the <ph id="ph6">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method to enable the changes to take effect.</source>
        </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" extradata="MT">
          <source>There must be no pending calls to <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> for <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> to be successfully called.</source>
        </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" extradata="MT">
          <source>When adding several controls to a parent control, it is recommended that you call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method before initializing the controls to be added.</source>
        </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" extradata="MT">
          <source>After adding the controls to the parent control, call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will increase the performance of applications with many controls.</source>
        </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to execute pending layout requests; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve">
          <source>Gets the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</source>
        </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> property is equal to the sum of the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> property value and the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> property is read-only.</source>
        </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can change this property value indirectly by changing the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> properties or calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetBounds%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.UpdateBounds%2A&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> representing the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</source>
        </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</source>
        </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property is an ambient property.</source>
        </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ambient property is a control property that, if not set, is retrieved from the parent control.</source>
        </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
        </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about ambient properties, see the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class overview.</source>
        </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property is used for international applications where the language is written from right to left, such as Hebrew or Arabic.</source>
        </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is set to <ph id="ph1">&lt;xref:System.Windows.Forms.RightToLeft?displayProperty=fullName&gt;</ph>, control elements that include text are displayed from right to left.</source>
        </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property is changed at run time, only raw text without formatting is preserved.</source>
        </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are a few examples of how control elements are affected by the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property value of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft?displayProperty=fullName&gt;</ph> :</source>
        </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" extradata="MT">
          <source>Vertical scroll bars are displayed on the left side rather than right side of scrollable controls (for example, <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph>, multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" extradata="MT">
          <source>Horizontal scroll bars start with the scroll box (thumb) right-aligned.</source>
        </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" extradata="MT">
          <source>The check box element alignment, controlled by the <ph id="ph1">`CheckAlign`</ph> property, is reversed for <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> controls.</source>
        </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" extradata="MT">
          <source>Items in list box, combo box, and up-down controls are right aligned.</source>
        </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT">
          <source>Up and down buttons are left-aligned on <ph id="ph1">&lt;xref:System.Windows.Forms.NumericUpDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DomainUpDown&gt;</ph> controls.</source>
        </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT">
          <source>Menus (<ph id="ph1">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph>) are displayed right-aligned.</source>
        </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT">
          <source>The alignment of toolbar buttons on a <ph id="ph1">&lt;xref:System.Windows.Forms.ToolBar&gt;</ph> control or the alignment of text on a <ph id="ph2">&lt;xref:System.Windows.Forms.ToolBarButton&gt;</ph> is not affected by the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.AxHost&gt;</ph> supports right-to-left alignment; however, the effect on an ActiveX control depends on the extent to which the control author implemented support for right-to-left display.</source>
        </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.RightToLeft"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Forms.RightToLeft.Inherit"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve">
          <source>The assigned value is not one of the <ph id="ph1">&lt;xref href="System.Windows.Forms.RightToLeft"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.RightToLeft"&gt;&lt;/xref&gt;</ph> property value changes.</source>
        </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve">
          <source>Converts the specified <ph id="ph1">&lt;xref href="System.Windows.Forms.LeftRightAlignment"&gt;&lt;/xref&gt;</ph> to the appropriate <ph id="ph2">&lt;xref href="System.Windows.Forms.LeftRightAlignment"&gt;&lt;/xref&gt;</ph> to support right-to-left text.</source>
        </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
        </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.LeftRightAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.LeftRightAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve">
          <source>Converts the specified <ph id="ph1">&lt;xref href="System.Windows.Forms.HorizontalAlignment"&gt;&lt;/xref&gt;</ph> to the appropriate <ph id="ph2">&lt;xref href="System.Windows.Forms.HorizontalAlignment"&gt;&lt;/xref&gt;</ph> to support right-to-left text.</source>
        </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
        </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.HorizontalAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.HorizontalAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve">
          <source>Converts the specified <ph id="ph1">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> to the appropriate <ph id="ph2">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> to support right-to-left text.</source>
        </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
        </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve">
          <source>Converts the specified <ph id="ph1">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> to the appropriate <ph id="ph2">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> to support right-to-left text.</source>
        </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
        </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve">
          <source>Converts the specified <ph id="ph1">&lt;xref href="System.Windows.Forms.HorizontalAlignment"&gt;&lt;/xref&gt;</ph> to the appropriate <ph id="ph2">&lt;xref href="System.Windows.Forms.HorizontalAlignment"&gt;&lt;/xref&gt;</ph> to support right-to-left text.</source>
        </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
        </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.HorizontalAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.HorizontalAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve">
          <source>Converts the specified <ph id="ph1">&lt;xref href="System.Windows.Forms.LeftRightAlignment"&gt;&lt;/xref&gt;</ph> to the appropriate <ph id="ph2">&lt;xref href="System.Windows.Forms.LeftRightAlignment"&gt;&lt;/xref&gt;</ph> to support right-to-left text.</source>
        </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
        </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.LeftRightAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.LeftRightAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve">
          <source>Scales the control and all child controls by the specified scaling factor.</source>
        </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Scale%2A&gt;</ph> method scales the control by the specified scaling <ph id="ph2">`factor`</ph>.</source>
        </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also recursively scales all child controls if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" extradata="MT">
          <source>Internally, this method calls <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> to scale each control.</source>
        </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> containing the horizontal and vertical scaling factors.</source>
        </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve">
          <source>Scales the control and any child controls.</source>
        </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve">
          <source>The ratio to use for scaling.</source>
        </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve">
          <source>Scales the entire control and any child controls.</source>
        </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve">
          <source>The horizontal scaling factor.</source>
        </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve">
          <source>The vertical scaling factor.</source>
        </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve">
          <source>Scales a logical bitmap value to it's equivalent device unit value when a DPI change occurs.</source>
        </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve">
          <source>The bitmap to scale.</source>
        </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve">
          <source>Gets a value that determines the scaling of child controls.</source>
        </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Scale%2A&gt;</ph> method will recursively call the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> method of each of its child controls.</source>
        </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> always returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived classes can override <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> to return <ph id="ph2">`false`</ph> to indicate that scaling should not be performed on their children.</source>
        </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if child controls will be scaled when the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.Scale(System.Single)"&gt;&lt;/xref&gt;</ph> method on this control is called; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve">
          <source>Scales a control's location, size, padding and margin.</source>
        </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is top level, this will not scale the control's location.</source>
        </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT">
          <source>This does not scale children or the size of automatically sized controls.</source>
        </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can omit scaling in any direction by changing the value of the <ph id="ph1">`specified`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve">
          <source>The factor by which the height and width of the control will be scaled.</source>
        </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.BoundsSpecified"&gt;&lt;/xref&gt;</ph> value that specifies the bounds of the control to use when defining its size and position.</source>
        </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve">
          <source>This method is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve">
          <source>The horizontal scaling factor.</source>
        </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve">
          <source>The vertical scaling factor.</source>
        </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve">
          <source>Activates a child control.</source>
        </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve">
          <source>Optionally specifies the direction in the tab order to select the control from.</source>
        </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`directed`</ph> and <ph id="ph2">`forward`</ph> parameters are used by container-style controls.</source>
        </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`directed`</ph> parameter is set to <ph id="ph2">`true`</ph>, the <ph id="ph3">`forward`</ph> parameter is evaluated to determine which control to select.</source>
        </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`forward`</ph> is set to <ph id="ph2">`true`</ph>, the next control in the tab order is selected; when <ph id="ph3">`false`</ph>, the previous control in the tab order is selected.</source>
        </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> method activates the control if the control's <ph id="ph2">`Selectable`</ph> style bit is set to <ph id="ph3">`true`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>, it is contained in another control, and all its parent controls are both visible and enabled.</source>
        </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Windows Forms controls in the following list are not selectable.</source>
        </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls derived from controls in the list will also not be selectable.</source>
        </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (when there is no link present in the control)</source>
        </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to specify the direction of the control to select; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to move forward in the tab order; <ph id="ph2">`false`</ph> to move backward in the tab order.</source>
        </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve">
          <source>Activates the control.</source>
        </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> method activates the control if the control's <ph id="ph2">`Selectable`</ph> style bit is set to <ph id="ph3">`true`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>, it is contained in another control, and all its parent controls are both visible and enabled.</source>
        </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Windows Forms controls in the following list are not selectable.</source>
        </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls derived from controls in the list will also not be selectable.</source>
        </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (when there is no link present in the control)</source>
        </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve">
          <source>Activates the next control.</source>
        </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> method activates the next control in the tab order if the control's <ph id="ph2">`Selectable`</ph> style bit is set to <ph id="ph3">`true`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>, it is contained in another control, and all its parent controls are both visible and enabled.</source>
        </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Windows Forms controls in the following list are not selectable.</source>
        </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls derived from controls in the list will also not be selectable.</source>
        </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (when there is no link present in the control)</source>
        </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName&gt;</ph> property to the current form, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
        </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> at which to start the search.</source>
        </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to move forward in the tab order; <ph id="ph2">`false`</ph> to move backward in the tab order.</source>
        </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to ignore the controls with the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.TabStop"&gt;&lt;/xref&gt;</ph> property set to <ph id="ph3">`false`</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to include nested (children of child controls) child controls; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to continue searching from the first control in the tab order after the last control has been reached; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a control was activated; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve">
          <source>Sends the control to the back of the z-order.</source>
        </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The control is moved to the back of the z-order.</source>
        </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is a child of another control, the child control is moved to the back of the z-order.</source>
        </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is a top-level control, this method will not work correctly unless the control is active.</source>
        </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" extradata="MT">
          <source>A top-level control is a control, such as a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, that is not a child of another control.</source>
        </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT">
          <source>An active control is a visible control that has input focus.</source>
        </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SendToBack%2A&gt;</ph> method with an inactive, top-level control, first call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BringToFront%2A&gt;</ph> method on the control.</source>
        </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve">
          <source>Sets a value indicating how a control will behave when its <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.AutoSize"&gt;&lt;/xref&gt;</ph> property is enabled.</source>
        </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.AutoSizeMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve">
          <source>Sets the bounds of the control to the specified location and size.</source>
        </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Left"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Top"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Width"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Height"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve">
          <source>Sets the specified bounds of the control to the specified location and size.</source>
        </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Left"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Top"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Width"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Height"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.Windows.Forms.BoundsSpecified"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve">
          <source>For any parameter not specified, the current value will be used.</source>
        </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve">
          <source>Performs the work of setting the specified bounds of this control.</source>
        </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the parameters that correspond to the bounds not included in the <ph id="ph1">`specified`</ph> parameter are passed in with their current values.</source>
        </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph>, or the <ph id="ph3">&lt;xref:System.Drawing.Point.X%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Drawing.Point.Y%2A&gt;</ph> properties of the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property can be passed in with a reference to the current instance of the control.</source>
        </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT">
          <source>However all values passed in are honored and applied to the control.</source>
        </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`boundsSpecified`</ph> parameter represents the elements of the controls <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> changed by your application.</source>
        </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you change the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the control, the <ph id="ph2">`boundsSpecified`</ph> parameter value is the <ph id="ph3">`Size`</ph> value of <ph id="ph4">&lt;xref:System.Windows.Forms.BoundsSpecified&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> is adjusted in response to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> property being set, the <ph id="ph3">`boundsSpecified`</ph> parameter value is the <ph id="ph4">`None`</ph> value of <ph id="ph5">&lt;xref:System.Windows.Forms.BoundsSpecified&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" extradata="MT">
          <source>On Windows Server 2003 systems, the size of a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> is restricted by the maximum pixel width and height of the monitor.</source>
        </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Left"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Top"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Width"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Height"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.Windows.Forms.BoundsSpecified"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve">
          <source>Sets the size of the client area of the control.</source>
        </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client area starts at the (0, 0) location and extends to the (<ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>) location.</source>
        </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you should not set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve">
          <source>The client area width, in pixels.</source>
        </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve">
          <source>The client area height, in pixels.</source>
        </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve">
          <source>Sets a specified <ph id="ph1">&lt;xref href="System.Windows.Forms.ControlStyles"&gt;&lt;/xref&gt;</ph> flag to either <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Control style bit flags are used to categorize supported behavior.</source>
        </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" extradata="MT">
          <source>A control can enable a style by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> method and passing in the appropriate <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> bit (or bits) and the Boolean value to set the bit(s) to.</source>
        </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine the value assigned to a specified <ph id="ph1">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> bit, use the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetStyle%2A&gt;</ph> method and pass in the <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> member to evaluate.</source>
        </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the control style bits can substantially change the behavior of the control.</source>
        </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Review the <ph id="ph1">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> enumeration documentation to understand the effects of changing the control style bits before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.ControlStyles"&gt;&lt;/xref&gt;</ph> bit to set.</source>
        </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to apply the specified style to the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve">
          <source>Sets the control as the top-level control.</source>
        </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetTopLevel%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> and pass in a value of <ph id="ph3">`false`</ph>, the form will not be visible until you call <ph id="ph4">&lt;xref:System.Windows.Forms.Control.SetTopLevel%2A&gt;</ph>again, passing in a value of <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to set the control as the top-level control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set to <ph id="ph2">`true`</ph> and the control is an ActiveX control.</source>
        </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.GetTopLevel"&gt;&lt;/xref&gt;</ph> return value is not equal to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> parameter and the <ph id="ph3">&lt;xref href="System.Windows.Forms.Control.Parent"&gt;&lt;/xref&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve">
          <source>Sets the control to the specified visible state.</source>
        </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT">
          <source>You would typically override this method to change the visibility behavior of the control.</source>
        </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to make the control visible; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve">
          <source>Displays the control to the user.</source>
        </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Showing the control is equivalent to setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Show%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property returns a value of <ph id="ph3">`true`</ph> until the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Hide%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the control should display focus rectangles.</source>
        </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about this feature, see the<bpt id="p1">[</bpt>WM_CHANGEUISTATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)</ept>,<bpt id="p2">[</bpt>WM_QUERYUISTATE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx)</ept>, and the <bpt id="p3">[</bpt>WM_UPDATEUISTATE<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)</ept>topics.</source>
        </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control should display focus rectangles; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the user interface is in the appropriate state to show or hide keyboard accelerators.</source>
        </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" extradata="MT">
          <source>In controls created in the Windows Forms designer, keyboard accelerators are visible by default.</source>
        </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about this feature, see the<bpt id="p1">[</bpt>WM_CHANGEUISTATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)</ept>,<bpt id="p2">[</bpt>WM_QUERYUISTATE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx)</ept>, and the <bpt id="p3">[</bpt>WM_UPDATEUISTATE<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)</ept>topics.</source>
        </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the keyboard accelerators are visible; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve">
          <source>Gets or sets the site of the control.</source>
        </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ComponentModel.ISite"&gt;&lt;/xref&gt;</ph> associated with the <ph id="ph2">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph>, if any.</source>
        </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve">
          <source>Gets or sets the height and width of the control.</source>
        </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Drawing.Size&gt;</ph> class is a value type (<ph id="ph2">`Structure`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, <ph id="ph4">`struct`</ph> in <ph id="ph5">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>), it is returned by value, meaning accessing the property returns a copy of the size of the control.</source>
        </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" extradata="MT">
          <source>So, adjusting the <ph id="ph1">&lt;xref:System.Drawing.Size.Width%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Drawing.Size.Height%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Drawing.Size&gt;</ph> returned from this property will not affect the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT">
          <source>To adjust the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> of the control, you must set the control's <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> property, or set the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> property with a new <ph id="ph6">&lt;xref:System.Drawing.Size&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT">
          <source>To maintain better performance, do not set the <ph id="ph1">&lt;xref:System.Drawing.Size&gt;</ph> of a control in its constructor.</source>
        </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The preferred method is to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" extradata="MT">
          <source>On Windows Server 2003 systems, the size of a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> is restricted by the maximum pixel width and height of the monitor.</source>
        </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> that represents the height and width of the control in pixels.</source>
        </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Size"&gt;&lt;/xref&gt;</ph> property value changes.</source>
        </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is preferable to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event to handle custom layouts.</source>
        </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is raised in response to <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> events, but also in other conditions when layout might need to be applied.</source>
        </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve">
          <source>Determines the size of the entire control from the height and width of its client area.</source>
        </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> value representing the height and width of the control's client area.</source>
        </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> value representing the height and width of the entire control.</source>
        </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve">
          <source>Occurs when the control style changes.</source>
        </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.StyleChanged&gt;</ph> event occurs when <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> flags have been added or changed.</source>
        </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the control style is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve">
          <source>Temporarily suspends the layout logic for the control.</source>
        </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The layout logic of the control is suspended until the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> methods are used in tandem to suppress multiple <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> events while you adjust multiple attributes of the control.</source>
        </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you would typically call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method, then set the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> properties of the control, and then call the <ph id="ph6">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method to enable the changes to take effect.</source>
        </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" extradata="MT">
          <source>There must be no pending calls to <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> for <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> to be successfully called.</source>
        </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" extradata="MT">
          <source>When adding several controls to a parent control, it is recommended that you call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method before initializing the controls to be added.</source>
        </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" extradata="MT">
          <source>After adding the controls to the parent control, call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will increase the performance of applications with many controls.</source>
        </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve">
          <source>Occurs when the system colors change.</source>
        </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Drawing.SystemColors&gt;</ph> is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve">
          <source>Gets or sets the tab order of the control within its container.</source>
        </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" extradata="MT">
          <source>A tab index can consist of any valid integer greater than or equal to zero, lower numbers being earlier in the tab order.</source>
        </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If more than one control on the same parent control has the same tab index, the z-order of the controls determines the order to cycle through the controls.</source>
        </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a control to be included in the tab order, its <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> property must be set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve">
          <source>The index value of the control within the set of controls within its container.</source>
        </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve">
          <source>The controls in the container are included in the tab order.</source>
        </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.TabIndex"&gt;&lt;/xref&gt;</ph> property value changes.</source>
        </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.</source>
        </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the user presses the TAB key, the input focus is set to the next control in the tab order.</source>
        </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls with the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> property value of <ph id="ph2">`false`</ph> are not included in the collection of controls in the tab order.</source>
        </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The tab order can be manipulated by setting the control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the user can give the focus to the control using the TAB key; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve">
          <source>This property will always return <ph id="ph1">`true`</ph> for an instance of the <ph id="ph2">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.TabStop"&gt;&lt;/xref&gt;</ph> property value changes.</source>
        </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve">
          <source>Gets or sets the object that contains data about the control.</source>
        </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any type derived from the <ph id="ph1">&lt;xref:System.Object&gt;</ph> class can be assigned to this property.</source>
        </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Tag%2A&gt;</ph> property is set through the Windows Forms designer, only text can be assigned.</source>
        </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT">
          <source>A common use for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Tag%2A&gt;</ph> property is to store data that is closely associated with the control.</source>
        </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you have a control that displays information about a customer, you might store a <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> that contains the customer's order history in that control's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Tag%2A&gt;</ph> property so the data can be accessed quickly.</source>
        </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> that contains data about the control.</source>
        </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve">
          <source>Gets or sets the text associated with this control.</source>
        </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of the control is used differently by each derived class.</source>
        </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> is displayed in the title bar at the top of the form, is fairly small in character count, and usually displays the application or document name.</source>
        </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> can be large and can include numerous nonvisual characters used to format the text.</source>
        </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the text displayed in a <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> can be formatted by adjusting the <ph id="ph2">&lt;xref:System.Drawing.Font&gt;</ph> properties, or by the addition of spaces or tab characters to align the text.</source>
        </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve">
          <source>The text associated with this control.</source>
        </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Text"&gt;&lt;/xref&gt;</ph> property value changes.</source>
        </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve">
          <source>Gets or sets the distance, in pixels, between the top edge of the control and the top edge of its container's client area.</source>
        </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> property value is equivalent to the <ph id="ph2">&lt;xref:System.Drawing.Point.Y%2A?displayProperty=fullName&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes made to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> property values cause the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> property value of the control to change.</source>
        </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</source>
        </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve">
          <source>Gets the parent control that is not parented by another Windows Forms control.</source>
        </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve">
          <source>Typically, this is the outermost <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> that the control is contained in.</source>
        </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT">
          <source>The top-level control is defined as the parent control that is not parented by another Windows Forms control.</source>
        </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, this is the outermost <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that the control is contained in.</source>
        </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the control is contained on an MDI child <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, then the top-level control is the Multiple Document Interface (MDI) parent <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control is not parented on a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, this property will return <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Control"&gt;&lt;/xref&gt;</ph> that represents the top-level control that contains the current control.</source>
        </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve">
          <source>Causes the control to redraw the invalidated regions within its client area.</source>
        </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Executes any pending requests for painting.</source>
        </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two ways to repaint a form and its contents:</source>
        </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use one of the overloads of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Refresh%2A&gt;</ph> method, which forces the control to redraw itself and all its children.</source>
        </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is equivalent to setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method to <ph id="ph2">`true`</ph> and using it with <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method governs what gets painted or repainted.</source>
        </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method governs when the painting or repainting occurs.</source>
        </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> methods together rather than calling <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Refresh%2A&gt;</ph>, what gets repainted depends on which overload of <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> you use.</source>
        </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method just forces the control to be painted immediately, but the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method governs what gets painted when you call the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the<bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](http://msdn.microsoft.com/library/dd145213\(v=vs.85\).aspx)</ept>topic.</source>
        </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve">
          <source>Updates the bounds of the control with the specified size, location, and client size.</source>
        </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the new <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the control is different from the previous <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> of the control changes, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LocationChanged&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Point.X"&gt;&lt;/xref&gt;</ph> coordinate of the control.</source>
        </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Point.Y"&gt;&lt;/xref&gt;</ph> coordinate of the control.</source>
        </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Size.Width"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Size.Height"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve">
          <source>The client <ph id="ph1">&lt;xref href="System.Drawing.Size.Width"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve">
          <source>The client <ph id="ph1">&lt;xref href="System.Drawing.Size.Height"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve">
          <source>Updates the bounds of the control with the specified size and location.</source>
        </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the new <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the control if different from the previous <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, is the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> of the control changes, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LocationChanged&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Point.X"&gt;&lt;/xref&gt;</ph> coordinate of the control.</source>
        </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Point.Y"&gt;&lt;/xref&gt;</ph> coordinate of the control.</source>
        </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Size.Width"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Size.Height"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve">
          <source>Updates the bounds of the control with the current size and location.</source>
        </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the new <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the control is different from the previous <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> of the control changes, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LocationChanged&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve">
          <source>Forces the assigned styles to be reapplied to the control.</source>
        </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> method to get the styles to apply.</source>
        </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" extradata="MT">
          <source>The styles assigned to the <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Style%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ExStyle%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.CreateParams&gt;</ph> assigned to the control's <ph id="ph4">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> property are reapplied.</source>
        </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT">
          <source>The control is repainted to reflect the style changes if necessary.</source>
        </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.UpdateStyles%2A&gt;</ph> method has no effect if the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsHandleCreated%2A&gt;</ph> property value is <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve">
          <source>Updates the control in its parent's z-order.</source>
        </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.UpdateZOrder%2A&gt;</ph> method updates the position of the control in its parent control's z-order.</source>
        </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if this control is a newly created control that was added to a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph>, the z-order is updated with the new control added to the back.</source>
        </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether to use the wait cursor for the current control and all child controls.</source>
        </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use a wait cursor whenever you perform an operation that takes a noticeable amount of time.However, note that operations that block the UI thread will also block acursor change.Therefore, this property should only be used when performing time-consuming operations in another thread.</source>
        </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the cursor globally and immediately, seethe <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor.Current%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to use the wait cursor for the current control and all child controls; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve">
          <source>Occurs when the control is finished validating.</source>
        </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName&gt;</ph> property to the current form, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
        </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> is set to <ph id="ph3">`true`</ph> in the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event delegate, all events that would usually occur after the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event are suppressed.</source>
        </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
        </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
        </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the<bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)</ept>topic, and the "Message Deadlocks" section of the <bpt id="p2">[</bpt>About Messages and Message Queues<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve">
          <source>Occurs when the control is validating.</source>
        </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph>or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=fullName&gt;</ph> property to the current form, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
        </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
        </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> is set to <ph id="ph3">`true`</ph> in the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event delegate, all events that would usually occur after the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event are suppressed.</source>
        </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
        </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
        </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">`WM_KILLFOCUS`</ph> topic in the "Keyboard Input Reference" section, and the "Message Deadlocks" section of the "About Messages and Message Queues" topic in the MSDN library at http://msdn.microsoft.com/library.</source>
        </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the control and all its child controls are displayed.</source>
        </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that even if <ph id="ph1">`Visible`</ph> is set to <ph id="ph2">`true`</ph>, the control might not be visible to the user if it is obscured behind other controls.</source>
        </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control and all its child controls are displayed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Visible"&gt;&lt;/xref&gt;</ph> property value changes.</source>
        </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
        </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve">
          <source>Gets or sets the width of the control.</source>
        </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes made to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> property values cause the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> property value of the control to change.</source>
        </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve">
          <source>The width of the control in pixels.</source>
        </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve">
          <source>The NativeWindow contained within the control.</source>
        </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve">
          <source>Processes Windows messages.</source>
        </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve" extradata="MT">
          <source>All messages are sent to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> method after getting filtered through the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> method corresponds exactly to the Windows <ph id="ph2">`WindowProc`</ph> function.</source>
        </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about processing Windows messages, see the <bpt id="p1">[</bpt>WindowProc function<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=181565)</ept>.</source>
        </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve">
          <source>The Windows <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph> to process.</source>
        </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DragDrop"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DragEnter"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DragLeave"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DragOver"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>