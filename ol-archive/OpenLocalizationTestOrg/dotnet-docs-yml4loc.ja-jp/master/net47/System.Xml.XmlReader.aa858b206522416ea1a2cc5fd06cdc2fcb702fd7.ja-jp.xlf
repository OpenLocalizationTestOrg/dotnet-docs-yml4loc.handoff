<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5134d066827908906370f0d1303740bb9fee87c0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.XmlReader.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e1a3f9e5cf1a8230abe019e26894a9d161d67c9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6a3558fc8d835b1a5e0bb378c6b4dc0113968ef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a reader that provides fast, noncached, forward-only access to XML data.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>To view the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Core/XmlReader.cs#086471e5cca0825f)</ept>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id="p1">[</bpt>instructions<ept id="p1">](http://referencesource.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> provides forward-only, read-only access to XML data in adocument or stream.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class conforms to the W3C <bpt id="p1">[</bpt>Extensible Markup Language (XML) 1.0 (fourth edition)<ept id="p1">](http://www.w3.org/TR/2006/REC-xml-20060816/)</ept> and the <bpt id="p2">[</bpt>Namespaces in XML 1.0 (third edition)<ept id="p2">](http://www.w3.org/TR/REC-xml-names/)</ept> recommendations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>methods let you move through XML data and read the contents of a node.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The properties of the class reflect the value of the current node, which is where the reader is positioned.The <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadState%2A&gt;</ph> property value indicates the current state of the XML reader.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the property is set to <ph id="ph1">&lt;xref:System.Xml.ReadState.Initial&gt;</ph> by the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Read%2A?displayProperty=fullName&gt;</ph> method and <ph id="ph3">&lt;xref:System.Xml.ReadState.Closed&gt;</ph> by the <ph id="ph4">&lt;xref:System.Xml.XmlReader.Close%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> also provides data conformance checks and validation against a DTD or schema.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>uses a pull model to retrieve data.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This model:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Simplifies state management by a natural, top-down procedural refinement.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Supports multiple input streams and layering.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enables the client to give the parser a buffer into which the string is directly written, and thus avoids the necessity of an extra string copy.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Supports selective processing.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client can skip items and process those that are of interest to the application.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also set properties in advance to manage how the XML stream is processed (for example, normalization).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this section:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Creating an XML reader<ept id="p1">](#xmlreader_create)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Validating XML data<ept id="p1">](#xmlreader_validate)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Data conformance<ept id="p1">](#xmlreader_data)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Navigating through nodes<ept id="p1">](#xmlreader_nodes)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Reading XML elements<ept id="p1">](#xmlreader_elements)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Reading XML attributes<ept id="p1">](#xmlreader_attributes)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Reading XML content<ept id="p1">](#xmlreader_content)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Converting to CLR types<ept id="p1">](#xmlreader_clr)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Asynchronous programming<ept id="p1">](#xmlreader_async)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Security considerations<ept id="p1">](#xmlreader_security)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating an XML reader</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method to create an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>instance.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the .NET Framework provides concrete implementations of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> class, such as the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>, and the <ph id="ph4">&lt;xref:System.Xml.XmlValidatingReader&gt;</ph> classes, we recommend that you use the specialized classes only in these scenarios:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you want to readan XML DOM subtree from an <ph id="ph1">&lt;xref:System.Xml.XmlNode&gt;</ph> object, use the <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>(However, this class doesn't support DTD or schema validation.)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you must expand entities on request, you don't want your text content normalized, or you don't want default attributes returned, use the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify the set of features you want to enable on the XML reader, pass an <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings?displayProperty=fullName&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use a single <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings?displayProperty=fullName&gt;</ph> object to create multiple readers with the same functionality, or modify the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings?displayProperty=fullName&gt;</ph>object to create a new reader with a different set of features.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also easily add features to an existing reader.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you don't use a<ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings?displayProperty=fullName&gt;</ph>object, default settings are used.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> reference page for details.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> throws an <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> on XML parse errors.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an exception is thrown, the state of the reader is not predictable.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the reported node type may be different from the actual node type of the current node.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadState%2A&gt;</ph> property to check whether the reader is in error state.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Validating XML data</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>To define the structure of an XML document and its element relationships, data types, and content constraints, you use a document type definition (DTD) or XML Schema definition language (XSD) schema.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>An XML document is considered to be well formed if it meets all the syntactical requirements defined by the <bpt id="p1">[</bpt>W3C XML 1.0 Recommendation<ept id="p1">](http://www.w3.org/TR/2006/REC-xml-20060816/)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>It's considered valid if it's well formed and also conforms to the constraints defined by its DTD or schema.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>(See the <bpt id="p1">[</bpt>W3C XML Schema Part 1: Structures<ept id="p1">](http://www.w3.org/TR/xmlschema-1/)</ept> and the <bpt id="p2">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p2">](http://www.w3.org/TR/xmlschema-2/)</ept>recommendations.) Therefore, although all valid XML documents are well formed, not all well-formed XML documents are valid.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can validate the data against a DTD, an inline XSD Schema, or an XSD Schema stored in an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> object (a cache); these scenarios are described on the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> doesn't support XML-Data Reduced (XDR) schema validation.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use the following settings on the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> class to specify what type of validation, if any, the<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> instance supports.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> member</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.DtdProcessing%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether to allow DTD processing.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is to disallow DTD processing.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.ValidationType%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether the reader should validate data, and what type of validation to perform (DTD or schema).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is no data validation.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.ValidationEventHandler&gt;</ph> event</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>An event handler for receiving information about validation events.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an event handler is not provided, an <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph> is thrown on the first validation error.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.ValidationFlags%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additional validation options through the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;</ph> enumeration members:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1"> -   </ph><ph id="ph2">`AllowXmlAttributes`</ph>-- Allow XML attributes (<ph id="ph3">`xml:*`</ph>) in instance documents even when they're not defined in the schema.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The attributes are validated based on their data type.See the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags&gt;</ph> reference page for  the setting to use in specific scenarios.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Disabled by default.)</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">-   </ph><ph id="ph2">`ProcessIdentityConstraints`</ph> --Process identity constraints (<ph id="ph3">`xs:ID`</ph>, <ph id="ph4">`xs:IDREF`</ph>, <ph id="ph5">`xs:key`</ph>, <ph id="ph6">`xs:keyref`</ph>, <ph id="ph7">`xs:unique`</ph>) encountered during validation.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Enabled by default.)</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">-   </ph><ph id="ph2">`ProcessSchemaLocation`</ph> --Process schemas specified by the <ph id="ph3">`xsi:schemaLocation`</ph> or <ph id="ph4">`xsi:noNamespaceSchemaLocation`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Enabled by default.)</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">-   </ph><ph id="ph2">`ProcessInlineSchema`</ph>-- Process inline XML Schemas during validation.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Disabled by default.)</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">-   </ph><ph id="ph2">`ReportValidationWarnings`</ph>--Report events if a validation warning occurs.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>A warning is typically issued when there is no DTD or XML Schema to validate a particular element or attribute against.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.ValidationEventHandler&gt;</ph> is used for notification.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Disabled by default.)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> to use for validation.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph>for  resolving and accessing external resources.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can include external entities such as DTD and schemas, and any <ph id="ph1">`xs:include`</ph> or <ph id="ph2">`xs:import`</ph> elements contained in the XML Schema.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you don't specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph>, the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> uses a default <ph id="ph3">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no user credentials.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data conformance</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML readers that are created by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> methodmeet the following compliance requirements by default:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>New lines and attribute value are normalized according to the W3C <bpt id="p1">[</bpt>XML 1.0 Recommendation<ept id="p1">](http://www.w3.org/TR/2006/REC-xml-20060816/)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>All entities are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default attributes declared in the document type definition are always added even when the reader doesn't validate.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Declaration of XML prefix mapped to the correct XML namespace URI is allowed.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The notation names in a single <ph id="ph1">`NotationType`</ph> attribute declaration and<ph id="ph2">`NmTokens`</ph> in a single <ph id="ph3">`Enumeration`</ph> attribute declarationare distinct.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use these <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> properties to specify the type of conformance checks you want to enable:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>To</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.CheckCharacters%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enable or disable checks for the following:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Characters are within the range of legal XML characters, as defined by the <bpt id="p1">[</bpt>2.2 Characters<ept id="p1">](http://www.w3.org/TR/2006/REC-xml-20060816/#charsets)</ept> section of the W3C XML 1.0 Recommendation.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   All XML names are valid, as defined by the <bpt id="p1">[</bpt>2.3 Common Syntactic Constructs<ept id="p1">](http://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name)</ept> section of the W3C XML 1.0 Recommendation.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is set to <ph id="ph1">`true`</ph> (default), an <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> exception is thrown if the XML file contains illegal characters or invalid XML names (for example, an element name starts with a number).</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Character and name checking is enabled.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.CheckCharacters%2A&gt;</ph> to <ph id="ph2">`false`</ph> turns off character checking for character entity references.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is processing text data, it always checks that XML names are valid, regardless of this setting.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  The XML 1.0 recommendation requires document-level conformance when a DTD is present.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if the reader is configured to support <ph id="ph1">&lt;xref:System.Xml.ConformanceLevel?displayProperty=fullName&gt;</ph>, but the XML data contains a document type definition (DTD), an <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Choose the level of conformance to enforce:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1"> -   </ph><ph id="ph2">&lt;xref:System.Xml.ConformanceLevel.Document&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conforms to the rules for a <bpt id="p1">[</bpt>well-formed XML 1.0 document<ept id="p1">](http://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">-   </ph><ph id="ph2">&lt;xref:System.Xml.ConformanceLevel.Fragment&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conforms to the rules for a well-formed document fragment that can be consumed as an <bpt id="p1">[</bpt>external parsed entity<ept id="p1">](http://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities)</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">-   </ph><ph id="ph2">&lt;xref:System.Xml.ConformanceLevel.Auto&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conforms to the level decided by the reader.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the data isn't in conformance, an <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Navigating through nodes</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current node is the XML node on which the XML reader is currently positioned.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>All <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>methods perform operations in relation to this node, and all <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>properties reflect the value of the current node.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following methods make it easy to navigate through nodes and parse data.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>To</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read the first node, and advance through the stream one node at a time.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such calls are typically performed inside a <ph id="ph1">`while`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.NodeType%2A&gt;</ph> property to get the type (for example, attribute, comment, element, and so on) of the current node.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Skip the children of the current node and move to the next node.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToContent%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlReader.MoveToContentAsync%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Skip non-content nodes and move to the next content node or to the end of the file.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Non-content nodes include <ph id="ph1">&lt;xref:System.Xml.XmlNodeType.ProcessingInstruction&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlNodeType.DocumentType&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlNodeType.Comment&gt;</ph>, <ph id="ph4">&lt;xref:System.Xml.XmlNodeType.Whitespace&gt;</ph>, and <ph id="ph5">&lt;xref:System.Xml.XmlNodeType.SignificantWhitespace&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Content nodes include non-white space text, <ph id="ph1">&lt;xref:System.Xml.XmlNodeType.CDATA&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlNodeType.EntityReference&gt;</ph> , and<ph id="ph3">&lt;xref:System.Xml.XmlNodeType.EndEntity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read an element and all its children, and return a new <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instance set to <ph id="ph2">&lt;xref:System.Xml.ReadState?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is useful for creating boundaries around XML elements; for example, if you want to pass data to another component for processing and you want to limit how much of your data the component can access.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Read%2A?displayProperty=fullName&gt;</ph> reference page for an example of navigating through a text stream one node at a time and displaying the type of each node.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following sections describe how you can read specific types of data, such as elements, attributes, and typed data.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reading XML elements</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists the methods and properties that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> class provides for processing elements.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> is positioned on an element, the node properties, such as <ph id="ph2">&lt;xref:System.Xml.XmlReader.Name%2A&gt;</ph>, reflect the element values.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to the members described below, any of the general methods and properties of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> class can also be used to process elements.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadInnerXml%2A&gt;</ph> method to read the contents of an element.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>See section 3.1 of the <bpt id="p1">[</bpt>W3C XML 1.0 Recommendation<ept id="p1">](http://www.w3.org/TR/2006/REC-xml-20060816/#sec-starttags)</ept> for definitions of start tags, end tags, and empty element tags.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> member</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>To</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check if the current node is a start tag or an empty element tag.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadStartElement%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check that the current node is an element and advance the reader to the next node (calls <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> followed by <ph id="ph2">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadEndElement%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check that the current node is an end tag and advance the reader to the next node.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementString%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read a text-only element.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadToDescendant%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Advance the XML reader to the next descendant (child) element that has the specified name.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadToNextSibling%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>Advance the XML reader to the next sibling element that has the specified name.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.IsEmptyElement%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check if the current element has an end element tag.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1"> -   </ph><ph id="ph2">`&lt;item num="123"/&gt;`</ph> (<ph id="ph3">&lt;xref:System.Xml.XmlReader.IsEmptyElement%2A&gt;</ph> is <ph id="ph4">`true`</ph>.)</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">-   </ph><ph id="ph2">`&lt;item num="123"&gt; &lt;/item&gt;`</ph> (<ph id="ph3">&lt;xref:System.Xml.XmlReader.IsEmptyElement%2A&gt;</ph> is <ph id="ph4">`false`</ph>, although the element's content is empty.)</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of reading the text content of elements, see the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example processes elements by using a <ph id="ph1">`while`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XmlReaderBasic#10<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#10)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XmlReaderBasic#10<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#10)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reading XML attributes</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML attributes are most commonly found on elements, but they're also allowed on XML declaration and document type nodes.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>When positioned on an element node, the <ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToAttribute%2A&gt;</ph> method lets you go through the attribute list of the element.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that after <ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToAttribute%2A&gt;</ph> has been called, node properties such as <ph id="ph2">&lt;xref:System.Xml.XmlReader.Name%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlReader.NamespaceURI%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.XmlReader.Prefix%2A&gt;</ph> reflect the properties of that attribute, not the properties of the element the attribute belongs to.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> class provides these methods and properties to read and process attributes on elements.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> member</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>To</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.HasAttributes%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check whether the current node has any attributes.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.AttributeCount%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get the number of attributes on the current element.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToFirstAttribute%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Move to the first attribute in an element.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToNextAttribute%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Move to the next attribute in an element.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToAttribute%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Move to a specified attribute.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.GetAttribute%2A&gt;</ph> method or <ph id="ph2">&lt;xref:System.Xml.XmlReader.Item%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get the value of a specified attribute.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.IsDefault%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToElement%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Move to the element that owns the current attribute.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to return to an element after navigating through its attributes.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadAttributeValue%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parse the attribute value into one or more <ph id="ph1">`Text`</ph>, <ph id="ph2">`EntityReference`</ph>, or <ph id="ph3">`EndEntity`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any of the general <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> methods and properties can also be used to process attributes.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, after the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> is positioned on an attribute, the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Name%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.XmlReader.Value%2A&gt;</ph> properties reflect the values of the attribute.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use any of the content <ph id="ph1">`Read`</ph> methods to get the value of the attribute.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>This example uses the <ph id="ph1">&lt;xref:System.Xml.XmlReader.AttributeCount%2A&gt;</ph> property to navigate through all the attributes on an element.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XmlReaderBasic#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XmlReaderBasic#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>This example uses the <ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToNextAttribute%2A&gt;</ph> method in a <ph id="ph2">`while`</ph> loop to navigate through the attributes.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XmlReaderBasic#6<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XmlReaderBasic#6<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Reading attributes on XML declaration nodes<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the XML reader is positioned on an XML declaration node, the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Value%2A&gt;</ph> property returns the version, standalone, and encoding information as a single string.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> objects created by the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Xml.XmlTextReader&gt;</ph> class, and the <ph id="ph4">&lt;xref:System.Xml.XmlValidatingReader&gt;</ph>class expose the version, standalone, and encoding items as attributes.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Reading attributes on document type nodes<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the XML reader is positioned on a document type node, the <ph id="ph1">&lt;xref:System.Xml.XmlReader.GetAttribute%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Xml.XmlReader.Item%2A&gt;</ph> property can be used to return the values for the SYSTEM and PUBLIC literals.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, calling <ph id="ph1">`reader.GetAttribute("PUBLIC")`</ph> returns the PUBLIC value.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Reading attributes on processing instruction nodes<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> is positioned on a processing instruction node, the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Value%2A&gt;</ph> property returns the entire text content.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>Items in the processing instruction node aren't treated as attributes.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>They can't be read with the <ph id="ph1">&lt;xref:System.Xml.XmlReader.GetAttribute%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XmlReader.MoveToAttribute%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reading XML content</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XMLReader class includes the following members that read content from an XML file and return the content as string values.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>(To return CLR types, see the <bpt id="p1">[</bpt>next section<ept id="p1">](#xmlreader_clr)</ept>.)</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> member</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>To</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.Value%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get the text content of the current node.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned depends on the node type; see the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Value%2A&gt;</ph> reference page for details.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadString%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get the content of an element or text node as a string.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method stops on processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details on how this method handles specific node types, see the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadString%2A&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadInnerXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadInnerXmlAsync%2A&gt;</ph> methods</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get all the content of the current node, including the markup, but excluding start and end tags.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, for:</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadInnerXml%2A&gt;</ph> returns:</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadOuterXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadOuterXmlAsync%2A&gt;</ph> methods</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get all the content of the current node and its children, including markup and start/end tags.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, for:</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadOuterXml%2A&gt;</ph> returns:</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>Converting to CLR types</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the members of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> class (listed in the following table) to read XML data and return values as common language runtime (CLR) types instead of strings.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>These members enable you to get values in the representation that is most appropriate for your coding task without having to manually parse or convert string values.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">**</bpt>ReadElementContentAs<ept id="p1">**</ept> methods can only be called on element node types.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>These methods cannot be used on elements that contain child elements or mixed content.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>When called, the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object reads the start tag, reads the element content, and then moves past the end element tag.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>Processing instructions and comments are ignored and entities are expanded.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">**</bpt>ReadContentAs<ept id="p1">**</ept>methods read the text content at the current reader position, and if the XML data doesn't have any schema or data type information associated with it, convert the text content to the requested return type.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>Text, white space, significant white space and CDATA sections are concatenated.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Comments and processing instructions are skipped, and entity references are automatically resolved.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> class uses the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://www.w3.org/TR/xmlschema-2/)</ept>recommendation.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>method</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>To return this CLR type</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBoolean%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBoolean%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsDateTime%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadElementContentAsDateTime%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsDouble%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadElementContentAsDouble%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsLong%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadElementContentAsLong%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsInt%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadElementContentAsInt%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsString%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadElementContentAsString%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAs%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadElementContentAs%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type you specify with the <ph id="ph1">`returnType`</ph> parameter</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsObject%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadElementContentAsObject%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most appropriate type, as specified by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ValueType%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Type Support in the System.Xml Classes<ept id="p1">](~/docs/standard/data/xml/type-support-in-the-system-xml-classes.md)</ept> for mapping information.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an element can't easily be converted to a CLR type because of its format, you can use a schema mapping to ensure a successful conversion.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses an .xsd file to convert the <ph id="ph1">`hire-date`</ph> element to the <ph id="ph2">`xs:date`</ph> type, and then uses the <ph id="ph3">&lt;xref:System.Xml.XmlReader.ReadElementContentAsDateTime%2A&gt;</ph> method to return the element as a <ph id="ph4">&lt;xref:System.DateTime&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Input (hireDate.xml):<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XmlReader.ReadElementContentAs#9<ept id="p2">](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/hireDate.xml#9)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Schema (hireDate.xsd):<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>XmlReader.ReadElementContentAs#10<ept id="p2">](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/hireDate.xsd#10)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Code:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XmlReader.ReadElementContentAs#13<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#13)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XmlReader.ReadElementContentAs#13<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#13)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Output:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>Asynchronous programming</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> methods have asynchronous counterparts that have "Async" at the end of their method names.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the asynchronous equivalent of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsObject%2A&gt;</ph> is <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadContentAsObjectAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following methods can be used with asynchronous method calls:</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following sections describe asynchronous usage for methods that don't have asynchronous counterparts.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>ReadStartElement method<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Xml.XmlReader.Class#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Xml.XmlReader.Class#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>ReadEndElement method<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Xml.XmlReader.Class#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Xml.XmlReader.Class#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>ReadToNextSibling method<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Xml.XmlReader.Class#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Xml.XmlReader.Class#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>ReadToFollowing method<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Xml.XmlReader.Class#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Xml.XmlReader.Class#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>ReadToDescendant method<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Xml.XmlReader.Class#5<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Xml.XmlReader.Class#5<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>Security considerations</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider the following when working with the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions thrown from the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can disclose path information that you might not want bubbled up to your app.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your app must catch exceptions and process them appropriately.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not enable DTD processing if you're concerned about denial of service issues or if you're dealing with untrusted sources.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>DTD processing is disabled by default for <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> objects created by the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have DTD processing enabled, you can use the <ph id="ph1">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> to restrict the resources that the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> can access.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also design your app so that the XML processing is memory and time constrained.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can configure time-out limits in your ASP.NET app.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML data can include references to external resources such as a schema file.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, external resources are resolved by using an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> object with no user credentials.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can secure this further by doing one of the following:</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>Restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not allow the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to open any external resources by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> validation flags of an <ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object aren't set by default.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>This helps to protect the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> against schema-based attacks when it is processing XML data from an untrusted source.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>When these flags are set, the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object is used to resolve schema locations encountered in the instance document in the <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property is set to <ph id="ph2">`null`</ph>, schema locations aren't resolved even if the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&gt;</ph> and <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&gt;</ph> validation flags are set.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>Schemas added during validation add new types and can change the validation outcome of the document being validated.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, external schemas should only be resolved from trusted sources.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend disabling the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints&gt;</ph> flag when validating untrusted, large XML documents in high availability scenarios against a schema that has identity constraints over a large part of the document.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>This flag is enabled by default.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>To limit the size of the input that is sent to the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>, you can:</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>Limit the size of the document by setting the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>Limit the number of characters that result from expanding entities by setting the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create a custom <ph id="ph1">`IStream`</ph> implementation for the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> method can be used to handle large streams of data.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads a small number of characters at a time instead of allocating a single string for the whole value.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>When reading an XML document with a large number of unique local names, namespaces, or prefixes, a problem can occur.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are using a class that derives from <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>, and you call the <ph id="ph2">&lt;xref:System.Xml.XmlReader.LocalName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlReader.Prefix%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xml.XmlReader.NamespaceURI%2A&gt;</ph> property for each item, the returned string is added to a <ph id="ph5">&lt;xref:System.Xml.NameTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>The collection held by the <ph id="ph1">&lt;xref:System.Xml.NameTable&gt;</ph> never decreases in size, creating a virtual memory leak of the string handles.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>One mitigation for this is to derive from the <ph id="ph1">&lt;xref:System.Xml.NameTable&gt;</ph> class and enforce a maximum size quota.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>(There is no way to prevent the use of a <ph id="ph1">&lt;xref:System.Xml.NameTable&gt;</ph>, or to switch the <ph id="ph2">&lt;xref:System.Xml.NameTable&gt;</ph> when it is full).</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another mitigation is to avoid using the properties mentioned and instead use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToAttribute%2A&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> method where possible; those methods don't return strings and thus avoid the problem of overfilling the <ph id="ph3">&lt;xref:System.Xml.NameTable&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> objects can contain sensitive information such as user credentials.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>An untrusted component could use the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object and its user credentials to create <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> objects to read data.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be careful when caching <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> objects, or when passing the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object from one component to another.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not accept supporting components, such as <ph id="ph1">&lt;xref:System.Xml.NameTable&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlNamespaceManager&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xml.XmlResolver&gt;</ph> objects, from an untrusted source.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">`XmlReader`</ph> class.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is called by derived class constructors to initialize state in this type.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the number of attributes on the current node.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is relevant to <ph id="ph1">`Element`</ph>, <ph id="ph2">`DocumentType`</ph> and <ph id="ph3">`XmlDeclaration`</ph> nodes only.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Other node types do not have attributes.)</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The number of attributes on the current node.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the base URI of the current node.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>DTD entities are an example of this, but this is not limited to DTDs.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base URI tells you where these nodes came from.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), <ph id="ph1">`String.Empty`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The base URI of the current node.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> implements the binary content read methods.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>The binary content read methods include the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBase64%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadContentAsBinHex%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property returns <ph id="ph1">`false`</ph> a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph> is returned when any of the binary read methods is called.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>All Microsoft .NET Framework implementations of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> class return <ph id="ph2">`true`</ph> for this property.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the binary content read methods are implemented; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> implements the <ph id="ph2">&lt;xref href="System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>Text parsing <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> objects that were created from the static <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method always return <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>All other Microsoft .NET Framework implementations of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> class, including the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> class, return <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property returns <ph id="ph1">`false`</ph> a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph> is returned when the <ph id="ph3">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> implements the <ph id="ph3">&lt;xref href="System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> method; otherwise <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether this reader can parse and resolve entities.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property always returns <ph id="ph1">`false`</ph> for implementations of <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> that do not support DTD information.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, calling <ph id="ph1">&lt;xref:System.Xml.XmlReader.ResolveEntity%2A&gt;</ph> throws an exception.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the reader can parse and resolve entities; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, changes the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.ReadState"&gt;&lt;/xref&gt;</ph> to <ph id="ph2">&lt;xref href="System.Xml.ReadState.Closed"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method also releases any resources held during reading.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlReader.Close%2A&gt;</ph> has already been called, no action is performed.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance by using the specified URI, settings, and context information for parsing.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access any locations that does not require authentication.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, use the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property to specify an <ph id="ph2">&lt;xref:System.Xml.XmlResolver&gt;</ph> with the necessary credentials.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The URI for the file containing the XML data.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlResolver"&gt;&lt;/xref&gt;</ph> object on the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings"&gt;&lt;/xref&gt;</ph> object is used to convert the path to a canonical data representation.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref href="System.Xml.XmlReaderSettings.XmlResolver"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`null`</ph>, a new <ph id="ph3">&lt;xref href="System.Xml.XmlUrlResolver"&gt;&lt;/xref&gt;</ph> object is used.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The settings for the new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The context information required to parse the XML fragment.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The context information can include the <ph id="ph1">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph> to use, encoding, namespace scope, the current <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">xml:lang</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">xml:space</ph><ept id="p2">&lt;/code&gt;</ept> scope, base URI, and document type definition.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>An object that is used to read the XML data in the stream.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`inputUri`</ph> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> does not have sufficient permissions to access the location of the XML data.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReaderSettings.NameTable"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Xml.XmlParserContext.NameTable"&gt;&lt;/xref&gt;</ph> properties both contain values.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>(Only one of these <ph id="ph1">`NameTable`</ph> properties can be set and used).</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The file specified by the URI cannot be found.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The URI format is not correct.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance by using the specified text reader, settings, and context information for parsing.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, use the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property to specify an <ph id="ph2">&lt;xref:System.Xml.XmlResolver&gt;</ph> with the necessary credentials.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use one of the following methods to control which resources the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access:</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>Restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not allow the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to open any external resources by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The text reader from which to read the XML data.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The settings for the new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The context information required to parse the XML fragment.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The context information can include the <ph id="ph1">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph> to use, encoding, namespace scope, the current <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">xml:lang</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">xml:space</ph><ept id="p2">&lt;/code&gt;</ept> scope, base URI, and document type definition.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>An object that is used to read the XML data in the stream.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">input</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReaderSettings.NameTable"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Xml.XmlParserContext.NameTable"&gt;&lt;/xref&gt;</ph> properties both contain values.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>(Only one of these <ph id="ph1">`NameTable`</ph> properties can be set and used).</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance by using the specified text reader, settings, and base URI.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, use the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property to specify an <ph id="ph2">&lt;xref:System.Xml.XmlResolver&gt;</ph> with the necessary credentials.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use one of the following methods to control which resources the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access:</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>Restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not allow the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to open any external resources by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The text reader from which to read the XML data.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> to decode the data stream.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The settings for the new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The base URI for the entity or document being read.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept> The base URI is used to resolve the relative URI of the XML document.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Do not use a base URI from an untrusted source.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>An object that is used to read the XML data in the stream.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">input</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance using the specified stream, base URI, and settings.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, use the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property to specify an <ph id="ph2">&lt;xref:System.Xml.XmlResolver&gt;</ph> with the necessary credentials.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use one of the following methods to control which resources the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access:</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>Restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not allow the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to open any external resources by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>The stream that contains the XML data.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> scans the first bytes of the stream looking for a byte order mark or other sign of encoding.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>The settings for the new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>The base URI for the entity or document being read.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept> The base URI is used to resolve the relative URI of the XML document.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Do not use a base URI from an untrusted source.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>An object that is used to read the XML data in the stream.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">input</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance by using the specified XML reader and settings.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method allows you add additional features to an underlying <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>The underlying <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object can be another <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> object created by the <ph id="ph3">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method, or an <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> object created using one of the concrete <ph id="ph5">&lt;xref:System.Xml.XmlReader&gt;</ph> implementations.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>A default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a schema.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> with the necessary credentials using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use one of the following methods to control which resources the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access:</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>Restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not allow the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to open any external resources by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The object that you want to use as the underlying XML reader.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The settings for the new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The conformance level of the <ph id="ph1">&lt;xref href="System.Xml.XmlReaderSettings"&gt;&lt;/xref&gt;</ph> object must either match the conformance level of the underlying reader, or it must be set to <ph id="ph2">&lt;xref href="System.Xml.ConformanceLevel.Auto"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>An object that is wrapped around the specified <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">reader</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref href="System.Xml.XmlReaderSettings"&gt;&lt;/xref&gt;</ph> object specifies a conformance level that is not consistent with conformance level of the underlying reader.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> is in an <ph id="ph2">&lt;xref href="System.Xml.ReadState.Error"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Xml.ReadState.Closed"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance using the specified stream, settings, and context information for parsing.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, use the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property to specify an <ph id="ph2">&lt;xref:System.Xml.XmlResolver&gt;</ph> with the necessary credentials.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use one of the following methods to control which resources the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access:</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>Restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not allow the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to open any external resources by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>The stream that contains the XML data.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> scans the first bytes of the stream looking for a byte order mark or other sign of encoding.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>The settings for the new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>The context information required to parse the XML fragment.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>The context information can include the <ph id="ph1">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph> to use, encoding, namespace scope, the current <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">xml:lang</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">xml:space</ph><ept id="p2">&lt;/code&gt;</ept> scope, base URI, and document type definition.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>An object that is used to read the XML data in the stream.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">input</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance by using the specified text reader and settings.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, use the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property to specify an <ph id="ph2">&lt;xref:System.Xml.XmlResolver&gt;</ph> with the necessary credentials.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use one of the following methods to control which resources the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access:</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>Restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not allow the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to open any external resources by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The text reader from which to read the XML data.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>The settings for the new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>An object that is used to read the XML data in the stream.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">input</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance with the specified stream and settings.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, use the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property to specify an <ph id="ph2">&lt;xref:System.Xml.XmlResolver&gt;</ph> with the necessary credentials.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use one of the following methods to control which resources the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access:</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>Restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not allow the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to open any external resources by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The stream that contains the XML data.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> scans the first bytes of the stream looking for a byte order mark or other sign of encoding.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The settings for the new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>An object that is used to read the XML data in the stream.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">input</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance by using the specified URI and settings.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access any locations that does not require authentication.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, use the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property to specify an <ph id="ph2">&lt;xref:System.Xml.XmlResolver&gt;</ph> with the necessary credentials.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>The URI for the file containing the XML data.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlResolver"&gt;&lt;/xref&gt;</ph> object on the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings"&gt;&lt;/xref&gt;</ph> object is used to convert the path to a canonical data representation.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref href="System.Xml.XmlReaderSettings.XmlResolver"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`null`</ph>, a new <ph id="ph3">&lt;xref href="System.Xml.XmlUrlResolver"&gt;&lt;/xref&gt;</ph> object is used.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The settings for the new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>An object that is used to read the XML data in the stream.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">inputUri</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>The file specified by the URI cannot be found.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;xref href="System.FormatException"&gt;&lt;/xref&gt;</ph>, instead.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>The URI format is not correct.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance with specified URI.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object with default settings is used to create the reader.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you wish to specify the features to support on the created reader, use the overload that takes an <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object as one of its arguments, and pass in an <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object with the correct settings.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source>A default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> with the necessary credentials using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>The URI for the file that contains the XML data.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlUrlResolver"&gt;&lt;/xref&gt;</ph> class is used to convert the path to a canonical data representation.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>An object that is used to read the XML data in the stream.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">inputUri</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> does not have sufficient permissions to access the location of the XML data.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The file identified by the URI does not exist.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;xref href="System.FormatException"&gt;&lt;/xref&gt;</ph>, instead.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The URI format is not correct.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance by using the specified text reader.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object with default settings is used to create the reader.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you wish to specify the features to support on the created reader, use the overload that takes an <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object as one of its arguments, and pass in an <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object with the correct settings.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT">
          <source>A default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph>with the necessary credentials using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>The text reader from which to read the XML data.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration is not used by the XML reader to decode the data stream.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>An object that is used to read the XML data in the stream.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">input</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance using the specified stream with default settings.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object with default settings is used to create the reader.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you wish to specify the features to support on the created reader, use the overload that takes an <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object as one of its arguments, and pass in an <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object with the correct settings.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>A default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 4.5.2, no default <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is provided.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your solution targets the .NET Framework 4.5.2 or later versions, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the external resource is located on a network resource that requires authentication, specify an <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> with the necessary credentials using the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>The created <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object expands entity references and performs XML normalization of new line characters.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>The stream that contains the XML data.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> scans the first bytes of the stream looking for a byte order mark or other sign of encoding.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>An object that is used to read the XML data in the stream.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">input</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> does not have sufficient permissions to access the location of the XML data.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the depth of the current node in the XML document.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>The depth of the current node in the XML document.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the reader is positioned at the end of the stream; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the value of the attribute with the specified index.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>The index of the attribute.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>The index is zero-based.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>(The first attribute has index 0.)</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>The value of the specified attribute.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>This method does not move the reader.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;i&lt;/code&gt;</ph> is out of range.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>It must be non-negative and less than the size of the attribute collection.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the value of the attribute with the specified <ph id="ph1">&lt;xref href="System.Xml.XmlReader.Name"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not move the reader.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on a <ph id="ph1">`DocumentType`</ph> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <ph id="ph2">`reader.GetAttribute("PUBLIC")`</ph></source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>The qualified name of the attribute.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>The value of the specified attribute.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>If the attribute is not found or the value is <ph id="ph1">`String.Empty`</ph>, <ph id="ph2">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the value of the attribute with the specified <ph id="ph1">&lt;xref href="System.Xml.XmlReader.LocalName"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Xml.XmlReader.NamespaceURI"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following XML contains an attribute in a specific namespace:</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can lookup the <ph id="ph1">`dt:type`</ph> attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT">
          <source>To lookup the <ph id="ph1">`xmlns:dt`</ph> attribute, use one of the following arguments:</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also get this information using the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Prefix%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>The namespace URI of the attribute.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>The value of the specified attribute.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>If the attribute is not found or the value is <ph id="ph1">`String.Empty`</ph>, <ph id="ph2">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>This method does not move the reader.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Asynchronously gets the value of the current node.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>The value of the current node.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current node has any attributes.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current node has attributes; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets a value indicating whether the current node can have a <ph id="ph1">&lt;xref href="System.Xml.XmlReader.Value"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists node types that have a value to return.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT">
          <source>Node Type</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the attribute.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the CDATA section.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the comment.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT">
          <source>The internal subset.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT">
          <source>The entire content, excluding the target.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT">
          <source>The white space between markup in a mixed content model.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the text node.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT">
          <source>The white space between markup.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the declaration.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the node on which the reader is currently positioned can have a <ph id="ph2">`Value`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, the node has a value of <ph id="ph2">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`IsDefault`</ph> always returns <ph id="ph2">`false`</ph> for implementations of <ph id="ph3">`XmlReader`</ph> that do not support schema or DTD information.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property applies only to an attribute node.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; <ph id="ph2">`false`</ph> if the attribute value was explicitly set.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">&lt;MyElement/&gt;</ph><ept id="p1">&lt;/code&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property enables you to determine the difference between the following:</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&lt;item num="123"/&gt;`</ph> (<ph id="ph2">`IsEmptyElement`</ph> is <ph id="ph3">`true`</ph>).</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&lt;item num="123"&gt;&lt;/item&gt;`</ph> (<ph id="ph2">`IsEmptyElement`</ph> is <ph id="ph3">`false`</ph>, although element content is empty).</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>A corresponding <ph id="ph1">`EndElement`</ph> node is not generated for empty elements.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT">
          <source>If default content has been added to an element due to schema validation, <ph id="ph1">`IsEmptyElement`</ph> still returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT">
          <source>It has no bearing on whether or not the element has a default value.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other words, <ph id="ph1">`IsEmptyElement`</ph> simply reports whether or not the element in the source document had an end element tag.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current node is an element (<ph id="ph2">&lt;xref href="System.Xml.XmlReader.NodeType"&gt;&lt;/xref&gt;</ph> equals <ph id="ph3">`XmlNodeType.Element`</ph>) that ends with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph4">/&gt;</ph><ept id="p1">&lt;/code&gt;</ept>; otherwise, <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether the string argument is a valid XML name.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>W3C XML 1.0 Recommendation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=49863)</ept> to determine whether the name is valid.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>The name to validate.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the name is valid; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">str</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether or not the string argument is a valid XML name token.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the <bpt id="p1">[</bpt>W3C XML 1.0 Recommendation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=49863)</ept> to determine whether the name token is valid.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>The name token to validate.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if it is a valid name token; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">str</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">&lt;xref href="System.Xml.XmlReader.MoveToContent"&gt;&lt;/xref&gt;</ph> and tests if the current content node is a start tag or empty element tag.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method skips white space, comments, and processing instructions until the reader is positioned on a content node.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method then tests if the current node is an element.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref href="System.Xml.XmlReader.MoveToContent"&gt;&lt;/xref&gt;</ph> finds a start tag or empty element tag; <ph id="ph3">`false`</ph> if a node type other than <ph id="ph4">`XmlNodeType.Element`</ph> was found.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Incorrect XML is encountered in the input stream.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">&lt;xref href="System.Xml.XmlReader.MoveToContent"&gt;&lt;/xref&gt;</ph> and tests if the current content node is a start tag or empty element tag and if the <ph id="ph2">&lt;xref href="System.Xml.XmlReader.Name"&gt;&lt;/xref&gt;</ph> property of the element found matches the given argument.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method skips white space, comments, and processing instructions until the reader is positioned on a content node.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method then tests if the current node is an element.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>The string matched against the <ph id="ph1">`Name`</ph> property of the element found.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the resulting node is an element and the <ph id="ph2">`Name`</ph> property matches the specified string.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> if a node type other than <ph id="ph2">`XmlNodeType.Element`</ph> was found or if the element <ph id="ph3">`Name`</ph> property does not match the specified string.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Incorrect XML is encountered in the input stream.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">&lt;xref href="System.Xml.XmlReader.MoveToContent"&gt;&lt;/xref&gt;</ph> and tests if the current content node is a start tag or empty element tag and if the <ph id="ph2">&lt;xref href="System.Xml.XmlReader.LocalName"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Xml.XmlReader.NamespaceURI"&gt;&lt;/xref&gt;</ph> properties of the element found match the given strings.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method skips white space, comments, and processing instructions until the reader is positioned on a content node.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method then tests if the current node is an element.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>The string to match against the <ph id="ph1">`LocalName`</ph> property of the element found.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>The string to match against the <ph id="ph1">`NamespaceURI`</ph> property of the element found.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the resulting node is an element.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> if a node type other than <ph id="ph2">`XmlNodeType.Element`</ph> was found or if the <ph id="ph3">`LocalName`</ph> and <ph id="ph4">`NamespaceURI`</ph> properties of the element do not match the specified strings.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Incorrect XML is encountered in the input stream.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the value of the attribute with the specified index.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property does not move the reader.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>The index of the attribute.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>The value of the specified attribute.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the value of the attribute with the specified <ph id="ph1">&lt;xref href="System.Xml.XmlReader.Name"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property does not move the reader.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on a <ph id="ph1">`DocumentType`</ph> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <ph id="ph2">`reader["PUBLIC"]`</ph></source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>The qualified name of the attribute.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>The value of the specified attribute.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>If the attribute is not found, <ph id="ph1">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the value of the attribute with the specified <ph id="ph1">&lt;xref href="System.Xml.XmlReader.LocalName"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Xml.XmlReader.NamespaceURI"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property does not move the reader.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>The namespace URI of the attribute.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>The value of the specified attribute.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>If the attribute is not found, <ph id="ph1">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the local name of the current node.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>The name of the current node with the prefix removed.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`LocalName`</ph> is <ph id="ph2">`book`</ph> for the element <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">&lt;bk:book&gt;</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>For node types that do not have a name (like <ph id="ph1">`Text`</ph>, <ph id="ph2">`Comment`</ph>, and so on), this property returns <ph id="ph3">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, resolves a namespace prefix in the current element's scope.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following XML string, if the reader is positioned on the <ph id="ph1">`href`</ph> attribute, the prefix <ph id="ph2">`a`</ph> is resolved by calling <ph id="ph3">`reader.LookupNamespace("a")`</ph>.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned string is <ph id="ph1">`urn:456`</ph>.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>The prefix whose namespace URI you want to resolve.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>To match the default namespace, pass an empty string.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>The namespace URI to which the prefix maps or <ph id="ph1">`null`</ph> if no matching prefix is found.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, moves to the attribute with the specified index.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>The index of the attribute.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>The parameter has a negative value.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, moves to the attribute with the specified <ph id="ph1">&lt;xref href="System.Xml.XmlReader.Name"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">`MoveToAttribute`</ph>, the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Name%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlReader.NamespaceURI%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.XmlReader.Prefix%2A&gt;</ph> properties reflect the properties of that attribute.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>The qualified name of the attribute.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the attribute is found; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, the reader's position does not change.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>The parameter is an empty string.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, moves to the attribute with the specified <ph id="ph1">&lt;xref href="System.Xml.XmlReader.LocalName"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Xml.XmlReader.NamespaceURI"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">`MoveToAttribute`</ph>, the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Name%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlReader.NamespaceURI%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.XmlReader.Prefix%2A&gt;</ph> properties reflect the properties of that attribute.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>The namespace URI of the attribute.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the attribute is found; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, the reader's position does not change.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Both parameter values are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Checks whether the current node is a content (non-white space text, <ph id="ph1">`CDATA`</ph>, <ph id="ph2">`Element`</ph>, <ph id="ph3">`EndElement`</ph>, <ph id="ph4">`EntityReference`</ph>, or <ph id="ph5">`EndEntity`</ph>) node.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>If the node is not a content node, the reader skips ahead to the next content node or end of file.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>It skips over nodes of the following type: <ph id="ph1">`ProcessingInstruction`</ph>, <ph id="ph2">`DocumentType`</ph>, <ph id="ph3">`Comment`</ph>, <ph id="ph4">`Whitespace`</ph>, or <ph id="ph5">`SignificantWhitespace`</ph>.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current node is an attribute node, this method moves the reader back to the element that owns the attribute.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToContentAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader.NodeType"&gt;&lt;/xref&gt;</ph> of the current node found by the method or <ph id="ph2">`XmlNodeType.None`</ph> if the reader has reached the end of the input stream.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Incorrect XML encountered in the input stream.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Asynchronously checks whether the current node is a content node.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>If the node is not a content node, the reader skips ahead to the next content node or end of file.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToContent%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader.NodeType"&gt;&lt;/xref&gt;</ph> of the current node found by the method or <ph id="ph2">`XmlNodeType.None`</ph> if the reader has reached the end of the input stream.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, moves to the element that contains the current attribute node.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to return to an element after navigating through its attributes.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method moves the reader to one of the following node types: <ph id="ph1">`Element`</ph>, <ph id="ph2">`DocumentType`</ph>, or <ph id="ph3">`XmlDeclaration`</ph>.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <ph id="ph2">`false`</ph> if the reader is not positioned on an attribute (the position of the reader does not change).</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, moves to the first attribute.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if an attribute exists (the reader moves to the first attribute); otherwise, <ph id="ph2">`false`</ph> (the position of the reader does not change).</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, moves to the next attribute.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current node is an element node, this method is equivalent to <ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToFirstAttribute%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`MoveToNextAttribute`</ph> returns <ph id="ph2">`true`</ph>, the reader moves to the next attribute; otherwise, the position of the reader does not change.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if there is a next attribute; <ph id="ph2">`false`</ph> if there are no more attributes.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the qualified name of the current node.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>The qualified name of the current node.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`Name`</ph> is <ph id="ph2">`bk:book`</ph> for the element <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">&lt;bk:book&gt;</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>The name returned is dependent on the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.NodeType"&gt;&lt;/xref&gt;</ph> of the node.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>The following node types return the listed values.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>All other node types return an empty string.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Node type</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>The name of the attribute.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>The document type name.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>The tag name.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>The name of the entity referenced.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>The target of the processing instruction.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>The literal string <ph id="ph1">`xml`</ph>.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is relevant to <ph id="ph1">`Element`</ph> and <ph id="ph2">`Attribute`</ph> nodes only.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>The namespace URI of the current node; otherwise an empty string.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the <ph id="ph1">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph> associated with this implementation.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT">
          <source>All node and attribute names returned from <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> are atomized using the <ph id="ph2">`NameTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the same name is returned multiple times (for example, <ph id="ph1">`Customer`</ph>), then the same <ph id="ph2">`String`</ph> object will be returned for that name.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT">
          <source>This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlNameTable`</ph> enabling you to get the atomized version of a string within the node.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the type of the current node.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specify the type of the current node.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the namespace prefix associated with the current node.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>The namespace prefix associated with the current node.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute node.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property applies only to an attribute node.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>The quotation mark character (" or ') used to enclose the value of an attribute node.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reads the next node from the stream.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> is first created and initialized, there is no information available.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph> to read the first node.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph> method sets the state of the XML reader to initiate <ph id="ph2">&lt;xref:System.Xml.ReadState&gt;</ph> and moves through the XML file sequentially until it reaches the end of the file, at which point the method returns a value of <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method requires at least four bytes from the data stream in order to begin parsing.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT">
          <source>If fewer than four bytes are returned and there is no more data in the stream, the method returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is more data in the stream, the method will block parsing until receipt of the fourth byte.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the next node was read successfully; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>An error occurred while parsing the XML.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the next node from the stream.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the next node was read successfully; <ph id="ph2">`false`</ph> if there are no more nodes to read.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, parses the attribute value into one or more <ph id="ph1">`Text`</ph>, <ph id="ph2">`EntityReference`</ph>, or <ph id="ph3">`EndEntity`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method after calling <ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToAttribute%2A&gt;</ph> to read through the text or entity reference nodes that make up the attribute value.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader.Depth%2A&gt;</ph> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if there are nodes to return.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>An empty attribute, such as, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">misc=""</ph><ept id="p1">&lt;/code&gt;</ept>, returns <ph id="ph2">`true`</ph> with a single node with a value of <ph id="ph3">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Reads the content as an object of the type specified.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the text content at the current reader position and converts it to the requested return type.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT">
          <source>Text, white space, significant white space and CDATA sections are concatenated.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT">
          <source>Comments and processing instructions are skipped and entity references are automatically resolved.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used to read, convert if necessary, and return atomic value items from the current node content.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the input type is a valid mappings for the type of the current node then an instance of the target type containing the value of the current node is returned.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the Remarks section in the<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> referencepage for a list of the default mappings.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you had the following XML text:</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the data is typed and a string array is supplied to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAs%2A&gt;</ph> method call, then the integer values are converted from strings according to the list of valid CLR type mappings.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the data is untyped and a string array is supplied to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAs%2A&gt;</ph> method call, then the content is parsed into separate strings.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT">
          <source>An array containing two strings is returned with the values "123" and "456".</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT">
          <source>The spaces are not preserved from the content.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general when reading untyped data the content is parsed according to the supplied type.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an integer array is supplied to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAs%2A&gt;</ph> method call then the string is parsed into an array of integers {123,456}.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example the XML text is not separated by spaces</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is untyped and a string array is supplied to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAs%2A&gt;</ph> method call then an array containing one concatenated string is returned with the value "123456789".</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes how this method treats each node type.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reader behavior</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as calling <ph id="ph1">`XmlConvert.ToXxx`</ph> on the attribute value.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT">
          <source>An empty string.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undefined, although typically the reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>The type of the value to be returned.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> With the release of the .NET Framework 3.5, the value of the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">returnType</ph><ept id="p2">&lt;/code&gt;</ept> parameter can now be the <ph id="ph2">&lt;xref href="System.DateTimeOffset"&gt;&lt;/xref&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.IXmlNamespaceResolver"&gt;&lt;/xref&gt;</ph> object that is used to resolve any namespace prefixes related to type conversion.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>For example, this can be used when converting an <ph id="ph1">&lt;xref href="System.Xml.XmlQualifiedName"&gt;&lt;/xref&gt;</ph> object to an <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">xs:string</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>The concatenated text content or attribute value converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>The content is not in the correct format for the target type.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>The attempted cast is not valid.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">returnType</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Read <ph id="ph1">`Decimal.MaxValue`</ph>.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the content as an object of the type specified.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAs%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>The type of the value to be returned.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.IXmlNamespaceResolver"&gt;&lt;/xref&gt;</ph> object that is used to resolve any namespace prefixes related to type conversion.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>The concatenated text content or attribute value converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>Reads the content and returns the Base64 decoded binary bytes.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method streams the content, decodes the <ph id="ph1">`Base64`</ph> content, and returns the decoded binary bytes (for example, an inline <ph id="ph2">`Base64`</ph> encoded GIF image) into the buffer.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called successively to read large streams of embedded text.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can obtain RFCs from the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=37119)</ept>.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not access any of the reader properties between calls to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBase64%2A&gt;</ph> method until the method returns the value <ph id="ph2">`0`</ph>.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has the following behavior:</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBase64%2A&gt;</ph> returns the value <ph id="ph2">`0`</ph> when it has reached the end of the byte stream it was operating on.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader is positioned on the first non-content node.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you ask for fewer, or the exact number of, bytes than are left in the stream the reader remains in its current position.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBase64%2A&gt;</ph> is not supported on the following XML node types: <ph id="ph2">`Element`</ph>, <ph id="ph3">`XmlDeclaration`</ph>, <ph id="ph4">`None`</ph>, <ph id="ph5">`Document`</ph>, <ph id="ph6">`DocumentType`</ph>, <ph id="ph7">`Notation`</ph>, <ph id="ph8">`Entity`</ph>, <ph id="ph9">`DocumentFragment`</ph>.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBase64Async%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> implementation does not support this method.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the content and returns the Base64 decoded binary bytes.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBase64%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>Reads the content and returns the <ph id="ph1">`BinHex`</ph> decoded binary bytes.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method streams the content, decodes the <ph id="ph1">`BinHex`</ph> content, and returns the decoded binary bytes (for example, an inline <ph id="ph2">`BinHex`</ph> encoded GIF image) into the buffer.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called successively to read large streams of embedded text.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not access any of the reader properties between calls to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBinHex%2A&gt;</ph> method until the method returns the value <ph id="ph2">`0`</ph>.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has the following behavior:</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBinHex%2A&gt;</ph> returns the value <ph id="ph2">`0`</ph> when it has reached the end of the byte stream it was operating on.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader is positioned on the first non-content node.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBinHex%2A&gt;</ph> is not supported on the following XML node types: <ph id="ph2">`Element`</ph>, <ph id="ph3">`XmlDeclaration`</ph>, <ph id="ph4">`None`</ph>, <ph id="ph5">`Document`</ph>, <ph id="ph6">`DocumentType`</ph>, <ph id="ph7">`Notation, Entity`</ph>, <ph id="ph8">`DocumentFragment`</ph>.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBinHexAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> implementation does not support this method.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the content and returns the <ph id="ph1">`BinHex`</ph> decoded binary bytes.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBinHex%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>Reads the text content at the current position as a <ph id="ph1">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically resolved.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:boolean`</ph>, the reader returns an unboxed <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:boolean`</ph>, the reader attempts to convert it to a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> object according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes how this method treats each node type.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reader behavior</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as calling <ph id="ph1">`XmlConvert.ToXxx`</ph> on the attribute value.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT">
          <source>An empty string.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undefined, although typically the reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>The text content as a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>The attempted cast is not valid.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>The string format is not valid.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Reads the text content at the current position as a <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically resolved.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:dateTime`</ph>, the reader returns an unboxed <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:dateTime`</ph>, the reader attempts to convert it to a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> object according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot rely on the <ph id="ph1">&lt;xref:System.DateTime.Year%2A?displayProperty=fullName&gt;</ph> value when the content is typed as <ph id="ph2">`xsd:gMonthDay`</ph>.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> always sets the <ph id="ph2">&lt;xref:System.DateTime.Year%2A?displayProperty=fullName&gt;</ph> value to 1904 in this case.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes how this method treats each node type.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reader behavior</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as calling <ph id="ph1">`XmlConvert.ToXxx`</ph> on the attribute value.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT">
          <source>An empty string.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undefined, although typically the reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>The text content as a <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>The attempted cast is not valid.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>The string format is not valid.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>Reads the text content at the current position as a <ph id="ph1">&lt;xref href="System.DateTimeOffset"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>The text content as a <ph id="ph1">&lt;xref href="System.DateTimeOffset"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>Reads the text content at the current position as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically resolved.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:decimal`</ph>, the reader returns an unboxed <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:decimal`</ph>, the reader attempts to convert it to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> object according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes how this method treats each node type.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reader behavior</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as calling <ph id="ph1">`XmlConvert.ToXxx`</ph> on the attribute value.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT">
          <source>An empty string.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undefined, although typically the reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>The text content at the current position as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>The attempted cast is not valid.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>The string format is not valid.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>Reads the text content at the current position as a double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically resolved.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:double`</ph>, the reader returns a double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:double`</ph>, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes how this method treats each node type.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reader behavior</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as calling <ph id="ph1">`XmlConvert.ToXxx`</ph> on the attribute value.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT">
          <source>An empty string.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undefined, although typically the reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>The text content as a double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>The attempted cast is not valid.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>The string format is not valid.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>Reads the text content at the current position as a single-precision floating point number.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically resolved.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:float`</ph>, the reader returns an unboxed a single-precision floating point number.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:float`</ph>, the reader attempts to convert it to a single-precision floating point number according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes how this method treats each node type.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reader behavior</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as calling <ph id="ph1">`XmlConvert.ToXxx`</ph> on the attribute value.</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT">
          <source>An empty string.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undefined, although typically the reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>The text content at the current position as a single-precision floating point number.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>The attempted cast is not valid.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>The string format is not valid.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>Reads the text content at the current position as a 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically resolved.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:integer`</ph>, the reader returns an unboxed 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:integer`</ph>, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes how this method treats each node type.</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reader behavior</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as calling <ph id="ph1">`XmlConvert.ToXxx`</ph> on the attribute value.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT">
          <source>An empty string.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undefined, although typically the reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>The text content as a 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>The attempted cast is not valid.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>The string format is not valid.</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>Reads the text content at the current position as a 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions.</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically resolved.</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:long`</ph>, the reader returns an unboxed 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:long`</ph>, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes this method treats each node type.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reader behavior</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as <ph id="ph1">`XmlConvert.ToXxx`</ph> on attribute value.</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" extradata="MT">
          <source>An empty string.</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undefined, although typically the reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>reference page.</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>The text content as a 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>The attempted cast is not valid.</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>The string format is not valid.</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>Reads the text content at the current position as an <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions.</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically resolved.</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed, the reader returns a boxed CLR of the most appropriate type, specified by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ValueType%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is a list type, the reader returns an array of boxed objects of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a validation error occurs while parsing the content and the reader is an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object created by the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method, the reader returns the content as a string.</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other words when a validation error or warning occurs, the content is considered to be untyped.</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed, the reader returns the content as a string.</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes how this method treats each node type.</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reader behavior</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as calling <ph id="ph1">`XmlConvert.ToXxx`</ph> on the attribute value.</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the element if the reader is a schema validating reader (<ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.ValidationType%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Xml.ValidationType.Schema&gt;</ph>); otherwise an empty string.</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undefined, although typically the reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsObjectAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source>The text content as the most appropriate common language runtime (CLR) object.</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>The attempted cast is not valid.</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>The string format is not valid.</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the text content at the current position as an <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsObject%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>The text content as the most appropriate common language runtime (CLR) object.</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>Reads the text content at the current position as a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions.</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically resolved.</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used convert typed values to a string, or to read the text content while skipping comments and processing instructions.</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes how this method treats each node type.</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reader behavior</source>
        </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenated content of text, CDATA, white space and significant white space nodes converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as calling <ph id="ph1">`XmlConvert.ToXxx`</ph> on the attribute value.</source>
        </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ignores the processing instruction (PI) or comment and reads the concatenated text content that follows the PI or comment.</source>
        </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moves to the next start element or end element tag.</source>
        </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT">
          <source>Entity references are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT">
          <source>An empty string.</source>
        </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undefined, although typically the reader remains in the current position.</source>
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsStringAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source>The text content as a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source>The attempted cast is not valid.</source>
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>The string format is not valid.</source>
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the text content at the current position as a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsString%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>The text content as a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source>Reads the element content as the requested type.</source>
        </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve">
          <source>The type of the value to be returned.</source>
        </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> With the release of the .NET Framework 3.5, the value of the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">returnType</ph><ept id="p2">&lt;/code&gt;</ept> parameter can now be the <ph id="ph2">&lt;xref href="System.DateTimeOffset"&gt;&lt;/xref&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.IXmlNamespaceResolver"&gt;&lt;/xref&gt;</ph> object that is used to resolve any namespace prefixes related to type conversion.</source>
        </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>The element content converted to the requested typed object.</source>
        </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source>Read <ph id="ph1">`Decimal.MaxValue`</ph>.</source>
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.</source>
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve">
          <source>The type of the value to be returned.</source>
        </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> With the release of the .NET Framework 3.5, the value of the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">returnType</ph><ept id="p2">&lt;/code&gt;</ept> parameter can now be the <ph id="ph2">&lt;xref href="System.DateTimeOffset"&gt;&lt;/xref&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.IXmlNamespaceResolver"&gt;&lt;/xref&gt;</ph> object that is used to resolve any namespace prefixes related to type conversion.</source>
        </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source>The element content converted to the requested typed object.</source>
        </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve">
          <source>The specified local name and namespace URI do not match that of the current element being read.</source>
        </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve">
          <source>Read <ph id="ph1">`Decimal.MaxValue`</ph>.</source>
        </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the element content as the requested type.</source>
        </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAs%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>The type of the value to be returned.</source>
        </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.IXmlNamespaceResolver"&gt;&lt;/xref&gt;</ph> object that is used to resolve any namespace prefixes related to type conversion.</source>
        </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>The element content converted to the requested typed object.</source>
        </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source>Reads the element and decodes the <ph id="ph1">`Base64`</ph> content.</source>
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the element content, decodes it using <ph id="ph1">`Base64`</ph> encoding, and returns the decoded binary bytes (for example, an inline <ph id="ph2">`Base64`</ph>-encoded GIF image) into the buffer.</source>
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</source>
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can obtain RFCs from the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=37119)</ept>.</source>
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A&gt;</ph> can only read simple-content elements.</source>
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</source>
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also contain entity references, which are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is very similar to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBase64%2A&gt;</ph> method except that it can only be called on element node types.</source>
        </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`count`</ph> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> reads all the remaining bytes in the document and returns the number of bytes read.</source>
        </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT">
          <source>The next <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> method call returns a zero and moves the reader to the node following the <ph id="ph2">`EndElement`</ph>.</source>
        </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph> method was called.</source>
        </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the reader will read all the text until the end element is encountered.</source>
        </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT">
          <source>It will then read the end tag node, read the next node, and then position itself on the next subsequent node.</source>
        </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBase64Async%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
        </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> implementation does not support this method.</source>
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source>The element contains mixed-content.</source>
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source>The content cannot be converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the element and decodes the <ph id="ph1">`Base64`</ph> content.</source>
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>Reads the element and decodes the <ph id="ph1">`BinHex`</ph> content.</source>
        </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the element content, decodes it using <ph id="ph1">`BinHex`</ph> encoding, and returns the decoded binary bytes (for example, an inline <ph id="ph2">`BinHex`</ph>-encoded GIF image) into the buffer.</source>
        </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can only read simple-content elements.</source>
        </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</source>
        </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also contain entity references, which are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is very similar to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadContentAsBinHex%2A&gt;</ph> method except that it can only be called on element node types.</source>
        </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`count`</ph> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> reads all the remaining bytes in the document and returns the number of bytes read.</source>
        </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT">
          <source>The next <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> method call returns a zero and moves the reader to the node following the <ph id="ph2">`EndElement`</ph>.</source>
        </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph> method was called.</source>
        </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the reader will read all the text until the end element is encountered.</source>
        </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT">
          <source>It will then read the end tag node, read the next node, and then position itself on the next subsequent node.</source>
        </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBinHexAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> implementation does not support this method.</source>
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>The element contains mixed-content.</source>
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>The content cannot be converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the element and decodes the <ph id="ph1">`BinHex`</ph> content.</source>
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:boolean`</ph>, the reader returns an unboxed <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:boolean`</ph>, the reader attempts to convert it to a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> object according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source>The element content as a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source>The specified local name and namespace URI do not match that of the current element being read.</source>
        </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>Reads the current element and returns the contents as a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the element content is typed <ph id="ph1">`xsd:boolean`</ph>, the reader returns an unboxed <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:boolean`</ph>, the reader attempts to convert it to a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> object according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>The element content as a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>Reads the current element and returns the contents as a <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:dateTime`</ph>, the reader returns an unboxed <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:dateTime`</ph>, the reader attempts to convert it to a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> object according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot rely on the <ph id="ph1">&lt;xref:System.DateTime.Year%2A?displayProperty=fullName&gt;</ph> value when the content is typed as <ph id="ph2">`xsd:gMonthDay`</ph>.</source>
        </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> always sets the <ph id="ph2">&lt;xref:System.DateTime.Year%2A?displayProperty=fullName&gt;</ph> value to 1904 in this case.</source>
        </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve">
          <source>The element content as a <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:dateTime`</ph>, the reader returns an unboxed <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:dateTime`</ph>, the reader attempts to convert it to a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> object according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot rely on the <ph id="ph1">&lt;xref:System.DateTime.Year%2A?displayProperty=fullName&gt;</ph> value when the content is typed as <ph id="ph2">`xsd:gMonthDay`</ph>.</source>
        </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> always sets the <ph id="ph2">&lt;xref:System.DateTime.Year%2A?displayProperty=fullName&gt;</ph> value to 1904 in this case.</source>
        </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve">
          <source>The element contents as a <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source>The specified local name and namespace URI do not match that of the current element being read.</source>
        </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>Reads the current element and returns the contents as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader attempts to convert the element content to an <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> object according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve">
          <source>The element content as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve">
          <source>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader attempts to convert the element content to an <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> object according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve">
          <source>The element content as a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve">
          <source>The specified local name and namespace URI do not match that of the current element being read.</source>
        </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source>Reads the current element and returns the contents as a double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:double`</ph>, the reader returns a double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:double`</ph>, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source>The element content as a double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve">
          <source>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:double`</ph>, the reader returns a double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:double`</ph>, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>The element content as a double-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source>The specified local name and namespace URI do not match that of the current element being read.</source>
        </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve">
          <source>Reads the current element and returns the contents as single-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader attempts to convert the element content to a single-precision floating point number according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve">
          <source>The element content as a single-precision floating point number.</source>
        </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a single-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve">
          <source>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader attempts to convert the element content to a single-precision floating point number according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve">
          <source>The element content as a single-precision floating point number.</source>
        </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a single-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>The specified local name and namespace URI do not match that of the current element being read.</source>
        </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve">
          <source>Reads the current element and returns the contents as a 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:integer`</ph>, the reader returns an unboxed 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:integer`</ph>, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source>The element content as a 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve">
          <source>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:integer`</ph>, the reader returns an unboxed 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:integer`</ph>, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve">
          <source>The element content as a 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve">
          <source>The specified local name and namespace URI do not match that of the current element being read.</source>
        </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve">
          <source>Reads the current element and returns the contents as a 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:long`</ph>, the reader returns an unboxed 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:long`</ph>, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve">
          <source>The element content as a 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve">
          <source>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is typed <ph id="ph1">`xsd:long`</ph>, the reader returns an unboxed 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the content is not typed <ph id="ph1">`xsd:long`</ph>, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page.</source>
        </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve">
          <source>The element content as a 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve">
          <source>The specified local name and namespace URI do not match that of the current element being read.</source>
        </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve">
          <source>Reads the current element and returns the contents as an <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsObjectAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve">
          <source>A boxed common language runtime (CLR) object of the most appropriate type.</source>
        </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader.ValueType"&gt;&lt;/xref&gt;</ph> property determines the appropriate CLR type.</source>
        </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve">
          <source>If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to the requested type</source>
        </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve">
          <source>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve">
          <source>A boxed common language runtime (CLR) object of the most appropriate type.</source>
        </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader.ValueType"&gt;&lt;/xref&gt;</ph> property determines the appropriate CLR type.</source>
        </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve">
          <source>If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve">
          <source>The specified local name and namespace URI do not match that of the current element being read.</source>
        </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the current element and returns the contents as an <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsObject%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve">
          <source>A boxed common language runtime (CLR) object of the most appropriate type.</source>
        </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader.ValueType"&gt;&lt;/xref&gt;</ph> property determines the appropriate CLR type.</source>
        </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve">
          <source>If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve">
          <source>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve">
          <source>The element content as a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve">
          <source>The specified local name and namespace URI do not match that of the current element being read.</source>
        </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve">
          <source>Reads the current element and returns the contents as a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the start tag, the contents of the element, and moves the reader past the end element tag.</source>
        </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT">
          <source>It expands entities and ignores processing instructions and comments.</source>
        </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can only contain simple content.</source>
        </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, it cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> reference page and the <bpt id="p1">[</bpt>W3C XML Schema Part 2: Datatypes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=4871)</ept> recommendation.</source>
        </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsStringAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve">
          <source>The element content as a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve">
          <source>The current element contains child elements.</source>
        </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve">
          <source>The element content cannot be converted to a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve">
          <source>The method is called with <ph id="ph1">`null`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the current element and returns the contents as a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsString%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve">
          <source>The element content as a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve">
          <source>Reads a text-only element.</source>
        </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve">
          <source>However, we recommend that you use the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.ReadElementContentAsString"&gt;&lt;/xref&gt;</ph> method instead, because it provides a more straightforward way to handle this operation.</source>
        </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsString&gt;</ph> method to read a text element.</source>
        </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve">
          <source>The text contained in the element that was read.</source>
        </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve">
          <source>An empty string if the element is empty.</source>
        </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve">
          <source>The next content node is not a start tag; or the element found does not contain a simple text value.</source>
        </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve">
          <source>Checks that the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.Name"&gt;&lt;/xref&gt;</ph> property of the element found matches the given string before reading a text-only element.</source>
        </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve">
          <source>However, we recommend that you use the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.ReadElementContentAsString"&gt;&lt;/xref&gt;</ph> method instead, because it provides a more straightforward way to handle this operation.</source>
        </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsString&gt;</ph> method to read a text element.</source>
        </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve">
          <source>The name to check.</source>
        </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve">
          <source>The text contained in the element that was read.</source>
        </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve">
          <source>An empty string if the element is empty.</source>
        </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve">
          <source>If the next content node is not a start tag; if the element <ph id="ph1">`Name`</ph> does not match the given argument; or if the element found does not contain a simple text value.</source>
        </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve">
          <source>Checks that the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.LocalName"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Xml.XmlReader.NamespaceURI"&gt;&lt;/xref&gt;</ph> properties of the element found matches the given strings before reading a text-only element.</source>
        </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve">
          <source>However, we recommend that you use the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)"&gt;&lt;/xref&gt;</ph> method instead, because it provides a more straightforward way to handle this operation.</source>
        </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsString%28System.String%2CSystem.String%29&gt;</ph> method to read a text element.</source>
        </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve">
          <source>The local name to check.</source>
        </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve">
          <source>The namespace URI to check.</source>
        </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve">
          <source>The text contained in the element that was read.</source>
        </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve">
          <source>An empty string if the element is empty.</source>
        </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve">
          <source>If the next content node is not a start tag; if the element <ph id="ph1">`LocalName`</ph> or <ph id="ph2">`NamespaceURI`</ph> do not match the given arguments; or if the element found does not contain a simple text value.</source>
        </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve">
          <source>Checks that the current content node is an end tag and advances the reader to the next node.</source>
        </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve">
          <source>The current node is not an end tag or if incorrect XML is encountered in the input stream.</source>
        </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reads all the content, including markup, as a string.</source>
        </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns all the content of the current node including the markup.</source>
        </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current node (start tag) and corresponding end node (end tag) are not returned.</source>
        </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you had the following:</source>
        </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ReadInnerXml`</ph> returns <ph id="ph2">`this &lt;child id="123"/&gt;`</ph></source>
        </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method handles element and attribute nodes in the following manner:</source>
        </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" extradata="MT">
          <source>Node type</source>
        </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT">
          <source>Position before the call</source>
        </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML fragment</source>
        </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" extradata="MT">
          <source>Position after the call</source>
        </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" extradata="MT">
          <source>On the <ph id="ph1">`item1`</ph> start tag.</source>
        </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph>item1&gt;text1<ph id="ph2">\&lt;</ph>/item1&gt;<ph id="ph3">\&lt;</ph>item2&gt;text2<ph id="ph4">\&lt;</ph>/item2&gt;</source>
        </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" extradata="MT">
          <source>text1</source>
        </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" extradata="MT">
          <source>On the <ph id="ph1">`item2`</ph> start tag.</source>
        </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" extradata="MT">
          <source>On the <ph id="ph1">`attr1`</ph> attribute node.</source>
        </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph>item attr1="val1" attr2="val2"&gt;text<ph id="ph2">\&lt;</ph>/item&gt;</source>
        </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT">
          <source>val1</source>
        </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remains on the <ph id="ph1">`attr1`</ph> attribute node.</source>
        </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on a leaf node, calling <ph id="ph1">`ReadInnerXml`</ph> is equivalent to calling <ph id="ph2">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method returns <ph id="ph1">`String.Empty`</ph> (except for attribute nodes, in which case the value of the attribute is returned).</source>
        </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method checks for well-formed XML.</source>
        </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`ReadInnerXml`</ph> is called from an <ph id="ph2">&lt;xref:System.Xml.XmlValidatingReader&gt;</ph>, this method also validates the content returned.</source>
        </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" extradata="MT">
          <source>As implemented in the <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> and <ph id="ph3">`XmlValidatingReader`</ph> classes the <ph id="ph4">`ReadOuterXml`</ph> method is namespace aware.</source>
        </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadInnerXmlAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve">
          <source>All the XML content, including markup, in the current node.</source>
        </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve">
          <source>If the current node has no children, an empty string is returned.</source>
        </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve">
          <source>If the current node is neither an element nor attribute, an empty string is returned.</source>
        </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve">
          <source>The XML was not well-formed, or an error occurred while parsing the XML.</source>
        </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve">
          <source>Asynchronously reads all the content, including markup, as a string.</source>
        </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadInnerXml%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve">
          <source>All the XML content, including markup, in the current node.</source>
        </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve">
          <source>If the current node has no children, an empty string is returned.</source>
        </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</source>
        </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is similar to <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadInnerXml%2A&gt;</ph> except it also returns the start and end tags.</source>
        </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method handles element and attribute nodes in the following manner:</source>
        </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT">
          <source>Node type</source>
        </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT">
          <source>Position before the call</source>
        </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML fragment</source>
        </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" extradata="MT">
          <source>Position After the Call</source>
        </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" extradata="MT">
          <source>On the <ph id="ph1">`item1`</ph> start tag.</source>
        </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph>item1&gt;text1<ph id="ph2">\&lt;</ph>/item1&gt;<ph id="ph3">\&lt;</ph>item2&gt;text2<ph id="ph4">\&lt;</ph>/item2&gt;</source>
        </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph>item1&gt;text1<ph id="ph2">\&lt;</ph>/item1&gt;</source>
        </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" extradata="MT">
          <source>On the <ph id="ph1">`item2`</ph> start tag.</source>
        </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT">
          <source>On the <ph id="ph1">`attr1`</ph> attribute node.</source>
        </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph>item attr1="val1" attr2="val2"&gt;text<ph id="ph2">\&lt;</ph>/item&gt;</source>
        </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT">
          <source>attr1="val1"</source>
        </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remains on the <ph id="ph1">`attr1`</ph> attribute node.</source>
        </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on a leaf node, calling <ph id="ph1">`ReadOuterXml`</ph> is equivalent to calling <ph id="ph2">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method returns <ph id="ph1">`String.Empty`</ph> (except for attribute nodes, in which case the attribute markup is returned).</source>
        </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method checks for well-formed XML.</source>
        </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`ReadOuterXml`</ph> is called from an <ph id="ph2">&lt;xref:System.Xml.XmlValidatingReader&gt;</ph>, this method also validates the content returned</source>
        </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" extradata="MT">
          <source>As implemented in the <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> and <ph id="ph3">`XmlValidatingReader`</ph> classes the <ph id="ph4">`ReadOuterXml`</ph> method is namespace aware.</source>
        </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT">
          <source>Given the following XML text <ph id="ph1">`&lt;A xmlns:S="urn:1"&gt;&lt;S:B&gt;hello&lt;/S:B&gt;&lt;/A&gt;`</ph>, if the reader were positioned on the <ph id="ph2">`S:B`</ph> start tag, <ph id="ph3">`ReadOuterXml`</ph> returns <ph id="ph4">`&lt;S:B xmlns:S="urn:1"&gt;hello&lt;S:B/&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadOuterXmlAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve">
          <source>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</source>
        </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve">
          <source>The XML was not well-formed, or an error occurred while parsing the XML.</source>
        </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the content, including markup, representing this node and all its children.</source>
        </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadOuterXml%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve">
          <source>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</source>
        </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve">
          <source>Checks that the current node is an element and advances the reader to the next node.</source>
        </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> followed by <ph id="ph2">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph> to position you on the content of that element found in the input stream.</source>
        </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve">
          <source>Incorrect XML was encountered in the input stream.</source>
        </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve">
          <source>Checks that the current content node is an element with the given <ph id="ph1">&lt;xref href="System.Xml.XmlReader.Name"&gt;&lt;/xref&gt;</ph> and advances the reader to the next node.</source>
        </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" extradata="MT">
          <source>A call to this method corresponds to a call to <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> followed by a call to <ph id="ph2">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve">
          <source>The qualified name of the element.</source>
        </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve">
          <source>Incorrect XML was encountered in the input stream.</source>
        </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader.Name"&gt;&lt;/xref&gt;</ph> of the element does not match the given <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">name</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve">
          <source>Checks that the current content node is an element with the given <ph id="ph1">&lt;xref href="System.Xml.XmlReader.LocalName"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Xml.XmlReader.NamespaceURI"&gt;&lt;/xref&gt;</ph> and advances the reader to the next node.</source>
        </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" extradata="MT">
          <source>A call to this method corresponds to a call to <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> followed by a call to <ph id="ph2">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve">
          <source>Incorrect XML was encountered in the input stream.</source>
        </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader.LocalName"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Xml.XmlReader.NamespaceURI"&gt;&lt;/xref&gt;</ph> properties of the element found do not match the given arguments.</source>
        </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the state of the reader.</source>
        </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadState%2A&gt;</ph>property has one of the following values:</source>
        </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.ReadState.Initial&gt;</ph>, when the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Read%2A?displayProperty=fullName&gt;</ph>method is called.</source>
        </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.ReadState.Interactive&gt;</ph>, when the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Read%2A?displayProperty=fullName&gt;</ph> method has been called, and additional methods may be called on the reader.</source>
        </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.ReadState.EndOfFile&gt;</ph>, when the end of the XML document has been reached successfully.</source>
        </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.ReadState.Closed&gt;</ph>, when the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Close%2A?displayProperty=fullName&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.ReadState.Error&gt;</ph>, when an error is preventing the read operation from continuing.</source>
        </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the state of the reader.</source>
        </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reads the contents of an element or text node as a string.</source>
        </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve">
          <source>However, we recommend that you use the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.ReadElementContentAsString*"&gt;&lt;/xref&gt;</ph> method instead, because it provides a more straightforward way to handle this operation.</source>
        </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsString%2A&gt;</ph> method to read the contents of an element or text node as a string.</source>
        </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve">
          <source>The contents of the element or an empty string.</source>
        </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve">
          <source>An error occurred while parsing the XML.</source>
        </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve">
          <source>Returns a new <ph id="ph1">`XmlReader`</ph> instance that can be used to read the current node, and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadSubtree%2A&gt;</ph> can be called only on element nodes.</source>
        </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the entire sub-tree has been read, calls to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph> method returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the new XML reader has been closed, the original readeris positioned on the <ph id="ph1">`EndElement`</ph> node of the sub-tree.</source>
        </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, if you called the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadSubtree%2A&gt;</ph> method on the start tag of the book element, after the sub-tree has been read and the new XML reader has been closed, the original XML reader is positioned on the end tag of the book element.</source>
        </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not perform any operations on the original reader until the new reader has been closed.</source>
        </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" extradata="MT">
          <source>This action is not supported and can result in unpredictable behavior.</source>
        </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadSubtree%2A&gt;</ph> method isn't intended for creatingcopies of the XML data that you can work with independently.</source>
        </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT">
          <source>It's designedto create a boundary around an XML element.</source>
        </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful if you want to pass data to another component for processing and you wish to limit how much of your data the component can access.</source>
        </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you pass an XML reader returned by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadSubtree%2A&gt;</ph> method to another application, the application can access only that XML element, not the entire XML document.</source>
        </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve">
          <source>A new XML reader instance set to <ph id="ph1">&lt;xref href="System.Xml.ReadState.Initial"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve">
          <source>Calling the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.Read"&gt;&lt;/xref&gt;</ph> method positions the new reader on the node that was current before the call to the <ph id="ph2">&lt;xref href="System.Xml.XmlReader.ReadSubtree"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve">
          <source>Advances the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> to the next descendant element with the specified local name and namespace URI.</source>
        </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve">
          <source>The local name of the element you wish to move to.</source>
        </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element you wish to move to.</source>
        </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a matching descendant element is found; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve">
          <source>If a matching child element is not found, the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> is positioned on the end tag (<ph id="ph2">&lt;xref href="System.Xml.XmlReader.NodeType"&gt;&lt;/xref&gt;</ph> is <ph id="ph3">`XmlNodeType.EndElement`</ph>) of the element.</source>
        </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> is not positioned on an element when <ph id="ph2">&lt;xref href="System.Xml.XmlReader.ReadToDescendant(System.String,System.String)"&gt;&lt;/xref&gt;</ph> was called, this method returns <ph id="ph3">`false`</ph> and the position of the <ph id="ph4">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> is not changed.</source>
        </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve">
          <source>Both parameter values are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve">
          <source>Advances the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> to the next descendant element with the specified qualified name.</source>
        </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve">
          <source>The qualified name of the element you wish to move to.</source>
        </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a matching descendant element is found; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve">
          <source>If a matching child element is not found, the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> is positioned on the end tag (<ph id="ph2">&lt;xref href="System.Xml.XmlReader.NodeType"&gt;&lt;/xref&gt;</ph> is <ph id="ph3">`XmlNodeType.EndElement`</ph>) of the element.</source>
        </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> is not positioned on an element when <ph id="ph2">&lt;xref href="System.Xml.XmlReader.ReadToDescendant(System.String)"&gt;&lt;/xref&gt;</ph> was called, this method returns <ph id="ph3">`false`</ph> and the position of the <ph id="ph4">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> is not changed.</source>
        </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve">
          <source>The parameter is an empty string.</source>
        </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve">
          <source>Reads until an element with the specified qualified name is found.</source>
        </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is functionally equivalent executing the <ph id="ph1">`following::name`</ph> XPath expression from the current node.</source>
        </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" extradata="MT">
          <source>It provides a quick way to find a named element in the XML document.</source>
        </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT">
          <source>It advances the reader to the next following element that matches the specified name and returns <ph id="ph1">`true`</ph> if a matching element is found.</source>
        </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the example below, the reader would read to the first instance of the specified element while reading forward.</source>
        </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called on all node types.</source>
        </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve">
          <source>The qualified name of the element.</source>
        </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a matching element is found; otherwise <ph id="ph2">`false`</ph> and the <ph id="ph3">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> is in an end of file state.</source>
        </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve">
          <source>The parameter is an empty string.</source>
        </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve">
          <source>Reads until an element with the specified local name and namespace URI is found.</source>
        </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is functionally equivalent executing the <ph id="ph1">`following::name`</ph> XPath expression from the current node.</source>
        </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" extradata="MT">
          <source>It provides a quick way to find a named element in the XML document.</source>
        </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" extradata="MT">
          <source>It advances the reader to the next following element that matches the specified name and returns <ph id="ph1">`true`</ph> if a matching element is found.</source>
        </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called on all node types.</source>
        </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a matching element is found; otherwise <ph id="ph2">`false`</ph> and the <ph id="ph3">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> is in an end of file state.</source>
        </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve">
          <source>Both parameter values are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve">
          <source>Advances the <ph id="ph1">`XmlReader`</ph> to the next sibling element with the specified qualified name.</source>
        </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadToNextSibling%2A&gt;</ph> when the <ph id="ph2">`XmlReader`</ph> is an initial state (<ph id="ph3">&lt;xref:System.Xml.XmlReader.ReadState%2A&gt;</ph> is <ph id="ph4">&lt;xref:System.Xml.ReadState.Initial&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call <ph id="ph1">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph> to advance the <ph id="ph2">`XmlReader`</ph> and then call the <ph id="ph3">&lt;xref:System.Xml.XmlReader.ReadToNextSibling%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve">
          <source>The qualified name of the sibling element you wish to move to.</source>
        </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a matching sibling element is found; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve">
          <source>If a matching sibling element is not found, the <ph id="ph1">`XmlReader`</ph> is positioned on the end tag (<ph id="ph2">&lt;xref href="System.Xml.XmlReader.NodeType"&gt;&lt;/xref&gt;</ph> is <ph id="ph3">`XmlNodeType.EndElement`</ph>) of the parent element.</source>
        </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve">
          <source>The parameter is an empty string.</source>
        </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve">
          <source>Advances the <ph id="ph1">`XmlReader`</ph> to the next sibling element with the specified local name and namespace URI.</source>
        </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadToNextSibling%2A&gt;</ph> when the <ph id="ph2">`XmlReader`</ph> is an initial state (<ph id="ph3">&lt;xref:System.Xml.XmlReader.ReadState%2A&gt;</ph> is <ph id="ph4">&lt;xref:System.Xml.ReadState.Initial&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call <ph id="ph1">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph> to advance the <ph id="ph2">`XmlReader`</ph> and then call the <ph id="ph3">&lt;xref:System.Xml.XmlReader.ReadToNextSibling%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve">
          <source>The local name of the sibling element you wish to move to.</source>
        </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve">
          <source>The namespace URI of the sibling element you wish to move to.</source>
        </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a matching sibling element is found; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve">
          <source>If a matching sibling element is not found, the <ph id="ph1">`XmlReader`</ph> is positioned on the end tag (<ph id="ph2">&lt;xref href="System.Xml.XmlReader.NodeType"&gt;&lt;/xref&gt;</ph> is <ph id="ph3">`XmlNodeType.EndElement`</ph>) of the parent element.</source>
        </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve">
          <source>Both parameter values are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve">
          <source>Reads large streams of text embedded in an XML document.</source>
        </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables reading of very large streams of text embedded in an XML document in a streaming fashion, that is, a small number of characters at a time instead of allocating a single string for the whole value.</source>
        </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called on any node that has a value (<ph id="ph1">&lt;xref:System.Xml.XmlReader.HasValue%2A&gt;</ph> is <ph id="ph2">`true`</ph>), however actual streaming of the node value only occurs when called on a text, white space and significant white space nodes.</source>
        </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other node type values are cached, including attributes and CDATA nodes.</source>
        </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns only the content of the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Value%2A&gt;</ph> property and does not move the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the specified number of characters (<ph id="ph1">`count`</ph>) of the node value into a character buffer (<ph id="ph2">`buffer`</ph>) at a specified offset (<ph id="ph3">`index`</ph>) and returns the number of characters written to the buffer.</source>
        </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" extradata="MT">
          <source>It returns the <ph id="ph1">`0`</ph> when it has reached the end of the value.</source>
        </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT">
          <source>It cannot be restarted to read through the value again.</source>
        </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT">
          <source>In between calls to <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> properties do no change except for the <ph id="ph3">&lt;xref:System.Xml.XmlReader.Value%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Value%2A&gt;</ph> property is accessed it may either return a partial value (with characters not yet returned by <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph>) or a full value depending on the implementation.</source>
        </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT">
          <source>All the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> implementations in the <ph id="ph2">&lt;xref:System.Xml&gt;</ph> namespace return a partial value for the <ph id="ph3">&lt;xref:System.Xml.XmlReader.Value%2A&gt;</ph> property implementation.</source>
        </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any Read method can be called in between calls to <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this occurs, the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> moves to the next <ph id="ph2">&lt;xref:System.Xml.XmlNodeType&gt;</ph> in the stream and any characters not yet returned are skipped.</source>
        </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT">
          <source>There may be a case when <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> returns less than the requested number of characters.</source>
        </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you had a 200-character long value with a surrogate pair at positions 127 and 128 and you called <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> with a 128-character buffer, the method call would return 127 characters instead of the requested 128.</source>
        </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT">
          <source>The surrogate pair would then be returned in the next <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> did not return the requested 128 characters because doing so would have resulted in an incomplete surrogate pair at the end of the buffer.</source>
        </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunkAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve">
          <source>The array of characters that serves as the buffer to which the text contents are written.</source>
        </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve">
          <source>The offset within the buffer where the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> can start to copy the results.</source>
        </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve">
          <source>The maximum number of characters to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve">
          <source>The actual number of characters copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve">
          <source>The number of characters read into the buffer.</source>
        </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve">
          <source>The value zero is returned when there is no more text content.</source>
        </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve">
          <source>The index into the buffer, or index + count is larger than the allocated buffer size.</source>
        </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> implementation does not support this method.</source>
        </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve">
          <source>The XML data is not well-formed.</source>
        </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve">
          <source>Asynchronously reads large streams of text embedded in an XML document.</source>
        </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve">
          <source>The array of characters that serves as the buffer to which the text contents are written.</source>
        </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve">
          <source>The offset within the buffer where the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> can start to copy the results.</source>
        </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve">
          <source>The maximum number of characters to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve">
          <source>The actual number of characters copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve">
          <source>The number of characters read into the buffer.</source>
        </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve">
          <source>The value zero is returned when there is no more text content.</source>
        </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, resolves the entity reference for <ph id="ph1">`EntityReference`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on an <ph id="ph1">`EntityReference`</ph> node (<ph id="ph2">`XmlNodeType.EntityReference`</ph>), if <ph id="ph3">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph> is called after calling this method, the entity replacement text is parsed.</source>
        </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the entity replacement text is finished, an <ph id="ph1">`EndEntity`</ph> node is returned to close the entity reference scope.</source>
        </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling this method, if the entity is part of an attribute value, you must call <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadAttributeValue%2A&gt;</ph> to step into the entity.</source>
        </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve">
          <source>Gets the schema information that has been assigned to the current node as a result of schema validation.</source>
        </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.IXmlSchemaInfo&gt;</ph> interface exposes a subset of the Post Schema Validation Infoset (PSVI) associated with an XML node.</source>
        </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Schema.IXmlSchemaInfo"&gt;&lt;/xref&gt;</ph> object containing the schema information for the current node.</source>
        </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve">
          <source>Schema information can be set on elements, attributes, or on text nodes with a non-null <ph id="ph1">&lt;xref href="System.Xml.XmlReader.ValueType"&gt;&lt;/xref&gt;</ph> (typed values).</source>
        </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve">
          <source>If the current node is not one of the above node types, or if the <ph id="ph1">`XmlReader`</ph> instance does not report schema information, this property returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve">
          <source>If this property is called from an <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> or an <ph id="ph2">&lt;xref href="System.Xml.XmlValidatingReader"&gt;&lt;/xref&gt;</ph> object, this property always returns <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve">
          <source>These <ph id="ph1">`XmlReader`</ph> implementations do not expose schema information through the <ph id="ph2">`SchemaInfo`</ph> property.</source>
        </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve">
          <source>If you have to get the post-schema-validation information set (PSVI) for an element, position the reader on the end tag of the element, rather than on the start tag.</source>
        </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve">
          <source>You get the PSVI through the <ph id="ph1">`SchemaInfo`</ph> property of a reader.</source>
        </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve">
          <source>The validating reader that is created through <ph id="ph1">&lt;xref href="System.Xml.XmlReader.Create*"&gt;&lt;/xref&gt;</ph> with the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.ValidationType"&gt;&lt;/xref&gt;</ph> property set to <ph id="ph3">&lt;xref href="System.Xml.ValidationType.Schema"&gt;&lt;/xref&gt;</ph> has complete PSVI for an element only when the reader is positioned on the end tag of an element.</source>
        </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Xml.XmlReaderSettings"&gt;&lt;/xref&gt;</ph> object used to create this <ph id="ph2">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object can contain sensitive information such as user credentials.</source>
        </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications must be careful when caching this object or passing it to another component.</source>
        </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> class is used to specify the set of features to support on the created reader instance.</source>
        </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> object returned by this property cannot be modified.</source>
        </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any attempt to change individual settings results in an exception being thrown.</source>
        </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReaderSettings"&gt;&lt;/xref&gt;</ph> object used to create this reader instance.</source>
        </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve">
          <source>If this reader was not created using the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.Create*"&gt;&lt;/xref&gt;</ph> method, this property returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve">
          <source>Skips the children of the current node.</source>
        </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following XML input if the reader is positioned on the <ph id="ph1">`&lt;a&gt;`</ph> node or any of its attributes, calling <ph id="ph2">`Skip`</ph> positions the reader to the <ph id="ph3">`&lt;b&gt;`</ph> node.</source>
        </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on a leaf node already (such as the <ph id="ph1">`&lt;x&gt;`</ph> node or the text node <ph id="ph2">`abc`</ph>), calling <ph id="ph3">`Skip`</ph> is the same as calling <ph id="ph4">&lt;xref:System.Xml.XmlReader.Read%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method checks for well-formed XML.</source>
        </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is an <ph id="ph1">&lt;xref:System.Xml.XmlValidatingReader&gt;</ph>, this method also validates the skipped content.</source>
        </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`XmlReader`</ph> implementation determines whether or not the <ph id="ph2">`Skip`</ph> method will expand external entities.</source>
        </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes whether the external entities are expanded for the various types of <ph id="ph1">`XmlReader`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT">
          <source>Type of XmlReader</source>
        </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" extradata="MT">
          <source>Expands external entities</source>
        </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" extradata="MT">
          <source>No.</source>
        </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instance created by the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method that is reading text data.</source>
        </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT">
          <source>No.</source>
        </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instance created by the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method that is reading binary data.</source>
        </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" extradata="MT">
          <source>A schema validating <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instance created by the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" extradata="MT">
          <source>Yes.</source>
        </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT">
          <source>Yes.</source>
        </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instance returned by a <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT">
          <source>No.</source>
        </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instance wrapped around another <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depends on the implementation of the underlying <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT">
          <source>(The <ph id="ph1">`Skip`</ph> method on the underlying <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> is called).</source>
        </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlReader.SkipAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve">
          <source>Asynchronously skips the children of the current node.</source>
        </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlReader.Skip%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve">
          <source>The current node.</source>
        </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlReaderSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlReaderSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the text value of the current node.</source>
        </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this property, see the <ph id="ph1">&lt;xref:System.Xml.XmlReader.GetValueAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve">
          <source>The value returned depends on the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.NodeType"&gt;&lt;/xref&gt;</ph> of the node.</source>
        </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve">
          <source>The following table lists node types that have a value to return.</source>
        </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve">
          <source>All other node types return <ph id="ph1">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve">
          <source>Node type</source>
        </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve">
          <source>The value of the attribute.</source>
        </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve">
          <source>The content of the CDATA section.</source>
        </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve">
          <source>The content of the comment.</source>
        </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve">
          <source>The internal subset.</source>
        </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve">
          <source>The entire content, excluding the target.</source>
        </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve">
          <source>The white space between markup in a mixed content model.</source>
        </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve">
          <source>The content of the text node.</source>
        </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve">
          <source>The white space between markup.</source>
        </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve">
          <source>The content of the declaration.</source>
        </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve">
          <source>Gets The Common Language Runtime (CLR) type for the current node.</source>
        </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Type Support in the System.Xml Classes<ept id="p1">](~/docs/standard/data/xml/type-support-in-the-system-xml-classes.md)</ept> for a list of the default mappings.</source>
        </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" extradata="MT">
          <source>An element of type <ph id="ph1">`xs:int`</ph> has a <ph id="ph2">`ValueType`</ph> of <ph id="ph3">`System.Int32`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">`ValueType`</ph> could be one of the valid types that can be mapped to <ph id="ph2">`xs:int`</ph>, such as <ph id="ph3">`System.Int16`</ph> or <ph id="ph4">`System.Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a node is un-typed, or if the node is an element that contains mixed content, the node value is mapped to the <ph id="ph1">`System.String`</ph> type.</source>
        </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve">
          <source>The CLR type that corresponds to the typed value of the node.</source>
        </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`System.String`</ph>.</source>
        </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the current <ph id="ph1">`xml:lang`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property represents the <ph id="ph1">`xml:lang`</ph> scope within which the current node resides.</source>
        </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, here is an XML fragment with <ph id="ph1">`xml:lang`</ph> set to US English in the root element:</source>
        </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the reader is positioned on the <ph id="ph1">`name`</ph> element, you can use this property to find that it is in the scope of a US English <ph id="ph2">`xml:lang`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">`xml:lang`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the current <ph id="ph1">`xml:space`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Xml.XmlSpace"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`xml:space`</ph> scope exists, this property defaults to <ph id="ph2">`XmlSpace.None`</ph>.</source>
        </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>