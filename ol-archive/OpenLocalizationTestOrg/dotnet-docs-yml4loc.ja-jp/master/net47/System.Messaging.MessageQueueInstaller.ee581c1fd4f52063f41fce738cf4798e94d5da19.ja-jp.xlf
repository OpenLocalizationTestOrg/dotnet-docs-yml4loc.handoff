<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8a768df53b1a9ec1eb3e2717957431b8988c574</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Messaging.MessageQueueInstaller.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5acce3c1e5041469f389101d1872fc28e21b544</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62f1b7653e75aa447e7ad3a3ca08c4759b14382d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Allows you to install and configure a queue that your application needs in order to run.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class is called by the installation utility, for example, InstallUtil.exe, when installing a <ph id="ph1">&lt;xref href="System.Messaging.MessageQueue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> is used by the installation utility to write registry values that are associated with the queue.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about installation utilities, see <bpt id="p1">[</bpt>Installutil.exe (Installer Tool)<ept id="p1">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>To install a queue, create a project installer class that inherits from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph>, and set the <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> for the class to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within your project, create a <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> instance for each queue in the installation and add the instance to your project installer class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>When creating a <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> instance, you can optionally pass an existing <ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph> (for example, from a test server) to the <ph id="ph3">&lt;xref:System.Messaging.MessageQueueInstaller.%23ctor%2A&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This approach automatically provides the configuration settings for the new queue by mirroring the settings of the queue passed in.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can manually set the properties in the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> instance to the states you want and call the default constructor.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the install utility is called, it looks for the <ph id="ph1">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it is <ph id="ph1">`true`</ph>, the utility installs all the queues in the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection associated with your project installer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> is <ph id="ph2">`false`</ph>, the utility ignores the project installer.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>You modify other properties of a <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> instance either before or after adding the instance to the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection of your project installer.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a queue's <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> must be set before the install utility executes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> from within your code; they are generally called only by the installutil.exe installation utility.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The utility automatically calls the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Install%2A&gt;</ph> method during the installation process and calls <ph id="ph2">&lt;xref:System.Messaging.MessageQueueInstaller.Commit%2A&gt;</ph> if the installation did not throw an exception.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>It backs out failures, if necessary, by calling <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Rollback%2A&gt;</ph> for the object that generated the exception.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's install routine uses the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph> to automatically maintain information about the components that have already been installed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information is continuously updated as each <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> instance is installed by the utility.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is not usually necessary for your code to explicitly modify the state information.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Messaging.MessageQueueInstaller"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Does not set any instance properties.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Messaging.MessageQueueInstaller"&gt;&lt;/xref&gt;</ph> class, initializing the installation settings to those of an existing <ph id="ph2">&lt;xref href="System.Messaging.MessageQueue"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Messaging.MessageQueue"&gt;&lt;/xref&gt;</ph> component whose settings determine the property settings of the new queue installed.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the queue to be installed accepts only authenticated messages.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a non-authenticated message is sent to a queue that accepts only authenticated messages, the message is rejected.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The sending application can request notification of a message rejection by setting the <ph id="ph1">&lt;xref:System.Messaging.Message.AcknowledgeType%2A&gt;</ph> for the message.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, there is no indication that the message was rejected, so the message can be lost unless you send it to the dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the queue accepts only authenticated messages; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets or sets the base priority that is used to route a public queue's messages over the network.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.BasePriority%2A&gt;</ph> is used for routing the queue's messages over the network.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.BasePriority%2A&gt;</ph> to give the messages sent to the queue a higher or lower priority than that for messages sent to other queues.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a queue's base priority is set, all the messages sent to it are given a higher priority than that of the messages sent to queues with a lower base priority.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The queue's base priority has no effect on the order of the messages in the queue or on how messages are read from the queue.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.BasePriority%2A&gt;</ph> applies only to public queues that are accessed through the domain controller (in other words, using the public format name).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base priority of private queues and of directly accessed public queues is always zero.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The single base priority for all messages sent to the public queue.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default is zero (0).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets or sets an implementation-specific queue type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The queue category enables an application to categorize associated queues according to the way they are used.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph> can be a null reference.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also define a new category.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph> property provides access to the Message Queuing type identifier property, which is associated with a particular queue and is read/write.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Guid.NewGuid%2A&gt;</ph> method to create a category value that is guaranteed to be unique across all <ph id="ph2">&lt;xref:System.Guid&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it is necessary only for the category value to be distinct from other categories, not from all other <ph id="ph1">&lt;xref:System.Guid&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can set the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph> for one group of queues to {00000000-0000-0000-0000-000000000001} and the <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph> for another group to {00000000-0000-0000-0000-000000000002}.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Guid"&gt;&lt;/xref&gt;</ph> that represents the queue category (or Message Queuing type identifier), which allows applications to categorize their queues according to how they are used.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`Guid.empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Completes the installation process by committing the <ph id="ph1">&lt;xref href="System.Messaging.MessageQueue"&gt;&lt;/xref&gt;</ph> installation information that the <ph id="ph2">&lt;xref href="System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)"&gt;&lt;/xref&gt;</ph> method wrote to the registry.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This method is meant to be used by installation tools, which automatically call the appropriate methods.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> from within your code; they are generally called only by the installutil.exe installation utility.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The utility automatically calls the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Install%2A&gt;</ph> method during the installation process.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Installation is transactional, so if there is a failure of any installation project component during the installation, all the previously installed components are rolled back to their pre-installation states.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by calling each component's <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Rollback%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a successful installation of all the components that are associated with the installation project has occurred, the installation utility commits the installations.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Commit%2A&gt;</ph> completes the installation of the <ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph> by setting the queue to the appropriate initial state.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the queue specified by the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Path%2A&gt;</ph> property already exists and contains messages, <ph id="ph2">&lt;xref:System.Messaging.MessageQueueInstaller.Commit%2A&gt;</ph> clears the messages.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Commit%2A&gt;</ph>, rather than <ph id="ph2">&lt;xref:System.Messaging.MessageQueueInstaller.Install%2A&gt;</ph>, clears the messages because the act of purging the messages cannot be rolled back.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's install routine uses the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph> to automatically maintain information about the components that have already been installed.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information, which is passed to <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Commit%2A&gt;</ph> as the <ph id="ph2">`savedState`</ph> parameter, is continuously updated as the utility commits each <ph id="ph3">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, it is not necessary for your code to explicitly modify this state information.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the queue has been cleared, <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Commit%2A&gt;</ph> posts a log entry to the <ph id="ph2">`savedState`</ph> that is associated with the installation.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> that contains the post-installation state of the computer.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Copies the property values of a <ph id="ph1">&lt;xref href="System.Messaging.MessageQueue"&gt;&lt;/xref&gt;</ph> component that are required at install time for a message queue.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> from within your code; they are generally called only by the installutil.exe installation utility.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.CopyFromComponent%2A&gt;</ph> is used by the installation utility to set the property values for the <ph id="ph2">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> to the values of an existing <ph id="ph3">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph> that is passed in is an empty string (""), you must set the <ph id="ph3">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property to a non-empty value before the installer executes.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.IComponent"&gt;&lt;/xref&gt;</ph> to use as a template for the <ph id="ph2">&lt;xref href="System.Messaging.MessageQueueInstaller"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The component associated with this <ph id="ph1">&lt;xref href="System.Messaging.MessageQueueInstaller"&gt;&lt;/xref&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.Messaging.MessageQueue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the queue accepts only private, or encrypted, messages.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>When encryption is specified, only the <ph id="ph1">&lt;xref:System.Messaging.Message.Body%2A&gt;</ph> of a message is encrypted.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other properties, such as the <ph id="ph1">&lt;xref:System.Messaging.Message.Label%2A&gt;</ph>, are not encrypted.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Messaging.EncryptionRequired"&gt;&lt;/xref&gt;</ph> values that indicates the encryption level required on messages sent to the queue.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`Optional`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Performs the installation and writes message queue information to the registry.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This method is meant to be used by installation tools, which automatically call the appropriate methods.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Install%2A&gt;</ph> method writes message queue information to the registry, and associates the <ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instance with a queue that is located at the path specified by the <ph id="ph3">&lt;xref:System.Messaging.MessageQueueInstaller.Path%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the queue does not already exist, <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Install%2A&gt;</ph> creates a transactional queue.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Install%2A&gt;</ph> sets the new or existing queue properties to those that you have specified in the <ph id="ph2">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the queue already exists, its properties are reset to those of the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the existing queue is not transactional, it is deleted and then recreated as a transactional queue.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it is necessary to recreate the queue, messages in the queue will be lost.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> from within your code; they are generally called only by the installutil.exe installation utility.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The utility automatically calls the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Install%2A&gt;</ph> method during the installation process to write registry information that is associated with the message queue being installed.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Installation is transactional, so if there is a failure of any installation project component during the installation, all the previously installed components are rolled back to their pre-installation states.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by calling each component's <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Rollback%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a successful installation of all the components that are associated with the installation project has occurred, the installation utility commits the installations.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Commit%2A&gt;</ph> completes the installation of the <ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph> by setting the queue to the appropriate initial state.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the queue specified by the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Path%2A&gt;</ph> property already exists and contains messages, <ph id="ph2">&lt;xref:System.Messaging.MessageQueueInstaller.Commit%2A&gt;</ph> clears the messages.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Commit%2A&gt;</ph>, rather than <ph id="ph2">&lt;xref:System.Messaging.MessageQueueInstaller.Install%2A&gt;</ph>, clears the messages because the act of purging the messages cannot be rolled back.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's install routine uses the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph> to automatically maintain information about the components that have already been installed.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information, which is passed to <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Install%2A&gt;</ph> as the <ph id="ph2">`stateSaver`</ph> parameter, is continuously updated as the utility installs each <ph id="ph3">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, it is not necessary for your code to explicitly modify this state information.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> used to save information needed to perform a commit, rollback, or uninstall operation.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Determines whether the specified installer can handle the same kind of installation as this installer.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, <ph id="ph1">&lt;xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A&gt;</ph> returns <ph id="ph2">`true`</ph> only if this installer and the installer specified by the <ph id="ph3">`otherInstaller`</ph> parameter are of the same type.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The installer to compare.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this installer and the installer specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">otherInstaller</ph><ept id="p1">&lt;/code&gt;</ept> parameter can handle the same kind of installation; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Gets or sets a description of the queue.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph> property does not need to be unique across queues.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The label that describes the message queue.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Messaging.MessageQueueInstaller.Label"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum size of the journal that is associated with the queue.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a queue is created, Message Queuing automatically creates a queue journal in the same location as the new queue.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The queue journal is used to track the messages that are removed from the queue.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two types of messages remain untracked: those that are removed from the queue because their time-to-be-received timer expired, and those that are purged from the queue.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications cannot send messages to the journal queue.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you must periodically clear the queue to remove the messages that are no longer needed.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Messages stored in journal queues count toward the quota for the computer where the queues reside.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>(The computer quota is set by the administrator.)</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The maximum size, in kilobytes, of the journal queue, which records messages that are removed from the queue.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The Message Queuing default is no limit.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum size of the queue.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The maximum queue size is typically set at the time of queue creation, although it can be reset later.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The maximum size, in kilobytes, of the queue.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The Message Queuing default is no limit.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Introduced in MSMQ 3.0.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Gets or sets the multicast address associated with the queue.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that contains a valid multicast address (in the form shown below) or <ph id="ph2">`null`</ph>, which indicates that the queue is not associated with a multicast address.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>MSMQ 3.0 is not installed.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Gets or sets the location of the queue that is referenced by this object.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The syntax for the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property depends on the type of queue it references.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the syntax you should use for queues of various types.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Queue type</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Public queue</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Private queue</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Journal queue</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Machine journal queue</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Machine dead-letter queue</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Machine transactional dead-letter queue</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use "." for the local computer.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.FormatName%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph> of a Message Queuing application object to describe the queue path.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the proper syntax for each type of reference.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Format name</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>FormatName:[ <bpt id="p1">*</bpt>format name<ept id="p1">*</ept> ]</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>Label</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Label:[ <bpt id="p1">*</bpt>label<ept id="p1">*</ept> ]</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are working offline, you must use the format name to define the queue <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not, the application will throw an exception, because the primary domain controller is unavailable to resolve the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> into the <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.FormatName%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The path that represents the location of the queue in the network.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Messaging.MessageQueueInstaller.Path"&gt;&lt;/xref&gt;</ph> was set to an invalid value, possibly because the syntax is not valid.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Messaging.MessageQueueInstaller.Path"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Gets or sets permissions associated with the queue.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Message Queuing accesses each permission list entry in turn until it finds one that applies to the current user and the current attempted action.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>As with the operating system permissions, the rights that you specifically deny to a user take precedence over those you allow.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you construct the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Permissions%2A&gt;</ph> property, add <ph id="ph2">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> instances to your <ph id="ph3">&lt;xref:System.Messaging.AccessControlList&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you construct each access control entry, you can specify generic or standard access rights.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rights to a queue can be any combination of the following:</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delete</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read Security</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Write Security</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Synchronize</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modify Owner</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Write</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Execute</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Required</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>All</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>These rights are a set of bit flags that you can combine using the bitwise OR:</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>Full Control</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delete Message</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Receive Message</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Peek Message</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Receive Journal Message</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get Queue Properties</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set Queue Properties</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get Permissions</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set Permissions</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Take Queue Ownership</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Write Message</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Messaging.AccessControlList"&gt;&lt;/xref&gt;</ph> that contains one or more access control entries that specify the trustees and permissions to grant for the queue.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Restores the computer to the state it was in before the installation, by rolling back the queue information that the installation procedure wrote to the registry.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>This method is meant to be used by installation tools, which automatically call the appropriate methods.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Rollback%2A&gt;</ph> method undoes the effects of the <ph id="ph2">&lt;xref:System.Messaging.MessageQueueInstaller.Install%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Rollback%2A&gt;</ph> is called if the installation of any component in the installation project fails.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Install%2A&gt;</ph> method creates or sets the properties for a queue.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Rollback%2A&gt;</ph> either deletes the queue or resets the properties of a pre-existing queue to their pre-installation values.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> from within your code; they are generally called only by the InstallUtil.exe installation utility.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>The utility automatically calls the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Rollback%2A&gt;</ph> method after an installation failure to undo any changes that the installation process has already made.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's install routine uses the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph> to automatically maintain information about the components that have already been installed.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information, which is passed to <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Rollback%2A&gt;</ph> as the <ph id="ph2">`savedState`</ph> parameter, is continuously updated as the utility rolls back each <ph id="ph3">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, it is not necessary for your code to explicitly modify this state information.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> that contains the pre-installation state of the computer.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the queue accepts only messages sent as part of a transaction.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>Messages can be retrieved from a local transaction queue with or without using a transaction.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not specify a transaction context, Message Queuing creates a single internal transaction for you.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the queue can only accept messages sent as part of a transaction; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Removes an installation by removing queue information from the registry.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>This method is meant to be used by uninstallation tools, which automatically call the appropriate methods.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.UninstallAction%2A&gt;</ph> is <ph id="ph2">`Remove`</ph>, <ph id="ph3">&lt;xref:System.Messaging.MessageQueueInstaller.Uninstall%2A&gt;</ph> also deletes the queue associated with the <ph id="ph4">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> from within your code; they are generally called only by the InstallUtil.exe installation utility (in uninstall mode).</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The utility automatically calls the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Uninstall%2A&gt;</ph> method to restore the parts of the system that were affected by the installation to their pre-installation states.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes deleting registry information that is associated with the MessageQueue being uninstalled.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's uninstall routine uses the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph> to automatically maintain information about the components that have already been uninstalled.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information, which is passed to <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller.Uninstall%2A&gt;</ph> as the <ph id="ph2">`savedState`</ph> parameter, is continuously updated as the utility uninstalls each <ph id="ph3">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, it is not necessary for your code to explicitly modify this state information.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> that contains the post-installation state of the computer.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates what the installer does with the queue at uninstall time: remove it, restore it to its pre-installation state, or leave it in its current installed state.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you install a queue, you can optionally use an existing queue.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do so, you must decide whether the queue should return to its pre-installation state, or remain in its current, post-installation state.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you elect to return the queue to its pre-installation state, messages that were deleted from the queue at install time are not restored.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can reset only queue properties that are associated with the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueInstaller&gt;</ph> to their pre-installation values.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Configuration.Install.UninstallAction"&gt;&lt;/xref&gt;</ph> values that indicates what state to leave the queue in when the <ph id="ph2">&lt;xref href="System.Messaging.MessageQueue"&gt;&lt;/xref&gt;</ph> is uninstalled.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`Remove`</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether messages that are retrieved from the queue are also copied to the associated journal queue.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>A journal queue lets you keep track of messages even after they have been retrieved from the queue.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, two types of messages remain untracked: those that are removed from the queue when their time-to-be-received timer expires, and those that are purged from the queue.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>A journal queue should be cleared periodically to remove messages that are no longer needed.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>Messages stored in the journal queue count toward the quota for the computer on which the journal is located.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to copy messages that are retrieved from the queue to the journal queue; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>