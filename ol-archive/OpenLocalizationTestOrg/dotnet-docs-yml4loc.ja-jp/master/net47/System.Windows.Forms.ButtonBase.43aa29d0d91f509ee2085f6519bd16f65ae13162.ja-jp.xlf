<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9fa803f2a6cbb16bfb6a76f390c37d3002886b6c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Forms.ButtonBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5bf7a066dea619c9d026056eb48309ea921ea13</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16bcfa9679c6ad59ffdcee7c435caa3d490d7a5c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implements the basic functionality common to button controls.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do not typically inherit from <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create your own button class, inherit from the <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>To have the derived button control display an image, set the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.Image%2A&gt;</ph> property or the <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.ImageList%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The image can be aligned on the button control by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.ImageAlign%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, to align the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> displayed on the button control, set the <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.TextAlign%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.FlatStyle%2A&gt;</ph> property determines the style and appearance of the control.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.FlatStyle%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Windows.Forms.FlatStyle?displayProperty=fullName&gt;</ph>, the user's operating system determines the appearance of the control.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Forms.ButtonBase"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the ellipsis character (...) appears at the right edge of the control, denoting that the control text extends beyond the specified length of the control.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.AutoEllipsis%2A&gt;</ph> to <ph id="ph2">`true`</ph> to display text that extends beyond the width of the control when the user passes over the control with the mouse.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set the control's <ph id="ph1">`AutoSize`</ph> property to <ph id="ph2">`false`</ph> if you want <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.AutoEllipsis%2A&gt;</ph> to be <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`AutoSize`</ph> is <ph id="ph2">`true`</ph>, the control will grow to fit the text and an ellipsis will not appear.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the additional label text is to be indicated by an ellipsis; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the control resizes based on its contents.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control automatically resizes based on its contents; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.ButtonBase.AutoSize"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets or sets the background color of the control.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> value representing the background color.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates a new accessibility object for the control.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">&lt;xref href="System.Windows.Forms.AccessibleObject"&gt;&lt;/xref&gt;</ph> for the control.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets the required creation parameters when the control handle is created.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.CreateParams"&gt;&lt;/xref&gt;</ph> that contains the required creation parameters when the handle to the control is created.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets the default Input Method Editor (IME) mode supported by this control.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>As implemented in the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase&gt;</ph> class, this property always returns the <ph id="ph2">`Disable`</ph> value of <ph id="ph3">&lt;xref:System.Windows.Forms.ImeMode?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.ImeMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the default size of the control.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Windows.Forms.ButtonBase"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">`Dispose`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase&gt;</ph> references.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the appearance of the border and the colors used to indicate check state and mouse state.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.FlatAppearance%2A&gt;</ph> property only with <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls whose <ph id="ph3">&lt;xref:System.Windows.Forms.FlatStyle&gt;</ph> is <ph id="ph4">&lt;xref:System.Windows.Forms.FlatStyle.Flat&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.FlatButtonAppearance"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets or sets the flat style appearance of the button control.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.FlatStyle%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> classes is set to <ph id="ph4">`System`</ph>, the control is drawn by the user's operating system and the check alignment is based upon the <ph id="ph5">`CheckAlign`</ph> and <ph id="ph6">&lt;xref:System.Windows.Forms.ButtonBase.TextAlign%2A&gt;</ph> property values.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`CheckAlign`</ph> property value is not changed, but the appearance of the control can be affected.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The check box is horizontally aligned with either the left or right edge of the control (a left or center alignment appears left aligned, right remains unchanged), and vertically aligned the same as the descriptive text.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you have a <ph id="ph1">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> control with a <ph id="ph2">`CheckAlign`</ph> property value of <ph id="ph3">`ContentAlignment`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`MiddleCenter`</ph>, a <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.TextAlign%2A&gt;</ph> property value of <ph id="ph3">`ContentAlignment.TopRight`</ph>, and the <ph id="ph4">&lt;xref:System.Windows.Forms.ButtonBase.FlatStyle%2A&gt;</ph> property value is set to <ph id="ph5">`System`</ph>, the check box alignment will appear to be <ph id="ph6">`ContentAlignment.TopLeft`</ph> while the text alignment remains unchanged.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.FlatStyle%2A&gt;</ph> property is set to <ph id="ph2">`FlatStyle.System`</ph>, any images assigned to the <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.Image%2A&gt;</ph> property are not displayed.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.FlatStyle"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`Standard`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The value assigned is not one of the <ph id="ph1">&lt;xref href="System.Windows.Forms.FlatStyle"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Retrieves the size of a rectangular area into which a control can be fitted.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.GetPreferredSize%2A&gt;</ph> differs by control.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.LayoutEngine%2A&gt;</ph> might be unable to assign the returned size to the control.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can return a size larger than the constraints indicated in the <ph id="ph1">`proposedSize`</ph> parameter, but <ph id="ph2">`proposedSize`</ph> should decrease as the constraint decreases.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`GetPreferredSize(new Size(100, 0))`</ph> should not be wider than <ph id="ph2">`GetPreferredSize(new Size(200, 0))`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exception is a <ph id="ph1">`proposedSize`</ph> of 0 or <ph id="ph2">`Size.Empty`</ph>, which are defined as unconstrained.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The custom-sized area for a control.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An ordered pair of type <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> representing the width and height of a rectangle.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets or sets the image that is displayed on a button control.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.Image%2A&gt;</ph> property is set, the <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.ImageList%2A&gt;</ph> property will be set to <ph id="ph3">`null`</ph>, and the <ph id="ph4">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> property will be set to its default, -1.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.FlatStyle%2A&gt;</ph> property is set to <ph id="ph2">`FlatStyle.System`</ph>, any images assigned to the <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.Image%2A&gt;</ph> property are not displayed.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> displayed on the button control.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets or sets the alignment of the image on the button control.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`MiddleCenter`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The value assigned is not one of the <ph id="ph1">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Gets or sets the image list index value of the image displayed on the button control.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.ImageList%2A&gt;</ph> properties are set, the <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.Image%2A&gt;</ph> property is set to its default value, <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.ImageList%2A&gt;</ph> property value is changed to <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> property returns its default value, -1.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the assigned <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> value is retained internally and used when another <ph id="ph2">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> object is assigned to the <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.ImageList%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the new <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> assigned to the <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.ImageList%2A&gt;</ph> property has an <ph id="ph3">&lt;xref:System.Windows.Forms.ImageList.ImageCollection.Count%2A?displayProperty=fullName&gt;</ph> property value that is less than or equal to the value assigned to the <ph id="ph4">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> property minus one (to account for the collection being a zero-based index), the <ph id="ph5">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> property value is adjusted to one less than the <ph id="ph6">&lt;xref:System.Windows.Forms.ImageList.ImageCollection.Count%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, consider a button control whose <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> has three images and whose <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> property is set to 2.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a new <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> that has only two images is assigned to the button, the <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> value changes to 1.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A zero-based index, which represents the image position in an <ph id="ph1">&lt;xref href="System.Windows.Forms.ImageList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The default is -1.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The assigned value is less than the lower bounds of the <ph id="ph1">&lt;xref href="System.Windows.Forms.ButtonBase.ImageIndex"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Gets or sets the key accessor for the image in the <ph id="ph1">&lt;xref href="System.Windows.Forms.ButtonBase.ImageList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.ImageKey%2A&gt;</ph> property specifies the image from the image list to display on the control.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A string representing the key of the image.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Forms.ImageList"&gt;&lt;/xref&gt;</ph> that contains the <ph id="ph2">&lt;xref href="System.Drawing.Image"&gt;&lt;/xref&gt;</ph> displayed on a button control.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.ImageList%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> property is set, the <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.Image%2A&gt;</ph> property is set <ph id="ph4">`null`</ph>, which is its default value.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.ImageList%2A&gt;</ph> property value is changed to <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> property returns its default value, -1.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the assigned <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> value is retained internally and used when another <ph id="ph2">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> is assigned to the <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.ImageList%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the new <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> assigned to the <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.ImageList%2A&gt;</ph> property has an <ph id="ph3">&lt;xref:System.Windows.Forms.ImageList.ImageCollection.Count%2A?displayProperty=fullName&gt;</ph> property value that is less than or equal to the value assigned to the <ph id="ph4">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> property minus one (because the collection is a zero-based index), the <ph id="ph5">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> property value is adjusted to one less than the <ph id="ph6">&lt;xref:System.Windows.Forms.ImageList.ImageCollection.Count%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, consider a button control whose <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> has three images and whose <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> property is set to 2.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a new <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> that has only two images is assigned to the button, the <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.ImageIndex%2A&gt;</ph> value changes to 1.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.ImageList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Gets or sets the Input Method Editor (IME) mode supported by this control.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.ImeMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.ButtonBase.ImeMode"&gt;&lt;/xref&gt;</ph> property is changed.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is not relevant for this class.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the button control is the default button.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.IsDefault%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the button is the default button for the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the button is clicked when the ENTER key is pressed if no other button or any other control that captures the ENTER key has focus.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify the default button of a form, set the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AcceptButton%2A&gt;</ph> property of the form to the desired button.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the button control is the default button; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.EnabledChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.GotFocus"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnGotFocus%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnKeyDown%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnKeyDown%2A&gt;</ph> if the button is disabled (this includes calls to the base class's <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.OnKeyDown%2A&gt;</ph> method when you override <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.OnKeyDown%2A&gt;</ph> in a derived class).</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>When disabling the button in an override of <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnKeyDown%2A&gt;</ph>, call the base class's <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.OnKeyDown%2A&gt;</ph> method before disabling the button, or do not call it at all.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.KeyEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnKeyUp%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.KeyEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.ButtonBase.OnLostFocus(System.EventArgs)"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnLostFocus%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseDown%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseDown%2A&gt;</ph> if the button is disabled (this includes calls to the base class's <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseDown%2A&gt;</ph> method when you override <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseDown%2A&gt;</ph> in a derived class).</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>When disabling the button in an override of <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseDown%2A&gt;</ph>, call the base class's <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseDown%2A&gt;</ph> method before disabling the button, or do not call it at all.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseEnter%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseEnter%2A&gt;</ph> if the button is disabled (this includes call to the base class's <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseEnter%2A&gt;</ph> method when you override <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseEnter%2A&gt;</ph> in a derived class).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>When disabling the button in an override of <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseEnter%2A&gt;</ph>, call the base class's <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseEnter%2A&gt;</ph> method before disabling the button, or do not call it at all.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseLeave%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseMove%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseMove%2A&gt;</ph> if the button is disabled (this includes calls to the base class's <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseMove%2A&gt;</ph> method when you override <ph id="ph3">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseMove%2A&gt;</ph> in a derived class).</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>When disabling the button in an override of <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseMove%2A&gt;</ph>, call the base class's <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseMove%2A&gt;</ph> method before disabling the button, or do not call it at all.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnMouseUp%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.ButtonBase.OnPaint(System.Windows.Forms.PaintEventArgs)"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ButtonBase.OnPaint%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.PaintEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ParentChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.TextChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.VisibleChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> object that contains the event data.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Windows.Forms.Button"&gt;&lt;/xref&gt;</ph> control to the state before it is pressed and redraws it.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Gets or sets the text associated with this control.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The text associated with this control.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Gets or sets the alignment of the text on the button control.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`MiddleCenter`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The value assigned is not one of the <ph id="ph1">&lt;xref href="System.Drawing.ContentAlignment"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of text and image relative to each other.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>One of the values of <ph id="ph1">&lt;xref href="System.Windows.Forms.TextImageRelation"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Forms.TextImageRelation.Overlay"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The value is not one of the <ph id="ph1">&lt;xref href="System.Windows.Forms.TextImageRelation"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that determines whether to use the <ph id="ph1">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> class (<ph id="ph2">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph>) or the <ph id="ph3">&lt;xref href="System.Windows.Forms.TextRenderer"&gt;&lt;/xref&gt;</ph> class (<ph id="ph4">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]</ph>) to render text.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`UseCompatibleTextRendering`</ph> property is intended to provide visual compatibility between Windows Forms controls that render text using the <ph id="ph2">&lt;xref:System.Windows.Forms.TextRenderer&gt;</ph> class and <ph id="ph3">[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]</ph> and <ph id="ph4">[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]</ph> applications that perform custom text rendering using the <ph id="ph5">&lt;xref:System.Drawing.Graphics&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, if your application is not being upgraded from <ph id="ph1">[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]</ph> or <ph id="ph2">[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]</ph>, it is recommended that you leave <ph id="ph3">`UseCompatibleTextRendering`</ph> set to the default value of <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]</ph> based <ph id="ph2">&lt;xref:System.Windows.Forms.TextRenderer&gt;</ph> class was introduced in the <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> to improve performance, make text look better, and improve support for international fonts.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, the <ph id="ph2">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> based <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> class was used to perform all text rendering.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]</ph> calculates character spacing and word wrapping differently from <ph id="ph2">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a Windows Forms application that uses the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> class to render text, this could cause the text for controls that use <ph id="ph2">&lt;xref:System.Windows.Forms.TextRenderer&gt;</ph> to appear different from the other text in the application.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>To resolve this incompatibility, you can set the <ph id="ph1">`UseCompatibleTextRendering`</ph> property to <ph id="ph2">`true`</ph> for a specific control.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set <ph id="ph1">`UseCompatibleTextRendering`</ph> to <ph id="ph2">`true`</ph> for all supported controls in the application, call the <ph id="ph3">&lt;xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A?displayProperty=fullName&gt;</ph> method with a parameter of <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> class should be used to perform text rendering for compatibility with versions 1.0 and 1.1.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>of the .NET Framework; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the first character that is preceded by an ampersand (&amp;) is used as the mnemonic key of the control.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the first character that is preceded by an ampersand (&amp;) is used as the mnemonic key of the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that determines if the background is drawn using visual styles, if supported.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual styles are specifications for the appearance of controls.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, visual styles can define the color, size, and font of controls, and they enable you to configure the visual interface to coordinate with your application interface.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, they provide a mechanism for all Windows-based applications to have visual styles applied.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the background is drawn using visual styles; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Processes Windows messages.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The Windows <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph> to process.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>