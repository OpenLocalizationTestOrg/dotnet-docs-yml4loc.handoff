<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">591b3271562839a45cd4f91452c75734ebf1ff9c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Channels.OneWayBindingElement.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4a4b3ea81077442d8e594db2a7d0b7c6551bfdd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ca241dd7b25cbd0a46560f65a7744da7464f6b9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enables packet routing and the use of one-way methods.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable packet routing a <bpt id="p1">*</bpt>one-way conversion<ept id="p1">*</ept> layer is required, which this class provides.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class is a binding in the stack of bindings that performs a message-level shape change called <ph id="ph1">`OneWayBindingElement`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This shape change can take a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IDuplexSessionChannel&gt;</ph> or a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IRequestChannel&gt;</ph> and expose it as a <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph>, or conversely it can take a <ph id="ph4">&lt;xref:System.ServiceModel.Channels.IDuplexSessionChannel&gt;</ph> or a <ph id="ph5">&lt;xref:System.ServiceModel.Channels.IRequestChannel&gt;</ph> and expose it as a <ph id="ph6">&lt;xref:System.ServiceModel.Channels.IOutputChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A user can create a custom binding that layers this binding over a session-aware or request-reply transport to make it packet routable.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class is also useful when you want to expose one-way methods in a more native fashion.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>More transformations can be applied over this layer, such as Composite Duplex and Reliable Messaging.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.OneWayBindingElement"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes a channel factory for producing one-way channels from the binding context.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method creates a channel factory, which is used to create a channel that processes outgoing messages for this binding.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingContext"&gt;&lt;/xref&gt;</ph> that provides context for the binding element.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The type of channel that the factory builds.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelFactory`1"&gt;&lt;/xref&gt;</ph> of type <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.IChannel"&gt;&lt;/xref&gt;</ph> initialized from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">context</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;context&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> is not <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.IOutputChannel"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The inner binding element does not support <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IDuplexSessionChannel"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.IRequestChannel"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a channel listener for accepting one-way channels.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method creates a channel listener, which is used to create a channel that processes incoming messages for this binding.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingContext"&gt;&lt;/xref&gt;</ph> that provides context for the binding element.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The type of channel that the listener is built to accept.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelListener`1"&gt;&lt;/xref&gt;</ph> of type <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.IChannel"&gt;&lt;/xref&gt;</ph> initialized from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">context</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;context&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> is not <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.IInputChannel"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The inner binding element does not support <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IDuplexSessionChannel"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.IRequestChannel"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a channel factory of the specified type can be built.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should call this method before trying to create a channel factory.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns <ph id="ph1">`true`</ph> when <ph id="ph2">`TChannel`</ph> is an <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IOutputChannel&gt;</ph>, and the binding below the present one in the binding stack is an <ph id="ph4">&lt;xref:System.ServiceModel.Channels.IDuplexSessionChannel&gt;</ph> or <ph id="ph5">&lt;xref:System.ServiceModel.Channels.IRequestChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingContext"&gt;&lt;/xref&gt;</ph> that provides context for the binding element.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The type of channel factory to build.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a channel factory of the specified type can be built; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;context&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a channel listener of the specified type can be built.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should call this method before trying to create a channel listener.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns <ph id="ph1">`true`</ph> when <ph id="ph2">`TChannel`</ph> is an <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph>, and the binding below the present one in the binding stack is an <ph id="ph4">&lt;xref:System.ServiceModel.Channels.IDuplexSessionChannel&gt;</ph> or <ph id="ph5">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingContext"&gt;&lt;/xref&gt;</ph> that provides context for the binding element.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The type of channel listener to build.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a channel listener of the specified type can be built; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;context&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the channel pool settings.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.ChannelPoolSettings"&gt;&lt;/xref&gt;</ph> object that contains properties of the channel pool associated with this binding element.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Clones an instance of this class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A cloned copy of this instance of this class.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets properties from the binding stack, if present.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method receives a binding context as an input parameter, which represents the stack of binding elements.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each binding element in the stack can handle the inquiry itself or delegate the inquiry, or a combination of the two.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each binding element can modify the context if it delegates the inquiry.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, a transport binding element handles the inquiry itself.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by binding elements as well as by the runtime objects, such as <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IChannelFactory&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IChannelListener&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingContext"&gt;&lt;/xref&gt;</ph> that provides context for the binding element.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Type of the property.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">T</ph><ept id="p1">&lt;/code&gt;</ept> object from the binding stack, if present.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum number of channels that can be accepted.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The maximum number of channels that can be accepted.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The default value is 10.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether packet routing is enabled.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class can optionally use a message-level protocol that transforms a <ph id="ph1">`DuplexSessionChannel`</ph><ph id="ph2">/</ph><ph id="ph3">`RequestChannel`</ph><ph id="ph4">/</ph><ph id="ph5">`ReplyChannel`</ph> to a one-way channel and allows the messages from the transformed channel to be routed.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usage of this protocol is controlled by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.OneWayBindingElement.PacketRoutable%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is <ph id="ph1">`true`</ph>, upon <ph id="ph2">`DuplexSessionChannel`</ph> initiation (for example, Buffered TCP and Named Pipes), this class adds a message header (MustUnderstand = <ph id="ph3">`false`</ph>, signed if security is enabled) that semantically means "you can packet-route this channel".</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>On the acceptor side, when this property is <ph id="ph1">`true`</ph>, this class looks for this header in the first message received on the channel.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this header does not exist, <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> faults the channel.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the header exists, then <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> funnels the new channel into a shared input channel.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>To transform a Request-Reply channel (for example, TCP Streaming or HTTP) when this property is <ph id="ph1">`true`</ph>, this header is added to every request to signal that the request can be packet routed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> also verifies that <ph id="ph2">`SendRequest`</ph> returns <ph id="ph3">`null`</ph> and replies with <ph id="ph4">`null`</ph> on the server.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if packet routing is enabled; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns whether the properties of the channel pool that are associated with this binding element should be serialized.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the channel pool settings should be serialized; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Exports a custom policy assertion that represents the one-way binding element.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method writes binding-related statements into the WSDL information exposed by a particular contract and is used by <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> to communicate to clients the existence of this custom binding element in the binding stack.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes two parameters: the <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExporter&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A&gt;</ph> methods to obtain collections of policy assertions that have already been exported at various scopes.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then use this method to add your own policy assertions to the appropriate collection.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A&gt;</ph> property exposes the <ph id="ph2">&lt;xref:System.ServiceModel.Description.ContractDescription&gt;</ph> for the endpoint that is being exported.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables this method to correctly scope their exported policy assertions.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, security attributes in code can add behaviors to the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ContractDescription&gt;</ph> that indicate where security policy assertions should be added.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once custom policy assertions are attached to the WSDL information, clients can detect and import the custom binding assertions by implementing an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Description.MetadataExporter"&gt;&lt;/xref&gt;</ph> that you can use to modify the exporting process.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Description.PolicyConversionContext"&gt;&lt;/xref&gt;</ph> that you can use to insert your custom policy assertion.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;context&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>