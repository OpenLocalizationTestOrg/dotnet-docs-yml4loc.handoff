<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b47a42bdecc83380d556908595808ea624ae4584</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.IO.FileSystemWatcher.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">599633b360a0d771f2fe52482d776bd3111c1cc3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd1fbdb3e258776c6a3cdda71d73f5cded945b8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>To view the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09)</ept>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id="p1">[</bpt>instructions<ept id="p1">](http://referencesource.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> to watch for changes in a specified directory.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can watch for changes in files and subdirectories of the specified directory.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create a component to watch files on a local computer, a network drive, or a remote computer.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>To watch for changes in all files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to an empty string ("") or use wildcards ("*.<ph id="ph2">\*</ph>").</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to watch for changes in the file MyDoc.txt, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "MyDoc.txt".</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also watch for changes in a certain type of file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to watch for changes in text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "<ph id="ph2">\*</ph>.txt".</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are several types of changes you can watch for in a directory or file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can watch for changes in <ph id="ph1">`Attributes`</ph>, the <ph id="ph2">`LastWrite`</ph> date and time, or the <ph id="ph3">`Size`</ph> of files or directories.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is done by setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> property to one of the <ph id="ph2">&lt;xref:System.IO.NotifyFilters&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on the type of changes you can watch, see <ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can watch for renaming, deletion, or creation of files or directories.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to watch for renaming of text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "*.txt" and call the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> method with a <ph id="ph3">&lt;xref:System.IO.WatcherChangeTypes.Renamed&gt;</ph> specified for its parameter.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Windows operating system notifies your component of file changes in a buffer created by the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Increasing the size of the buffer with the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties so you can filter out unwanted change notifications.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, see the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.%23ctor%2A&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Please note the following when using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hidden files are not ignored.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFil~.Lon".</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class contains a link demand and an inheritance demand at the class level that applies to all members.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when either the immediate caller or the derived class does not have full-trust permission.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The maximum size you can set for the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property for monitoring a directory over the network is 64 KB.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Running <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> on Windows 98 is not supported.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Copying and moving folders</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operating system and <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you cut and paste a folder with files into a folder being watched, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object reports only the folder as new, but not its contents because they are essentially only renamed.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified that the contents of folders have been moved or copied into a watched folder, provide <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> event handler methods as suggested in the following table.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event Handler</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Events Handled</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Performs</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Report changes in file attributes, created files, and deleted files.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>List the old and new paths of renamed files and folders, expanding recursively if needed.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Events and Buffer Sizes</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that several factors can affect which file system change events are raised, as described by the following:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common file system operations might raise more than one event.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> can watch disks as long as they are not switched or removed.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> does not raise events for CDs and DVDs, because time stamps and properties cannot change.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remote computers must have one of the required platforms installed for the component to function properly.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> objects will raise the appropriate events.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> may miss an event when the buffer size is exceeded.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid missing events, follow these guidelines:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Increase the buffer size by setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avoid watching files with long file names, because a long file name contributes to filling up the buffer.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider renaming these files using shorter names.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Keep your event handling code as short as possible.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows initial property values for an instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initial Value</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>bitwise OR combination of <ph id="ph1">`LastWrite`</ph>, <ph id="ph2">`FileName`</ph>, and <ph id="ph3">`DirectoryName`</ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>"*.<ph id="ph1">\*</ph>" (Watch all files.)</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>8192</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>empty string ("")</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher"&gt;&lt;/xref&gt;</ph> class, given the specified directory to monitor.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The component can watch files on your personal computer, a network drive, or a remote computer.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property is set by default to watch all files.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> parameter is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The path specified through the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> parameter does not exist.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is too long.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher"&gt;&lt;/xref&gt;</ph> class, given the specified directory and type of files to monitor.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> is set, and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The component can watch files on your personal computer, a network drive, or a remote computer.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot watch a remote computer that does not have Windows NT or Windows 2000.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The type of files to watch.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For example, "*.txt" watches for changes to all text files.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">filter</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> parameter is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The path specified through the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> parameter does not exist.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is too long.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Begins the initialization of a <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher"&gt;&lt;/xref&gt;</ph> used on a form or used by another component.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The initialization occurs at run time.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to start the initialization of a component used on a form or used by another component.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> method ends the initialization.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher.Path"&gt;&lt;/xref&gt;</ph> is changed.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common file system operations might raise more than one event.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> to restrict the number of notifications raised when this event is handled.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised unexpectedly when a file is renamed, but is not raised when a directory is renamed.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>To watch for renaming, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher.Path"&gt;&lt;/xref&gt;</ph> is created.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike copying, moving a file or directory would raise two events.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common file system operations might raise more than one event.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher.Path"&gt;&lt;/xref&gt;</ph> is deleted.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike copying, moving a file or directory would raise two events.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common file system operations might raise more than one event.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order in which the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event is raised in relation to the other <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> events may change when the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> references.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the component is enabled.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>The component will not raise events unless you set <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The component will not watch the specified directory until the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property has been set and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> method allows event handlers to be invoked to respond to file changes even if this property is set to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the component is enabled; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If you are using the component on a designer in <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>, the default is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher"&gt;&lt;/xref&gt;</ph> object has been disposed.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The current operating system is not Microsoft Windows NT or later.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The directory specified in <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher.Path"&gt;&lt;/xref&gt;</ph> could not be found.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher.Path"&gt;&lt;/xref&gt;</ph> has not been set or is invalid.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Ends the initialization of a <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher"&gt;&lt;/xref&gt;</ph> used on a form or used by another component.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The initialization occurs at run time.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to end the initialization of a component used on a form or used by another component.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> method starts the initialization.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Occurs when the instance of <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher"&gt;&lt;/xref&gt;</ph> is unable to continue monitoring changes or when the internal buffer overflows.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised whenever something prevents the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object from monitoring changes.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the object is monitoring changes in a remote directory and the connection to that directory is lost, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Error&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>The system notifies you of file changes, and it stores those changes in a buffer that the component creates and passes to the APIs.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Increasing the size of the buffer is expensive, because it comes from non paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties to filter out unwanted change notifications.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common file system operations might raise more than one event.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when a file is moved from one directory to another, several <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> and some <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> events might be raised.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Gets or sets the filter string used to determine what files are monitored in a directory.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>To watch changes in all files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to an empty string ("").</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to watch for changes in the file MyDoc.txt, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "MyDoc.txt".</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also watch for changes in a certain type of file.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to watch for changes in any text files, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to "*.txt".</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use of multiple filters such as "<ph id="ph1">\*</ph>.txt&amp;#124;<ph id="ph2">\*</ph>.doc" is not supported.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property can be changed after the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> object has started receiving events.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> accepts wildcards for matching files, as shown in the following examples.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>Filter string</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Watches the following files</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>*.<ph id="ph1">\*</ph></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>All files (default).</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>An empty string ("") also watches all files.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>*.txt</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>All files with a "txt" extension.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>*recipe.doc</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>All files ending in "recipe" with a "doc" extension.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>win*.xml</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>All files beginning with "win" with an "xml" extension.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sales*200?.xls</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches the following:</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>but does not match:</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sales Nov 1999.xls</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>MyReport.Doc</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Watches only MyReport.doc</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The filter string.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The default is "*.<ph id="ph1">\*</ph>" (Watches all files.)</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> to <ph id="ph2">`true`</ph> when you want to watch for change notifications for files and directories contained within the directory specified through the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, and its subdirectories.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> property to <ph id="ph2">`false`</ph> helps reduce the number of notifications sent to the internal buffer.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`true`</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> is recursive through the entire sub tree, not just the immediate child directories.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>The relative path to a file or directory within the sub tree returns in the <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.Name%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph> and the <ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldName%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>, depending on changes you are watching for.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can get the fully qualified path from the <ph id="ph1">&lt;xref:System.IO.FileSystemEventArgs.FullPath%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.IO.FileSystemEventArgs&gt;</ph> and the <ph id="ph3">&lt;xref:System.IO.RenamedEventArgs.OldFullPath%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.RenamedEventArgs&gt;</ph>, depending on the changes you are watching for.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a directory is created in the sub tree of the directory you are watching, and <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> is <ph id="ph2">`true`</ph>, that directory will automatically be watched.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if you want to monitor subdirectories; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Gets or sets the size (in bytes) of the internal buffer.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the buffer to 4 KB or larger, but it must not exceed 64 KB.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you try to set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property to less than 4096 bytes, your value is discarded and the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> property is set to 4096 bytes.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>For best performance, use a multiple of 4 KB on Intel-based computers.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>The system notifies the component of file changes, and it stores those changes in a buffer the component creates and passes to the APIs.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each event can use up to 16 bytes of memory, not including the file name.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are many changes in a short time, the buffer can overflow.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>Increasing the size of the buffer can prevent missing file system change events.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, increasing buffer size is expensive, because it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid a buffer overflow, use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> properties to filter out unwanted change notifications.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The internal buffer size in bytes.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The default is 8192 (8 KB).</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Gets or sets the type of changes to watch for.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can combine the members of the <ph id="ph1">&lt;xref:System.IO.NotifyFilters&gt;</ph> enumeration to watch for more than one type of change at a time.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can watch for changes in size of a file, and for changes in the <ph id="ph1">`LastWrite`</ph> time.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>This raises an event anytime there is a change in file or folder size, or a change in the <ph id="ph1">`LastWrite`</ph> time of the file or folder.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is one way to filter out unwanted notifications.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on filtering out unwanted notifications, see the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.InternalBufferSize%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.IO.NotifyFilters"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The default is the bitwise OR combination of <ph id="ph1">`LastWrite`</ph>, <ph id="ph2">`FileName`</ph>, and <ph id="ph3">`DirectoryName`</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The value is not a valid bitwise OR combination of the <ph id="ph1">&lt;xref href="System.IO.NotifyFilters"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The value that is being set is not valid.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher.Changed"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> is called when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.NotifyFilter%2A&gt;</ph> property to restrict the number of events raised when the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph> event is handled.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.FileSystemEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher.Created"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> is called when a file or directory is created in the directory being monitored.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you copy a file from "My Documents" and paste it into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike copying, moving a file or directory raises two events.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised in FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised in FileSystemWatcher1.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event is raised as soon as a file is created.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a file is being copied or transferred into a watched directory, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnCreated%2A&gt;</ph> event will be raised immediately, followed by one or more <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.OnChanged%2A&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.FileSystemEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher.Deleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnDeleted%2A&gt;</ph> is called when a file or directory, within the directory being monitored, is deleted.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you copy a file or directory, the system raises a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event in the directory to which the file was copied, if that directory is being watched.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the directory from which you copied was being watched by another instance of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>, no event would be raised.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you create two instances of <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you copy a file from "My Documents" into "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike copying, moving a file or directory raises two events.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>From the previous example, if you moved a file from "My Documents" to "Your Documents", a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph> event would be raised by FileSystemWatcher2 and a <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph> event would be raised by FileSystemWatcher1.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.FileSystemEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher.Error"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnError%2A&gt;</ph> is called when an error occurs.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IO.ErrorEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher.Renamed"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.OnRenamed%2A&gt;</ph> is called when a file or directory within the directory being monitored is renamed.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.RenamedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Gets or sets the path of the directory to watch.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a fully qualified path to a directory.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, this directory is the root at which the system watches for changes; otherwise it is the only directory watched.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>To watch a specific file, set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property to the fully qualified, correct directory, and the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Filter%2A&gt;</ph> property to the file name.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property supports Universal Naming Convention (UNC) paths.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property must be set before the component can watch for changes.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a directory is renamed, the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> automatically reattaches itself to the newly renamed item.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you set the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property to "C:\My Documents" and then manually rename the directory to "C:\Your Documents", the component continues listening for change notifications on the newly renamed directory.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when you ask for the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, it contains the old path.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>This happens because the component determines what directory watches based on the handle, rather than the name of the directory.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>Renaming does not affect the handle.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>So, if you destroy the component, and then recreate it without updating the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Path%2A&gt;</ph> property, your application will fail because the directory no longer exists.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The path to monitor.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The specified path does not exist or could not be found.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The specified path contains wildcard characters.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The specified path contains invalid path characters.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Occurs when a file or directory in the specified <ph id="ph1">&lt;xref href="System.IO.FileSystemWatcher.Path"&gt;&lt;/xref&gt;</ph> is renamed.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>Renaming the directory you are watching will not raise a notification.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notifications are only raised for entries inside the directory you are watching.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Gets or sets an <ph id="ph1">&lt;xref href="System.ComponentModel.ISite"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">&lt;xref href="System.IO.FileSystemWatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sites bind a <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id="ph2">&lt;xref:System.ComponentModel.Design.IDesignerHost.Container%2A&gt;</ph> and enable communication between them, as well as provide a way for the container to manage its components.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ComponentModel.ISite"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">&lt;xref href="System.IO.FileSystemWatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> is <ph id="ph2">`null`</ph>, methods handling the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph6">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events are called on a thread from the system thread pool.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on system thread pools, see <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events are handled by a visual Windows Forms component, such as a <ph id="ph5">&lt;xref:System.Windows.Forms.Button&gt;</ph>, accessing the component through the system thread pool might not work, or may result in an exception.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avoid this by setting <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> to a Windows Forms component, which causes the methods that handle the <ph id="ph2">&lt;xref:System.IO.FileSystemWatcher.Changed&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher.Deleted&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.FileSystemWatcher.Renamed&gt;</ph> events to be called on the same thread on which the component was created.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> is used inside <ph id="ph2">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> in a Windows Forms designer, <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> automatically sets to the control that contains the <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you place a <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> on a designer for Form1 (which inherits from <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>) the <ph id="ph3">&lt;xref:System.IO.FileSystemWatcher.SynchronizingObject%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> is set to the instance of Form1.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ComponentModel.ISynchronizeInvoke"&gt;&lt;/xref&gt;</ph> that represents the object used to marshal the event handler calls issued as a result of a directory change.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method waits indefinitely until the first change occurs and then returns.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the same as using <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.WaitForChanged%2A&gt;</ph> with the <ph id="ph2">`timeout`</ph> parameter set to -1.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method allows an event handler to be invoked to respond to file changes even if the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.WatcherChangeTypes"&gt;&lt;/xref&gt;</ph> to watch for.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.WaitForChangedResult"&gt;&lt;/xref&gt;</ph> that contains specific information on the change that occurred.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method waits until a change occurs or it has timed out.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of -1 for the <ph id="ph1">`timeout`</ph> parameter means wait indefinitely.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method allows an event handler to be invoked to respond to file changes even if the <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some systems, <ph id="ph1">&lt;xref:System.IO.FileSystemWatcher&gt;</ph> reports changes to files using the short 8.3 file name format.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.WatcherChangeTypes"&gt;&lt;/xref&gt;</ph> to watch for.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The time (in milliseconds) to wait before timing out.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.WaitForChangedResult"&gt;&lt;/xref&gt;</ph> that contains specific information on the change that occurred.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>