<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4e4986cb9a2a88282c4b30f1a4bfeba1af9879e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.IO.Compression.GZipStream.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44a10597c9817ec48be660cc937a5258c0edaf67</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7006835794de40abdd34d8f7a728dcdd75ea64be</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides methods and properties used to compress and decompress streams.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class represents the gzip data format, which uses an industry-standard algorithm for lossless file compression and decompression.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The format includes a cyclic redundancy check value for detecting data corruption.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The gzip data format uses the same algorithm as the <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> class, but can be extended to use other compression formats.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The format can be readily implemented in a manner not covered by patents.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> class uses the zlib library for compression.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, it provides a better compression algorithm and, in most cases, a smaller compressed file than it provides in earlier versions of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Compressed <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> objects written to a file with an extension of .gz can be decompressed using many common compression tools; however, this class does not inherently provide functionality for adding files to or extracting files from zip archives.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The compression functionality in <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> is exposed as a stream.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data is read on a byte-by-byte basis, so it is not possible to perform multiple passes to determine the best method for compressing entire files or large blocks of data.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> classes are best used on uncompressed sources of data.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source data is already compressed, using these classes may actually increase the size of the stream.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.Compression.GZipStream"&gt;&lt;/xref&gt;</ph> class by using the specified stream and compression level.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use this constructor when you want to specify whether compression efficiency or speed is more important for an instance of the <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor overload uses the compression mode <ph id="ph1">&lt;xref:System.IO.Compression.CompressionMode.Compress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the compression mode to another value, use the <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.CompressionMode%29&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.CompressionMode%2CSystem.Boolean%29&gt;</ph> overload.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The stream to write the compressed data to.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that indicates whether to emphasize speed or compression efficiency when compressing the stream.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The stream does not support write operations such as compression.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(The <ph id="ph1">&lt;xref href="System.IO.Stream.CanWrite"&gt;&lt;/xref&gt;</ph> property on the stream object is <ph id="ph2">`false`</ph>.)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.Compression.GZipStream"&gt;&lt;/xref&gt;</ph> class by using the specified stream and compression mode.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> owns the underlying stream, so closing the <ph id="ph2">`stream`</ph> parameter also closes the underlying stream.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the state of the underlying stream can affect the usability of the stream.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, no explicit checks are performed, so no additional exceptions are thrown when the new instance is created.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an instance of the <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> class is created with the <ph id="ph2">`mode`</ph> parameter equal to <ph id="ph3">`Compress`</ph> and no further action occurs, the stream will appear as a valid, empty compressed file.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the compression level is set to <ph id="ph1">&lt;xref:System.IO.Compression.CompressionLevel.Optimal&gt;</ph> when the compression mode is <ph id="ph2">&lt;xref:System.IO.Compression.CompressionMode.Compress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The stream the compressed or decompressed data is written to.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that indicates whether to compress or decompress the stream.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.IO.Compression.CompressionMode"&gt;&lt;/xref&gt;</ph> enumeration value.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.IO.Compression.CompressionMode"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">&lt;xref href="System.IO.Compression.CompressionMode.Compress"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.IO.Stream.CanWrite"&gt;&lt;/xref&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.IO.Compression.CompressionMode"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">&lt;xref href="System.IO.Compression.CompressionMode.Decompress"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.IO.Stream.CanRead"&gt;&lt;/xref&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.Compression.GZipStream"&gt;&lt;/xref&gt;</ph> class by using the specified stream and compression level, and optionally leaves the stream open.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use this constructor when you want to specify whether compression efficiency or speed is more important for an instance of the <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> class, and whether to leave the stream object open after disposing the <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor overload uses the compression mode <ph id="ph1">&lt;xref:System.IO.Compression.CompressionMode.Compress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the compression mode to another value, use the <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.CompressionMode%29&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.CompressionMode%2CSystem.Boolean%29&gt;</ph> overload.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The stream to write the compressed data to.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that indicates whether to emphasize speed or compression efficiency when compressing the stream.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to leave the stream object open after disposing the <ph id="ph2">&lt;xref href="System.IO.Compression.GZipStream"&gt;&lt;/xref&gt;</ph> object; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The stream does not support write operations such as compression.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(The <ph id="ph1">&lt;xref href="System.IO.Stream.CanWrite"&gt;&lt;/xref&gt;</ph> property on the stream object is <ph id="ph2">`false`</ph>.)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.Compression.GZipStream"&gt;&lt;/xref&gt;</ph> class by using the specified stream and compression mode, and optionally leaves the stream open.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> owns the underlying stream, so closing the <ph id="ph2">`stream`</ph> parameter also closes the underlying stream.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the state of the underlying stream can affect the usability of the stream.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, no explicit checks are performed, so no additional exceptions are thrown when the new instance is created.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an instance of the <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> class is created with the <ph id="ph2">`mode`</ph> parameter equal to <ph id="ph3">`Compress`</ph> and no further action occurs, the stream will appear as a valid, empty compressed file.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the compression level is set to <ph id="ph1">&lt;xref:System.IO.Compression.CompressionLevel.Optimal&gt;</ph> when the compression mode is <ph id="ph2">&lt;xref:System.IO.Compression.CompressionMode.Compress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The stream the compressed or decompressed data is written to.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that indicates whether to compress or decompress the stream.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to leave the stream open after disposing the <ph id="ph2">&lt;xref href="System.IO.Compression.GZipStream"&gt;&lt;/xref&gt;</ph> object; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;mode&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.IO.Compression.CompressionMode"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.IO.Compression.CompressionMode"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">&lt;xref href="System.IO.Compression.CompressionMode.Compress"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.IO.Stream.CanWrite"&gt;&lt;/xref&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.IO.Compression.CompressionMode"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">&lt;xref href="System.IO.Compression.CompressionMode.Decompress"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.IO.Stream.CanRead"&gt;&lt;/xref&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Gets a reference to the underlying stream.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A stream object that represents the underlying stream.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The underlying stream is closed.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous read operation.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>(Consider using the <ph id="ph1">&lt;xref href="System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> method instead.)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can perform asynchronous read operations by using the <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.BeginRead%2A&gt;</ph> method is still available in <ph id="ph2">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, you can implement asynchronous I/O operations more easily by using the new async methods.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see .</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> return value to the <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream.EndRead%2A&gt;</ph> method of the stream to determine how many bytes were read and to release operating system resources used for reading.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can do this either by using the same code that called <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.BeginRead%2A&gt;</ph> or in a callback passed to <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream.BeginRead%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.CanRead%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> object supports reading.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.BeginRead%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.EndRead%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The byte offset in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> at which to begin reading data from the stream.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An object that represents the asynchronous read operation, which could still be pending.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The method tried to  read asynchronously past the end of the stream, or a disk error occurred.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>One or more of the arguments is invalid.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">&lt;xref href="System.IO.Compression.GZipStream"&gt;&lt;/xref&gt;</ph> implementation does not support the read operation.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A read operation cannot be performed because the stream is closed.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous write operation.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>(Consider using the <ph id="ph1">&lt;xref href="System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> method instead.)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can perform asynchronous write operations by using the <ph id="ph2">&lt;xref:System.IO.Stream.WriteAsync%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.BeginWrite%2A&gt;</ph> method is still available in <ph id="ph2">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, you can implement asynchronous I/O operations more easily by using the new async methods.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see .</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.BeginWrite%2A&gt;</ph> method starts an asynchronous write operation to a <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> stream object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must create a callback method that implements the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate and pass its name to the <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream.BeginWrite%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The byte offset in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> at which to begin writing.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An  object that represents the asynchronous write operation, which could still be pending.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The underlying stream is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The underlying stream is closed.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the stream supports reading while decompressing a file.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.IO.Compression.CompressionMode"&gt;&lt;/xref&gt;</ph> value is <ph id="ph3">`Decompress,`</ph> and the underlying stream supports reading and is not closed; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the stream supports seeking.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> in all cases.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the stream supports writing.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.IO.Compression.CompressionMode"&gt;&lt;/xref&gt;</ph> value is <ph id="ph3">`Compress`</ph>, and the underlying stream supports writing and is not closed; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.IO.Compression.GZipStream"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> references.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Waits for the pending asynchronous read to complete.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>(Consider using the the <ph id="ph1">&lt;xref href="System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> method instead.)</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can perform asynchronous read operations by using the <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.EndRead%2A&gt;</ph> method is still available in <ph id="ph2">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, you can implement asynchronous I/O operations more easily by using the new async methods.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see .</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method to determine how many bytes were read from the stream.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called once to return the amount of bytes read between calls to <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream.EndRead%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the I/O operation has completed.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The number of bytes read from the stream, between 0 (zero) and the number of bytes you requested.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.IO.Compression.GZipStream"&gt;&lt;/xref&gt;</ph> returns 0 only at the end of the stream; otherwise, it blocks until at least one byte is available.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;async_result&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;async_result&lt;/code&gt;</ph> did not originate from a <ph id="ph2">&lt;xref href="System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> method on the current stream.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The end operation cannot be performed because the stream is closed.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Handles the end of an asynchronous write operation.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>(Consider using the <ph id="ph1">&lt;xref href="System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> method instead.)</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can perform asynchronous write operations by using the <ph id="ph2">&lt;xref:System.IO.Stream.WriteAsync%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.EndWrite%2A&gt;</ph> method is still available in <ph id="ph2">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, you can implement asynchronous I/O operations more easily by using the new async methods.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see .</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.EndWrite%2A&gt;</ph> method completes the asynchronous write operation started in the <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream.BeginWrite%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The underlying stream is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The underlying stream is closed.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The current implementation of this method has no functionality.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current implementation of this method does not flush the internal buffer.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The internal buffer is flushed when the object is disposed.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This property is not supported and always throws a <ph id="ph1">&lt;xref href="System.NotSupportedException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A long value.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This property is not supported on this stream.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This property is not supported and always throws a <ph id="ph1">&lt;xref href="System.NotSupportedException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A long value.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This property is not supported on this stream.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Reads a number of decompressed bytes into the specified byte array.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>If data is found in an invalid format, an <ph id="ph1">&lt;xref:System.IO.InvalidDataException&gt;</ph> is thrown as one of the last operations.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>A cyclic redundancy check (CRC) is performed as one of the last operations of this method.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The array used to store decompressed bytes.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The byte offset in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> at which the read bytes will be placed.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The maximum number of decompressed bytes to read.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The number of bytes that were decompressed into the byte array.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If the end of the stream has been reached, zero or the number of bytes read is returned.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.Compression.CompressionMode"&gt;&lt;/xref&gt;</ph> value was <ph id="ph2">`Compress`</ph> when the object was created.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\-</ph> or -</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The underlying stream does not support reading.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> length minus the index starting point is less than <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The data is in an invalid format.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This property is not supported and always throws a <ph id="ph1">&lt;xref href="System.NotSupportedException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The location in the stream.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.IO.SeekOrigin"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A long value.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This property is not supported on this stream.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This property is not supported and always throws a <ph id="ph1">&lt;xref href="System.NotSupportedException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The length of the stream.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>This property is not supported on this stream.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Writes compressed bytes to the underlying stream from the specified byte array.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The write operation might not occur immediately but is buffered until the buffer size is reached or until the <ph id="ph1">&lt;xref:System.IO.Compression.GZipStream.Flush%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The buffer that contains the data to compress.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The byte offset in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> from which the bytes will be read.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The write operation cannot be performed because the stream is closed.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>