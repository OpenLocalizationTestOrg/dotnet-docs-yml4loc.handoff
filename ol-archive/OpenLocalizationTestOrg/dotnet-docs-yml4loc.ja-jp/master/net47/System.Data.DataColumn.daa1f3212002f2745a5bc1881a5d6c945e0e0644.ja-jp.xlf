<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">245aaa3ecb5f45ba9414e5df5356ded82b98c3eb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Data.DataColumn.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fed3ec0805438f92b87a9c5ea0acf45bda3f495d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4000ca63b8c8c75a7d08e5b9f0ff47e47215fbef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the schema of a column in a <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> is the fundamental building block for creating the schema of a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You build the schema by adding one or more <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> objects to the <ph id="ph2">&lt;xref:System.Data.DataColumnCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Adding Columns to a DataTable<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> has a <ph id="ph2">&lt;xref:System.Data.DataColumn.DataType%2A&gt;</ph> property that determines the kind of data the <ph id="ph3">&lt;xref:System.Data.DataColumn&gt;</ph> contains.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can restrict the data type to integers, or strings, or decimals.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because data that is contained by the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is typically merged back into its original data source, you must match the data types to those in the data source.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Data Type Mappings in ADO.NET<ept id="p1">](~/docs/framework/data/adonet/data-type-mappings-in-ado-net.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties such as <ph id="ph1">&lt;xref:System.Data.DataColumn.AllowDBNull%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.DataColumn.Unique%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;</ph> put restrictions on the entry and updating of data, thereby helping to guarantee data integrity.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.DataColumn.AutoIncrementSeed%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrementStep%2A&gt;</ph> properties to control automatic data generation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> columns, see <bpt id="p1">[</bpt>Creating AutoIncrement Columns<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-autoincrement-columns.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Primary Keys<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also make sure that values in a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> are unique by creating a <ph id="ph2">&lt;xref:System.Data.UniqueConstraint&gt;</ph> and adding it to the <ph id="ph3">&lt;xref:System.Data.ConstraintCollection&gt;</ph> of the <ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph> to which the <ph id="ph5">&lt;xref:System.Data.DataColumn&gt;</ph> belongs.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>DataTable Constraints<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a relation between <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> objects, create a <ph id="ph2">&lt;xref:System.Data.DataRelation&gt;</ph> object and add it to the <ph id="ph3">&lt;xref:System.Data.DataRelationCollection&gt;</ph> of a <ph id="ph4">&lt;xref:System.Data.DataSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> object to calculate the values in a column, or create an aggregate column.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Expression Columns<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-expression-columns.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of a <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> class as type string.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>When created, a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> object has no default <ph id="ph2">&lt;xref:System.Data.DataColumn.ColumnName%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Data.DataColumn.Caption%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you add it to a <ph id="ph1">&lt;xref:System.Data.DataColumnCollection&gt;</ph>, a default name ("Column1", "Column2", and so on) will be generated if a name has not been assigned to the <ph id="ph2">&lt;xref:System.Data.DataColumn.ColumnName%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> class, as type string, using the specified column name.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the name specific to a column becomes the <ph id="ph1">&lt;xref:System.Data.DataColumn.Caption%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A string that represents the name of the column to be created.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If set to <ph id="ph1">`null`</ph> or an empty string (""), a default name will be specified when added to the columns collection.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> class using the specified column name and data type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A string that represents the name of the column to be created.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If set to <ph id="ph1">`null`</ph> or an empty string (""), a default name will be specified when added to the columns collection.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A supported <ph id="ph1">&lt;xref href="System.Data.DataColumn.DataType"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>No <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dataType</ph><ept id="p1">&lt;/code&gt;</ept> was specified.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> class using the specified name, data type, and expression.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A string that represents the name of the column to be created.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If set to <ph id="ph1">`null`</ph> or an empty string (""), a default name will be specified when added to the columns collection.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A supported <ph id="ph1">&lt;xref href="System.Data.DataColumn.DataType"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The expression used to create this column.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref href="System.Data.DataColumn.Expression"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>No <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dataType</ph><ept id="p1">&lt;/code&gt;</ept> was specified.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> class using the specified name, data type, expression, and value that determines whether the column is an attribute.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`type`</ph> argument sets the <ph id="ph2">&lt;xref:System.Data.DataColumn.ColumnMapping%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property specifies how a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> is mapped when a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> is transformed into an XML document.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the column is named "fName," and the value it contains is "Bob," and <ph id="ph1">`type`</ph> is set to <ph id="ph2">`MappingType.Attribute`</ph>, the XML element would be as follows:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph>Name fName = 'Bob'/&gt;</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how columns are mapped to elements or attributes, see the <ph id="ph1">&lt;xref:System.Data.DataColumn.ColumnMapping%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A string that represents the name of the column to be created.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If set to <ph id="ph1">`null`</ph> or an empty string (""), a default name will be specified when added to the columns collection.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A supported <ph id="ph1">&lt;xref href="System.Data.DataColumn.DataType"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The expression used to create this column.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref href="System.Data.DataColumn.Expression"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.MappingType"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>No <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dataType</ph><ept id="p1">&lt;/code&gt;</ept> was specified.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether null values are allowed in this column for rows that belong to the table.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if null values values are allowed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the column automatically increments the value of the column for new rows added to the table.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the type of this column is not Int16, Int32, or Int64 when this property is set, the <ph id="ph1">&lt;xref:System.Data.DataColumn.DataType%2A&gt;</ph> property is coerced to Int32.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception is generated if this is a computed column.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property is set.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The incremented value is used only if the row's value for this column, when added to the columns collection, is equal to the default value.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create a new row using the <ph id="ph1">&lt;xref:System.Data.DataRow.ItemArray%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> class and passing in an array of values.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a potential problem for a column with its <ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> set to <ph id="ph2">`true`</ph>, because its value is generated automatically.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use the <ph id="ph1">&lt;xref:System.Data.DataRow.ItemArray%2A&gt;</ph> property, place <ph id="ph2">`null`</ph> in the column's position in the array.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Data.DataRow.ItemArray%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the type of the column is <ph id="ph1">&lt;xref:System.Data.SqlTypes.SqlInt16&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.SqlTypes.SqlInt32&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> will not work.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use Int16 or Int32 instead.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the type of the column is <ph id="ph1">&lt;xref:System.Data.SqlTypes.SqlInt64&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.SqlTypes.SqlDecimal&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> will only partially work.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use Int64 or Decimal instead.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrementStep%2A&gt;</ph> value is added to the current value, the overflow check is suppressed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the value of the column increments automatically; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The column is a computed column.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Gets or sets the starting value for a column that has its <ph id="ph1">&lt;xref href="System.Data.DataColumn.AutoIncrement"&gt;&lt;/xref&gt;</ph> property set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The default is 0.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The starting value for the <ph id="ph1">&lt;xref href="System.Data.DataColumn.AutoIncrement"&gt;&lt;/xref&gt;</ph> feature.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Gets or sets the increment used by a column with its <ph id="ph1">&lt;xref href="System.Data.DataColumn.AutoIncrement"&gt;&lt;/xref&gt;</ph> property set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The number by which the value of the column is automatically incremented.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The default is 1.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The value set is zero.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Gets or sets the caption for the column.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Data.DataColumn.Caption%2A&gt;</ph> property to display a descriptive or friendly name for a <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The caption of the column.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If not set, returns the <ph id="ph1">&lt;xref href="System.Data.DataColumn.ColumnName"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Data.MappingType"&gt;&lt;/xref&gt;</ph> of the column.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataColumn.ColumnMapping%2A&gt;</ph> property determines how a <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> is mapped when a <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> is saved as an XML document using the <ph id="ph4">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> is named "customerID," and its <ph id="ph2">&lt;xref:System.Data.DataColumn.ColumnMapping%2A&gt;</ph> property is set to <ph id="ph3">`MappingType.Element`</ph>, the column value will produce the following XML:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the same column is mapped to <ph id="ph1">`MappingType.Attribute`</ph>, the following XML is produced:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataColumn.%23ctor%2A&gt;</ph> constructor that contains the <ph id="ph2">`type`</ph> argument to specificy how the <ph id="ph3">&lt;xref:System.Data.DataColumn&gt;</ph> is mapped when its <ph id="ph4">&lt;xref:System.Data.DataSet&gt;</ph> is transformed to an XML document.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataColumn.ColumnMapping%2A&gt;</ph> property corresponds to the constructor argument <ph id="ph2">`type`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.MappingType"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the column in the <ph id="ph1">&lt;xref href="System.Data.DataColumnCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> is created, it has no <ph id="ph2">&lt;xref:System.Data.DataColumn.ColumnName%2A&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when the <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> is added to a <ph id="ph2">&lt;xref:System.Data.DataColumnCollection&gt;</ph> for a <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph> object, it is given a default name ("Column1", "Column2", and so on).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Data.DataColumn.Caption%2A&gt;</ph> value is set to the <ph id="ph2">&lt;xref:System.Data.DataColumn.ColumnName%2A&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The name of the column.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The property is set to <ph id="ph1">`null`</ph> or an empty string and the column belongs to a collection.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A column with the same name already exists in the collection.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The name comparison is not case sensitive.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Gets or sets the type of data stored in the column.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.Data.DataColumn.DataType%2A&gt;</ph> value is very important to guaranteeing the correct creation and updating of data in a data source.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataColumn.DataType%2A&gt;</ph> property supports the following base .NET Framework data types:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>as well as the following array type:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception is generated when changing this property after the column has begun storing data.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> is set to <ph id="ph2">`true`</ph> before setting the <ph id="ph3">&lt;xref:System.Data.DataColumn.DataType%2A&gt;</ph> property, and you try to set the type to anything except an integer type, an exception is generated.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>A column of data type <ph id="ph1">`Byte[]`</ph> requires special treatment in certain cases since, unlike the base .NET Framework data types, it is a reference data type.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a column of data type <ph id="ph1">`Byte[]`</ph> is used as a <ph id="ph2">&lt;xref:System.Data.DataTable.PrimaryKey%2A&gt;</ph>, or as a <ph id="ph3">&lt;xref:System.Data.DataView.Sort%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> key for a <ph id="ph5">&lt;xref:System.Data.DataView&gt;</ph>, any change to the column value must involve assigning the <ph id="ph6">`Byte[]`</ph> column value to a separately instantiated <ph id="ph7">`Byte[]`</ph> object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>This assignment is required to trigger the update of the internal indexes used by sorting, filtering, and primary key operations.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is illustrated by the following example:</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although it is possible to define a column as data type other than the base .NET Framework data types and <ph id="ph1">`Byte[]`</ph>, such a column will be treated as a user-defined type, subject to the following usage restrictions.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For more information on user-defined types, see <bpt id="p1">[</bpt>Creating and Using User-Defined Types<ept id="p1">](http://msdn.microsoft.com/en-us/ec0266d2-7e5b-47e4-938a-85ac9d04fa40)</ept>.)</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The column cannot be part of a <ph id="ph1">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph> expression.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the column is used as a <ph id="ph1">&lt;xref:System.Data.DataTable.PrimaryKey%2A&gt;</ph>, or as a <ph id="ph2">&lt;xref:System.Data.DataView.Sort%2A&gt;</ph> or for a <ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph>, it must be treated as an immutable field; the column data must not be changed once it has been added to the table.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its <ph id="ph1">&lt;xref:System.Data.DataColumn.ColumnMapping%2A&gt;</ph> can be only set to <ph id="ph2">`MappingType.Element`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The class that implements the column’s data type must be must be marked with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph>, and if necessary implement the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Support for change tracking is limited.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>To utilize the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> class’s change tracking mechanism, the class that implements the column’s data type must either implement the <ph id="ph2">&lt;xref:System.ComponentModel.IChangeTracking&gt;</ph> interface, or take over the responsibility for informing the <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph> when the column value has been modified, either by calling <ph id="ph4">&lt;xref:System.Data.DataRow.SetModified%2A&gt;</ph> on the row or by assigning the column value object to a separately instantiated column value object.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object that represents the column data type.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The column already has data stored.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">`DateTimeMode`</ph> for the column.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataColumn.DateTimeMode%2A&gt;</ph> cannot be modified after rows are added to a <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph>, except for modifying from <ph id="ph3">&lt;xref:System.Data.DataSetDateTime.Unspecified&gt;</ph> and <ph id="ph4">&lt;xref:System.Data.DataSetDateTime.UnspecifiedLocal&gt;</ph> or vice-versa.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>The modification from <ph id="ph1">`UnspecifiedLocal`</ph> to <ph id="ph2">`Unspecified`</ph> and vice-versa is allowed as the difference between these two options is only during serialization and does not affect the storage.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.DataSetDateTime"&gt;&lt;/xref&gt;</ph> for the specified column.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Gets or sets the default value for the column when you are creating new rows.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>A default value is the value that is automatically assigned to the column when a <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> is created (for example, the date and time when the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> was created.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> is set to true, there can be no default value.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create a new row using the <ph id="ph1">&lt;xref:System.Data.DataRow.ItemArray%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> class and passing the method an array of values.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a potential problem for a column with a default value because its value is generated automatically.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use the <ph id="ph1">&lt;xref:System.Data.DataRow.ItemArray%2A&gt;</ph> property with such a column, place <ph id="ph2">`null`</ph> in the column's position in the array.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Data.DataRow.ItemArray%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>A value appropriate to the column's <ph id="ph1">&lt;xref href="System.Data.DataColumn.DataType"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>When you are adding a row, the default value is not an instance of the column's data type.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Gets or sets the expression used to filter rows, calculate the values in a column, or create an aggregate column.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>One use of the <ph id="ph1">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property is to create calculated columns.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to calculate a tax value, the unit price is multiplied by a tax rate of a specific region.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because tax rates vary from region to region, it would be impossible to put a single tax rate in a column; instead, the value is calculated using the <ph id="ph1">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property, as shown in the Visual Basic code in the following section:</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>DataSet1.Tables("Products").Columns("tax").Expression = "UnitPrice * 0.086"</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>A second use is to create an aggregate column.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similar to a calculated value, an aggregate performs an operation based on the complete set of rows in the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>A simple example is to count the number of rows returned in the set.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the method you would use to count the number of transactions completed by a particular salesperson, as shown in this Visual Basic code:</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Expression Syntax</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create an expression, use the <ph id="ph1">&lt;xref:System.Data.DataColumn.ColumnName%2A&gt;</ph> property to refer to columns.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Data.DataColumn.ColumnName%2A&gt;</ph> for one column is "UnitPrice", and another "Quantity", the expression would be as follows:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>"UnitPrice * Quantity"</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a column is used in an expression, then the expression is said to have a dependency on that column.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dependent column is renamed or removed, no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception will be thrown when the now-broken expression column is accessed.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create an expression for a filter, enclose strings with single quotation marks:</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>"LastName = 'Jones'"</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a column name contains any non-alphanumeric characters or starts with a digit or matches (case-insensitively) any of the following reserved words, it requires special handling, as described in the following paragraphs.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>And</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Between</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Child</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>False</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>In</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Is</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Like</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Null</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parent</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>True</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a column name satisfies one of the above conditions, it must be wrapped in either square brackets or the "`" (grave accent) quotes.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to use a column named "Column#" in an expression, you would write either "[Column#]":</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Total * [Column#]</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>or "<ph id="ph1">\`</ph>Column#`":</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Total * <ph id="ph1">\`</ph>Column#`</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the column name is enclosed in square brackets then any ']' and '<ph id="ph1">\\</ph>' characters (but not any other characters) in it must be escaped by prepending them with the backslash ("<ph id="ph2">\\</ph>") character.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the column name is enclosed in grave accent characters then it must not contain any grave accent characters in it.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a column named "Column[]<ph id="ph1">\\</ph>" would be written:</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Total * [Column[<ph id="ph1">\\</ph>]<ph id="ph2">\\</ph><ph id="ph3">\\</ph>]</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>or</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Total * <ph id="ph1">\`</ph>Column[]<ph id="ph2">\\</ph><ph id="ph3">`</ph></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>User-Defined Values</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>User-defined values may be used within expressions to be compared with column values.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>String values should be enclosed within single quotation marks (and each single quotation character in a string value has to be escaped by prepending it with another single quotation character).</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Date values should be enclosed within pound signs (#) or single quotes (') based on the data provider.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Decimals and scientific notation are permissible for numeric values.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>"FirstName = 'John'"</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>"Price &lt;= 50.00"</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>"Birthdate &lt; #1/31/82#"</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>For columns that contain enumeration values, cast the value to an integer data type.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>"EnumColumn = 5"</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parsing Literal Expressions</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>All literal expressions must be expressed in the invariant culture locale.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`DataSet`</ph> parses and converts literal expressions, it always uses the invariant culture, not the current culture.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>String literals are identified when there are single quotes surrounding the value.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>'John'</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Boolean`</ph> literals are true and false; they are not quoted in expressions.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Integer`</ph> literals [+-]?[0-9]+ are treated as <ph id="ph2">`System.Int32`</ph>, <ph id="ph3">`System.Int64`</ph> or <ph id="ph4">`System.Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`System.Double`</ph> can lose precision depending on how large the number is.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the number in the literal is 2147483650, <ph id="ph1">`DataSet`</ph> will first attempt to parse the number as an <ph id="ph2">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will not succeed because the number is too large.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case <ph id="ph1">`DataSet`</ph> will parse the number as an <ph id="ph2">`Int64`</ph>, which will succeed.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the literal was a number larger than the maximum value of an Int64, <ph id="ph1">`DataSet`</ph> will parse the literal using <ph id="ph2">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>Real literals using scientific notation, such as 4.42372E-30, are parsed using <ph id="ph1">`System.Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Real literals without scientific notation, but with a decimal point, are treated as <ph id="ph1">`System.Decimal`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the number exceeds the maximum or minimum values supported by <ph id="ph1">`System.Decimal`</ph>, then it is parsed as a <ph id="ph2">`System.Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>142526.144524 will be converted to a <ph id="ph1">`Decimal`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>345262.78036719560925667 will be treated as a <ph id="ph1">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Concatenation is allowed using Boolean AND, OR, and NOT operators.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use parentheses to group clauses and force precedence.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>The AND operator has precedence over other operators.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>(LastName = 'Smith' OR LastName = 'Jones') AND FirstName = 'John'</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create comparison expressions, the following operators are allowed:</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>IN</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>LIKE</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following arithmetic operators are also supported in expressions:</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\+</ph> (addition)</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\-</ph> (subtraction)</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\*</ph> (multiplication)</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>/ (division)</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>% (modulus)</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>String Operators</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>To concatenate a string, use the + character.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.Data.DataSet.CaseSensitive%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> class determines whether string comparisons are case-sensitive.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can override that value with the <ph id="ph1">&lt;xref:System.Data.DataTable.CaseSensitive%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard Characters</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the * and % can be used interchangeably for wildcard characters in a LIKE comparison.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the string in a LIKE clause contains a * or %, those characters should be enclosed in brackets ([]).</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a bracket is in the clause, each bracket character should be enclosed in brackets (for example [[] or []]).</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>A wildcard is allowed at the start and end of a pattern, or at the end of a pattern, or at the start of a pattern.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>"ItemName LIKE '*product<ph id="ph1">\*</ph>'"</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>"ItemName LIKE '*product'"</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>"ItemName LIKE 'product*'"</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard characters are not allowed in the middle of a string.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, 'te*xt' is not allowed.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parent/Child Relation Referencing</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>A parent table may be referenced in an expression by prepending the column name with <ph id="ph1">`Parent`</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">`Parent.Price`</ph> references the parent table's column named <ph id="ph2">`Price`</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a child has more than one parent row, use Parent(RelationName).ColumnName.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the Parent(RelationName).Price references the parent table’s column named Price via the relation.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>A column in a child table may be referenced in an expression by prepending the column name with <ph id="ph1">`Child`</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, because child relationships may return multiple rows, you must include the reference to the child column in an aggregate function.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`Sum(Child.Price)`</ph> would return the sum of the column named <ph id="ph2">`Price`</ph> in the child table.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a table has more than one child, the syntax is: <ph id="ph1">`Child(RelationName)`</ph>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a table has two child tables named <ph id="ph1">`Customers`</ph> and <ph id="ph2">`Orders`</ph>, and the <ph id="ph3">&lt;xref:System.Data.DataRelation&gt;</ph> object is named <ph id="ph4">`Customers2Orders`</ph>, the reference would be as follows:</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avg(Child(Customers2Orders).Quantity)</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>Aggregates</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following aggregate types are supported:</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sum (Sum)</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avg (Average)</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>Min (Minimum)</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>Max (Maximum)</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Count (Count)</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>StDev (Statistical standard deviation)</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>Var (Statistical variance).</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>Aggregates are ordinarily performed along relationships.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create an aggregate expression by using one of the functions listed earlier and a child table column as detailed in Parent/Child Relation Referencing that was discussed earlier.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avg(Child.Price)</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avg(Child(Orders2Details).Price)</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>An aggregate can also be performed on a single table.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to create a summary of figures in a column named "Price":</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sum(Price)</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use a single table to create an aggregate, there would be no group-by functionality.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, all rows would display the same value in the column.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a table has no rows, the aggregate functions will return <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data types can always be determined by examining the <ph id="ph1">&lt;xref:System.Data.DataColumn.DataType%2A&gt;</ph> property of a column.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also convert data types using the Convert function, shown in the following section.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>An aggregate can only be applied to a single column and no other expressions can be used inside the aggregate.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>Functions</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following functions are also supported:</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>Converts particular expression to a specified .NET Framework Type.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>Convert(<ph id="ph1">`expression`</ph>, <ph id="ph2">`type`</ph>)</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`expression`</ph> -- The expression to convert.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`type`</ph> -- The .NET Framework type to which the value will be converted.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example: myDataColumn.Expression="Convert(total, 'System.Int32')"</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>All conversions are valid with the following exceptions: <ph id="ph1">`Boolean`</ph> can be coerced to and from <ph id="ph2">`Byte`</ph>, <ph id="ph3">`SByte`</ph>, <ph id="ph4">`Int16`</ph>, <ph id="ph5">`Int32`</ph>, <ph id="ph6">`Int64`</ph>, <ph id="ph7">`UInt16`</ph>, <ph id="ph8">`UInt32`</ph>, <ph id="ph9">`UInt64`</ph>, <ph id="ph10">`String`</ph> and itself only.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Char`</ph> can be coerced to and from <ph id="ph2">`Int32`</ph>, <ph id="ph3">`UInt32`</ph>, <ph id="ph4">`String`</ph>, and itself only.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`DateTime`</ph> can be coerced to and from <ph id="ph2">`String`</ph> and itself only.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`TimeSpan`</ph> can be coerced to and from <ph id="ph2">`String`</ph> and itself only.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>Gets the length of a string</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>LEN(<ph id="ph1">`expression`</ph>)</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`expression`</ph> -- The string to be evaluated.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example: myDataColumn.Expression="Len(ItemName)"</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>Checks an expression and either returns the checked expression or a replacement value.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>ISNULL(<ph id="ph1">`expression`</ph>, <ph id="ph2">`replacementvalue`</ph>)</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`expression`</ph> -- The expression to check.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`replacementvalue`</ph> -- If expression is <ph id="ph2">`null`</ph>, <ph id="ph3">`replacementvalue`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example: myDataColumn.Expression="IsNull(price, -1)"</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>Gets one of two values depending on the result of a logical expression.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>IIF(<ph id="ph1">`expr`</ph>, <ph id="ph2">`truepart`</ph>, <ph id="ph3">`falsepart`</ph>)</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`expr`</ph> -- The expression to evaluate.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`truepart`</ph> -- The value to return if the expression is true.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`falsepart`</ph> -- The value to return if the expression is false.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example: myDataColumn.Expression = "IIF(total&gt;1000, 'expensive', 'dear')</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>Removes all leading and trailing blank characters like \r, \n, \t, ' '</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>TRIM(<ph id="ph1">`expression`</ph>)</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`expression`</ph> -- The expression to trim.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>Gets a sub-string of a specified length, starting at a specified point in the string.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>SUBSTRING(<ph id="ph1">`expression`</ph>, <ph id="ph2">`start`</ph>, <ph id="ph3">`length`</ph>)</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`expression`</ph> -- The source string for the substring.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`start`</ph> -- Integer that specifies where the substring starts.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`length`</ph> -- Integer that specifies the length of the substring.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example: myDataColumn.Expression = "SUBSTRING(phone, 7, 8)"</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can reset the <ph id="ph1">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property by assigning it a null value or empty string.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a default value is set on the expression column, all previously filled rows are assigned the default value after the <ph id="ph1">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property is reset.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>An expression to calculate the value of a column, or create an aggregate column.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The return type of an expression is determined by the <ph id="ph1">&lt;xref href="System.Data.DataColumn.DataType"&gt;&lt;/xref&gt;</ph> of the column.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.DataColumn.AutoIncrement"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Data.DataColumn.Unique"&gt;&lt;/xref&gt;</ph> property is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>When you are using the CONVERT function, the expression evaluates to a string, but the string does not contain a representation that can be converted to the type parameter.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>When you are using the CONVERT function, the requested cast is not possible.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>See the Conversion function in the following section for detailed information about possible casts.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>When you use the SUBSTRING function, the start argument is out of range.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>-Or-</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>When you use the SUBSTRING function, the length argument is out of range.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>When you use the LEN function or the TRIM function, the expression does not evaluate to a string.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>This includes expressions that evaluate to <ph id="ph1">&lt;xref href="System.Char"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Gets the collection of custom user information associated with a <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataColumn.ExtendedProperties%2A&gt;</ph> property lets you store custom information with the object.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you may store a time when the data should be refreshed.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extended properties must be of type <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties that are not of type <ph id="ph1">&lt;xref:System.String&gt;</ph> are not persisted when the <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> is written as XML.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.PropertyCollection"&gt;&lt;/xref&gt;</ph> of custom information.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum length of a text column.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataColumn.MaxLength%2A&gt;</ph> property is ignored for non-text columns.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception is raised if you assign <ph id="ph2">&lt;xref:System.Data.DataColumn.MaxLength%2A&gt;</ph> to a non-string column.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The maximum length of the column in characters.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>If the column has no maximum length, the value is –1 (default).</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Gets or sets the namespace of the <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataColumn.Namespace%2A&gt;</ph> property is used when reading and writing an XML document into a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> in the <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> using the <ph id="ph4">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Data.DataSet.WriteXml%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</ph>, or <ph id="ph7">&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>The namespace of an XML document is used to scope XML attributes and elements when read into a <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> contains a schema read from a document that has the namespace "myCompany," and an attempt is made to read data (with the <ph id="ph2">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;</ph> method) from a document that has the namespace "theirCompany."</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any data that does not correspond to the existing schema will be ignored.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The namespace of the <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The namespace already has data.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Parameter reference.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Gets the (zero-based) position of the column in the <ph id="ph1">&lt;xref href="System.Data.DataColumnCollection"&gt;&lt;/xref&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The position of the column.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Gets -1 if the column is not a member of a collection.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Gets or sets an XML prefix that aliases the namespace of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.Prefix%2A&gt;</ph> is used throughout an XML document to identify elements which belong to the namespace for a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> object (as set by the <ph id="ph3">&lt;xref:System.Data.DataSet.Namespace%2A&gt;</ph> property).</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The XML prefix for the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Parameter reference.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the column allows for changes as soon as a row has been added to the table.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the column is read only; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The property is set to <ph id="ph1">`false`</ph> on a computed column.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Changes the ordinal or position of the <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> to the specified ordinal or position.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes the ordinal or position of the <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> to the specified ordinal or position.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>If ordinal is less than 0 or greater than the existing number of columns – 1 (greater than the ordinal of the last column) then an Invalid <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you change a column’s ordinal, the column is moved to the new position in the collection of columns.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any columns between the previous and new ordinal will be renumbered, to adjust for a column's new ordinal.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The specified ordinal.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to which the column belongs to.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> that the <ph id="ph2">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> belongs to.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Data.DataColumn.Expression"&gt;&lt;/xref&gt;</ph> of the column, if one exists.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.DataColumn.Expression"&gt;&lt;/xref&gt;</ph> value, if the property is set; otherwise, the <ph id="ph2">&lt;xref href="System.Data.DataColumn.ColumnName"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the values in each row of the column must be unique.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>As soon as this property is changed from false to true, a unique constraint will be created on this column to make sure that values are unique.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the value must be unique; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The column is a calculated column.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>