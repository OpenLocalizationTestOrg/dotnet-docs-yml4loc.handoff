<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5730b82c93d8a2635ff39c7ca3b1e20173a3d354</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Linq.Enumerable.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0c18b2f8b3020939f418a77a3d4cd0b66eba198</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cff3318ce2bbeadfa64e396b894e56b8f7c9951d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a set of <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) methods for querying objects that implement <ph id="ph3">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The methods in this class provide an implementation of the standard query operators for querying data sources that implement <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The standard query operators are general purpose methods that follow the <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The majority of the methods in this class are defined as extension methods that extend <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means they can be called like an instance method on any object that implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is known as deferred execution.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Applies an accumulator function over a sequence.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`seed`</ph> parameter is used as the initial aggregate value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The final result of <ph id="ph1">`func`</ph> is passed to <ph id="ph2">`resultSelector`</ph> to obtain the final result of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to aggregate over.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The initial accumulator value.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An accumulator function to be invoked on each element.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A function to transform the final accumulator value into the result value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type of the accumulator value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The type of the resulting value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The transformed final accumulator value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;func&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Applies an accumulator function over a sequence.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The specified seed value is used as the initial accumulator value.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`seed`</ph> parameter is used as the initial aggregate value.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> returns the final result of <ph id="ph2">`func`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to aggregate over.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The initial accumulator value.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An accumulator function to be invoked on each element.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The type of the accumulator value.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The final accumulator value.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;func&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Applies an accumulator function over a sequence.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph> except the first one.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first element of <ph id="ph1">`source`</ph> is used as the initial aggregate value.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> returns the final result of <ph id="ph2">`func`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>methodisn't suitable for all casesbecause it uses the first element of <ph id="ph2">`source`</ph> as the initial aggregate value.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should choose another overload if the return value should include only the elements of <ph id="ph1">`source`</ph> that meet a certain condition.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, this overload isn't reliableif you want to calculate the sum of the even numbers in <ph id="ph1">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result will be incorrect if the first element is odd instead of even.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to aggregate over.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An accumulator function to be invoked on each element.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The final accumulator value.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;func&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Determines whether all elements of a sequence satisfy a condition.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not return all the elements of a collection.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, it determines whether all the elements of a collection satisfy a condition.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into All()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains the elements to apply the predicate to.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A function to test each element for a condition.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Determines whether a sequence contains any elements.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not return any one element of a collection.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, it determines whether the collection contains any elements.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to check for emptiness.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the source sequence contains any elements; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Determines whether any element of a sequence satisfies a condition.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not return any one element of a collection.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, it determines whether any elements of a collection satisfy a condition.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements to apply the predicate to.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A function to test each element for a condition.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if any elements in the source sequence pass the test in the specified predicate; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Returns the input typed as <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method has no effect other than to change the compile-time type of <ph id="ph2">`source`</ph> from a type that implements <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> to <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> itself.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> can be used to choose between query implementations when a sequence implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> but also has a different set of public query methods available.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, given a generic class <ph id="ph1">`Table`</ph> that implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and has its own methods such as <ph id="ph3">`Where`</ph>, <ph id="ph4">`Select`</ph>, and <ph id="ph5">`SelectMany`</ph>, a call to <ph id="ph6">`Where`</ph> would invoke the public <ph id="ph7">`Where`</ph> method of <ph id="ph8">`Table`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`Table`</ph> type that represents a database table could have a <ph id="ph2">`Where`</ph> method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>If remote execution is not desired, for example because the predicate invokes a local method, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> method can be used to hide the custom methods and instead make the standard query operators available.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The sequence to type as <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The input sequence typed as <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values, or <ph id="ph1">`null`</ph> if the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values, or <ph id="ph1">`null`</ph> if the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values, or <ph id="ph1">`null`</ph> if the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the sum of the elements is too large to represent as a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values, or <ph id="ph1">`null`</ph> if the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the sum of the elements is too large to represent as a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values, or <ph id="ph1">`null`</ph> if the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A sequence of values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values, or <ph id="ph1">`null`</ph> if the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A sequence of values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A sequence of values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values, or <ph id="ph1">`null`</ph> if the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>A sequence of values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values, or <ph id="ph1">`null`</ph> if the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A sequence of values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values, or <ph id="ph1">`null`</ph> if the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A sequence of values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values, or <ph id="ph1">`null`</ph> if the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A sequence of values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The type of the elements of source.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>A sequence of values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A sequence of values to calculate the average of.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A sequence of values that are used to calculate an average.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The average of the sequence of values.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Casts the elements of an <ph id="ph1">&lt;xref href="System.Collections.IEnumerable"&gt;&lt;/xref&gt;</ph> to the specified type.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> does not implement <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, but by calling <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> on the <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> object, the standard query operators can then be used to query the sequence.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an element cannot be cast to type <ph id="ph1">`TResult`</ph>, this method will throw an exception.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain only those elements that can be cast to type <ph id="ph1">`TResult`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> method instead of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a query expression, an explicitly typed iteration variable translates to an invocation of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>This example shows the syntax for an explicitly typed range variable.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.IEnumerable"&gt;&lt;/xref&gt;</ph> that contains the elements to be cast to type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TResult</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The type to cast the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept> to.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains each element of the source sequence cast to the specified type.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>An element in the sequence cannot be cast to type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TResult</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Concatenates two sequences.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method differs from the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns all the original elements in the input sequences.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method returns only unique elements.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The first sequence to concatenate.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The sequence to concatenate to the first sequence.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The type of the elements of the input sequences.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains the concatenated elements of the two input sequences.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Determines whether a sequence contains a specified element by using the default equality comparer.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, the <ph id="ph3">`Contains`</ph> method in that implementation is invoked to obtain the result.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, this method determines whether <ph id="ph1">`source`</ph> contains the specified element.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumeration is terminated as soon as a matching element is found.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements are compared to the specified value by using the default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>A sequence in which to locate a value.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The value to locate in the sequence.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Determines whether a sequence contains a specified element by using a specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumeration is terminated as soon as a matching element is found.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements to the specified value.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>A sequence in which to locate a value.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The value to locate in the sequence.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>An equality comparer to compare values.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in a sequence.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, this method determines the count.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>A sequence that contains elements to be counted.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The number of elements in the input sequence.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The number of elements in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept> is larger than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Returns a number that represents how many elements in the specified sequence satisfy a condition.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, this method determines the count.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>A sequence that contains elements to be tested and counted.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>A function to test each element for a condition.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The number of elements in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept> is larger than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to produce a left outer join when it is combined with the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The sequence to return the specified value for if it is empty.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The value to return if the sequence is empty.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">defaultValue</ph><ept id="p1">&lt;/code&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">source</ph><ept id="p2">&lt;/code&gt;</ept> is empty; otherwise, <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">source</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to produce a left outer join when it is combined with the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The sequence to return a default value for if it is empty.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> object that contains the default value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TSource</ph><ept id="p1">&lt;/code&gt;</ept> type if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">source</ph><ept id="p2">&lt;/code&gt;</ept> is empty; otherwise, <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">source</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Returns distinct elements from a sequence by using the default equality comparer to compare values.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>It uses the default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, to compare values.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Distinct`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example that uses <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>to define a custom comparer, see <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The sequence to remove duplicate elements from.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains distinct elements from the source sequence.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Returns distinct elements from a sequence by using a specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The sequence to remove duplicate elements from.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains distinct elements from the source sequence.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Returns the element at a specified index in a sequence.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, this method obtains the specified element.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method throws an exception if <ph id="ph1">`index`</ph> is out of range.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>To instead return a default value when the specified index is out of range, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return an element from.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The zero-based index of the element to retrieve.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The element at the specified position in the source sequence.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than 0 or greater than or equal to the number of elements in <ph id="ph2">&lt;code&gt;source&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Returns the element at a specified index in a sequence or a default value if the index is out of range.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, this method obtains the specified element.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return an element from.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The zero-based index of the element to retrieve.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`default`</ph>(<bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TSource</ph><ept id="p1">&lt;/code&gt;</ept>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Returns an empty <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that has the specified type argument.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> method caches an empty sequence of type <ph id="ph2">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the object it returns is enumerated, it yields no elements.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also be used to generate a neutral element for methods such as <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the Example section for an example of this use of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The type to assign to the type parameter of the returned generic <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>An empty <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose type argument is <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TResult</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Produces the set difference of two sequences by using the default equality comparer to compare values.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>The set difference of two sets is defined as the members of the first set that do not appear in the second set.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns those elements in <ph id="ph1">`first`</ph> that do not appear in <ph id="ph2">`second`</ph>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not also return those elements in <ph id="ph1">`second`</ph> that do not appear in <ph id="ph2">`first`</ph>.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">second</ph><ept id="p1">&lt;/code&gt;</ept> will be returned.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The type of the elements of the input sequences.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>A sequence that contains the set difference of the elements of two sequences.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Produces the set difference of two sequences by using the specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">second</ph><ept id="p1">&lt;/code&gt;</ept> will be returned.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The type of the elements of the input sequences.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>A sequence that contains the set difference of the elements of two sequences.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Returns the first element of a sequence.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id="ph2">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>To instead return a default value when the source sequence is empty, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return the first element of.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The first element in the specified sequence.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The source sequence is empty.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Returns the first element in a sequence that satisfies a specified condition.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id="ph2">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>To instead return a default value when no matching element is found, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return an element from.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>A function to test each element for a condition.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The first element in the sequence that passes the test in the specified predicate function.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>No element satisfies the condition in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">predicate</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The source sequence is empty.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return an element from.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>A function to test each element for a condition.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`default`</ph>(<bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TSource</ph><ept id="p1">&lt;/code&gt;</ept>) if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">source</ph><ept id="p2">&lt;/code&gt;</ept> is empty or if no element passes the test specified by <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">predicate</ph><ept id="p3">&lt;/code&gt;</ept>; otherwise, the first element in <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">source</ph><ept id="p4">&lt;/code&gt;</ept> that passes the test specified by <bpt id="p5">&lt;code&gt;</bpt><ph id="ph6">predicate</ph><ept id="p5">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Returns the first element of a sequence, or a default value if the sequence contains no elements.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return the first element of.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`default`</ph>(<bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TSource</ph><ept id="p1">&lt;/code&gt;</ept>) if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">source</ph><ept id="p2">&lt;/code&gt;</ept> is empty; otherwise, the first element in <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">source</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>The elements of each group are projected by using a specified function.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements to group.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>A function to extract the key for each element.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>A function to create a result value from each group.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The type of the elements in each <ph id="ph1">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>The type of the result value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resultSelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>A collection of elements of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TResult</ph><ept id="p1">&lt;/code&gt;</ept> where each element represents a projection over a group and its key.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements to group.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>A function to extract the key for each element.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>A function to create a result value from each group.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys with.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The type of the elements in each <ph id="ph1">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The type of the result value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resultSelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>A collection of elements of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TResult</ph><ept id="p1">&lt;/code&gt;</ept> where each element represents a projection over a group and its key.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id="ph1">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements to group.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>A function to extract the key for each element.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>A function to map each source element to an element in the <ph id="ph1">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>The type of the elements in the <ph id="ph1">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">IEnumerable(Of IGrouping(Of TKey, TElement))</ph><ept id="p2">&lt;/code&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph4">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph> object contains a collection of objects of type <bpt id="p3">&lt;code&gt;</bpt><ph id="ph5">TElement</ph><ept id="p3">&lt;/code&gt;</ept> and a key.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Groups the elements of a sequence according to a key selector function.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The keys are compared by using a comparer and each group's elements are projected by using a specified function.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id="ph1">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>If two keys are considered equal according to <ph id="ph1">`comparer`</ph>, the first key is chosen as the key for that grouping.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements to group.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>A function to extract the key for each element.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>The type of the elements in the <ph id="ph1">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">IEnumerable(Of IGrouping(Of TKey, TElement))</ph><ept id="p2">&lt;/code&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph4">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph> object contains a collection of objects of type <bpt id="p3">&lt;code&gt;</bpt><ph id="ph5">TElement</ph><ept id="p3">&lt;/code&gt;</ept> and a key.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements to group.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>A function to extract the key for each element.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>A function to create a result value from each group.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>The type of the result value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resultSelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>A collection of elements of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TResult</ph><ept id="p1">&lt;/code&gt;</ept> where each element represents a projection over a group and its key.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>The keys are compared by using a specified comparer.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements to group.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>A function to extract the key for each element.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>A function to create a result value from each group.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys with.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>The type of the result value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resultSelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>A collection of elements of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TResult</ph><ept id="p1">&lt;/code&gt;</ept> where each element represents a projection over a group and its key.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Groups the elements of a sequence according to a specified key selector function.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in a grouping are yielded in the order they appear in <ph id="ph1">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements to group.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>A function to extract the key for each element.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">IEnumerable(Of IGrouping(Of TKey, TSource))</ph><ept id="p2">&lt;/code&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph4">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph> object contains a sequence of objects and a key.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in a grouping are yielded in the order they appear in <ph id="ph1">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT">
          <source>If two keys are considered equal according to <ph id="ph1">`comparer`</ph>, the first key is chosen as the key for that grouping.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group By Into`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements to group.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>A function to extract the key for each element.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">IEnumerable(Of IGrouping(Of TKey, TSource))</ph><ept id="p2">&lt;/code&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph4">&lt;xref href="System.Linq.IGrouping`2"&gt;&lt;/xref&gt;</ph> object contains a collection of objects and a key.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Correlates the elements of two sequences based on key equality and groups the results.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>A specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id="ph2">`outer`</ph> are paired with collections of matching elements from <ph id="ph3">`inner`</ph>.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id="ph2">`outer`</ph>.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no correlated elements in <ph id="ph1">`inner`</ph> for a given element of <ph id="ph2">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`resultSelector`</ph> function is called only one time for each <ph id="ph2">`outer`</ph> element together with a collection of all the <ph id="ph3">`inner`</ph> elements that match the <ph id="ph4">`outer`</ph> element.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>This differs from the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method in which the result selector function is invoked on pairs that contain one element from <ph id="ph2">`outer`</ph> and one element from <ph id="ph3">`inner`</ph>.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`GroupJoin`</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each element of <ph id="ph3">`outer`</ph>, the order of the matching elements from <ph id="ph4">`inner`</ph>.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this method does implement a superset of inner joins and left outer joins.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both of these operations can be written in terms of a grouped join.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>The first sequence to join.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>The sequence to join to the first sequence.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>A function to extract the join key from each element of the first sequence.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>A function to extract the join key from each element of the second sequence.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to hash and compare keys.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>The type of the elements of the first sequence.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>The type of the elements of the second sequence.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>The type of the keys returned by the key selector functions.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>The type of the result elements.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains elements of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TResult</ph><ept id="p1">&lt;/code&gt;</ept> that are obtained by performing a grouped join on two sequences.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id="ph4">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id="ph5">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id="ph6">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Correlates the elements of two sequences based on equality of keys and groups the results.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>The default equality comparer is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id="ph2">`outer`</ph> are paired with collections of matching elements from <ph id="ph3">`inner`</ph>.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id="ph2">`outer`</ph>.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no correlated elements in <ph id="ph1">`inner`</ph> for a given element of <ph id="ph2">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`resultSelector`</ph> function is called only one time for each <ph id="ph2">`outer`</ph> element together with a collection of all the <ph id="ph3">`inner`</ph> elements that match the <ph id="ph4">`outer`</ph> element.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT">
          <source>This differs from the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method, in which the result selector function is invoked on pairs that contain one element from <ph id="ph2">`outer`</ph> and one element from <ph id="ph3">`inner`</ph>.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`GroupJoin`</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each element of <ph id="ph3">`outer`</ph>, the order of the matching elements from <ph id="ph4">`inner`</ph>.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this method does implement a superset of inner joins and left outer joins.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both of these operations can be written in terms of a grouped join.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, a <ph id="ph1">`join … into`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Group Join`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The first sequence to join.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>The sequence to join to the first sequence.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>A function to extract the join key from each element of the first sequence.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>A function to extract the join key from each element of the second sequence.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>The type of the elements of the first sequence.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>The type of the elements of the second sequence.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>The type of the keys returned by the key selector functions.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>The type of the result elements.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains elements of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TResult</ph><ept id="p1">&lt;/code&gt;</ept> that are obtained by performing a grouped join on two sequences.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id="ph4">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id="ph5">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id="ph6">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Produces the set intersection of two sequences by using the specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT">
          <source>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id="ph2">`first`</ph>.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">second</ph><ept id="p1">&lt;/code&gt;</ept> will be returned.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>The type of the elements of the input sequences.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>A sequence that contains the elements that form the set intersection of two sequences.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Produces the set intersection of two sequences by using the default equality comparer to compare values.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT">
          <source>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id="ph2">`first`</ph>.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">second</ph><ept id="p1">&lt;/code&gt;</ept> will be returned.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>The type of the elements of the input sequences.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>A sequence that contains the elements that form the set intersection of two sequences.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Correlates the elements of two sequences based on matching keys.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>The default equality comparer is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT">
          <source>A join refers to the operation of correlating the elements of two sources of information based on a common key.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT">
          <source>This differs from the use of <ph id="ph1">`SelectMany`</ph>, which requires more than one method call to perform the same operation.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id="ph3">`inner`</ph>.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, a <ph id="ph1">`join`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Join`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT">
          <source>In relational database terms, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT">
          <source>'Inner' means that only elements that have a match in the other sequence are included in the results.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT">
          <source>An 'equijoin' is a join in which the keys are compared for equality.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT">
          <source>A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>The first sequence to join.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The sequence to join to the first sequence.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>A function to extract the join key from each element of the first sequence.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>A function to extract the join key from each element of the second sequence.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>A function to create a result element from two matching elements.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>The type of the elements of the first sequence.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>The type of the elements of the second sequence.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>The type of the keys returned by the key selector functions.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>The type of the result elements.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that has elements of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TResult</ph><ept id="p1">&lt;/code&gt;</ept> that are obtained by performing an inner join on two sequences.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id="ph4">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id="ph5">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id="ph6">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Correlates the elements of two sequences based on matching keys.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>A specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT">
          <source>A join refers to the operation of correlating the elements of two sources of information based on a common key.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT">
          <source>This differs from the use of <ph id="ph1">`SelectMany`</ph>, which requires more than one method call to perform the same operation.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id="ph3">`inner`</ph>.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT">
          <source>In relational database terms, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT">
          <source>'Inner' means that only elements that have a match in the other sequence are included in the results.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT">
          <source>An 'equijoin' is a join in which the keys are compared for equality.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT">
          <source>A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>The first sequence to join.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>The sequence to join to the first sequence.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>A function to extract the join key from each element of the first sequence.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>A function to extract the join key from each element of the second sequence.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>A function to create a result element from two matching elements.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to hash and compare keys.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>The type of the elements of the first sequence.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>The type of the elements of the second sequence.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>The type of the keys returned by the key selector functions.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>The type of the result elements.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that has elements of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TResult</ph><ept id="p1">&lt;/code&gt;</ept> that are obtained by performing an inner join on two sequences.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id="ph4">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id="ph5">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id="ph6">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Returns the last element of a sequence.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id="ph2">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT">
          <source>To instead return a default value when the source sequence is empty, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return the last element of.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>The value at the last position in the source sequence.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>The source sequence is empty.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Returns the last element of a sequence that satisfies a specified condition.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id="ph2">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT">
          <source>To instead return a default value when no matching element is found, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return an element from.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>A function to test each element for a condition.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>The last element in the sequence that passes the test in the specified predicate function.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>No element satisfies the condition in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">predicate</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>The source sequence is empty.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Returns the last element of a sequence, or a default value if the sequence contains no elements.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return the last element of.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`default`</ph>(<bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TSource</ph><ept id="p1">&lt;/code&gt;</ept>) if the source sequence is empty; otherwise, the last element in the <ph id="ph3">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return an element from.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>A function to test each element for a condition.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`default`</ph>(<bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TSource</ph><ept id="p1">&lt;/code&gt;</ept>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> that represents how many elements in a sequence satisfy a condition.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method rather than <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains the elements to be counted.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>A function to test each element for a condition.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>The number of matching elements exceeds <ph id="ph1">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> that represents the total number of elements in a sequence.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method rather than <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains the elements to be counted.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>The number of elements in the source sequence.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>The number of elements exceeds <ph id="ph1">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Single&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Single)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Int64&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Int64)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Int32&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Int32)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Decimal&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Decimal)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Double&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Double)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT">
          <source>If type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, if type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>The type of the value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">selector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>The value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Single&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Single)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>The value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Int64&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Int64)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int32)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>The value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Int32&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Int32)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>The value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Double&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Double)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>Returns the maximum value in a generic sequence.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT">
          <source>If type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method uses that implementation to compare values.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, if type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>, this method returns <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>The maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the maximum value of.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>The value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Decimal&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Decimal)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Int64&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Int64)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Int32&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Int32)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Single&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Single)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Double&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Double)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Decimal&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Decimal)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT">
          <source>If type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, if type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>The type of the value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">selector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>The value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Single&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Single)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>The value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Int64&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Int64)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of source into a numeric type, specifically <ph id="ph2">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph3">`Nullable(Of Int32)`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>The value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Int32&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Int32)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>The value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Double&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Double)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>Returns the minimum value in a generic sequence.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT">
          <source>If type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, if type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>, this function returns <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>The minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>A sequence of values to determine the minimum value of.</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>The value of type <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">Nullable</ph><ph id="ph3">&lt;Decimal&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">Nullable(Of Decimal)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>Filters the elements of an <ph id="ph1">&lt;xref href="System.Collections.IEnumerable"&gt;&lt;/xref&gt;</ph> based on a specified type.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph> method returns only those elements in <ph id="ph2">`source`</ph> that can be cast to type <ph id="ph3">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT">
          <source>To instead receive an exception if an element cannot be cast to type <ph id="ph1">`TResult`</ph>, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> extends the type <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> cannot only be applied to collections that are based on the parameterized <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> type, but collections that are based on the non-parameterized <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> type also.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT">
          <source>By applying <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> to a collection that implements <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>, you gain the ability to query the collection by using the standard query operators.</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, specifying a type argument of <ph id="ph1">&lt;xref:System.Object&gt;</ph> to <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> would return an object of type <ph id="ph3">`IEnumerable&lt;Object&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Object)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, to which the standard query operators can be applied.</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.IEnumerable"&gt;&lt;/xref&gt;</ph> whose elements to filter.</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>The type to filter the elements of the sequence on.</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TResult</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Sorts the elements of a sequence in ascending order according to a key.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, an <ph id="ph1">`orderby`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Order By`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>A sequence of values to order.</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>A function to extract a key from an element.</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source>Sorts the elements of a sequence in ascending order by using a specified comparer.</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>A sequence of values to order.</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>A function to extract a key from an element.</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>Sorts the elements of a sequence in descending order by using a specified comparer.</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source>A sequence of values to order.</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>A function to extract a key from an element.</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are sorted in descending order according to a key.</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>Sorts the elements of a sequence in descending order according to a key.</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of this method, see <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, an <ph id="ph1">`orderby descending`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Order By Descending`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>A sequence of values to order.</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>A function to extract a key from an element.</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are sorted in descending order according to a key.</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>Generates a sequence of integral numbers within a specified range.</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve">
          <source>The value of the first integer in the sequence.</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>The number of sequential integers to generate.</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">IEnumerable</ph><ph id="ph3">&lt;Int32&gt;</ph><ph id="ph4">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">IEnumerable(Of Int32)</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph6">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that contains a range of sequential integral numbers.</source>
        </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.</source>
        </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;start&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;count&lt;/code&gt;</ph> -1 is larger than <ph id="ph3">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve">
          <source>Generates a sequence that contains one repeated value.</source>
        </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve">
          <source>The value to be repeated.</source>
        </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source>The number of times to repeat the value in the generated sequence.</source>
        </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source>The type of the value to be repeated in the result sequence.</source>
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains a repeated value.</source>
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.</source>
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>Inverts the order of the elements in a sequence.</source>
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, this sorting method does not consider the actual values themselves in determining the order.</source>
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</source>
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>A sequence of values to reverse.</source>
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>A sequence whose elements correspond to those of the input sequence in reverse order.</source>
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>Projects each element of a sequence into a new form by incorporating the element's index.</source>
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first argument to <ph id="ph1">`selector`</ph> represents the element to process.</source>
        </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second argument to <ph id="ph1">`selector`</ph> represents the zero-based index of that element in the source sequence.</source>
        </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</source>
        </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also be useful if you want to retrieve the index of one or more elements.</source>
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT">
          <source>This projection method requires the transform function, <ph id="ph1">`selector`</ph>, to produce one value for each value in the source sequence, <ph id="ph2">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</source>
        </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT">
          <source>In such a situation, it might be better for your query to return a single coalesced sequence of values.</source>
        </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT">
          <source>To achieve this, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although <ph id="ph1">`SelectMany`</ph> works similarly to <ph id="ph2">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id="ph3">`SelectMany`</ph> before it is returned.</source>
        </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>A sequence of values to invoke a transform function on.</source>
        </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
        </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source>The type of the value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">selector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the transform function on each element of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source>Projects each element of a sequence into a new form.</source>
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT">
          <source>This projection method requires the transform function, <ph id="ph1">`selector`</ph>, to produce one value for each value in the source sequence, <ph id="ph2">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</source>
        </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT">
          <source>In such a situation, it might be better for your query to return a single coalesced sequence of values.</source>
        </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT">
          <source>To achieve this, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although <ph id="ph1">`SelectMany`</ph> works similarly to <ph id="ph2">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id="ph3">`SelectMany`</ph> before it is returned.</source>
        </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, a <ph id="ph1">`select`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Select`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>A sequence of values to invoke a transform function on.</source>
        </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source>The type of the value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">selector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the transform function on each element of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</source>
        </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id="ph2">`source`</ph> in scope for query logic that occurs after the call to <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the Example section for a code example.</source>
        </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a bidirectional relationship between objects of type <ph id="ph1">`TSource`</ph> and objects of type <ph id="ph2">`TCollection`</ph>, that is, if an object of type <ph id="ph3">`TCollection`</ph> provides a property to retrieve the <ph id="ph4">`TSource`</ph> object that produced it, you do not need this overload of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you can use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id="ph2">`TSource`</ph> object through the <ph id="ph3">`TCollection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, each <ph id="ph1">`from`</ph> clause (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`From`</ph> clause (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) after the initial one translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>A sequence of values to project.</source>
        </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element of the intermediate sequence.</source>
        </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source>The type of the intermediate elements collected by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">collectionSelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source>The type of the elements of the resulting sequence.</source>
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the one-to-many transform function <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">collectionSelector</ph><ept id="p1">&lt;/code&gt;</ept> on each element of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">source</ph><ept id="p2">&lt;/code&gt;</ept> and then mapping each of those sequence elements and their corresponding source element to a result element.</source>
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;collectionSelector&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</source>
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source>The index of each source element is used in the intermediate projected form of that element.</source>
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id="ph2">`source`</ph> in scope for query logic that occurs after the call to <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the Example section for a code example.</source>
        </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a bidirectional relationship between objects of type <ph id="ph1">`TSource`</ph> and objects of type <ph id="ph2">`TCollection`</ph>, that is, if an object of type <ph id="ph3">`TCollection`</ph> provides a property to retrieve the <ph id="ph4">`TSource`</ph> object that produced it, you do not need this overload of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you can use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id="ph2">`TSource`</ph> object through the <ph id="ph3">`TCollection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source>A sequence of values to project.</source>
        </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
        </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element of the intermediate sequence.</source>
        </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>The type of the intermediate elements collected by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">collectionSelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>The type of the elements of the resulting sequence.</source>
        </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the one-to-many transform function <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">collectionSelector</ph><ept id="p1">&lt;/code&gt;</ept> on each element of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">source</ph><ept id="p2">&lt;/code&gt;</ept> and then mapping each of those sequence elements and their corresponding source element to a result element.</source>
        </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;collectionSelector&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> and flattens the resulting sequences into one sequence.</source>
        </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, for each element of <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> is invoked and a sequence of values is returned.</source>
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.</source>
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id="ph2">`Order`</ph>) for each customer in a database, the result is of type <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Order)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT">
          <source>If instead the query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, each <ph id="ph1">`from`</ph> clause (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`From`</ph> clause (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) after the initial one translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve">
          <source>A sequence of values to project.</source>
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>The type of the elements of the sequence returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">selector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph>, and flattens the resulting sequences into one sequence.</source>
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source>The index of each source element is used in the projected form of that element.</source>
        </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, for each element of <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> is invoked and a sequence of values is returned.</source>
        </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.</source>
        </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id="ph2">`Order`</ph>) for each customer in a database, the result is of type <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Order)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT">
          <source>If instead the query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first argument to <ph id="ph1">`selector`</ph> represents the element to process.</source>
        </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second argument to <ph id="ph1">`selector`</ph> represents the zero-based index of that element in the source sequence.</source>
        </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</source>
        </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also be useful if you want to retrieve the index of one or more elements.</source>
        </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source>A sequence of values to project.</source>
        </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
        </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>The type of the elements of the sequence returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">selector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</source>
        </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve">
          <source>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</source>
        </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for <ph id="ph2">`TSource`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
        </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to compare to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">second</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to compare to the first sequence.</source>
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>The type of the elements of the input sequences.</source>
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source>Determines whether two sequences are equal by comparing their elements by using a specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements.</source>
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to compare to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">second</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to compare to the first sequence.</source>
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to use to compare elements.</source>
        </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>The type of the elements of the input sequences.</source>
        </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two source sequences are of equal length and their corresponding elements compare equal according to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">comparer</ph><ept id="p1">&lt;/code&gt;</ept>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve">
          <source>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</source>
        </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if the input sequence contains no matching element.</source>
        </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT">
          <source>To instead return <ph id="ph1">`null`</ph> when no matching element is found, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return a single element from.</source>
        </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>A function to test an element for a condition.</source>
        </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source>The single element of the input sequence that satisfies a condition.</source>
        </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source>No element satisfies the condition in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">predicate</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>More than one element satisfies the condition in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">predicate</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source>The source sequence is empty.</source>
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</source>
        </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if the input sequence is empty.</source>
        </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT">
          <source>To instead return <ph id="ph1">`null`</ph> when the input sequence is empty, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return the single element of.</source>
        </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>The single element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>The input sequence contains more than one element.</source>
        </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve">
          <source>The input sequence is empty.</source>
        </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve">
          <source>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</source>
        </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
        </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return the single element of.</source>
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>The single element of the input sequence, or <ph id="ph1">`default`</ph>(<bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TSource</ph><ept id="p1">&lt;/code&gt;</ept>) if the sequence contains no elements.</source>
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>The input sequence contains more than one element.</source>
        </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</source>
        </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return a single element from.</source>
        </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>A function to test an element for a condition.</source>
        </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>The single element of the input sequence that satisfies the condition, or <ph id="ph1">`default`</ph>(<bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TSource</ph><ept id="p1">&lt;/code&gt;</ept>) if no such element is found.</source>
        </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve">
          <source>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</source>
        </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`source`</ph> contains fewer than <ph id="ph2">`count`</ph> elements, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`count`</ph> is less than or equal to zero, all elements of <ph id="ph2">`source`</ph> are yielded.</source>
        </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.</source>
        </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and an integer <ph id="ph2">`n`</ph>, concatenating the results of <ph id="ph3">`coll.Take(n)`</ph> and <ph id="ph4">`coll.Skip(n)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
        </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Skip`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return elements from.</source>
        </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>The number of elements to skip before returning the remaining elements.</source>
        </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains the elements that occur after the specified index in the input sequence.</source>
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method tests each element of <ph id="ph1">`source`</ph> by using <ph id="ph2">`predicate`</ph> and skips the element if the result is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the predicate function returns <ph id="ph1">`false`</ph> for an element, that element and the remaining elements in <ph id="ph2">`source`</ph> are yielded and there are no more invocations of <ph id="ph3">`predicate`</ph>.</source>
        </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`predicate`</ph> returns <ph id="ph2">`true`</ph> for all elements in the sequence, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
        </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
        </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Skip While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return elements from.</source>
        </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve">
          <source>A function to test each element for a condition.</source>
        </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">predicate</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
        </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source>The element's index is used in the logic of the predicate function.</source>
        </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and skips the element if the result is <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the predicate function returns <ph id="ph1">`false`</ph> for an element, that element and the remaining elements in <ph id="ph2">`source`</ph> are yielded and there are no more invocations of <ph id="ph3">`predicate`</ph>.</source>
        </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`predicate`</ph> returns <ph id="ph2">`true`</ph> for all elements in the sequence, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
        </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
        </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
        </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Skip While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to return elements from.</source>
        </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
        </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">predicate</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.</source>
        </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>The sum of the values in the sequence.</source>
        </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.</source>
        </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve">
          <source>The sum of the values in the sequence.</source>
        </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.</source>
        </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve">
          <source>The sum of the values in the sequence.</source>
        </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.</source>
        </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>The sum of the values in the sequence.</source>
        </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.</source>
        </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve">
          <source>The sum of the values in the sequence.</source>
        </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.</source>
        </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve">
          <source>The sum of the values in the sequence.</source>
        </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.</source>
        </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>The sum of the values in the sequence.</source>
        </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.</source>
        </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve">
          <source>The sum of the values in the sequence.</source>
        </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method returns zero if <ph id="ph2">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source>A sequence of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.</source>
        </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>The sum of the values in the sequence.</source>
        </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result doesnot include values that are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve">
          <source>A sequence of nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.</source>
        </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve">
          <source>The sum of the values in the sequence.</source>
        </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method returns zero if <ph id="ph2">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>A sequence of values that are used to calculate a sum.</source>
        </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve">
          <source>The sum of the projected values.</source>
        </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;xref href="System.Single"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>A sequence of values that are used to calculate a sum.</source>
        </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve">
          <source>The sum of the projected values.</source>
        </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve">
          <source>A sequence of values that are used to calculate a sum.</source>
        </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve">
          <source>The sum of the projected values.</source>
        </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int32)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve">
          <source>A sequence of values that are used to calculate a sum.</source>
        </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>The sum of the projected values.</source>
        </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve">
          <source>A sequence of values that are used to calculate a sum.</source>
        </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve">
          <source>The sum of the projected values.</source>
        </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result does not included values that are <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve">
          <source>A sequence of values that are used to calculate a sum.</source>
        </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve">
          <source>The sum of the projected values.</source>
        </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve">
          <source>A sequence of values that are used to calculate a sum.</source>
        </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>The sum of the projected values.</source>
        </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Int64.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve">
          <source>A sequence of values that are used to calculate a sum.</source>
        </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve">
          <source>The sum of the projected values.</source>
        </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve">
          <source>A sequence of values that are used to calculate a sum.</source>
        </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve">
          <source>The sum of the projected values.</source>
        </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
        </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve">
          <source>A sequence of values that are used to calculate a sum.</source>
        </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve">
          <source>A transform function to apply to each element.</source>
        </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve">
          <source>The sum of the projected values.</source>
        </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve">
          <source>The sum is larger than <ph id="ph1">&lt;xref href="System.Decimal.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve">
          <source>Returns a specified number of contiguous elements from the start of a sequence.</source>
        </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> enumerates <ph id="ph2">`source`</ph> and yields elements until <ph id="ph3">`count`</ph> elements have been yielded or <ph id="ph4">`source`</ph> contains no more elements.</source>
        </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`count`</ph> exceeds the number of elements in <ph id="ph2">`source`</ph>, all elements of <ph id="ph3">`source`</ph> are returned.</source>
        </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`count`</ph> is less than or equal to zero, <ph id="ph2">`source`</ph> is not enumerated and an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.</source>
        </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and an integer <ph id="ph2">`n`</ph>, concatenating the results of <ph id="ph3">`coll.Take(n)`</ph> and <ph id="ph4">`coll.Skip(n)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
        </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Take`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve">
          <source>The sequence to return elements from.</source>
        </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve">
          <source>The number of elements to return.</source>
        </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains the specified number of elements from the start of the input sequence.</source>
        </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
        </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and yields the element if the result is <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumeration stops when the predicate function returns <ph id="ph1">`false`</ph> for an element or when <ph id="ph2">`source`</ph> contains no more elements.</source>
        </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
        </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
        </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Take While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve">
          <source>A sequence to return elements from.</source>
        </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve">
          <source>A function to test each element for a condition.</source>
        </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</source>
        </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
        </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve">
          <source>The element's index is used in the logic of the predicate function.</source>
        </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and yields the element if the result is <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumeration stops when the predicate function returns <ph id="ph1">`false`</ph> for an element or when <ph id="ph2">`source`</ph> contains no more elements.</source>
        </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
        </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
        </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
        </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Take While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve">
          <source>The sequence to return elements from.</source>
        </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
        </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence that occur before the element at which the test no longer passes.</source>
        </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</source>
        </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" extradata="MT">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
        </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
        </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
        </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
        </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
        </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains elements to sort.</source>
        </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.</source>
        </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</source>
        </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
        </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
        </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
        </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
        </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
        </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, an <ph id="ph1">`orderby [first criterion], [second criterion]`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Order By [first criterion], [second criterion]`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains elements to sort.</source>
        </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.</source>
        </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</source>
        </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
        </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
        </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" extradata="MT">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
        </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT">
          <source>This sorting method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
        </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
        </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> query expression syntax, an <ph id="ph2">`orderby [first criterion], [second criterion] descending`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Order By [first criterion], [second criterion] Descending`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains elements to sort.</source>
        </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are sorted in descending order according to a key.</source>
        </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</source>
        </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in <ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph3">`Function(x) x`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph5">`keySelector`</ph>.</source>
        </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
        </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
        </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
        </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
        </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains elements to sort.</source>
        </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Linq.IOrderedEnumerable`1"&gt;&lt;/xref&gt;</ph> whose elements are sorted in descending order according to a key.</source>
        </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve">
          <source>Creates an array from a <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns an array that contains the query results.</source>
        </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can append this method to your query in order to obtain a cached copy of the query results.</source>
        </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> has similar behavior but returns a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> instead of an array.</source>
        </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to create an array from.</source>
        </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve">
          <source>An array that contains the elements from the input sequence.</source>
        </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> from an <ph id="ph2">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> according to specified key selector and element selector functions.</source>
        </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method uses the default equality comparer <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to create a <ph id="ph2">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve">
          <source>A transform function to produce a result element value from each element.</source>
        </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve">
          <source>The type of the value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">elementSelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> that contains values of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TElement</ph><ept id="p1">&lt;/code&gt;</ept> selected from the input sequence.</source>
        </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces a key that is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces duplicate keys for two elements.</source>
        </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> from an <ph id="ph2">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> according to a specified key selector function, a comparer, and an element selector function.</source>
        </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to create a <ph id="ph2">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve">
          <source>A transform function to produce a result element value from each element.</source>
        </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve">
          <source>The type of the value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">elementSelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> that contains values of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TElement</ph><ept id="p1">&lt;/code&gt;</ept> selected from the input sequence.</source>
        </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces a key that is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces duplicate keys for two elements.</source>
        </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> from an <ph id="ph2">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> according to a specified key selector function.</source>
        </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method uses the default equality comparer <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to create a <ph id="ph2">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> that contains keys and values.</source>
        </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces a key that is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces duplicate keys for two elements.</source>
        </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> from an <ph id="ph2">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> according to a specified key selector function and key comparer.</source>
        </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to create a <ph id="ph2">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve">
          <source>The type of the keys returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> that contains keys and values.</source>
        </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces a key that is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;keySelector&lt;/code&gt;</ph> produces duplicate keys for two elements.</source>
        </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Collections.Generic.List`1"&gt;&lt;/xref&gt;</ph> from an <ph id="ph2">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains the query results.</source>
        </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can append this method to your query in order to obtain a cached copy of the query results.</source>
        </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> has similar behavior but returns an array instead of a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to create a <ph id="ph2">&lt;xref href="System.Collections.Generic.List`1"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.Generic.List`1"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence.</source>
        </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> from an <ph id="ph2">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> according to specified key selector and element selector functions.</source>
        </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
        </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
        </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to create a <ph id="ph2">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve">
          <source>A transform function to produce a result element value from each element.</source>
        </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve">
          <source>The type of the value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">elementSelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> that contains values of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TElement</ph><ept id="p1">&lt;/code&gt;</ept> selected from the input sequence.</source>
        </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> from an <ph id="ph2">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> according to a specified key selector function, a comparer and an element selector function.</source>
        </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
        </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
        </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to create a <ph id="ph2">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve">
          <source>A transform function to produce a result element value from each element.</source>
        </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve">
          <source>The type of the value returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">elementSelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> that contains values of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TElement</ph><ept id="p1">&lt;/code&gt;</ept> selected from the input sequence.</source>
        </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> from an <ph id="ph2">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> according to a specified key selector function.</source>
        </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
        </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
        </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to create a <ph id="ph2">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> that contains keys and values.</source>
        </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> from an <ph id="ph2">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> according to a specified key selector function and key comparer.</source>
        </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
        </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> is different to a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
        </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
        </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to create a <ph id="ph2">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve">
          <source>A function to extract a key from each element.</source>
        </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve">
          <source>The type of the key returned by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySelector</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Linq.Lookup`2"&gt;&lt;/xref&gt;</ph> that contains keys and values.</source>
        </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve">
          <source>Produces the set union of two sequences by using the default equality comparer.</source>
        </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method excludes duplicates from the return set.</source>
        </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is different behavior to the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method, which returns all the elements in the input sequences including duplicates.</source>
        </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
        </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" extradata="MT">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
        </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id="ph2">`first`</ph> and <ph id="ph3">`second`</ph> in that order and yields each element that has not already been yielded.</source>
        </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose distinct elements form the first set for the union.</source>
        </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose distinct elements form the second set for the union.</source>
        </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve">
          <source>The type of the elements of the input sequences.</source>
        </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
        </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve">
          <source>Produces the set union of two sequences by using a specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
        </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id="ph2">`first`</ph> and <ph id="ph3">`second`</ph> in that order and yields each element that has not already been yielded.</source>
        </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method differs from the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method returns all the elements in the input sequences including duplicates, whereas <ph id="ph4">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> returns only unique values.</source>
        </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose distinct elements form the first set for the union.</source>
        </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> whose distinct elements form the second set for the union.</source>
        </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.Generic.IEqualityComparer`1"&gt;&lt;/xref&gt;</ph> to compare values.</source>
        </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve">
          <source>The type of the elements of the input sequences.</source>
        </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
        </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve">
          <source>Filters a sequence of values based on a predicate.</source>
        </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve">
          <source>Each element's index is used in the logic of the predicate function.</source>
        </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
        </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to filter.</source>
        </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
        </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence that satisfy the condition.</source>
        </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve">
          <source>Filters a sequence of values based on a predicate.</source>
        </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT">
          <source>In query expression syntax, a <ph id="ph1">`where`</ph> (<ph id="ph2">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph>) or <ph id="ph3">`Where`</ph> (<ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph5">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> to filter.</source>
        </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve">
          <source>A function to test each element for a condition.</source>
        </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve">
          <source>The type of the elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">source</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence that satisfy the condition.</source>
        </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve">
          <source>Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</source>
        </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by using deferred execution.</source>
        </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" extradata="MT">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
        </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" extradata="MT">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in <ph id="ph3">[!INCLUDE[csprcs](~/includes/csprcs-md.md)]</ph> or <ph id="ph4">`For Each`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method merges each element of the first sequence with an element that has the same index in the second sequence.</source>
        </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</source>
        </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</source>
        </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve">
          <source>The first sequence to merge.</source>
        </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve">
          <source>The second sequence to merge.</source>
        </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve">
          <source>A function that specifies how to merge the elements from the two sequences.</source>
        </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve">
          <source>The type of the elements of the first input sequence.</source>
        </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve">
          <source>The type of the elements of the second input sequence.</source>
        </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve">
          <source>The type of the elements of the result sequence.</source>
        </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> that contains merged elements of two input sequences.</source>
        </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;first&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;second&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>