<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52812d64886a1f5e94d6964c2abc240cd82a92a3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Resources.Tools.StronglyTypedResourceBuilder.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e9943b4753b973531df1d6b2d1e8c695440747b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">971780d298e7ad9cd4ab08de071c75aed2084429</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides support for strongly typed resources.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, resources separate code from content within an application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating and consuming these resources makes it easier to develop localizable applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework, resources are usually consumed by using the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class, which contains methods that provide access to culture-specific resources at run time.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating and consuming resources, see <bpt id="p1">[</bpt>Resources in Desktop Apps<ept id="p1">](http://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strongly typed resource support is a compile-time feature that encapsulates access to resources by creating classes that contain a set of static, read-only (<ph id="ph1">`get`</ph>) properties.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This provides an alternative way to consume resources instead of calling the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=fullName&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The basic functionality for strongly typed resource support is provided by the <ph id="ph1">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder&gt;</ph> class (as well as the <ph id="ph2">`/str`</ph> command-line option in the <bpt id="p1">[</bpt>Resgen.exe (Resource File Generator)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The output of the <ph id="ph1">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A&gt;</ph> method is a class that contains strongly typed properties that match the resources that are referenced in the input parameter.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class provides read-only access to the resources that are available in the file processed.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Generates a class file that contains strongly typed properties that match the resources referenced in the specified collection.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A&gt;</ph> method to generate a class that provides a strongly typed, read-only wrapper to access the resources that are contained in the <ph id="ph2">`resourceList`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder&gt;</ph> class ignores any resource name that begins with the characters "$" or "&gt;&gt;".</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource names "Culture" and "ResourceManager" are invalid identifiers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> collection where each dictionary entry key/value pair is the name of a resource and the value of the resource.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The name of the class to be generated.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The namespace of the class to be generated.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> class that provides the language in which the class will be generated.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to generate an internal class; <ph id="ph2">`false`</ph> to generate a public class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An array that contains each resource name for which a property cannot be generated.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Typically, a property cannot be generated because the resource name is not a valid identifier.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;&lt;/xref&gt;</ph> container.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceList&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;basename&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;codeProvider&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A resource node name does not match its key in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resourceList</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Generates a class file that contains strongly typed properties that match the resources in the specified .resx file.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A&gt;</ph> method to generate a class that provides strongly typed, read-only access to the resources that are contained in the <ph id="ph2">`resxFile`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder&gt;</ph> class ignores any resource name that begins with the characters "$" or "&gt;&gt;".</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource names "Culture" and "ResourceManager" are invalid identifiers.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The name of a .resx file used as input.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The name of the class to be generated.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The namespace of the class to be generated.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> class that provides the language in which the class will be generated.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to generate an internal class; <ph id="ph2">`false`</ph> to generate a public class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> array that contains each resource name for which a property cannot be generated.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Typically, a property cannot be generated because the resource name is not a valid identifier.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;&lt;/xref&gt;</ph> container.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;basename&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;codeProvider&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Generates a class file that contains strongly typed properties that match the resources referenced in the specified collection.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload enables you to use the <ph id="ph1">`resourcesNamespace`</ph> parameter to specify the namespace for the generated resources.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the generated code appears as follows:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, you do not need to call this method from your application code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder&gt;</ph> class ignores any resource name that begins with the characters "$" or "&gt;&gt;".</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource names "Culture" and "ResourceManager" are invalid identifiers.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> collection where each dictionary entry key/value pair is the name of a resource and the value of the resource.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The name of the class to be generated.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The namespace of the class to be generated.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The namespace of the resource to be generated.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> object that provides the language in which the class will be generated.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to generate an internal class; <ph id="ph2">`false`</ph> to generate a public class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> array that contains each resource name for which a property cannot be generated.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Typically, a property cannot be generated because the resource name is not a valid identifier.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;&lt;/xref&gt;</ph> container.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceList&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;basename&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;codeProvider&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A resource node name does not match its key in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">resourceList</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Generates a class file that contains strongly typed properties that match the resources in the specified .resx file.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A&gt;</ph> method to generate a class that provides strongly typed, read-only access to the resources that are contained in the <ph id="ph2">`resxFile`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder&gt;</ph> class ignores any resource name that begins with the characters "$" or "&gt;&gt;".</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource names "Culture" and "ResourceManager" are invalid identifiers.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The name of a .resx file used as input.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The name of the class to be generated.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The namespace of the class to be generated.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The namespace of the resource to be generated.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> class that provides the language in which the class will be generated.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to generate an internal class; <ph id="ph2">`false`</ph> to generate a public class.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> array that contains each resource name for which a property cannot be generated.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Typically, a property cannot be generated because the resource name is not a valid identifier.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;&lt;/xref&gt;</ph> container.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;basename&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;codeProvider&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Generates a valid resource string based on the specified input string and code provider.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`key`</ph> parameter is a valid string of characters, that string is returned.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`key`</ph> parameter is an invalid string or a string that contains invalid characters, the <ph id="ph2">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A&gt;</ph> method attempts to generate a valid string based on the <ph id="ph3">`key`</ph> and <ph id="ph4">`provider`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a valid string can be generated, that string is returned; otherwise, <ph id="ph1">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`key`</ph> parameter is an empty string (""), a string that consists of a single underscore character (_) is returned.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`key`</ph> parameter is not an empty string, the <ph id="ph2">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A&gt;</ph> method compares each character in the string to a set of invalid tokens based on the language specified by the <ph id="ph3">`provider`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any invalid character in the string is replaced with an underscore character.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The characters that will be replaced with an underscore are as follows:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>' ' (space), U+00A0 (non-breaking space), '.' (period), ',' (comma), ';' (semicolon), '&amp;#124;', '~', '@', '#', '%', '^', '&amp;', '*', '+', '-', '/', '<ph id="ph1">\\</ph>', '<ph id="ph2">\&lt;</ph>', '&gt;', '?', '[', ']', '(', ')', '{', '}', '"' (quote), ''' (apostrophe), ':', and '!'.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strongly typed resources do not allow the use of language keywords (such as <ph id="ph1">`if`</ph>, <ph id="ph2">`for`</ph>, and so on) as resource key names.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.CodeDom&gt;</ph> design pattern allows the use of language keywords by prefixing the keyword with the underscore character.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A&gt;</ph> method to enforce this design.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you use a resource name that is the same as a language keyword, such as <ph id="ph1">`for`</ph>, the name appears as <ph id="ph2">`_for`</ph> in the generated strongly typed resource class.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The string to verify and, if necessary, convert to a valid resource name.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> object that specifies the target language to use.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A valid resource name derived from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Any invalid tokens are replaced with the underscore (_) character, or <ph id="ph1">`null`</ph> if the derived string still contains invalid characters according to the language specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">provider</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;key&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;provider&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>