<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24d750f07d5dc01d02d2db4dbbbea44884d13227</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7418dd5515ac4d0fe4545b820f91383374935470</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2e1469c179b52459b18779eecbb4eb91bf5904a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides an iterator that supports the following operations: moving forward one position by calling <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">operator++</ph><ept id="p1">&lt;/code&gt;</ept>, moving backward one position by calling <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">operator--</ph><ept id="p2">&lt;/code&gt;</ept>, accessing an element by using <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">operator[]</ph><ept id="p3">&lt;/code&gt;</ept>, and accessing an element by using pointer arithmetic.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The element pointed to by the iterator cannot be modified.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allocates and initializes a new <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Allocates and initializes a new <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object from an existing <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An existing <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1"&gt;&lt;/xref&gt;</ph> object to be copied to the current container.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The offset of the element that the iterator will point to after creation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creates a copy of the current <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A copy of the current <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Gets the container that the iterator is traversing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The container that the iterator is traversing.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A valid iterator that points to the same container as the current iterator.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">_Right</ph><ept id="p1">&lt;/code&gt;</ept> is pointing to.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This number is negative if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">_Right</ph><ept id="p1">&lt;/code&gt;</ept> points to an element that is before the element that the current iterator points to.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Determines whether the given <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object is the same as the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two iterators are the same object; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Accesses the element at the given position in the container.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The position of the element to access.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The element at the given position in the container.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A valid iterator that points to the same container as the current iterator.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current iterator is pointing to an element that comes before the element that <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">_Right</ph><ept id="p1">&lt;/code&gt;</ept> is pointing to; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Moves the iterator by the given number of elements.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The number of elements to traverse.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To move the iterator forward, specify a positive number.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To move the iterator backward, use a negative number.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The actual number of elements traversed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This number will differ from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">_Offset</ph><ept id="p1">&lt;/code&gt;</ept> if the beginning or end of the container is reached before iterating the desired number of elements.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Increments the iterator by the given number of elements.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The integer parameter is specified on the right side of the addition operator.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator%601.Add%28Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The number of elements to increment.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Decrements the iterator by one element.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is the postfix version of the decrement operator.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An unused parameter that indicates this is the postfix version of the operator.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Decrements the iterator by one element.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is the prefix version of the decrement operator.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Determines whether the given <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object is the same as the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator%601.Equals%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two iterators are the same object; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The iterator to compare with the left-side iterator.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Increments the iterator by one element.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This is the postfix version of the increment operator.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Increments the iterator by one element.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This is the prefix version of the increment operator.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Determines whether the given <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object differs from the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IInputIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two iterators are different objects; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator%601.Compare%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The iterator to compare with the left-side iterator.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the left-side iterator is less than the given right-side iterator; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Determines the difference between two iterators.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> to be subtracted from the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The difference, in number of elements, between the two iterators.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Decrements the iterator by the given number of elements.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The integer parameter is specified on the right side of the addition operator.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The number of elements to decrement.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A decremented iterator.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Positions the iterator to the element immediately before the current element.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Determines whether the iterator is valid and can be safely used to traverse the underlying container.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the iterator is valid and safe to use; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>