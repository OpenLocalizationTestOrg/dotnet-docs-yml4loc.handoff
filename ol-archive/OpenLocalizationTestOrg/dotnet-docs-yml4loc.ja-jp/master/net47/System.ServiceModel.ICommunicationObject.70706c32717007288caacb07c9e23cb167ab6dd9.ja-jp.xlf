<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b960f0f8cea65c27765d94c640a34e83beeae672</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.ICommunicationObject.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9651510d57fb0b5fe5542cd0f185ac853325e0b8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5644ed1b160e2e9613566c95e96ed197741a9a4a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the contract for the basic state machine for all communication-oriented objects in the system, including channels, the channel managers, factories, listeners, and dispatchers, and service hosts.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> interface defines:</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A set of open, close and abort methods for initiating state transitions:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Asynchronous versions of the open and close methods:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A set of events that provide notifications of state transitions:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>A common <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.State%2A&gt;</ph> property for inspecting the state of an object</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Causes a communication object to transition immediately from its current state into the closed state.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method indicates that any unfinished work should be ignored or ungracefully terminated before returning.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Abort%2A&gt;</ph> method can be used to cancel any outstanding operations, including outstanding calls to <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>To gracefully transition an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state call <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous operation to close a communication object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from any state, other than the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, finish sending any buffered messages).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that receives notification of the completion of the asynchronous close operation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An object, specified by the application, that contains state information associated with the asynchronous close operation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that references the asynchronous close operation.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject.BeginClose"&gt;&lt;/xref&gt;</ph> was called on an object in the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The default timeout elapsed before the <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was able to close gracefully.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous operation to close a communication object with a specified timeout.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from any state, other than the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state with in a specified interval of time.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, finish sending any buffered messages).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that receives notification of the completion of the asynchronous close operation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An object, specified by the application, that contains state information associated with the asynchronous close operation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that references the asynchronous close operation.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject.BeginClose"&gt;&lt;/xref&gt;</ph> was called on an object in the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was able to close gracefully.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous operation to open a communication object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that receives notification of the completion of the asynchronous open operation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An object, specified by the application, that contains state information associated with the asynchronous open operation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that references the asynchronous open operation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default open timeout elapsed before the <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was able to enter the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Opened"&gt;&lt;/xref&gt;</ph> state and has entered the <ph id="ph3">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous operation to open a communication object within a specified interval of time.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that receives notification of the completion of the asynchronous open operation.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An object, specified by the application, that contains state information associated with the asynchronous open operation.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that references the asynchronous open operation.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was able to enter the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Opened"&gt;&lt;/xref&gt;</ph> state and has entered the <ph id="ph3">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Causes a communication object to transition from its current state into the closed state.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, finish sending any buffered messages).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> enters the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> state and remains in it until the transition to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is completed.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> returns once the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is reached.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the default close timeout elapses before the <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is able to close gracefully, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph> state, the <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, the call returns immediately.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is also an asynchronous version of the close method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject.Close"&gt;&lt;/xref&gt;</ph> was called on an object in the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The default close timeout elapsed before the <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was able to close gracefully.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Causes a communication object to transition from its current state into the closed state.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state within a specified interval of time.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, finish sending any buffered messages).</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> enters the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> state and remains in it until the transition to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is completed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> returns once the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is reached.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the timeout elapses before the <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is able to gracefully close, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph> state, the <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, the call returns immediately.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is also an asynchronous version of the close method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject.Close"&gt;&lt;/xref&gt;</ph> was called on an object in the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The timeout elapsed before the <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was able to close gracefully.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Occurs when the communication object completes its transition from the closing state into the closed state.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Occurs when the communication object first enters the closing state.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs when the communication object first begins to transition from the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state into the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, immediately after either the <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method is invoked.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Completes an asynchronous operation to close a communication object.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that is returned by a call to the <ph id="ph2">&lt;xref href="System.ServiceModel.ICommunicationObject.BeginClose*"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject.BeginClose*"&gt;&lt;/xref&gt;</ph> was called on an object in the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The timeout elapsed before the <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was able to close gracefully.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Completes an asynchronous operation to open a communication object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that is returned by a call to the <ph id="ph2">&lt;xref href="System.ServiceModel.ICommunicationObject.BeginOpen*"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The timeout elapsed before the <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was able to enter the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Opened"&gt;&lt;/xref&gt;</ph> state and has entered the <ph id="ph3">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Occurs when the communication object first enters the faulted state.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Causes a communication object to transition from the created state into the opened state.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is also an asynchronous version of the open method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The default open timeout elapsed before the <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was able to enter the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Opened"&gt;&lt;/xref&gt;</ph> state and has entered the <ph id="ph3">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is also an asynchronous version of the open method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;xref href="System.ServiceModel.ICommunicationObject"&gt;&lt;/xref&gt;</ph> was able to enter the <ph id="ph2">&lt;xref href="System.ServiceModel.CommunicationState.Opened"&gt;&lt;/xref&gt;</ph> state and has entered the <ph id="ph3">&lt;xref href="System.ServiceModel.CommunicationState.Faulted"&gt;&lt;/xref&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Occurs when the communication object completes its transition from the opening state into the opened state.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Occurs when the communication object first enters the opening state.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs when the communication object first begins to transition from the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state into the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, immediately after either the <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> method is invoked.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Gets the current state of the communication-oriented object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The main communication states available to an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> are:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are also transitory states that such an object can occupy when transitioning between the first three main states:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState&gt;</ph> defines the states that are valid for all communication-oriented objects in the system, including channels, listeners, the channel and listener factories, and the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.ServiceModel.CommunicationState"&gt;&lt;/xref&gt;</ph> of the object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>