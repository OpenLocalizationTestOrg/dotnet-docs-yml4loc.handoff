<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2d6aeb3d0074b1860431a82a61f439e2b16fd75</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Diagnostics.EventLogInstaller.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c15484c1e841afa935b9766f716bf99655a1aa08</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a31f83f642ef5219579c64905316a1d43f4ed84</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Allows you to install and configure an event log that your application reads from or writes to when running.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> is used by the <bpt id="p1">[</bpt>Installutil.exe (Installer Tool)<ept id="p1">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept> when installing an event log.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class can install event logs only on the local computer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class when your application writes to an event log; it is not necessary to use an event log installer for your application to read from an event log.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications and services should write to the Application log or a custom log.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Device drivers should write to the System log.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Security log is read-only.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The installer creates the event source that you specify in the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property and registers it for the event log specified in <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior is similar to calling <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.CreateEventSource%2A&gt;</ph> on the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog&gt;</ph> component.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.WriteEntry%2A&gt;</ph> methods to write events to an event log.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create the new event source during the installation of your application.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows time for the operating system to refresh its list of registered event sources and their configurations.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can configure a new source using an <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>, or using the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.CreateEventSource%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must have administrative rights on the computer to create a new event source.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create an event source for an existing event log or a new event log.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>To install an event log, create a project installer class that inherits from <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph>, and set the <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> for the class to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within your project, create an <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> for each event log that your application will write to and add the instance to your project installer class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <bpt id="p1">[</bpt>Installutil.exe (Installer Tool)<ept id="p1">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept> is called, it looks at the <ph id="ph1">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it is <ph id="ph1">`true`</ph>, the tool installs all the items in the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection that are associated with your project installer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> is <ph id="ph2">`false`</ph>, the tool ignores the project installer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>You modify other properties of an <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> either before or after adding the instance to the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection of your project installer, but before the installer tool runs.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property if your application will be writing to the event log.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to register a new source for a new or existing event log; do not use <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to change an existing source.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class does not modify the configuration properties of an existing source to match the specified installation properties.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method throws an exception if the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is registered for a different event log on the computer.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method does not register the source if the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is already registered for the same event log specified in the <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can register the event source with localized resource files for your event category and message strings.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your application can write event log entries using resource identifiers, rather than specifying the actual string.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A&gt;</ph> properties to configure the source to write localized entries to the event log.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application writes strings values directly to the event log, you do not need to set these properties.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The source must be configured either for writing localized entries or for writing direct strings.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application writes entries using both resource identifiers and string values, you must register two separate sources.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, configure one source with resource files, and then use that source in the <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt;</ph> method to write entries using resource identifiers to the event log.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create a different source without resource files and then use that source in the <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.WriteEntry%2A&gt;</ph> method to write strings directly to the event log using that source.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class from within your code; they are generally called only by Installutil.exe.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The tool automatically calls the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method during the installation process.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>It backs out failures, if necessary, by calling the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> method for the object that generated the exception.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Diagnostics.EventLogInstaller"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets or sets the number of categories in the category resource file.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A&gt;</ph> properties to write events with localized category strings.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Event Viewer displays the category for an event entry, if you supply a category when you write the event.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event log categories are application-defined strings that help filter events, or provide information on an event.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, your application can define separate categories for different components or different operations.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event categories are optional; if your application does not use categories, do not set the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about defining event messages and building event resource files, see the "Message Compiler" topic in the Platform SDK documentation at <bpt id="p1">[</bpt>http://msdn.microsoft.com<ept id="p1">](http://msdn.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The number of categories in the category resource file.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The default value is zero.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets or sets the path of the resource file that contains category strings for the source.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A&gt;</ph> properties to write events with localized category strings.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Event Viewer displays the category for an event entry if you supply a category when you write the event.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event log categories are application-defined strings that help filter events, or provide information about an event.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, your application might have separate categories for different components or different operations.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event categories are optional; if your application does not use categories, do not set the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about defining event messages and building event resource files, see the "Message Compiler" topic in the Platform SDK documentation at <bpt id="p1">[</bpt>http://msdn.microsoft.com<ept id="p1">](http://msdn.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The path of the category resource file.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Copies the property values of an <ph id="ph1">&lt;xref href="System.Diagnostics.EventLog"&gt;&lt;/xref&gt;</ph> component that are required at installation time for an event log.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The component specified by the <ph id="ph1">`component`</ph> parameter must be an <ph id="ph2">&lt;xref:System.Diagnostics.EventLog&gt;</ph>; otherwise, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> from within your code; they are generally called only by the <bpt id="p1">[</bpt>Installutil.exe (Installer Tool)<ept id="p1">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A&gt;</ph> is used by Installutil.exe to set the property values for the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to the values of an existing <ph id="ph3">&lt;xref:System.Diagnostics.EventLog&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog&gt;</ph> that is passed in is an empty string (""), you must set the <ph id="ph3">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> property to a valid value before the installer executes.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ComponentModel.IComponent"&gt;&lt;/xref&gt;</ph> to use as a template for the <ph id="ph2">&lt;xref href="System.Diagnostics.EventLogInstaller"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The specified component is not an <ph id="ph1">&lt;xref href="System.Diagnostics.EventLog"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Diagnostics.EventLog.Log"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Diagnostics.EventLog.Source"&gt;&lt;/xref&gt;</ph> property of the specified component is either <ph id="ph3">`null`</ph> or empty.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Performs the installation and writes event log information to the registry.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method writes event log information to the registry, and associates the event log with a log that is specified by the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the log does not already exist (and a source is specified), <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> creates a log and associates the new source with it.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> from within your code; they are generally called only by the <bpt id="p1">[</bpt>Installutil.exe (Installer Tool)<ept id="p1">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The tool automatically calls the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method during the installation process to write registry information that is associated with the event log being installed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Installation is transactional, so if there is a failure of any installation project component during the installation, all the previously-installed components are rolled back to their pre-installation states.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by calling each component's <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to register a new source for a new or existing event log; do not use <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to change an existing source.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class does not modify the configuration properties of an existing source to match the specified installation properties.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method throws an exception if the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is registered for a different event log on the computer.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method skips registering the source if the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is already registered for the same event log specified in the <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's install routine uses the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph> property to automatically maintain information about the components that have already been installed.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information, which is passed to <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> as the <ph id="ph2">`stateSaver`</ph> parameter, is continuously updated as the tool installs each <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, it is not necessary for your code to explicitly modify this state information.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> used to save information needed to perform a rollback or uninstall operation.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The platform the installer is trying to use is not Windows NT 4.0 or later.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The name specified in the <ph id="ph1">&lt;xref href="System.Diagnostics.EventLogInstaller.Source"&gt;&lt;/xref&gt;</ph> property is already registered for a different event log.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Determines whether an installer and another specified installer refer to the same source.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> from within your code; they are generally called only by the Installer tool (Installutil.exe).</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The installer to compare.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this installer and the installer specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">otherInstaller</ph><ept id="p1">&lt;/code&gt;</ept> parameter would install or uninstall the same source; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the log to set the source to.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property to associate the source you specify in the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property with either an existing log or a new log on the local computer.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt>Installutil.exe (Installer Tool)<ept id="p1">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept> uses this information to map the source to the log in the computer's registry.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications and services should write to the Application log or a custom log.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Device drivers should write to the System log.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write entries to an event log, you must create a source and register it with an event log.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>An event source can only write to one log at a time.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The installer uses the value of the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property to register your application with the event log as a valid source of entries.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not specify a log name before the installer runs, the installer registers your source to the Application log.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a new source and an existing log, the installer creates a new event source and associates it with the log you specify.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify both a new source and a new log, the installer associates the new source with the new log in the registry, but the log is not created until the first entry is written to it.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operating system stores event logs as files.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> or the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.CreateEventSource%2A&gt;</ph> method to create a new event log, the associated file is stored in the %SystemRoot%\System32\Config directory on the specified computer.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The file name is set by appending the first 8 characters of the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property with the ".evt" file name extension.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to register a new source for a new or existing event log; do not use <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to change an existing source.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class does not modify the configuration properties of an existing source to match the specified installation properties.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method throws an exception if the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is registered for a different event log on the computer.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method does not register the source if the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is already registered for the same event log specified in the <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more detailed information about the behaviors of event logs and sources, see the <ph id="ph1">&lt;xref:System.Diagnostics.EventLog&gt;</ph> class documentation for the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The name of the log.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This can be Application, System, or a custom log name.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Gets or sets the path of the resource file that contains message formatting strings for the source.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph> property to configure an event log source to write localized event messages.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event messages are application-defined strings that describe the event to the user.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your application can write event log entries using resource identifiers.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>A resource identifier indexes a message located in the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event source must be configured either for writing localized entries or for writing direct strings.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt;</ph> method to write localized entries for a source configured with a message resource file.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.MachineName%2A&gt;</ph> property is not the local computer identifier ("."), the .NET Framework assumes that the resource file is on a remote computer.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph> property value contains a drive letter, the resource file is assumed to be on the <ph id="ph2">\\</ph><ph id="ph3">\\</ph>&lt;machinename<ph id="ph4">\&gt;</ph><ph id="ph5">\\</ph>&lt;drive<ph id="ph6">\&gt;</ph>$ share (for example, <ph id="ph7">\\</ph>\server\c$).</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value contains the string %systemroot%, the resource file is assumed to be on the <ph id="ph1">\\</ph><ph id="ph2">\\</ph>&lt;machinename<ph id="ph3">\&gt;</ph>\admin$ share (for example, <ph id="ph4">\\</ph>\server\admin$).</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about defining event messages and building event resource files, see the "Message Compiler" topic in the Platform SDK documentation at <bpt id="p1">[</bpt>http://msdn.microsoft.com<ept id="p1">](http://msdn.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The path of the message resource file.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Gets or sets the path of the resource file that contains message parameter strings for the source.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A&gt;</ph> property to configure an event log source to write localized event messages with inserted parameter strings.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each localized event message specified in the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph> property can contain placeholders for insertion strings.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>These placeholders are used to specify the position and resource identifier for a language-independent string within the event message.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Event Viewer replaces the placeholders with the corresponding strings from the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A&gt;</ph> and formats the event log message for the localized event entry.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following section of a message text file defines a string with a parameter placeholder:</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within the parameter resource file, the insertion string must be defined with the resource identifier that corresponds to the placeholder, as shown below:</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event source must be configured either for writing localized entries or for writing direct strings.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt;</ph> method to write localized entries for a source configured with a message resource file.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application writes event message strings directly to the event log, or if your <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A&gt;</ph> does not contain messages with parameter insertion placeholders, do not set the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about defining event messages and building event resource files, see the "Message Compiler" topic in the Platform SDK documentation at <bpt id="p1">[</bpt>http://msdn.microsoft.com<ept id="p1">](http://msdn.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The path of the message parameter resource file.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Restores the computer to the state it was in before the installation by rolling back the event log information that the installation procedure wrote to the registry.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> method undoes the effects of the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> is called if the installation of any component in the installation project fails.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method creates or sets the properties for an event log and event source.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> either deletes the event log and source or resets the properties of a pre-existing source to its pre-installation values.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> from within your code; they are generally called only by the <bpt id="p1">[</bpt>Installutil.exe (Installer Tool)<ept id="p1">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>The tool calls the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> method, when this or another component has failed to install, to undo any changes that the installation process has already made.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's install routine uses the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph> property to automatically maintain information about the components that have already been installed.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information, which is passed to <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Rollback%2A&gt;</ph> as the <ph id="ph2">`savedState`</ph> parameter, is continuously updated as the tool rolls back each <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, it is not necessary for your code to explicitly modify this state information.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> that contains the pre-installation state of the computer.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Gets or sets the source name to register with the log.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event source indicates what logs the event.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is often the name of the application, or the name of a component within a large application.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>The installer uses the value of the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property to register your application with the event log as a valid source of entries.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>A new source name cannot match an existing source name or an existing event log name.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each source can only write to one event log at a time; however, your application can use multiple sources to write to multiple event logs.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, your application might require multiple sources configured for different event logs or different resource files.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications and services should write to the Application log or a custom log.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>Device drivers should write to the System log.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not specify a log name before the installer runs, the installer registers your source to the Application log.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify the name of a log that does not exist, the system registers the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> to that log, but the log is not created until the first entry is written to it.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to register a new source for a new or existing event log; do not use <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to change an existing source.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> class does not modify the configuration properties of an existing source to match the specified installation properties.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method throws an exception if the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is registered for a different event log on the computer.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Install%2A&gt;</ph> method does not register the source if the <ph id="ph2">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> property matches a source name that is already registered for the same event log specified in the <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more detailed information about the behaviors of event logs and sources, see the <ph id="ph1">&lt;xref:System.Diagnostics.EventLog&gt;</ph> class documentation for the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The name to register with the event log as a source of entries.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Removes an installation by removing event log information from the registry.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A&gt;</ph> property value is <ph id="ph2">`Remove`</ph>, the <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller.Uninstall%2A&gt;</ph> method deletes the source and the associated log that the installer created if the <ph id="ph4">&lt;xref:System.Diagnostics.EventLogInstaller.Log%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Diagnostics.EventLogInstaller.Source%2A&gt;</ph> properties specified the creation of a new event log and source.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you do not call the methods of the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> from within your code; they are generally called only by the <bpt id="p1">[</bpt>Installutil.exe (Installer Tool)<ept id="p1">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept> in uninstall mode.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The tool automatically calls the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Uninstall%2A&gt;</ph> method to restore the parts of the system that were affected by the installation to their pre-installation states.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes deleting registry information that is associated with the event log being uninstalled.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's uninstall routine uses the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph> property to automatically maintain information about the components that have already been uninstalled.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information, which is passed to <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller.Uninstall%2A&gt;</ph> as the <ph id="ph2">`savedState`</ph> parameter, is continuously updated as the tool uninstalls each <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually, it is not necessary for your code to explicitly modify this state information.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> that contains the pre-installation state of the computer.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the <bpt id="p1">[</bpt>Installutil.exe (Installer Tool)<ept id="p1">](~/docs/framework/tools/installutil-exe-installer-tool.md)</ept> should remove the event log or leave it in its installed state at uninstall time.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you install an event log, you can optionally connect it to an existing log.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do so, you must decide whether the log should return to its pre-installation state, or remain in its current, post-installation state.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you elect to return the event log to its pre-installation state, changes to the event log entries at installation are not restored.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can reset only the event log properties that are associated with the <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to their pre-installation values.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Configuration.Install.UninstallAction"&gt;&lt;/xref&gt;</ph> values that indicates what state to leave the event log in when the <ph id="ph2">&lt;xref href="System.Diagnostics.EventLog"&gt;&lt;/xref&gt;</ph> is uninstalled.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`Remove`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Diagnostics.EventLogInstaller.UninstallAction"&gt;&lt;/xref&gt;</ph> contains an invalid value.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The only valid values for this property are <ph id="ph1">`Remove`</ph> and <ph id="ph2">`NoAction`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>