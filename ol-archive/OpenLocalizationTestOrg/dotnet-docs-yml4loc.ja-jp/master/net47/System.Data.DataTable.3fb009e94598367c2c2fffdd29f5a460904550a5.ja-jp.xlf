<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">839795f9607b248bc253119a278275a9d9cf7db4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Data.DataTable.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc3c2810ee3a8e853fdb0cf935190cf9dcf277a9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f3ff6b4549972f284fa8ebc9e538ffc298543ef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents one table of in-memory data.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is a central object in the ADO.NET library.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other objects that use the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> include the <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> and the <ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>When accessing <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> objects, note that they are conditionally case sensitive.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if one <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is named "mydatatable" and another is named "Mydatatable", a string used to search for one of the tables is regarded as case sensitive.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if "mydatatable" exists and "Mydatatable" does not, the search string is regarded as case insensitive.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> can contain two <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> objects that have the same <ph id="ph3">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph> property value but different <ph id="ph4">&lt;xref:System.Data.DataTable.Namespace%2A&gt;</ph> property values.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about working with <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> objects, see <bpt id="p1">[</bpt>Creating a DataTable<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are creating a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> programmatically, you must first define its schema by adding <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> objects to the <ph id="ph3">&lt;xref:System.Data.DataColumnCollection&gt;</ph> (accessed through the <ph id="ph4">&lt;xref:System.Data.DataTable.Columns%2A&gt;</ph> property).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about adding <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> objects, see <bpt id="p1">[</bpt>Adding Columns to a DataTable<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To add rows to a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, you must first use the <ph id="ph2">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> method to return a new <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> method returns a row with the schema of the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>, as it is defined by the table's <ph id="ph3">&lt;xref:System.Data.DataColumnCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The maximum number of rows that a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> can store is 16,777,216.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Adding Data to a DataTable<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-data-to-a-datatable.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> also contains a collection of <ph id="ph2">&lt;xref:System.Data.Constraint&gt;</ph> objects that can be used to ensure the integrity of the data.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>DataTable Constraints<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are many <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> events that can be used to determine when changes are made to a table.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>These include <ph id="ph1">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.DataTable.RowDeleting&gt;</ph>, and <ph id="ph4">&lt;xref:System.Data.DataTable.RowDeleted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the events that can be used with a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an instance of <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is created, some of the read/write properties are set to initial values.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of these values, see the <ph id="ph1">&lt;xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName&gt;</ph> constructor topic.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> objects inherit from <ph id="ph3">&lt;xref:System.ComponentModel.MarshalByValueComponent&gt;</ph>, and support the <ph id="ph4">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface for .NET Framework remoting.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>These are the only ADO.NET objects that you can use for .NET Framework remoting.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> class with no arguments.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor sets initial values for all properties of the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the properties and their default values.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an instance of <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is created, the following read/write properties are set to initial values.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default value</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>CaseSensitive<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as the parent <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>, if it belongs to one.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>DisplayExpression<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty string ("")</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Locale<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Same as the parent <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> object's <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> (returned by the <ph id="ph3">&lt;xref:System.Data.DataSet.Locale%2A&gt;</ph> property); if no parent exists, the default is the current system <ph id="ph4">&lt;xref:System.Globalization.CultureInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>MinimumCapacity<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>50 rows.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can change the value for any of these properties through a separate call to the property.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> class with the specified table name.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The name to give the table.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">tableName</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph> or an empty string, a default name is given when added to the <ph id="ph3">&lt;xref href="System.Data.DataTableCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> class with the <ph id="ph2">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> and the <ph id="ph3">&lt;xref href="System.Runtime.Serialization.StreamingContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation of the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> constructor is required for <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The data needed to serialize or deserialize an object.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The source and destination of a given serialized stream.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> class using the specified table name and namespace.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The name to give the table.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">tableName</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph> or an empty string, a default name is given when added to the <ph id="ph3">&lt;xref href="System.Data.DataTableCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The namespace for the XML representation of the data stored in the <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Commits all the changes made to this table since the last time <ph id="ph1">&lt;xref href="System.Data.DataTable.AcceptChanges"&gt;&lt;/xref&gt;</ph> was called.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> is called, any <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> object still in edit mode successfully ends its edits.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> also changes: all <ph id="ph2">`Added`</ph> and <ph id="ph3">`Modified`</ph> rows become <ph id="ph4">`Unchanged`</ph>, and <ph id="ph5">`Deleted`</ph> rows are removed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> method is generally called on a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> after you attempt to update the <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> using the <ph id="ph4">&lt;xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Begins the initialization of a <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> that is used on a form or used by another component.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The initialization occurs at run time.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph> method ends the initialization.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Turns off notifications, index maintenance, and constraints while loading data.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph> in conjunction with <ph id="ph2">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Indicates whether string comparisons within the table are case-sensitive.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.CaseSensitive%2A&gt;</ph> property affects string comparisons in sorting, searching, and filtering.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the comparison is case-sensitive; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The default is set to the parent <ph id="ph1">&lt;xref href="System.Data.DataSet"&gt;&lt;/xref&gt;</ph> object's <ph id="ph2">&lt;xref href="System.Data.DataSet.CaseSensitive"&gt;&lt;/xref&gt;</ph> property, or <ph id="ph3">`false`</ph> if the <ph id="ph4">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> was created independently of a <ph id="ph5">&lt;xref href="System.Data.DataSet"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets the collection of child relations for this <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Data.DataRelation&gt;</ph> defines the relationship between two tables.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, two tables are linked through a single field that contains the same data.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a table which contains address data may have a single field containing codes that represent countries/regions.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>A second table that contains country/region data will have a single field that contains the code that identifies the country/region, and it is this code which is inserted into the corresponding field in the first table.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Data.DataRelation&gt;</ph>, then, contains at least four pieces of information: (1) the name of the first table, (2) the column name in the first table, (3) the name of the second table, and (4) the column name in the second table.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataRelationCollection"&gt;&lt;/xref&gt;</ph> that contains the child relations for the table.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An empty collection is returned if no <ph id="ph1">&lt;xref href="System.Data.DataRelation"&gt;&lt;/xref&gt;</ph> objects exist.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Clears the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> of all data.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>All rows in all tables are removed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception is generated if the table has any enforced child relations that would cause child rows to be orphaned.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> is bound to an <ph id="ph2">&lt;xref:System.Xml.XmlDataDocument&gt;</ph>, calling <ph id="ph3">&lt;xref:System.Data.DataSet.Clear%2A?displayProperty=fullName&gt;</ph> or <ph id="ph4">&lt;xref:System.Data.DataTable.Clear%2A?displayProperty=fullName&gt;</ph> raises the <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid this situation, traverse each table, removing each row one at a time.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> to create new rows, the rows must be processed before you call <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Clones the structure of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>, including all <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> schemas and constraints.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>If these classes have been derived, the clone will also be of the same derived classes.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clone creates a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with the same structure as the original <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>, but does not copy any data (the new <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph> will not contain any <ph id="ph4">`DataRows`</ph>).</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>To copy both the structure and data into a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, use <ph id="ph2">&lt;xref:System.Data.DataTable.Copy%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> with the same schema as the current <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Occurs after a value has been changed for the specified <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> in a <ph id="ph2">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Occurs when a value is being changed for the specified <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> in a <ph id="ph2">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Gets the collection of columns that belong to this table.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataColumnCollection&gt;</ph> determines the schema of a table by defining the data type of each column.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataColumnCollection"&gt;&lt;/xref&gt;</ph> that contains the collection of <ph id="ph2">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> objects for the table.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>An empty collection is returned if no <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> objects exist.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Computes the given expression on the current rows that pass the filter criteria.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`expression`</ph> parameter requires an aggregate function.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following is a legal expression:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>But this expression is not:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you must perform an operation on two or more columns, you should create a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph>, set its <ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property to an appropriate expression, and use an aggregate expression on the resulting column.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, given a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> with the name "total", and the <ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property set to this:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expression argument for the <ph id="ph1">&lt;xref:System.Data.DataTable.Compute%2A&gt;</ph> method would then be this:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second parameter, <ph id="ph1">`filter`</ph>, determines which rows are used in the expression.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the table contains a date column named "colDate", you could limit the rows with the following expression:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>For rules on creating expressions for both parameters, see the <ph id="ph1">&lt;xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The expression to compute.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The filter to limit the rows that evaluate in the expression.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>, set to the result of the computation.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to null, the return value will be <ph id="ph1">&lt;xref href="System.DBNull.Value"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Gets the collection of constraints maintained by this table.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Data.ForeignKeyConstraint&gt;</ph> restricts the action performed when a value in a column (or columns) is either deleted or updated.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such a constraint is intended to be used with primary key columns.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a parent/child relationship between two tables, deleting a value from the parent table can affect the child rows in one of the following ways.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child rows can also be deleted (a cascading action).</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The values in the child column (or columns) can be set to null values.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The values in the child column (or columns) can be set to default values.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception can be generated.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Data.UniqueConstraint&gt;</ph> becomes active when attempting to set a value in a primary key to a non-unique value.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.ConstraintCollection"&gt;&lt;/xref&gt;</ph> that contains the collection of <ph id="ph2">&lt;xref href="System.Data.Constraint"&gt;&lt;/xref&gt;</ph> objects for the table.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>An empty collection is returned if no <ph id="ph1">&lt;xref href="System.Data.Constraint"&gt;&lt;/xref&gt;</ph> objects exist.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Copies both the structure and data for this <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> with the same structure (table schemas and constraints) and data as this <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If these classes have been derived, the copy will also be of the same derived classes.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Data.DataTable.Copy"&gt;&lt;/xref&gt;</ph> creates a new <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> with the same structure and data as the original <ph id="ph3">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>To copy the structure to a new <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>, but not the data, use <ph id="ph2">&lt;xref href="System.Data.DataTable.Clone"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&lt;xref href="System.Data.DataTableReader"&gt;&lt;/xref&gt;</ph> corresponding to the data within this <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataTableReader"&gt;&lt;/xref&gt;</ph> containing one result set, corresponding to the source <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Creates a new instance of <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The new expression.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Data.DataSet"&gt;&lt;/xref&gt;</ph> to which this table belongs.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a control is data bound to a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, and the table belongs to a <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph>, you can get to the <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> through this property.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.DataSet"&gt;&lt;/xref&gt;</ph> to which this table belongs.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Gets a customized view of the table that may include a filtered view, or a cursor position.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.DefaultView%2A&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph> you can use to sort, filter, and search a <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.DataView"&gt;&lt;/xref&gt;</ph> associated with the <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Gets or sets the expression that returns a value used to represent this table in the user interface.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DisplayExpression`</ph> property lets you display the name of this table in a user interface.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A display string.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Ends the initialization of a <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> that is used on a form or used by another component.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The initialization occurs at run time.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph> method starts the initialization.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Turns on notifications, index maintenance, and constraints after loading data.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph> in conjunction with <ph id="ph2">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Gets the collection of customized user information.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.ExtendedProperties%2A&gt;</ph> to add custom information to a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add information with the <ph id="ph1">`Add`</ph> method.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieve information with the <ph id="ph1">`Item`</ph> method.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extended properties must be of type <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties that are not of type String are not persisted when the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> is written as XML.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.PropertyCollection"&gt;&lt;/xref&gt;</ph> that contains custom user information.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Checks whether initialization is in progress.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The initialization occurs at run time.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Gets a copy of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> that contains all changes made to it since it was loaded or <ph id="ph2">&lt;xref href="System.Data.DataTable.AcceptChanges"&gt;&lt;/xref&gt;</ph> was last called.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creates a new <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> containing a copy of all rows in the original <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> that have pending changes.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Relationship constraints can cause additional unchanged rows to be added to the new <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method returns <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic) if there are no rows in the original <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> with pending changes.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A copy of the changes from this <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>, or <ph id="ph2">`null`</ph> if no changes are found.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Gets a copy of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> containing all changes made to it since it was last loaded, or since <ph id="ph2">&lt;xref href="System.Data.DataTable.AcceptChanges"&gt;&lt;/xref&gt;</ph> was called, filtered by <ph id="ph3">&lt;xref href="System.Data.DataRowState"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph> method is used to produce a second <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> object that contains only the changes introduced into the original.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`rowStates`</ph> argument to specify the type of changes the new object should include.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>Relationship constraints may cause unchanged parent rows to be included.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.DataRowState"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A filtered copy of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> that can have actions performed on it, and later be merged back in the <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using <ph id="ph3">&lt;xref href="System.Data.DataSet.Merge(System.Data.DataSet)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>If no rows of the desired <ph id="ph1">&lt;xref href="System.Data.DataRowState"&gt;&lt;/xref&gt;</ph> are found, the method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This method returns an <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;&lt;/xref&gt;</ph> instance containing the Web Services Description Language (WSDL) that describes the <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> for Web Services.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Gets an array of <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects that contain errors.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>Returns the list of <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> objects that have <ph id="ph2">&lt;xref:System.Data.DataRow.RowError%2A&gt;</ph> set.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, errors can occur when calling <ph id="ph1">&lt;xref:System.Data.Common.DataAdapter.Update%2A&gt;</ph> with <ph id="ph2">&lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt;</ph> set to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not invoke <ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> on the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> until you resolve all errors and resubmit the <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> for updating.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects that have errors.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Populates a serialization information object with the data needed to serialize the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> object that holds the serialized data associated with the <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Runtime.Serialization.StreamingContext"&gt;&lt;/xref&gt;</ph> object that contains the source and destination of the serialized stream associated with the <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">info</ph><ept id="p1">&lt;/code&gt;</ept> parameter is a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Gets the row type.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Returns the type of the <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Xml.Serialization.IXmlSerializable.GetSchema"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchema"&gt;&lt;/xref&gt;</ph> that describes the XML representation of the object that is produced by the <ph id="ph2">&lt;xref href="System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"&gt;&lt;/xref&gt;</ph> method and consumed by the <ph id="ph3">&lt;xref href="System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether there are errors in any of the rows in any of the tables of the <ph id="ph1">&lt;xref href="System.Data.DataSet"&gt;&lt;/xref&gt;</ph> to which the table belongs.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>As users work on a set of data contained in a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>, you can mark each change with an error if the change causes some validation failure.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can mark an entire <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> with an error message using the <ph id="ph2">&lt;xref:System.Data.DataRow.RowError%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also set errors on each column of the row with the <ph id="ph1">&lt;xref:System.Data.DataRow.SetColumnError%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before updating a data source with a <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>, it's recommended that you first invoke the <ph id="ph2">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;</ph> method on the target <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method results in a <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> that contains only the changes made to the original.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before sending the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> to the data source for updating, check the <ph id="ph2">&lt;xref:System.Data.DataTable.HasErrors%2A&gt;</ph> property of each table to see if any errors have been attached to the rows or columns in the rows.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>After reconciling each error, clear the errors with the <ph id="ph1">&lt;xref:System.Data.DataRow.ClearErrors%2A&gt;</ph> method of the <ph id="ph2">`DataRow`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if errors exist; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Copies a <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> into a <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>, preserving any property settings, as well as original and current values.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> adds a row to the table using the existing table schema, but with default values for the row, and sets the <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph> to <ph id="ph3">`Detached`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Data.DataTable.ImportRow%2A&gt;</ph> preserves the existing <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph> along with other values in the row.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`DataRow`</ph> that is passed as a parameter is in a detached state, it is ignored, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new row will be added to the end of the data table.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the new row violates a Constraint it won’t be added to the data table.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can get the index of the new row with as DataTable.Rows.Find and DataTable.Rows.IndexOf.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Data.DataRowCollection&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.Rows%2A&gt;</ph> for more information.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> to be imported.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Occurs after the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> is initialized.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Data.DataTable.IsInitialized%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> is initialized.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>Returns the status of the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> while it’s being constructed, for instance by Visual Studio.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.BeginInit%2A&gt;</ph> method sets it to <ph id="ph2">`false`</ph> and <ph id="ph3">&lt;xref:System.Data.DataTable.EndInit%2A&gt;</ph> method sets it to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to indicate the component has completed initialization; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Fills a <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> with values from a data source using the supplied <ph id="ph2">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> already contains rows, the incoming data from the data source is merged with the existing rows.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph>method consumes the first result set from the loaded <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>, and after successful completion, sets the reader's position to the next result set, if any.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>When converting data, the <ph id="ph1">`Load`</ph> method uses the same conversion rules as the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method must take into account three specific issues when loading the data from an <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph> instance: schema, data, and event operations.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>When working with the schema, the <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method may encounter conditions as described in the following table.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema operations take place for all imported result sets, even those containing no data.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has no schema.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method infers the schema based on the result set from the imported <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has a schema, but it is incompatible with the loaded schema.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schemas are compatible, but the loaded result set schema contains columns that do not exist in the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method adds the extra columns to <ph id="ph2">`DataTable`</ph>'s schema.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method throws an exception if corresponding columns in the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and the loaded result set are not value compatible.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method also retrieves constraint information from the result set for all added columns.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>Except for the case of Primary Key constraint, this constraint information is used only if the current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> does not contain any columns at the start of the load operation.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schemas are compatible, but the loaded result set schema contains fewer columns than does the <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a missing column has a default value defined or the column's data type is nullable, the <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A&gt;</ph> method allows the rows to be added, substituting the default or <ph id="ph2">`null`</ph> value for the missing column.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no default value or <ph id="ph1">`null`</ph> can be used, then the <ph id="ph2">`Load`</ph> method throws an exception.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no specific default value has been supplied, the <ph id="ph1">`Load`</ph> method uses the <ph id="ph2">`null`</ph> value as the implied default value.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before considering the behavior of the <ph id="ph1">`Load`</ph> method in terms of data operations, consider that each row within a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> maintains both the current value and the original value for each column.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>These values may be equivalent, or may be different if the data in the row has been changed since filling the <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>This version of the <ph id="ph1">`Load`</ph> method attempts to preserve the current values in each row, leaving the original value intact.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>(If you want finer control over the behavior of incoming data, see <ph id="ph1">&lt;xref:System.Data.DataTable.Load%2A?displayProperty=fullName&gt;</ph>.) If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>In terms of event operations, the <ph id="ph1">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event occurs before each row is changed, and the <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph> event occurs after each row has been changed.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>In each case, the <ph id="ph1">&lt;xref:System.Data.DataRowChangeEventArgs.Action%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataRowChangeEventArgs&gt;</ph> instance passed to the event handler contains information about the particular action associated with the event.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>This action value depends on the state of the row before the load operation.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>In each case, both events occur, and the action is the same for each.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The action may be applied to either the current or original version of each row, or both, depending on the current row state.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table displays behavior for the <ph id="ph1">`Load`</ph> method.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>The final row (labeled "(Not present)") describes the behavior for incoming rows that don't match any existing row.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each cell in this table describes the current and original value for a field within a row, along with the <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> for the value after the <ph id="ph2">`Load`</ph> method has completed.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the method doesn't allow you to indicate the load option, and uses the default, <ph id="ph1">`PreserveChanges`</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing DataRowState</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values after <ph id="ph1">`Load`</ph> method, and event action</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>Added</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeOriginal</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modified</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeOriginal</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>Deleted</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Deleted&gt;</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeOriginal</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unchanged</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Not present)</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values in a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> can be constrained through use of properties such as <ph id="ph2">&lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method handles such columns in a manner that is consistent with the behavior defined by the column's properties.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>The read only constraint on a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> is applicable only for changes that occur in memory.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method's overwrites the read-only column values, if needed.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine which version of the primary key field to use for comparing the current row with an incoming row, the <ph id="ph1">`Load`</ph> method uses the original version of the primary key value within a row, if it exists.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the <ph id="ph1">`Load`</ph> method uses the current version of the primary key field.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> that provides a result set.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Fills a <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> with values from a data source using the supplied <ph id="ph2">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`DataTable`</ph> already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">loadOption</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method consumes the first result set from the loaded <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>, and after successful completion, sets the reader's position to the next result set, if any.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>When converting data, the <ph id="ph1">`Load`</ph> method uses the same conversion rules as the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method must take into account three specific issues when loading the data from an <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph> instance: schema, data, and event operations.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>When working with the schema, the <ph id="ph1">`Load`</ph> method may encounter conditions as described in the following table.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema operations take place for all imported result sets, even those containing no data.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has no schema.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method infers the schema based on the result set from the imported <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has a schema, but it is incompatible with the loaded schema.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schemas are compatible, but the loaded result set schema contains columns that don't exist in the <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method adds the extra columns to <ph id="ph2">`DataTable`</ph>’s schema.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method throws an exception if corresponding columns in the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and the loaded result set are not value compatible.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method also retrieves constraint information from the result set for all added columns.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Except for the case of Primary Key constraint, this constraint information is used only if the current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> does not contain any columns at the start of the load operation.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schemas are compatible, but the loaded result set schema contains fewer columns than does the <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a missing column has a default value defined or the column's data type is nullable, the <ph id="ph1">`Load`</ph> method allows the rows to be added, substituting the default or null value for the missing column.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no default value or null can be used, then the <ph id="ph1">`Load`</ph> method throws an exception.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no specific default value has been supplied, the <ph id="ph1">`Load`</ph> method uses the null value as the implied default value.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before considering the behavior of the <ph id="ph1">`Load`</ph> method in terms of data operations, consider that each row within a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> maintains both the current value and the original value for each column.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>These values may be equivalent, or may be different if the data in the row has been changed since filling the <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this method call, the specified <ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph> parameter influences the processing of the incoming data.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>How should the Load method handle loading rows that have the same primary key as existing rows?</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>Should it modify current values, original values, or both?</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>These issues, and more, are controlled by the <ph id="ph1">`loadOption`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>In terms of event operations, the <ph id="ph1">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event occurs before each row is changed, and the <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph> event occurs after each row has been changed.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>In each case, the <ph id="ph1">&lt;xref:System.Data.DataRowChangeEventArgs.Action%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataRowChangeEventArgs&gt;</ph> instance passed to the event handler contains information about the particular action associated with the event.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>This action value varies, depending on the state of the row before the load operation.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>In each case, both events occur, and the action is the same for each.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>The action may be applied to either the current or original version of each row, or both, depending on the current row state.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table displays behavior for the Load method when called with each of the <ph id="ph1">`LoadOption`</ph> values, and also shows how the values interact with the row state for the row being loaded.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>The final row (labeled "(Not present)") describes the behavior for incoming rows that don't match any existing row.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each cell in this table describes the current and original value for a field within a row, along with the <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> for the value after the <ph id="ph2">`Load`</ph> method has completed.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing DataRowState</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>Upsert</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>OverwriteChanges</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>PreserveChanges (Default behavior)</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>Added</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = -<ph id="ph1">\&lt;</ph>Not available&gt;</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Change</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeOriginal</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modified</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Change</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction =ChangeOriginal</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>eleted</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Load does not affect deleted rows)</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = ---</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Deleted&gt;</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>(New row is added with the following characteristics)</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Add</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undo delete and</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Deleted&gt;</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeOriginal</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unchanged</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>If new value is the same as the existing value then</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Nothing</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Else</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Change</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not present)</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Add</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values in a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> can be constrained through use of properties such as <ph id="ph2">&lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method handles such columns in a manner that is consistent with the behavior defined by the column's properties.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>The read only constraint on a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> is applicable only for changes that occur in memory.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method's overwrites the read-only column values, if needed.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify the OverwriteChanges or PreserveChanges options when calling the <ph id="ph1">`Load`</ph> method, then the assumption is made that the incoming data is coming from the <ph id="ph2">`DataTable`</ph>'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the assumption is that the intent is to aggregate data from one or more data sources in the <ph id="ph1">`DataTable`</ph>, and then perhaps propagate the data back to the primary data source.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph> parameter is used for determining the specific version of the row that is to be used for primary key comparison.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>The table below provides the details.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>Load option</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>DataRow version used for primary key comparison</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original version, if it exists, otherwise Current version</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original version, if it exists, otherwise Current version</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current version, if it exists, otherwise Original version</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> that provides one or more result sets.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>A value from the <ph id="ph1">&lt;xref href="System.Data.LoadOption"&gt;&lt;/xref&gt;</ph> enumeration that indicates how rows already in the <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> are combined with incoming rows that share the same primary key.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Fills a <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> with values from a data source using the supplied <ph id="ph2">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> using an error-handling delegate.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method consumes the first result set from the loaded <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>, and after successful completion, sets the reader's position to the next result set, if any.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>When converting data, the <ph id="ph1">`Load`</ph> method uses the same conversion rules as the <ph id="ph2">&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method must take into account three specific issues when loading the data from an <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph> instance: schema, data, and event operations.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>When working with the schema, the <ph id="ph1">`Load`</ph> method may encounter conditions as described in the following table.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema operations take place for all imported result sets, even those containing no data.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has no schema.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method infers the schema based on the result set from the imported <ph id="ph2">&lt;xref:System.Data.IDataReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> has a schema, but it is incompatible with the loaded schema.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schemas are compatible, but the loaded result set schema contains columns that don't exist in the <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method adds the extra column(s) to <ph id="ph2">`DataTable`</ph>’s schema.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method throws an exception if corresponding columns in the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and the loaded result set are not value compatible.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method also retrieves constraint information from the result set for all added columns.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>Except for the case of Primary Key constraint, this constraint information is used only if the current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> does not contain any columns at the start of the load operation.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schemas are compatible, but the loaded result set schema contains fewer columns than does the <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a missing column has a default value defined or the column's data type is nullable, the <ph id="ph1">`Load`</ph> method allows the rows to be added, substituting the default or null value for the missing column.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no default value or null can be used, then the <ph id="ph1">`Load`</ph> method throws an exception.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no specific default value has been supplied, the <ph id="ph1">`Load`</ph> method uses the null value as the implied default value.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before considering the behavior of the <ph id="ph1">`Load`</ph> method in terms of data operations, consider that each row within a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> maintains both the current value and the original value for each column.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>These values may be equivalent, or may be different if the data in the row has been changed since filling the <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this method call, the specified <ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph> parameter influences the processing of the incoming data.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source>How should the Load method handle loading rows that have the same primary key as existing rows?</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>Should it modify current values, original values, or both?</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>These issues, and more, are controlled by the <ph id="ph1">`loadOption`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>In terms of event operations, the <ph id="ph1">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event occurs before each row is changed, and the <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanged&gt;</ph> event occurs after each row has been changed.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>In each case, the <ph id="ph1">&lt;xref:System.Data.DataRowChangeEventArgs.Action%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.DataRowChangeEventArgs&gt;</ph> instance passed to the event handler contains information about the particular action associated with the event.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>This action value varies, depending on the state of the row before the load operation.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>In each case, both events occur, and the action is the same for each.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>The action may be applied to either the current or original version of each row, or both, depending on the current row state.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table displays behavior for the Load method when called with each of the <ph id="ph1">`LoadOption`</ph> values, and also shows how the values interact with the row state for the row being loaded.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>The final row (labeled "(Not present)") describes the behavior for incoming rows that don't match any existing row.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each cell in this table describes the current and original value for a field within a row, along with the <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> for the value after the <ph id="ph2">`Load`</ph> method has completed.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>Existing DataRowState</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>Upsert</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>OverwriteChanges</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>PreserveChanges (Default behavior)</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>Added</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = -<ph id="ph1">\&lt;</ph>Not available&gt;</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Change</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeOriginal</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modified</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Change</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction =ChangeOriginal</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>eleted</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Load does not affect deleted rows)</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = ---</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Deleted&gt;</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>(New row is added with the following characteristics)</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Add</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>Undo delete and</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Deleted&gt;</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeOriginal</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unchanged</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Existing&gt;</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>If new value is the same as the existing value then</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Nothing</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>Else</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Modified&gt;</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Change</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not present)</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Not available&gt;</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Added&gt;</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = Add</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original = <ph id="ph1">\&lt;</ph>Incoming&gt;</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>State = <ph id="ph1">\&lt;</ph>Unchanged&gt;</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>RowAction = ChangeCurrentAndOriginal</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values in a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> can be constrained through use of properties such as <ph id="ph2">&lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method handles such columns in a manner that is consistent with the behavior defined by the column's properties.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>The read only constraint on a <ph id="ph1">&lt;xref:System.Data.DataColumn&gt;</ph> is applicable only for changes that occur in memory.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Load`</ph> method's overwrites the read-only column values, if needed.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify the OverwriteChanges or PreserveChanges options when calling the <ph id="ph1">`Load`</ph> method, then the assumption is made that the incoming data is coming from the <ph id="ph2">`DataTable`</ph>'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the assumption is that the intent is to aggregate data from one or more data sources in the <ph id="ph1">`DataTable`</ph>, and then perhaps propagate the data back to the primary data source.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.LoadOption&gt;</ph> parameter is used for determining the specific version of the row that is to be used for primary key comparison.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>The table below provides the details.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>Load option</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>DataRow version used for primary key comparison</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original version, if it exists, otherwise Current version</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>Original version, if it exists, otherwise Current version</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>Current version, if it exists, otherwise Original version</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`errorHandler`</ph> parameter is a <ph id="ph2">&lt;xref:System.Data.FillErrorEventHandler&gt;</ph> delegate that refers to a procedure that is called when an error occurs while loading data.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.FillErrorEventArgs&gt;</ph> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> being filled.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.FillErrorEventArgs&gt;</ph> parameter supplies a <ph id="ph2">&lt;xref:System.Data.FillErrorEventArgs.Continue%2A&gt;</ph> property: set this property to <ph id="ph3">`true`</ph> to indicate that you have handled the error and wish to continue processing.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the property to <ph id="ph1">`false`</ph> to indicate that you wish to halt processing.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be aware that setting the property to <ph id="ph1">`false`</ph> causes the code that triggered the problem to throw an exception.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.IDataReader"&gt;&lt;/xref&gt;</ph> that provides a result set.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>A value from the <ph id="ph1">&lt;xref href="System.Data.LoadOption"&gt;&lt;/xref&gt;</ph> enumeration that indicates how rows already in the <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> are combined with incoming rows that share the same primary key.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.FillErrorEventHandler"&gt;&lt;/xref&gt;</ph> delegate to call when an error occurs while loading data.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Finds and updates a specific row.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>If no matching row is found, a new row is created using the given values.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> method takes an array of values and finds the matching value(s) in the primary key column(s).</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a column has a default value, pass a null value in the array to set the default value for that column.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, if a column has its <ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> property set to true, pass a null value in the array to set the automatically generated value for the row.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`fAcceptChanges`</ph> parameter is <ph id="ph2">`true`</ph> or not specified, the new data is added and then <ph id="ph3">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> is called to accept all changes in the <ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>; if the argument is <ph id="ph5">`false`</ph>, newly added rows are marked as insertions, and changes to existing rows are marked as modifications.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions can also occur during either a <ph id="ph1">&lt;xref:System.Data.DataTable.ColumnChanging&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception occurs, the row is not added to the table.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> in conjunction with <ph id="ph2">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>An array of values used to create the new row.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to accept changes; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>The array is larger than the number of columns in the table.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>A value doesn't match its respective column type.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Adding the row invalidates a constraint.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Attempting to put a null in a column where <ph id="ph1">&lt;xref href="System.Data.DataColumn.AllowDBNull"&gt;&lt;/xref&gt;</ph> is false.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Finds and updates a specific row.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>If no matching row is found, a new row is created using the given values.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> method takes an array of values and finds the matching value(s) in the primary key column(s).</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a column has a default value, pass a null value in the array to set the default value for that column.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, if a column has its <ph id="ph1">&lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;</ph> property set to true, pass a null value in the array to set the automatically generated value for the row.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`loadOption`</ph> parameter is used to determine how the values in the array are applied to an existing row.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if <ph id="ph1">`loadOption`</ph> is set to <ph id="ph2">`OverwriteChanges`</ph>, the <ph id="ph3">`Original`</ph> and <ph id="ph4">`Current`</ph> values of each column are replaced with the values in the incoming row and the <ph id="ph5">`RowState`</ph> property is set to <ph id="ph6">`Unchanged`</ph>.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions can also occur during either a <ph id="ph1">&lt;xref:System.Data.DataTable.ColumnChanging&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataTable.RowChanging&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception occurs, the row is not added to the table.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Data.DataTable.LoadDataRow%2A&gt;</ph> in conjunction with <ph id="ph2">&lt;xref:System.Data.DataTable.BeginLoadData%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataTable.EndLoadData%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>An array of values used to create the new row.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Used to determine how the array values are applied to the corresponding values in an existing row.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Gets or sets the locale information used to compare strings within the table.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> represents the software preferences of a particular culture or community.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>When used for string comparisons, the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> affects sorting, comparisons, and filtering.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT">
          <source>In columns that contain expressions, the <ph id="ph1">&lt;xref:System.StringComparison.InvariantCulture&gt;</ph> is used.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.StringComparison.CurrentCulture&gt;</ph> is ignored.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> that contains data about the user's machine locale.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>The default is the <ph id="ph1">&lt;xref href="System.Data.DataSet"&gt;&lt;/xref&gt;</ph> object's <ph id="ph2">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> (returned by the <ph id="ph3">&lt;xref href="System.Data.DataSet.Locale"&gt;&lt;/xref&gt;</ph> property) to which the <ph id="ph4">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> belongs; if the table doesn't belong to a <ph id="ph5">&lt;xref href="System.Data.DataSet"&gt;&lt;/xref&gt;</ph>, the default is the current system <ph id="ph6">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Merge the specified <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> with the current <ph id="ph2">`DataTable`</ph>, indicating whether to preserve changes and how to handle missing schema in the current <ph id="ph3">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Merge`</ph> method is used to merge two <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> objects that have largely similar schemas.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows the client application to have a refreshed <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with the latest data from the data source.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT">
          <source>The merge operation takes into account only the original table, and the table to be merged.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT">
          <source>Child tables are not affected or included.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Merge`</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT">
          <source>When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the <ph id="ph1">`preserveChanges`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`preserveChanges`</ph> parameter is set to <ph id="ph2">`true`</ph>, incoming values do not overwrite existing values in the Current row version of the existing row.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`preserveChanges`</ph> parameter is set to <ph id="ph2">`false`</ph>, incoming values do overwrite the existing values in the Current row version of the existing row.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about row versions, see <bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph> method is first invoked.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT">
          <source>That method returns a second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> optimized for validating and merging.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT">
          <source>This second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object contains only the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT">
          <source>This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT">
          <source>The middle tier component then updates the original data source with the changes through stored procedures.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT">
          <source>The middle tier can then send back either a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> can be merged back into the client application's original <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> with the <ph id="ph3">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph> method is called, the schemas of the two <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> objects are compared, because it is possible that the schemas may have been changed.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> contains schema elements (added <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id="ph3">`missingSchemaAction`</ph> argument to <ph id="ph4">`MissingSchemaAction.Add`</ph>.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the merged <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> contains the added schema and data.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT">
          <source>After merging schemas, the data is merged.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT">
          <source>When merging a new source <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> into the target, any source rows with a <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph3">`Unchanged`</ph>, <ph id="ph4">`Modified`</ph>, or <ph id="ph5">`Deleted`</ph> are matched to target rows with the same primary key values.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT">
          <source>Source rows with a <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to be merged with the current <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph>, to preserve changes in the current <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>; otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.MissingSchemaAction"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Merge the specified <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> with the current <ph id="ph2">`DataTable`</ph>, indicating whether to preserve changes in the current <ph id="ph3">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Merge method is used to merge two <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> objects that have largely similar schemas.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows the client application to have a refreshed <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with the latest data from the data source.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT">
          <source>The merge operation takes into account only the original table, and the table to be merged.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT">
          <source>Child tables are not affected or included.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Merge`</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT">
          <source>When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the <ph id="ph1">`preserveChanges`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`preserveChanges`</ph> parameter is set to <ph id="ph2">`true`</ph>, incoming values do not overwrite existing values in the Current row version of the existing row.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`preserveChanges`</ph> parameter is set to <ph id="ph2">`false`</ph>, incoming values do overwrite the existing values in the Current row version of the existing row.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about row versions, see <bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph> method is first invoked.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT">
          <source>That method returns a second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> optimized for validating and merging.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT">
          <source>This second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object contains only the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>The middle tier component then updates the original data source with the changes through stored procedures.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT">
          <source>The middle tier can then send back either a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> can be merged back into the client application's original <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> with the <ph id="ph3">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT">
          <source>When merging a new source <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> into the target, any source rows with a <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph3">`Unchanged`</ph>, <ph id="ph4">`Modified`</ph>, or <ph id="ph5">`Deleted`</ph> are matched to target rows with the same primary key values.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT">
          <source>Source rows with a <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataTable`</ph> to be merged with the current <ph id="ph2">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph>, to preserve changes in the current <ph id="ph2">`DataTable`</ph>; otherwise <ph id="ph3">`false`</ph>.``</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Merge the specified <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> with the current <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Merge method is used to merge two <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> objects that have largely similar schemas.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows the client application to have a refreshed <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> with the latest data from the data source.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT">
          <source>The merge operation takes into account only the original table, and the table to be merged.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT">
          <source>Child tables are not affected or included.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Merge`</ph> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT">
          <source>When performing a merge, changes made to the existing data before the merge are preserved by default during the merge operation.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT">
          <source>Developers can modify this behavior by calling one of the other two overloads for this method, and specifying a false value for the <ph id="ph1">`preserveChanges`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph> method is first invoked.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT">
          <source>That method returns a second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> optimized for validating and merging.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT">
          <source>This second <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object contains only the <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> objects that were changed, resulting in a subset of the original <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT">
          <source>This subset is generally smaller and thus more efficiently passed back to a middle tier component.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>The middle tier component then updates the original data source with the changes through stored procedures.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT">
          <source>The middle tier can then send back either a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> can be merged back into the client application's original <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> with the <ph id="ph3">&lt;xref:System.Data.DataTable.Merge%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT">
          <source>When merging a new source <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> into the target, any source rows with a <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph3">`Unchanged`</ph>, <ph id="ph4">`Modified`</ph>, or <ph id="ph5">`Deleted`</ph>, is matched to target rows with the same primary key values.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT">
          <source>Source rows with a <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to be merged with the current <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Gets or sets the initial starting size for this table.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.MinimumCapacity%2A&gt;</ph> allows the system to create an appropriate set of resources before fetching data.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a situation when performance is critical, setting this property can optimize performance.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>The initial starting size in rows of this table.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>The default is 50.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Gets or sets the namespace for the XML representation of the data stored in the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>The namespace of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> with the same schema as the table.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must use the <ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> method to create new <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> objects with the same schema as the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT">
          <source>After creating a <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>, you can add it to the <ph id="ph2">&lt;xref:System.Data.DataRowCollection&gt;</ph>, through the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph> object's <ph id="ph4">&lt;xref:System.Data.DataTable.Rows%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> to create new rows, the rows must be added to or deleted from the data table before you call <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> with the same schema as the <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Returns an array of <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that describes the size of the array.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>The new array.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Creates a new row from an existing row.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataRowBuilder"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> derived class.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Data.DataTable.ColumnChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataColumnChangeEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Data.DataTable.ColumnChanging"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataColumnChangeEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.ComponentModel.INotifyPropertyChanged.PropertyChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.PropertyChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Notifies the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> that a <ph id="ph2">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> is being removed.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> being removed.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Data.DataTable.RowChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataRowChangeEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Data.DataTable.RowChanging"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataRowChangeEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Data.DataTable.RowDeleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataRowChangeEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Data.DataTable.RowDeleting"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataRowChangeEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Data.DataTable.TableCleared"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raises the <ph id="ph1">&lt;xref:System.Data.DataTable.TableCleared&gt;</ph> event, which is fired immediately after all rows have been successfully cleared but before the <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph> method returns control back to the caller.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataTableClearEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Data.DataTable.TableClearing"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raises the <ph id="ph1">&lt;xref:System.Data.DataTable.TableClearing&gt;</ph> event, which is fired before processing of the <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph> operation begins.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataTableClearEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Data.DataTable.TableNewRow"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raises the <ph id="ph1">&lt;xref:System.Data.DataTable.TableNewRow&gt;</ph> event, which fires after a new <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> has been created using <ph id="ph3">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataTableNewRowEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Gets the collection of parent relations for this <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataRelationCollection"&gt;&lt;/xref&gt;</ph> that contains the parent relations for the table.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>An empty collection is returned if no <ph id="ph1">&lt;xref href="System.Data.DataRelation"&gt;&lt;/xref&gt;</ph> objects exist.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Gets or sets the namespace for the XML representation of the data stored in the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>The prefix of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Gets or sets an array of columns that function as primary keys for the data table.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT">
          <source>The primary key of a table must be unique to identify the record in the table.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT">
          <source>It's also possible to have a table with a primary key made up of two or more columns.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurs when a single column can't contain enough unique values.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a two column primary key might consist of a "FirstName" and "LastName" column.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because primary keys can be made up of more than one column, the <ph id="ph1">&lt;xref:System.Data.DataTable.PrimaryKey%2A&gt;</ph> property consists of an array of <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.Data.DataColumn"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>The key is a foreign key.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>Reads XML schema and data into the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified <ph id="ph2">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and its descendents are loaded with the data from the supplied <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of this method is identical to that of the <ph id="ph1">&lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName&gt;</ph> method, except that in this case, data is loaded only for the current table and its descendants.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method reads only the schema.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph2">`DataColumn`</ph> or <ph id="ph3">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>An object that derives from <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.XmlReadMode"&gt;&lt;/xref&gt;</ph> used to read the data.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Reads XML schema and data into the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified <ph id="ph2">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and its descendents are loaded with the data from the supplied <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of this method is identical to that of the <ph id="ph1">&lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName&gt;</ph> method, except that in this case, data is loaded only for the current table and its descendants.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method reads only the schema.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph2">`DataColumn`</ph> or <ph id="ph3">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph> that will be used to read the data.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.XmlReadMode"&gt;&lt;/xref&gt;</ph> used to read the data.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Reads XML schema and data into the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> from the specified file.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and its descendents are loaded with the data from the file named in the supplied <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of this method is identical to that of the <ph id="ph1">&lt;xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName&gt;</ph> method, except that in this case, data is loaded only for the current table and its descendants.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method reads only the schema.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph2">`DataColumn`</ph> or <ph id="ph3">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>The name of the file from which to read the data.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.XmlReadMode"&gt;&lt;/xref&gt;</ph> used to read the data.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Reads XML Schema and Data into the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified <ph id="ph2">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and its descendents are loaded with the data from the file named in the supplied <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of this method is identical to that of the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method, except that in this case, data is loaded only for the current table and its descendants.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method provides a way to read either data only, or both data and schema into a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> from an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method reads only the schema.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph2">`DataColumn`</ph> or <ph id="ph3">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> that will be used to read the data.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.XmlReadMode"&gt;&lt;/xref&gt;</ph> used to read the data.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Reads an XML schema into the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified stream.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write a schema to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is interpreted according to the XSD standard.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ReadXmlSchema`</ph> method is generally invoked before invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method which is used to fill the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a nested relation using XML schema, use implicit nested elements.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also configure the nested relation to use explicit column names.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>The stream used to read the schema.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Reads an XML schema into the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified <ph id="ph2">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write a schema to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is interpreted according to the XSD standard.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ReadXmlSchema`</ph> method is generally invoked before invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method which is used to fill the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a nested relation using XML schema, use implicit nested elements.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also reconfigure the nested relation to use explicit column names.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph> used to read the schema information.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>Reads an XML schema into the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> from the specified file.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write a schema to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is interpreted according to the XSD standard.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ReadXmlSchema`</ph> method is generally invoked before invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method which is used to fill the <ph id="ph3">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a nested relation using XML schema, use implicit nested elements.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also reconfigure the nested relation to use explicit column names.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>The name of the file from which to read the schema information.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Reads an XML schema into the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified <ph id="ph2">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> method to create the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write a schema to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is interpreted according to the XSD standard.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ReadXmlSchema`</ph> method is generally invoked before invoking the <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> method which is used to fill the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT">
          <source>The way to create a nested relation using XML schema is to have implicit nested elements.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, the nested relation could be re-wired, to use explicit column names.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is mandatory for elements to be implicitly nested for the corresponding DataTables to participate in a nested relation.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> used to read the schema information.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Reads from an XML stream.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>Rolls back all changes that have been made to the table since it was loaded, or the last time <ph id="ph1">&lt;xref href="System.Data.DataTable.AcceptChanges"&gt;&lt;/xref&gt;</ph> was called.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Data.DataTable.RejectChanges%2A&gt;</ph> is called, any <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph> objects that are still in edit-mode cancel their edits.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT">
          <source>New rows are removed.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rows with the <ph id="ph1">&lt;xref:System.Data.DataRowState&gt;</ph> set to <ph id="ph2">`Modified`</ph> or <ph id="ph3">`Deleted`</ph> return back to their original state.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>Gets or sets the serialization format.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.SerializationFormat"&gt;&lt;/xref&gt;</ph> enumeration specifying either <ph id="ph2">`Binary`</ph> or <ph id="ph3">`Xml`</ph> serialization.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>Resets the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to its original state.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>Reset removes all data, indexes, relations, and columns of the table.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>If a DataSet includes a DataTable, the table will still be part of the DataSet after the table is reset.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>Occurs after a <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> has been changed successfully.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>Occurs when a <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> is changing.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Occurs after a row in the table has been deleted.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>Occurs before a row in the table is about to be deleted.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling DataTable Events<ept id="p1">](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>Gets the collection of rows that belong to this table.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a new <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph>, you must use the <ph id="ph2">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph> method to return a new object.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such an object is automatically configured according to the schema defined for the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> through its collection of <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT">
          <source>After creating a new row and setting the values for each column in the row, add the row to the <ph id="ph1">&lt;xref:System.Data.DataRowCollection&gt;</ph> using the <ph id="ph2">`Add`</ph> method.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> in the collection represents a row of data in the table.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT">
          <source>To commit a change to the value of a column in the row, you must invoke the <ph id="ph1">&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Data.DataRowCollection"&gt;&lt;/xref&gt;</ph> that contains <ph id="ph2">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects; otherwise a null value if no <ph id="ph3">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects exist.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>Gets an array of all <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure the proper sort order, specify sort criteria with <ph id="ph1">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>Gets an array of all <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects that match the filter criteria.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create the <ph id="ph1">`filterExpression`</ph> argument, use the same rules that apply to the <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> class's <ph id="ph3">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property value for creating filters.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure the proper sort order, specify sort criteria with <ph id="ph1">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataTable.Select%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the column on the filter contains a null value, it will not be part of the result.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>The criteria to use to filter the rows.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>For examples on how to filter rows, see <bpt id="p1">[</bpt>DataView RowFilter Syntax [C#]<ept id="p1">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>Gets an array of all <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects that match the filter criteria, in the specified sort order.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT">
          <source>To form the <ph id="ph1">`filterExpression`</ph> argument, use the same rules for creating the <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> class's <ph id="ph3">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Sort`</ph> argument also uses the same rules for creating class's <ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> strings.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the column on the filter contains a null value, it will not be part of the result.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>The criteria to use to filter the rows.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>For examples on how to filter rows, see <bpt id="p1">[</bpt>DataView RowFilter Syntax [C#]<ept id="p1">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>A string specifying the column and sort direction.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects matching the filter expression.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>Gets an array of all <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects that match the filter in the order of the sort that match the specified state.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT">
          <source>To form the <ph id="ph1">`filterExpression`</ph> argument, use the same rules for creating the <ph id="ph2">&lt;xref:System.Data.DataColumn&gt;</ph> class's <ph id="ph3">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Sort`</ph> argument also uses the same rules for creating class's <ph id="ph2">&lt;xref:System.Data.DataColumn.Expression%2A&gt;</ph> strings.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the column on the filter contains a null value, it will not be part of the result.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>The criteria to use to filter the rows.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>For examples on how to filter rows, see <bpt id="p1">[</bpt>DataView RowFilter Syntax [C#]<ept id="p1">](http://www.csharp-examples.net/dataview-rowfilter/)</ept>.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>A string specifying the column and sort direction.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.DataViewRowState"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>Gets or sets an <ph id="ph1">&lt;xref href="System.ComponentModel.ISite"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sites bind a <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id="ph2">&lt;xref:System.ComponentModel.Container&gt;</ph> and enable communication between them, as well as provide a way for the container to manage its components.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ComponentModel.ISite"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>Occurs after a <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> is cleared.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.TableCleared&gt;</ph> event is fired immediately after all rows have been successfully cleared but before the <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph> method returns control back to the caller.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.TableCleared&gt;</ph> event is not fired if there are any exceptions during the clear operation.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>Occurs when a <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> is cleared.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.TableClearing&gt;</ph> event is fired before processing of the <ph id="ph2">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph> operation begins.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is always fired when the <ph id="ph1">&lt;xref:System.Data.DataTable.Clear%2A&gt;</ph> method is invoked, even if the table contains zero rows.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph> is used to return this table from the parent <ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> object's <ph id="ph3">&lt;xref:System.Data.DataTableCollection&gt;</ph> (returned by the <ph id="ph4">&lt;xref:System.Data.DataSet.Tables%2A&gt;</ph> property).</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>The name of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`null`</ph> or empty string ("") is passed in and this table belongs to a collection.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>The table belongs to a collection that already has a table with the same name.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>(Comparison is case-sensitive).</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>Occurs when a new <ph id="ph1">&lt;xref href="System.Data.DataRow"&gt;&lt;/xref&gt;</ph> is inserted.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fires after a new <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> has been created using <ph id="ph2">&lt;xref:System.Data.DataTable.NewRow%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is fired before the invoked <ph id="ph1">`NewRow`</ph> method returns.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new <ph id="ph1">&lt;xref:System.Data.DataRow&gt;</ph> instance is detached; it has not been added to the collection.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Data.DataTable.TableName"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Data.DataTable.DisplayExpression"&gt;&lt;/xref&gt;</ph>, if there is one as a concatenated string.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT">
          <source>Gets the <ph id="ph1">&lt;xref:System.Data.DataTable.TableName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.DisplayExpression%2A&gt;</ph> for the <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>A string consisting of the <ph id="ph1">&lt;xref href="System.Data.DataTable.TableName"&gt;&lt;/xref&gt;</ph> and the <ph id="ph2">&lt;xref href="System.Data.DataTable.DisplayExpression"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>Writes the current contents of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as XML using the specified file.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>The file to which to write the XML data.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>To save the data for the table and all its descendants, set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writeHierarchy</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, the <ph id="ph1">`WriteXml`</ph> method saves data only for the current table.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data for the current table and all of its descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> used to write the document.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the contents of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the data for the current table only.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to the specified file using the specified <ph id="ph2">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>To save the data for the table and all its descendants, set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writeHierarchy</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">`DataTable`</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">`XmlWriteMode`</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, the <ph id="ph1">`WriteXml`</ph> method saves data only for the current table.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">`DataTable`</ph> into an XML document, whereas the <ph id="ph3">`WriteXmlSchema`</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">`XmlWriteMode`</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data for the current table and all of its descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>The stream to which the data will be written.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the contents of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the data for the current table only.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> used to write the document.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>Writes the current contents of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as XML using the specified <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> with which to write the contents.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the contents of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the data for the current table only.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified file and <ph id="ph2">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>The name of the file to which the data will be written.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>Writes the current contents of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as XML using the specified file.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>To save the data for the table and all its descendants, set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writeHierarchy</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data for the current table and all of its descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>The file to which to write the XML data.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the contents of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the data for the current table only.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> used to write the document.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>Writes the current contents of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as XML using the specified <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>To save the data for the table and all its descendants, set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writeHierarchy</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data for the current table and all its descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> with which to write the content.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the contents of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the data for the current table only.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> to the specified file using the specified <ph id="ph2">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>The stream to which the data will be written.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>To save the data for the table and all its descendants, set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writeHierarchy</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> used to write the document.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the contents of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the data for the current table only.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>Writes the current contents of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as XML using the specified <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> with which to write the contents.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> using the specified file and <ph id="ph2">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>To save the data for the table and all its descendants, set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writeHierarchy</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, the <ph id="ph1">`WriteXml`</ph> method saves data only for the current table.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to save the data for the current table and all of schema, the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that include the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data for the current table and all descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>The name of the file to which the data will be written.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Data.XmlWriteMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the contents of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the data for the current table only.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>Writes the current contents of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as XML using the specified <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> with which to write the content.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>Writes the current contents of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as XML using the specified <ph id="ph2">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method provides a way to write either data only, or both data and schema from a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> into an XML document, whereas the <ph id="ph3">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method writes only the schema.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">&lt;xref:System.Data.XmlWriteMode&gt;</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the same is true for the <ph id="ph1">&lt;xref:System.Data.DataTable.ReadXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataTable.ReadXmlSchema%2A&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataTable`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>The stream to which the data will be written.</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>Writes the current contents of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as XML using the specified <ph id="ph2">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>To save the data for the table and all its descendants, set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writeHierarchy</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is written using the XSD standard.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXml`</ph> method writes the data only for the current table.</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data for the current table and all of its descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements <ph id="ph3">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> and does not implement <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>The stream to which the data will be written.</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the contents of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the data for the current table only.</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Writes the current data structure of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as an XML schema using the specified <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is written using the XSD standard.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> with which to write.</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>Writes the current data structure of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as an XML schema to the specified file.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is written using the XSD standard.</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>The name of the file to use.</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>Writes the current data structure of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as an XML schema using the specified <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is written using the XSD standard.</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> to use.</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>Writes the current data structure of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as an XML schema to the specified stream.</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source>To save the schema for the table and all its descendants, set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writeHierarchy</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is written using the XSD standard.</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXmlSchema`</ph> method writes the schema only for the current table.</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>The stream to which the XML schema will be written.</source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the schema of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the schema for the current table only.</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source>Writes the current data structure of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as an XML schema using the specified <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source>To save the schema for the table and all its descendants, set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writeHierarchy</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is written using the XSD standard.</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXmlSchema`</ph> method writes the schema only for the current table.</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> with which to write.</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the schema of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the schema for the current table only.</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>Writes the current data structure of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as an XML schema using the specified <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>To save the schema for the table and all its descendants, set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writeHierarchy</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is written using the XSD standard.</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXmlSchema`</ph> method writes the schema only for the current table.</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> used to write the document.</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the schema of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the schema for the current table only.</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>Writes the current data structure of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as an XML schema to the specified file.</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source>To save the schema for the table and all its descendants, set the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writeHierarchy</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is written using the XSD standard.</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally the <ph id="ph1">`WriteXmlSchema`</ph> method writes the schema only for the current table.</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the schema for the current table and its entire descendant, related tables, call the method with the <ph id="ph1">`writeHierarchy`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source>The name of the file to use.</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, write the schema of the current table and all its descendants.</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph> (the default value), write the schema for the current table only.</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source>Writes the current data structure of the <ph id="ph1">&lt;xref href="System.Data.DataTable"&gt;&lt;/xref&gt;</ph> as an XML schema to the specified stream.</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXmlSchema%2A&gt;</ph> method to write the schema for a <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> to an XML document.</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT">
          <source>The schema includes table, relation, and constraint definitions.</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema is written using the XSD standard.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the data to an XML document, use the <ph id="ph1">&lt;xref:System.Data.DataTable.WriteXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source>The stream to which the XML schema will be written.</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.ComponentModel.IListSource.ContainsListCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.ComponentModel.IListSource&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the collection is a collection of <ph id="ph2">&lt;xref href="System.Collections.IList"&gt;&lt;/xref&gt;</ph> objects; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.ComponentModel.IListSource.GetList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.ComponentModel.IListSource&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IList"&gt;&lt;/xref&gt;</ph> that can be bound to a data source from the object.</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Xml.Serialization.IXmlSerializable.GetSchema"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchema"&gt;&lt;/xref&gt;</ph> that describes the XML representation of the object that is produced by the <ph id="ph2">&lt;xref href="System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"&gt;&lt;/xref&gt;</ph> method and consumed by the <ph id="ph3">&lt;xref href="System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>An XmlReader.</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>An XmlWriter.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>