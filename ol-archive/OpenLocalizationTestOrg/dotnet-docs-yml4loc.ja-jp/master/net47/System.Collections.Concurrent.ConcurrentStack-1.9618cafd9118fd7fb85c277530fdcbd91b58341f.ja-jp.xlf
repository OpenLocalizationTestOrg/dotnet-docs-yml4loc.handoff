<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39d884b35b199e16bb4ff7ebc2620056df23c1c6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Collections.Concurrent.ConcurrentStack-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5207471b831a2d713665bda314d90ca4758d9888</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff712c14293d1c431156868583807089d00fba2a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a thread-safe last in-first out (LIFO) collection.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph> interface starting with the <ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>; in previous versions of the .NET Framework, the <ph id="ph4">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> class did not implement this interface.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> provides a few main operations:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A&gt;</ph> inserts an element at the top of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A&gt;</ph> removes an element from the top of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>, or returns <ph id="ph3">`false`</ph> if the item cannot be removed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPeek%2A&gt;</ph> returns an element that is at the top of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> but does not remove it from the <ph id="ph3">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPopRange%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.PushRange%2A&gt;</ph> methods provide efficient pushing and popping of multiple elements in a single operation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type of the elements contained in the stack.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified collection</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The collection whose elements are copied to the new <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">collection</ph><ept id="p1">&lt;/code&gt;</ept> argument is null.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Removes all objects from the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Copies the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> elements to an existing one-dimensional <ph id="ph2">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph>, starting at the specified array index.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The one-dimensional <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The zero-based index in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> at which copying begins.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than the length of the <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph> -or- The number of elements in the source <ph id="ph3">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> is greater than the available space from <ph id="ph4">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id="ph5">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>For determining whether the collection contains any items, use of the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.IsEmpty%2A&gt;</ph> property is recommended rather than retrieving the number of items from the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Count%2A&gt;</ph> property and comparing it to 0.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The number of elements contained in the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumeration represents a moment-in-time snapshot of the contents of the stack.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not reflect any updates to the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.GetEnumerator%2A&gt;</ph> was called.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator is safe to use concurrently with reads from and writes to the stack.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator returns items in LIFO (last-in, first-out) order.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An enumerator for the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For determining whether the collection contains any items, use of this property is recommended rather than retrieving the number of items from the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Count%2A&gt;</ph> property and comparing it to 0.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, as this collection is intended to be accessed concurrently, it may be the case that another thread will modify the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.IsEmpty%2A&gt;</ph> returns, thus invalidating the result.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a code example, see <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>true if the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> is empty; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Inserts an object at the top of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The object to push onto the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The value can be a null reference (Nothing in Visual Basic) for reference types.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Inserts multiple objects at the top of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> atomically.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>When adding multiple items to the stack, using PushRange is a more efficient mechanism than using <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A&gt;</ph> one item at a time.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, PushRange guarantees that all of the elements will be added atomically, meaning that no other threads will be able to inject elements between the elements being pushed.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Items at lower indices in the <ph id="ph1">`items`</ph> array will be pushed before items at higher indices.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a code example, see <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The objects to push onto the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;items&lt;/code&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Inserts multiple objects at the top of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> atomically.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>When adding multiple items to the stack, using PushRange is a more efficient mechanism than using <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A&gt;</ph> one item at a time.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, PushRange guarantees that all of the elements will be added atomically, meaning that no other threads will be able to inject elements between the elements being pushed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Items at lower indices in the <ph id="ph1">`items`</ph> array will be pushed before items at higher indices.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a code example, see <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The objects to push onto the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The zero-based offset in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">items</ph><ept id="p1">&lt;/code&gt;</ept> at which to begin inserting elements onto the top of the <ph id="ph2">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The number of elements to be inserted onto the top of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;items&lt;/code&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Or <ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;code&gt;items&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of <ph id="ph3">&lt;code&gt;items&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Copies the items stored in the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> to a new array.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A new array containing a snapshot of elements copied from the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Attempts to return an object from the top of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> without removing it.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When this method returns, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">result</ph><ept id="p1">&lt;/code&gt;</ept> contains an object from the top of the <ph id="ph2">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> or an unspecified value if the operation failed.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>true if and object was returned successfully; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Attempts to pop and return the object at the top of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a code example, see <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When this method returns, if the operation was successful, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">result</ph><ept id="p1">&lt;/code&gt;</ept> contains the object removed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If no object was available to be removed, the value is unspecified.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>true if an element was removed and returned from the top of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> successfully; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Attempts to pop and return multiple objects from the top of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> atomically.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>When popping multiple items, if there is little contention on the stack, using TryPopRange can be more efficient than using <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A&gt;</ph> once per item to be removed.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Nodes fill the <ph id="ph1">`items`</ph> array with the first item to be popped at the startIndex, the second item to be popped at startIndex + 1, and so on.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> to which objects popped from the top of the <ph id="ph2">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> will be added.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The zero-based offset in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">items</ph><ept id="p1">&lt;/code&gt;</ept> at which to begin inserting elements from the top of the <ph id="ph2">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The number of elements to be popped from top of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> and inserted into <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">items</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The number of objects successfully popped from the top of the stack and inserted in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">items</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;items&lt;/code&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Or <ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;code&gt;items&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph><ph id="ph2"> + &lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of <ph id="ph3">&lt;code&gt;items&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Attempts to pop and return multiple objects from the top of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> atomically.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>When popping multiple items, if there is little contention on the stack, using <ph id="ph1">`TryPopRange`</ph> can be more efficient than using <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A&gt;</ph> once per item to be removed.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Nodes fill the <ph id="ph1">`items`</ph> array with the first item to be popped at the startIndex, the second item to be popped at startIndex + 1, and so on.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a code example, see <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> to which objects popped from the top of the <ph id="ph2">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> will be added.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The number of objects successfully popped from the top of the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph> and inserted in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">items</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;items&lt;/code&gt;</ph> is a null argument (Nothing in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Attempts to add an object to the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.IProducerConsumerCollection`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>, this operation will always insert the object onto the top of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> and return true.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The object to add to the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.IProducerConsumerCollection`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The value can be a null reference (Nothing in Visual Basic) for reference types.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>true if the object was added successfully; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Attempts to remove and return an object from the <ph id="ph1">&lt;xref href="System.Collections.Concurrent.IProducerConsumerCollection`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>, this operation will attempt to pop the object at the top of the <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>When this method returns, if the operation was successful, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">item</ph><ept id="p1">&lt;/code&gt;</ept> contains the object removed.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If no object was available to be removed, the value is unspecified.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>true if an element was removed and returned succesfully; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Copies the elements of the <ph id="ph1">&lt;xref href="System.Collections.ICollection"&gt;&lt;/xref&gt;</ph> to an <ph id="ph2">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph>, starting at a particular <ph id="ph3">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> index.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The one-dimensional <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from the <ph id="ph2">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The zero-based index in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> at which copying begins.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>-or- <ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> does not have zero-based indexing.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>-or- <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than the length of the <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph> -or- The number of elements in the source <ph id="ph3">&lt;xref href="System.Collections.ICollection"&gt;&lt;/xref&gt;</ph> is greater than the available space from <ph id="ph4">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id="ph5">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>-or- The type of the source <ph id="ph1">&lt;xref href="System.Collections.ICollection"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;xref href="System.Collections.ICollection"&gt;&lt;/xref&gt;</ph> is synchronized with the SyncRoot.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>true if access to the <ph id="ph1">&lt;xref href="System.Collections.ICollection"&gt;&lt;/xref&gt;</ph> is synchronized with the SyncRoot; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">&lt;xref href="System.Collections.Concurrent.ConcurrentStack`1"&gt;&lt;/xref&gt;</ph>, this property always returns false.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;xref href="System.Collections.ICollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This property is not supported.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Returns null (Nothing in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The SyncRoot property is not supported</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Returns an enumerator that iterates through a collection.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumeration represents a moment-in-time snapshot of the contents of the stack.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not reflect any updates to the collection after <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601.GetEnumerator%2A&gt;</ph> was called.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator is safe to use concurrently with reads from and writes to the stack.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IEnumerator"&gt;&lt;/xref&gt;</ph> that can be used to iterate through the collection.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>