<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f2aef2e7b190c8dda456ce129f7954d677a2383</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Reflection.Emit.ILGenerator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c08e809e310772265ac720e79739e1de39d05c02</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f81e6d86c6c8499735aed493fe570788585284d3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Generates Microsoft intermediate language (MSIL) instructions.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> classes) and for standalone dynamic methods (represented by the <ph id="ph4">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain an <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=fullName&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=fullName&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>MSIL is used as input to a just-in-time (JIT) compiler.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Begins a catch block.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Emits a branch instruction to the end of the current exception block.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the filter exception block returns the <ph id="ph1">`constant exception_execute_handler`</ph> (see the documentation for the Common Language Infrastructure Instruction Set), the argument to the <ph id="ph2">`BeginCatchBlock`</ph> is not checked.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object that represents the exception.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The catch block is within a filtered exception.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;exceptionType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Begins an exception block for a filtered exception.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Emits a branch instruction to the end of the current exception block.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, emitting filtered exception blocks is not supported.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> can be used to construct a dynamic method that uses filtered exception blocks.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref href="System.Reflection.Emit.ILGenerator"&gt;&lt;/xref&gt;</ph> belongs to a <ph id="ph2">&lt;xref href="System.Reflection.Emit.DynamicMethod"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Begins an exception block for a non-filtered exception.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating an exception block records some information, but does not actually emit any Microsoft intermediate language (MSIL) onto the stream.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The label for the end of the block.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This will leave you in the correct place to execute finally blocks or to finish the try.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, emitting exception fault blocks is not supported.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> can be used to construct a dynamic method that uses exception fault blocks.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The MSIL being generated is not currently in an exception block.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref href="System.Reflection.Emit.ILGenerator"&gt;&lt;/xref&gt;</ph> belongs to a <ph id="ph2">&lt;xref href="System.Reflection.Emit.DynamicMethod"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The MSIL being generated is not currently in an exception block.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Begins a lexical scope.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used to emit symbolic information.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Local variables declared after <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph> are scoped until the corresponding <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.EndScope%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref href="System.Reflection.Emit.ILGenerator"&gt;&lt;/xref&gt;</ph> belongs to a <ph id="ph2">&lt;xref href="System.Reflection.Emit.DynamicMethod"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Declares a local variable of the specified type.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The local variable is created in the current lexical scope; for example, if code is being emitted in a <ph id="ph1">`for`</ph> loop (<ph id="ph2">`For`</ph> loop in Visual Basic), the scope of the variable is the loop.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>A local variable created with this overload is not pinned.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a pinned variable for use with unmanaged pointers, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29&gt;</ph> method overload.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object that represents the type of the local variable.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The declared local variable.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;localType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The containing type has been created by the <ph id="ph1">&lt;xref href="System.Reflection.Emit.TypeBuilder.CreateType"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Declares a local variable of the specified type, optionally pinning the object referred to by the variable.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The local variable is created in the current lexical scope; for example, if code is being emitted in a <ph id="ph1">`for`</ph> loop (<ph id="ph2">`For`</ph> loop in Visual Basic), the scope of the variable is the loop.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>While the referenced object is pinned, it cannot be moved by garbage collection.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object that represents the type of the local variable.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to pin the object in memory; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Reflection.Emit.LocalBuilder"&gt;&lt;/xref&gt;</ph> object that represents the local variable.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;localType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The containing type has been created by the <ph id="ph1">&lt;xref href="System.Reflection.Emit.TypeBuilder.CreateType"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The method body of the enclosing method has been created by the <ph id="ph1">&lt;xref href="System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The method with which this <ph id="ph1">&lt;xref href="System.Reflection.Emit.ILGenerator"&gt;&lt;/xref&gt;</ph> is associated is not represented by a <ph id="ph2">&lt;xref href="System.Reflection.Emit.MethodBuilder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Declares a new label.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the position of the label within the stream, you must call <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is just a token and does not yet represent any particular location within the stream.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns a new label that can be used as a token for branching.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The location of <ph id="ph1">`cls`</ph> is recorded so that the token can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be put onto the stream.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cls&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The location of <ph id="ph1">`str`</ph> is recorded for future fixups if the module is persisted to a portable executable (PE) file.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String`</ph> to be emitted.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be put onto the stream.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Single`</ph> argument pushed onto the stream immediately after the instruction.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be put onto the stream.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The character argument pushed onto the stream immediately after the instruction.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The location of <ph id="ph1">`field`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`FieldInfo`</ph> representing a field.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A helper for constructing a signature token.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A local variable.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The parent method of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">local</ph><ept id="p1">&lt;/code&gt;</ept> parameter does not match the method associated with this <ph id="ph2">&lt;xref href="System.Reflection.Emit.ILGenerator"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;local&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;opcode&lt;/code&gt;</ph> is a single-byte instruction, and <ph id="ph2">&lt;code&gt;local&lt;/code&gt;</ph> represents a local variable with an index greater than <ph id="ph3">`Byte.MaxValue`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Emits a switch table.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Labels are created using <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph> and their location within the stream is fixed by using <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`opcode`</ph> must represent a branch instruction.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because branches are relative instructions, <ph id="ph1">`label`</ph> will be replaced with the correct offset to branch during the fixup process.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The array of label objects to which to branch from this location.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>All of the labels will be used.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;con&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This exception is new in the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The location of <ph id="ph1">`meth`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`meth`</ph> represents a generic method, it must be a generic method definition.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, its <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A?displayProperty=fullName&gt;</ph> property must be <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`MethodInfo`</ph> representing a method.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;meth&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;meth&lt;/code&gt;</ph> is a generic method for which the <ph id="ph2">&lt;xref href="System.Reflection.MethodInfo.IsGenericMethodDefinition"&gt;&lt;/xref&gt;</ph> property is <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The location of <ph id="ph1">`con`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`ConstructorInfo`</ph> representing a constructor.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;con&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This exception is new in the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be put onto the stream.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The numerical argument pushed onto the stream immediately after the instruction.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be put onto the stream.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The numerical argument pushed onto the stream immediately after the instruction.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Int`</ph> argument pushed onto the stream immediately after the instruction.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be put onto the stream.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The numerical argument pushed onto the stream immediately after the instruction.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be put onto the stream.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The character argument pushed onto the stream immediately after the instruction.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction onto the stream of instructions.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`opcode`</ph> parameter requires an argument, the caller must ensure that the argument length matches the length of the declared parameter.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, results will be unpredictable.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the Emit instruction requires a 2-byte operand and the caller supplies a 4-byte operand, the runtime will emit two additional bytes to the instruction stream.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>These extra bytes will be <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Nop&gt;</ph> instructions.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Labels are created using <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph>, and their location within the stream is fixed by using <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`opcode`</ph> must represent a branch instruction.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because branches are relative instructions, <ph id="ph1">`label`</ph> will be replaced with the correct offset to branch during the fixup process.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The label to which to branch from this location.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Puts a <ph id="ph1">`call`</ph> or <ph id="ph2">`callvirt`</ph> instruction onto the Microsoft intermediate language (MSIL) stream to call a <ph id="ph3">`varargs`</ph> method.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph> method is used to emit calls to <ph id="ph2">`varargs`</ph> methods because there is no overload of the <ph id="ph3">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph> method that specifies the parameter types of the variable arguments.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>To emit calls to methods that do not use the <ph id="ph1">&lt;xref:System.Reflection.CallingConventions.VarArgs&gt;</ph> calling convention, use the <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29&gt;</ph> method overload.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph> method does not throw an exception when optional parameter types are specified for a method that is not <ph id="ph2">`varargs`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.InvalidProgramException&gt;</ph> is thrown when the call is executed.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Must be <ph id="ph1">&lt;xref href="System.Reflection.Emit.OpCodes.Call"&gt;&lt;/xref&gt;</ph>, <ph id="ph2">&lt;xref href="System.Reflection.Emit.OpCodes.Callvirt"&gt;&lt;/xref&gt;</ph>, or <ph id="ph3">&lt;xref href="System.Reflection.Emit.OpCodes.Newobj"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`varargs`</ph> method to be called.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The types of the optional arguments if the method is a <ph id="ph1">`varargs`</ph> method; otherwise, <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;opcode&lt;/code&gt;</ph> does not specify a method call.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;methodInfo&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The calling convention for the method is not <ph id="ph1">`varargs`</ph>, but optional parameter types are supplied.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Puts a <ph id="ph1">&lt;xref href="System.Reflection.Emit.OpCodes.Calli"&gt;&lt;/xref&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> to put a <ph id="ph2">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph> instruction onto the stream.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not use <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Must be <ph id="ph1">&lt;xref href="System.Reflection.Emit.OpCodes.Calli"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The unmanaged calling convention to be used.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the result.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The types of the required arguments to the instruction.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Puts a <ph id="ph1">&lt;xref href="System.Reflection.Emit.OpCodes.Calli"&gt;&lt;/xref&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> to put a <ph id="ph2">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph> instruction onto the stream.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not use <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`optionalParameterTypes`</ph> specifies optional arguments, <ph id="ph2">`callingConvention`</ph> must include the <ph id="ph3">&lt;xref:System.Reflection.CallingConventions?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The MSIL instruction to be emitted onto the stream.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Must be <ph id="ph1">&lt;xref href="System.Reflection.Emit.OpCodes.Calli"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The managed calling convention to be used.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the result.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The types of the required arguments to the instruction.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The types of the optional arguments for <ph id="ph1">`varargs`</ph> calls.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;optionalParameterTypes&lt;/code&gt;</ph> is not <ph id="ph2">`null`</ph>, but <ph id="ph3">&lt;code&gt;callingConvention&lt;/code&gt;</ph> does not include the <ph id="ph4">&lt;xref href="System.Reflection.CallingConventions.VarArgs"&gt;&lt;/xref&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Emits the Microsoft intermediate language (MSIL) to call <ph id="ph1">&lt;xref href="System.Console.WriteLine*"&gt;&lt;/xref&gt;</ph> with a string.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string must have already been defined.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The string to be printed.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Emits the Microsoft intermediate language (MSIL) necessary to call <ph id="ph1">&lt;xref href="System.Console.WriteLine*"&gt;&lt;/xref&gt;</ph> with the given field.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of <ph id="ph1">`fld`</ph> must match the parameter type of an overload of the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The field whose value is to be written to the console.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>There is no overload of the <ph id="ph1">&lt;xref href="System.Console.WriteLine*"&gt;&lt;/xref&gt;</ph> method that accepts the type of the specified field.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;fld&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The type of the field is <ph id="ph1">&lt;xref href="System.Reflection.Emit.TypeBuilder"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Reflection.Emit.EnumBuilder"&gt;&lt;/xref&gt;</ph>, which are not supported.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Emits the Microsoft intermediate language (MSIL) necessary to call <ph id="ph1">&lt;xref href="System.Console.WriteLine*"&gt;&lt;/xref&gt;</ph> with the given local variable.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of <ph id="ph1">`localBuilder`</ph> must match the parameter type of an overload of the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The local variable whose value is to be written to the console.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">localBuilder</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">&lt;xref href="System.Reflection.Emit.TypeBuilder"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Reflection.Emit.EnumBuilder"&gt;&lt;/xref&gt;</ph>, which are not supported.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>There is no overload of <ph id="ph1">&lt;xref href="System.Console.WriteLine*"&gt;&lt;/xref&gt;</ph> that accepts the type of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">localBuilder</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;localBuilder&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Ends an exception block.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The end exception block occurs in an unexpected place in the code stream.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Ends a lexical scope.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used to emit symbolic information.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is used with <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref href="System.Reflection.Emit.ILGenerator"&gt;&lt;/xref&gt;</ph> belongs to a <ph id="ph2">&lt;xref href="System.Reflection.Emit.DynamicMethod"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <ph id="ph1">&lt;xref href="System.Reflection.Emit.ILGenerator"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is transparent, and can be called from partially trusted code.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.ILOffset%2A&gt;</ph> property is accessed before any MSIL instructions have been emitted, it returns 0 (zero).</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>When MSIL is generated for dynamic languages, this property can be used to map offsets in the MSIL stream to source code line numbers.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting information can be used to provide stack traces when exceptions are thrown.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The offset in the MSIL stream at which the next instruction will be emitted.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>A label cannot be defined more than once.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The label for which to set an index.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;loc&lt;/code&gt;</ph> represents an invalid index into the label array.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>An index for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">loc</ph><ept id="p1">&lt;/code&gt;</ept> has already been defined.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Marks a sequence point in the Microsoft intermediate language (MSIL) stream.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>Line numbers are indexed from 1.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Columns are indexed from 0.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>The symbolic information normally includes at least one MSIL offset for each source line.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>These MSIL offsets are called <bpt id="p1">*</bpt>sequence points<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The document for which the sequence point is being defined.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The line where the sequence point begins.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The column in the line where the sequence point begins.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The line where the sequence point ends.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The column in the line where the sequence point ends.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startLine&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;endLine&lt;/code&gt;</ph> is <ph id="ph3">&lt;= 0.</ph></source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref href="System.Reflection.Emit.ILGenerator"&gt;&lt;/xref&gt;</ph> belongs to a <ph id="ph2">&lt;xref href="System.Reflection.Emit.DynamicMethod"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Emits an instruction to throw an exception.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The class of the type of exception to throw.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;excType&lt;/code&gt;</ph> is not the <ph id="ph2">&lt;xref href="System.Exception"&gt;&lt;/xref&gt;</ph> class or a derived class of <ph id="ph3">&lt;xref href="System.Exception"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The type does not have a default constructor.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;excType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, this method is not supported.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The namespace to be used in evaluating locals and watches for the current active lexical scope</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">usingNamespace</ph><ept id="p1">&lt;/code&gt;</ept> is zero.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;usingNamespace&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref href="System.Reflection.Emit.ILGenerator"&gt;&lt;/xref&gt;</ph> belongs to a <ph id="ph2">&lt;xref href="System.Reflection.Emit.DynamicMethod"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Must be IID_NULL.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Passed-in array of names to be mapped.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Count of the names to be mapped.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The locale context in which to interpret the names.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Caller-allocated array that receives the IDs corresponding to the names.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">IDispatch</ph><ept id="p1">&lt;/code&gt;</ept> interface.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The type information to return.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The locale identifier for the type information.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Receives a pointer to the requested type information object.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">IDispatch</ph><ept id="p1">&lt;/code&gt;</ept> interface.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">IDispatch</ph><ept id="p1">&lt;/code&gt;</ept> interface.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Provides access to properties and methods exposed by an object.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Identifies the member.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Must be IID_NULL.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The locale context in which to interpret arguments.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Flags describing the context of the call.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Pointer to the location where the result is to be stored.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Pointer to a structure that contains exception information.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The index of the first argument that has an error.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">IDispatch</ph><ept id="p1">&lt;/code&gt;</ept> interface.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>