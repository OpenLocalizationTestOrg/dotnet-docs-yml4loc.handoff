<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51e75a0074eccaafb7377cf7e94b8c0555f9c4a0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Collections.Generic.Comparer-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9ec0ce6d67d3f6440e2000146f1764b76eb3d76</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">666b8855b089be77bc3416fbbe543f76b251d8a5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for implementations of the <ph id="ph1">&lt;xref href="System.Collections.Generic.IComparer`1"&gt;&lt;/xref&gt;</ph> generic interface.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derive from this class to provide a custom implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> interface for use with collection classes such as the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> generic classes.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between deriving from the <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> class and implementing the <ph id="ph2">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph> interface is as follows:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify how two objects should be compared by default, implement the <ph id="ph1">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph> interface in your class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This ensures that sort operations will use the default comparison code that you provided.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>To define a comparer to use instead of the default comparer, derive from the <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then use this comparer in sort operations that take a comparer as a parameter.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The object returned by the <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> property uses the <ph id="ph2">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> generic interface (<ph id="ph3">`IComparable&lt;T&gt;`</ph> in C#, <ph id="ph4">`IComparable(Of T)`</ph> in Visual Basic) to compare two objects.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If type <ph id="ph1">`T`</ph> does not implement the <ph id="ph2">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> generic interface, the <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> property returns a <ph id="ph4">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> that uses the <ph id="ph5">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The type of objects to compare.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Collections.Generic.Comparer`1"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implement this method to provide a customized sort order comparison for type <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The first object to compare.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The second object to compare.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A signed integer that indicates the relative values of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">x</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">y</ph><ept id="p2">&lt;/code&gt;</ept>, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Less than zero</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;x&lt;/code&gt;</ph> is less than <ph id="ph2">&lt;code&gt;y&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;x&lt;/code&gt;</ph> equals <ph id="ph2">&lt;code&gt;y&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Greater than zero</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;x&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;code&gt;y&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">T</ph><ept id="p1">&lt;/code&gt;</ept> does not implement either the <ph id="ph2">&lt;xref href="System.IComparable`1"&gt;&lt;/xref&gt;</ph> generic interface or the <ph id="ph3">&lt;xref href="System.IComparable"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Creates a comparer by using the specified comparison.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The comparison to use.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The new comparer.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns a default sort order comparer for the type specified by the generic argument.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> returned by this property uses the <ph id="ph2">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> generic interface (<ph id="ph3">`IComparable&lt;T&gt;`</ph> in C#, <ph id="ph4">`IComparable(Of T)`</ph> in Visual Basic) to compare two objects.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If type <ph id="ph1">`T`</ph> does not implement the <ph id="ph2">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> generic interface, this property returns a <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> that uses the <ph id="ph4">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An object that inherits <ph id="ph1">&lt;xref href="System.Collections.Generic.Comparer`1"&gt;&lt;/xref&gt;</ph> and serves as a sort order comparer for type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">T</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is a wrapper for the <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29&gt;</ph> method, so <ph id="ph2">`obj`</ph> must be cast to the type specified by the generic argument <ph id="ph3">`T`</ph> of the current instance.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it cannot be cast to <ph id="ph1">`T`</ph>, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Comparing <ph id="ph1">`null`</ph> with any reference type is allowed and does not generate an exception.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The first object to compare.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The second object to compare.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A signed integer that indicates the relative values of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">x</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">y</ph><ept id="p2">&lt;/code&gt;</ept>, as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Less than zero</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;x&lt;/code&gt;</ph> is less than <ph id="ph2">&lt;code&gt;y&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;x&lt;/code&gt;</ph> equals <ph id="ph2">&lt;code&gt;y&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Greater than zero</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;x&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;code&gt;y&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;x&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;y&lt;/code&gt;</ph> is of a type that cannot be cast to type <ph id="ph3">&lt;code&gt;T&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;x&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;y&lt;/code&gt;</ph> do not implement either the <ph id="ph3">&lt;xref href="System.IComparable`1"&gt;&lt;/xref&gt;</ph> generic interface or the <ph id="ph4">&lt;xref href="System.IComparable"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>