<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1cbfbc790e958145737011cba7757266d5c7ae9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Net.Sockets.UdpClient.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac41c26421caf30517a75d08fbfb61f6cf34866c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8564edbd15b4ede7b678e59bdd47f3830c6c606</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides User Datagram Protocol (UDP) network services.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do, however, have the option of establishing a default remote host in one of the following two ways:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> class using the remote host name and port number as parameters.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> class and then call the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use any of the send methods provided in the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> to send data to a remote device.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method to receive data from remote hosts.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> using a host name or <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph> if you have already specified a default remote host.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do, <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> will throw an exception.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> methods also allow you to send and receive multicast datagrams.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method to subscribe a <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> to a multicast group.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method to unsubscribe a <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> from a multicast group.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a new <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this constructor is used, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is not suitable for joining a multicast group because it does not perform socket binding.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, it works only with IPv4 address types.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> class and binds it to the local port number provided.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates an underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and binds it to the port number from which you intend to communicate.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor if you are only interested in setting the local port number.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The underlying service provider will assign the local IP address.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you pass 0 to the constructor, the underlying service provider will assign a port number.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this constructor is used, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor works only with IPv4 address types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The local port number from which you intend to communicate.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">port</ph><ept id="p1">&lt;/code&gt;</ept> parameter is greater than <ph id="ph2">&lt;xref href="System.Net.IPEndPoint.MaxPort"&gt;&lt;/xref&gt;</ph> or less than <ph id="ph3">&lt;xref href="System.Net.IPEndPoint.MinPort"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> class and binds it to the specified local endpoint.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a new <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> and binds it to the <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph> specified by the <ph id="ph3">`localEP`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before you call this constructor, you must create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using the IP address and port number from which you intend to send and receive data.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do not need to specify a local IP address and port number for sending and receiving data.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not, the underlying service provider will assign the most appropriate local IP address and port number.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this constructor is used, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance is set with the address family specified by the <ph id="ph2">`localEP`</ph> parameter  that cannot be changed or overwritten by a connect method call with a different address family.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPEndPoint"&gt;&lt;/xref&gt;</ph> that respresents the local endpoint to which you bind the UDP connection.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;localEP&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`family`</ph> parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use an IPv4 address, pass the <ph id="ph1">&lt;xref:System.Net.Sockets.AddressFamily.InterNetwork&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use an IPv6 address, pass the <ph id="ph1">&lt;xref:System.Net.Sockets.AddressFamily.InterNetworkV6&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Passing any other value will cause the method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this constructor is used, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance is set with the address family specified by the <ph id="ph2">`family`</ph> parameter  that cannot be changed or overwritten by a connect method call with a different address family.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName&gt;</ph> is not suitable for joining a multicast group because it does not perform socket binding.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Net.Sockets.AddressFamily"&gt;&lt;/xref&gt;</ph> values that specifies the addressing scheme of the socket.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;family&lt;/code&gt;</ph> is not <ph id="ph2">&lt;xref href="System.Net.Sockets.AddressFamily.InterNetwork"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Net.Sockets.AddressFamily.InterNetworkV6"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> class and binds it to the local port number provided.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates an underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and binds it to the port number from which you intend to communicate.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`family`</ph> parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use an IPv4 address, pass the <ph id="ph1">&lt;xref:System.Net.Sockets.AddressFamily.InterNetwork&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use an IPv6 address, pass the <ph id="ph1">&lt;xref:System.Net.Sockets.AddressFamily.InterNetworkV6&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Passing any other value will cause the method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this constructor is used, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance is set with the address family specified by the <ph id="ph2">`family`</ph> parameter  that cannot be changed or overwritten by a connect method call with a different address family.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The port on which to listen for incoming connection attempts.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Net.Sockets.AddressFamily"&gt;&lt;/xref&gt;</ph> values that specifies the addressing scheme of the socket.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;family&lt;/code&gt;</ph> is not <ph id="ph2">&lt;xref href="System.Net.Sockets.AddressFamily.InterNetwork"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Net.Sockets.AddressFamily.InterNetworkV6"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;port&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;xref href="System.Net.IPEndPoint.MaxPort"&gt;&lt;/xref&gt;</ph> or less than <ph id="ph3">&lt;xref href="System.Net.IPEndPoint.MinPort"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> class and establishes a default remote host.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor initializes a new <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> and establishes a remote host using the <ph id="ph2">`hostname`</ph> and <ph id="ph3">`port`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Establishing a default remote host is optional.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this constructor, you do not have to specify a remote host in each call to the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying a default remote host limits you to that host only.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can change the default remote host at any time by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify a remote host in your call to the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method, do not use this constructor.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The name of the remote DNS host to which you intend to connect.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The remote port number to which you intend to connect.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostname&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;port&lt;/code&gt;</ph> is not between <ph id="ph2">&lt;xref href="System.Net.IPEndPoint.MinPort"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Net.IPEndPoint.MaxPort"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether a default remote host has been established.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> can use this property to determine if a default remote host has been established.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can establish a default remote host by using the appropriate constructor or by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do establish a default remote host, you cannot specify a remote host in your call to <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a connection is active; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Enables or disables Network Address Translation (NAT) traversal on a <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A&gt;</ph> method is used to enable or disable NAT traversal for a <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`allowed`</ph> parameter is false, the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> option on the associated socket is set to <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>This explicitly disables NAT traversal for a <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`allowed`</ph> parameter is true, the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> option on the associated socket is set to <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.Unrestricted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>This may allow NAT traversal for a <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> depending on firewall rules in place on the system.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>A Teredo address is an IPv6 address with the prefix of 2001::/32.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A Boolean value that specifies whether to enable or disable NAT traversal.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Gets the amount of data received from the network that is available to read.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Available%2A&gt;</ph> property is used to determine the amount of data queued in the network buffer for reading.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>If data is available, call <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> to get the data.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no data is available, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Available%2A&gt;</ph> property returns 0.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the remote host shuts down or closes the connection, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Available%2A&gt;</ph> property throws a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt>http://msdn.microsoft.com/library<ept id="p1">](http://msdn.microsoft.com/library)</ept>/ for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The number of bytes of data received from the network.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>An error occurred while attempting to access the socket.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Receives a datagram from a remote host asynchronously.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.BeginReceive%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.EndReceive%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the method is invoked by the <ph id="ph1">`requestCallback`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not block until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>To block until the operation is complete, use the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the receive operation.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This object is passed to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">requestCallback</ph><ept id="p1">&lt;/code&gt;</ept> delegate when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> object that references the asynchronous receive.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Sends a datagram to a destination asynchronously.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The destination is specified by the host name and port number.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.BeginSend%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.EndSend%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the method is invoked by the <ph id="ph1">`requestCallback`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not block until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>To block until the operation is complete, use one of the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method overloads.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains the data to be sent.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The number of bytes to send.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The destination host.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The destination port number.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the send operation.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This object is passed to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">requestCallback</ph><ept id="p1">&lt;/code&gt;</ept> delegate when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> object that references the asynchronous send.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Sends a datagram to a remote host asynchronously.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The destination was specified previously by a call to <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient.Connect*"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.BeginSend%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.EndSend%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the method is invoked by the <ph id="ph1">`requestCallback`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not block until the operation completes.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>To block until the operation is complete, use one of the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method overloads.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains the data to be sent.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The number of bytes to send.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the send operation.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This object is passed to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">requestCallback</ph><ept id="p1">&lt;/code&gt;</ept> delegate when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> object that references the asynchronous send.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Sends a datagram to a destination asynchronously.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The destination is specified by a <ph id="ph1">&lt;xref href="System.Net.EndPoint"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.BeginSend%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.EndSend%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the method is invoked by the <ph id="ph1">`requestCallback`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not block until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>To block until the operation is complete, use one of the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method overloads.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains the data to be sent.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The number of bytes to send.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.EndPoint"&gt;&lt;/xref&gt;</ph> that represents the destination for the data.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the send operation.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This object is passed to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">requestCallback</ph><ept id="p1">&lt;/code&gt;</ept> delegate when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> object that references the asynchronous send.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Gets or sets the underlying network <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> creates a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> used to send and receive data over a network.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> can use this property to get or set this <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned from <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> if you require access beyond that which <ph id="ph3">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> provides.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> to set the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to an existing <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful if you want to take advantage of the simplicity of <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> using a pre-existing <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The underlying Network <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Closes the UDP connection.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Close%2A&gt;</ph> disables the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and releases all managed and unmanaged resources associated with the <ph id="ph3">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Establishes a default remote host using the specified network endpoint.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method establishes a default remote host using the value specified in the <ph id="ph2">`endPoint`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once established, you do not have to specify a remote host in each call to the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Establishing a default remote host is optional.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying a default remote host limits you to that host only.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to send datagrams to a different remote host, you must make another call to the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method or create another <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> without a default remote host.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have established a default remote host and you also provide a remote host in your call to the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> will throw a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Connect%2A&gt;</ph> method, any datagrams that arrive from an address other than the specified default will be discarded.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set the default remote host to a broadcast address using this method unless you inherit from <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph>, use the Client method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast?displayProperty=fullName&gt;</ph> in your call to the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application requires greater control over broadcast addresses, you can also revert to using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the UDP protocol is connectionless, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method does not block.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method if you intend to receive multicasted datagrams.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPEndPoint"&gt;&lt;/xref&gt;</ph> that specifies the network endpoint to which you intend to send data.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;endPoint&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Establishes a default remote host using the specified IP address and port number.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method establishes a default remote host using the values specified in the <ph id="ph2">`addr`</ph> and <ph id="ph3">`port`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once established, you do not have to specify a remote host in each call to the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>Establishing a default remote host is optional.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying a default remote host limits you to that host only.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to send datagrams to a different remote host, you must make another call to the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method or create another <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> without a default remote host.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have established a default remote host and you also provide a remote host in your call to the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> will throw a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Connect%2A&gt;</ph> method, any datagrams that arrive from an address other than the specified default will be discarded.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set the default remote host to a broadcast address using this method unless you inherit from <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph>, use the client method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast?displayProperty=fullName&gt;</ph> in your call to the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application requires greater control over broadcast addresses, you can also revert to using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the UDP protocol is connectionless, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method does not block.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method if you intend to receive multicasted datagrams.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> of the remote host to which you intend to send data.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The port number to which you intend send data.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;addr&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;port&lt;/code&gt;</ph> is not between <ph id="ph2">&lt;xref href="System.Net.IPEndPoint.MinPort"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Net.IPEndPoint.MaxPort"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Establishes a default remote host using the specified host name and port number.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method establishes a default remote host using the values specified in the <ph id="ph2">`port`</ph> and <ph id="ph3">`hostname`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once established, you do not have to specify a remote host in each call to the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>Establishing a default remote host is optional.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying a default remote host limits you to that host only.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to send datagrams to a different remote host, you must make another call to the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method or create another <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> without a default remote host.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have established a default remote host and you also provide a remote host in your call to the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> will throw a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Connect%2A&gt;</ph> method, any datagrams that arrive from an address other than the specified default will be discarded.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set the default remote host to a broadcast address using this method unless you inherit from <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph>, use the client method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast?displayProperty=fullName&gt;</ph> in your call to the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application requires greater control over broadcast addresses, you can also revert to using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the UDP protocol is connectionless, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method does not block.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method if you intend to receive multicasted datagrams.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The DNS name of the remote host to which you intend send data.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The port number on the remote host to which you intend to send data.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;port&lt;/code&gt;</ph> is not between <ph id="ph2">&lt;xref href="System.Net.IPEndPoint.MinPort"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Net.IPEndPoint.MaxPort"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Releases the managed and unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> references.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Gets or sets a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value that specifies whether the <ph id="ph2">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> allows Internet Protocol (IP) datagrams to be fragmented.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Datagrams may be fragmented by the sending host or by an intermediate router.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a datagram must be fragmented, and the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.DontFragment%2A&gt;</ph> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> allows datagram fragmentation; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>This property can be set only for sockets that use the <ph id="ph1">&lt;xref href="System.Net.Sockets.AddressFamily.InterNetwork"&gt;&lt;/xref&gt;</ph> flag or the <ph id="ph2">&lt;xref href="System.Net.Sockets.AddressFamily.InterNetworkV6"&gt;&lt;/xref&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Leaves a multicast group.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method withdraws the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> from the multicast group identified by the specified <ph id="ph3">&lt;xref:System.Net.IPAddress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method, the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> withdraws from the group, it will no longer be able to receive datagrams sent to that group.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> property to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> of the multicast group to leave.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The local address of the multicast group to leave.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The IP address is not compatible with the <ph id="ph1">&lt;xref href="System.Net.Sockets.AddressFamily"&gt;&lt;/xref&gt;</ph> value that defines the addressing scheme of the socket.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;multicastAddr&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Leaves a multicast group.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method withdraws the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> from the multicast group identified by the specified <ph id="ph3">&lt;xref:System.Net.IPAddress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method, the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> withdraws from the group, it will no longer be able to receive datagrams sent to that group.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> of the multicast group to leave.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The IP address is not compatible with the <ph id="ph1">&lt;xref href="System.Net.Sockets.AddressFamily"&gt;&lt;/xref&gt;</ph> value that defines the addressing scheme of the socket.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;multicastAddr&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Gets or sets a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value that specifies whether the <ph id="ph2">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> may send or receive broadcast packets.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>Broadcasting is limited to a specific subnet.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> allows broadcast packets; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Ends a pending asynchronous receive.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>To perform this operation synchronously, use the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> object returned by a call to <ph id="ph2">&lt;xref href="System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The specified remote endpoint.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>If successful, the number of bytes received.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>If unsuccessful, this method returns 0.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not returned by a call to the <ph id="ph2">&lt;xref href="System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)"&gt;&lt;/xref&gt;</ph> was previously called for the asynchronous read.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>An error occurred when attempting to access the underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Ends a pending asynchronous send.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>To perform this operation synchronously, use the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> object returned by a call to <ph id="ph2">&lt;xref href="System.Net.Sockets.UdpClient.BeginSend*"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>If successful, the number of bytes sent to the <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not returned by a call to the <ph id="ph2">&lt;xref href="System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Net.Sockets.Socket.EndSend(System.IAsyncResult)"&gt;&lt;/xref&gt;</ph> was previously called for the asynchronous read.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>An error occurred when attempting to access the underlying socket.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Gets or sets a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value that specifies whether the <ph id="ph2">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> allows only one client to use a port.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A&gt;</ph> property to prevent multiple clients from using a specific port.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property must be set before the underlying socket is bound to a client port.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName&gt;</ph>, or <ph id="ph4">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the <ph id="ph5">&lt;xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> allows only one client to use a specific port; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <ph id="ph2">`false`</ph> for all other versions.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>An error occurred when attempting to access the underlying socket.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Adds a <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> to a multicast group.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method subscribes the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> to a multicast group using the specified <ph id="ph3">&lt;xref:System.Net.IPAddress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method, the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>The multicast address range is 224.0.0.0 to 239.255.255.255.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> will throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must create the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method prior to calling the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method, or the <ph id="ph3">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method will not work.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do not need to belong to a multicast group to send datagrams to a multicast IP address.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before joining a multicast group, make sure the socket is bound to the port or endpoint.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do that by calling one of the constructors that accept a port or an endpoint as a parameter.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>To stop receiving multicasted datagrams, call the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method and provide the <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> of the group from which you would like to withdraw.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the IPv6 case, there are several multicast address ranges you can choose from.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>Please, refer to the IETF RFC 2375.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot call <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> constructed without a specific local port (that is, using the <ph id="ph3">&lt;xref:System.Net.Sockets.UdpClient.%23ctor&gt;</ph> or <ph id="ph4">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29&gt;</ph> constructor).</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The multicast <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> of the group you want to join.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The IP address is not compatible with the <ph id="ph1">&lt;xref href="System.Net.Sockets.AddressFamily"&gt;&lt;/xref&gt;</ph> value that defines the addressing scheme of the socket.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Adds a <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> to a multicast group.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before joining a multicast group, be sure the socket is bound to the port or endpoint.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`infindex`</ph> parameter is used to identify a hardware interface on the same link.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are several multicast address ranges to choose from.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>Refer to the IETF RFC 2375.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot call <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> constructed without a specific local port (that is, using the <ph id="ph3">&lt;xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName&gt;</ph> or <ph id="ph4">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName&gt;</ph> constructor).</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The interface index associated with the local IP address on which to join the multicast group.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The multicast <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> of the group you want to join.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Adds a <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> to a multicast group with the specified Time to Live (TTL).</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method subscribes the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> to a multicast group using the specified <ph id="ph3">&lt;xref:System.Net.IPAddress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method, the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>The multicast address range is 224.0.0.0 to 239.255.255.255.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> will throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`timeToLive`</ph> parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must create the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> using the multicast port number otherwise you will not be able to receive multicasted datagrams.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method prior to calling the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method or the receive method will not work.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do not need to belong to a multicast group to send datagrams to a multicast IP address.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before joining a multicast group make sure the socket is bound to the port or endpoint.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do that by calling one of the constructors that accept as parameter a port or an endpoint.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>To stop receiving multicasted datagrams, call the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method and provide the <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> of the group from which you would like to withdraw.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot call <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> constructed without a specific local port (that is, using the <ph id="ph3">&lt;xref:System.Net.Sockets.UdpClient.%23ctor&gt;</ph> or <ph id="ph4">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29&gt;</ph> constructor).</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> of the multicast group to join.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The Time to Live (TTL), measured in router hops.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The TTL provided is not between 0 and 255</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;multicastAddr&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The IP address is not compatible with the <ph id="ph1">&lt;xref href="System.Net.Sockets.AddressFamily"&gt;&lt;/xref&gt;</ph> value that defines the addressing scheme of the socket.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Adds a <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> to a multicast group.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before you join a multicast group, be sure that the socket is bound to the port or endpoint.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are several multicast address ranges to choose from.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can find them in the IETF RFC 2375.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot call <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> constructed without a specific local port (that is, using the <ph id="ph3">&lt;xref:System.Net.Sockets.UdpClient.%23ctor&gt;</ph> or <ph id="ph4">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29&gt;</ph> constructor).</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The multicast <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> of the group you want to join.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The local <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Gets or sets a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value that specifies whether outgoing multicast packets are delivered to the sending application.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>Multicast is a scalable method for many-to-many communication on the Internet.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> receives outgoing multicast packets; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Returns a UDP datagram that was sent by a remote host.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method will block until a datagram arrives from a remote host.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>When data is available, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method will read the first enqueued datagram and return the data portion as a byte array.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method populates the <ph id="ph1">`remoteEP`</ph> parameter with the <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> and port number of the sender.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a default remote host in the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method will accept datagrams from that host only.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>All other datagrams will be discarded.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you intend to receive multicasted datagrams, do not call the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method prior to calling the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> you use to receive datagrams must be created using the multicast port number.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPEndPoint"&gt;&lt;/xref&gt;</ph> that represents the remote host from which the data was sent.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> that contains datagram data.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Returns a UDP datagram asynchronously that was sent by a remote host.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>&gt; object will complete after the UDP packet has been received.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a default remote host in the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method, this method will accept datagrams from that host only.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>All other datagrams will be discarded.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you intend to receive multicasted datagrams, do not call the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method prior to calling this method.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> you use to receive datagrams must be created using the multicast port number.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Net.Sockets.Socket"&gt;&lt;/xref&gt;</ph> has been closed.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Sends a UDP datagram to a remote host.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload sends datagrams to the remote host established in the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method and returns the number of bytes sent.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not call <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> before calling this overload, the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method will throw a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to send datagrams to a different remote host, you must call the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method and specify the desired remote host.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use either of the other <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method overloads to send datagrams to a broadcast address.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send represented as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The number of bytes in the datagram.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The number of bytes sent.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> has already established a default remote host.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Sends a UDP datagram to the host at the specified remote endpoint.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method sends datagrams to the specified endpoint and returns the number of bytes successfully sent.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before calling this overload, you must first create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using the IP address and port number of the remote host to which your datagrams will be delivered.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <ph id="ph1">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph> for the <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Net.IPEndPoint&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you have created this <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph>, pass it to the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method as the <ph id="ph3">`endPoint`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to send datagrams to any other broadcast address, use the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also revert to using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not provide an <ph id="ph1">`endPoint`</ph> parameter to this method if you have already established a remote host with the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method will throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send, represented as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The number of bytes in the datagram.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPEndPoint"&gt;&lt;/xref&gt;</ph> that represents the host and port to which to send the datagram.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The number of bytes sent.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> has already established a default remote host.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Sends a UDP datagram to a specified port on a specified remote host.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method sends datagrams to the values specified by the <ph id="ph2">`hostname`</ph> and <ph id="ph3">`port`</ph> parameters and returns the number of bytes successfully sent.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can send datagrams to the default broadcast address by specifying "255.255.255.255" for the <ph id="ph1">`hostname`</ph> parameter value.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to send datagrams to any other broadcast address, use the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also revert to using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not provide a host name or port number to this method if you have already established a remote host with the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do, the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method will throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send represented as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The number of bytes in the datagram.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The name of the remote host to which you intend to send the datagram.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The remote port number with which you intend to communicate.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The number of bytes sent.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> has already established a default remote host.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Sends a UDP datagram asynchronously to a remote host.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload sends datagrams to the remote host established in the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not call <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> before calling this overload, the method will throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to send datagrams to a different remote host, you must call the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method and specify the desired remote host.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use either of the other <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.SendAsync%2A&gt;</ph> method overloads to send datagrams to a broadcast address.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send represented as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The number of bytes in the datagram.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> has already established a default remote host.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Sends a UDP datagram asynchronously to a remote host.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sends datagrams to the specified endpoint.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before calling this overload, you must first create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using the IP address and port number of the remote host to which your datagrams will be delivered.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <ph id="ph1">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph> for the <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Net.IPEndPoint&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you have created this <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph>, pass it to this method as the <ph id="ph2">`endPoint`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to send datagrams to any other broadcast address, use the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also revert to using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not provide an <ph id="ph1">`endPoint`</ph> parameter to this method if you have already established a remote host with the <ph id="ph2">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do, this method will throw a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send represented as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The number of bytes in the datagram.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPEndPoint"&gt;&lt;/xref&gt;</ph> that represents the host and port to which to send the datagram.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> has already established a default remote host.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Sends a UDP datagram asynchronously to a remote host.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sends datagrams to the values specified by the <ph id="ph1">`hostname`</ph> and <ph id="ph2">`port`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can send datagrams to the default broadcast address by specifying "255.255.255.255" for the <ph id="ph1">`hostname`</ph> parameter value.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to send datagrams to any other broadcast address, use the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also revert to using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not provide a host name or port number to this method if you have already established a remote host with the <ph id="ph1">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do, this method will throw a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send represented as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The number of bytes in the datagram.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>The name of the remote host to which you intend to send the datagram.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>The remote port number with which you intend to communicate.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> has already established a default remote host.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>An error occurred when accessing the socket.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <ph id="ph1">&lt;xref href="System.Net.Sockets.UdpClient"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) "TTL exceeded" error message is returned to the sender.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The TTL value.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>