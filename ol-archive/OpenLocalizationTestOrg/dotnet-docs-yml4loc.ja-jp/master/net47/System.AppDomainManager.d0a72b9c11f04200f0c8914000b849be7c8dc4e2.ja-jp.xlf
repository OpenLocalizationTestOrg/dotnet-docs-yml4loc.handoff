<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">379957fe45df9a878ea7eb2fae1990fff34d4e7f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.AppDomainManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">594e214ecfec0b860a12b5afc77aff54cce43d6b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4e0b175308c7825bf86003366611ddf18e9534a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a managed equivalent of an unmanaged host.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not use <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> to configure an application domain in ASP.NET.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>In ASP.NET, configuration must be handled by the host.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementing the <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> class enables a hosting application to participate in the creation of new application domains.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>To replace the default <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>, identify the assembly and type of the replacement <ph id="ph2">&lt;xref:System.AppDomainManager&gt;</ph> in the APPDOMAIN_MANAGER_ASM and APPDOMAIN_MANAGER_TYPE environment variables, or use the <bpt id="p1">[</bpt><ph id="ph3">\&lt;</ph>appDomainManagerAssembly&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> and <bpt id="p2">[</bpt><ph id="ph4">\&lt;</ph>appDomainManagerType&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> elements in your configuration file.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly must be fully trusted and be contained in the global assembly cache or the directory of the starting application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type and assembly names must be fully qualified in the environment variables.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the assembly that contains your subclass of <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> depends on assemblies that are marked with the conditional <ph id="ph2">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> (APTCA) attribute, you must include those assemblies in the list that you pass to the <ph id="ph3">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.AppDomainSetup&gt;</ph> you use to create application domains.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the assemblies that are marked with the conditional APTCA attribute will be disabled.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> is the managed equivalent of the unmanaged host.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> object participates in the creation of new application domains in a process and can customize the new <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> before other managed code runs.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> can also supply host managers that participate in other aspects of common language runtime execution.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> can identify a <ph id="ph2">&lt;xref:System.Security.HostSecurityManager&gt;</ph> object that participates in the security decisions of the application domain.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only assemblies granted <ph id="ph1">`FullTrust`</ph>, such as assemblies in the global assembly cache or identified as <ph id="ph2">`fullTrustAssemblies`</ph> in the <ph id="ph3">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName&gt;</ph> method can be loaded in the  <ph id="ph4">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph> constructor and the <ph id="ph5">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class contains a link demand and an inheritance demand at the class level.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when either the immediate caller or the derived class does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept> and <bpt id="p2">[</bpt>Inheritance Demands<ept id="p2">](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.AppDomainManager"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only assemblies granted <ph id="ph1">`FullTrust`</ph>, such as assemblies in the global assembly cache or identified as <ph id="ph2">`fullTrustAssemblies`</ph> in the <ph id="ph3">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName&gt;</ph> method can be loaded in the  <ph id="ph4">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph> constructor and the <ph id="ph5">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the application activator that handles the activation of add-ins and manifest-based applications for the domain.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is a single designated instance of the <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> class in each <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> to which all add-in and manifest-based application activation calls are routed.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> for the current <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> can provide its own custom <ph id="ph3">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>, or an instance of the default <ph id="ph4">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> is created.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The application activator.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Indicates whether the specified operation is allowed in the application domain.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of this method returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called when the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=fullName&gt;</ph> method has been called to increase the isolated storage quota.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application that hosts the common language runtime (CLR) can override the <ph id="ph1">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt;</ph> method to perform policy decisions based on an <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState&gt;</ph> object (which inherits <ph id="ph3">&lt;xref:System.Security.SecurityState&gt;</ph>), and can then allow or prevent the increase.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a host could prompt the end user to approve or deny the request to increase the quota.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host's implementation of <ph id="ph1">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt;</ph> should take into account the possibility of denial-of-service attacks.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, it should prompt the user only if the method is called from a user-initiated event such as a button click.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A subclass of <ph id="ph1">&lt;xref href="System.Security.SecurityState"&gt;&lt;/xref&gt;</ph> that identifies the operation whose security status is requested.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the host allows the operation specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">state</ph><ept id="p1">&lt;/code&gt;</ept> to be performed in the application domain; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns a new or existing application domain.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The friendly name, specified by the <ph id="ph1">`friendlyName`</ph> parameter, can be displayed in user interfaces to identify the domain.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default <ph id="ph1">&lt;xref:System.AppDomainManager.CreateDomain%2A&gt;</ph> method calls the protected <ph id="ph2">&lt;xref:System.AppDomainManager.CreateDomainHelper%2A&gt;</ph> method to create the <ph id="ph3">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overrides of this method do not need to call the <ph id="ph1">&lt;xref:System.AppDomainManager.CreateDomainHelper%2A&gt;</ph> method but can return an existing domain.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An object that contains application domain initialization information.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A new or existing application domain.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Provides a helper method to create an application domain.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This protected helper method handles the creation of a new application domain.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This friendly name, specified by the <ph id="ph1">`friendlyName`</ph> parameter, can be displayed in user interfaces to identify the domain.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An object that contains application domain initialization information.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A newly created application domain.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Gets the entry assembly for an application.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application is a manifest-activated application, the entry assembly is determined from the application manifest.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application is not manifest activated, the entry assembly is the process executable in the default application domain.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other application domains, the entry assembly is the first executable that was executed by the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The entry assembly for the application.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets the host execution context manager that manages the flow of the execution context.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property allows a host to provide a <ph id="ph1">&lt;xref:System.Threading.HostExecutionContextManager&gt;</ph> that can participate in the flow of the execution context across asynchronous calls.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The host execution context manager.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets the host security manager that participates in security decisions for the application domain.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property allows a host to provide a <ph id="ph1">&lt;xref:System.Security.HostSecurityManager&gt;</ph> to participate in the security decisions for the application domain.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The host security manager.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets the initialization flags for custom application domain managers.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values that describe the initialization action to perform.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.AppDomainManagerInitializationOptions.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Initializes the new application domain.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not use this method to initialize an application domain in ASP.NET.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>In ASP.NET, configuration must be handled by the host.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this method to initialize the application domain, the host throws <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> when it attempts to initialize the application domain.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exception message indicates that initialization has already occurred.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called immediately after the constructor.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default <ph id="ph1">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, for add-in activations, a custom implementation could identify the current <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> as the target application domain.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, you can use this method to sandbox the default application domain at application startup, or to modify the sandbox of a new application domain.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do this, adjust the <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A&gt;</ph> properties on the <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> object that is assigned to the <ph id="ph4">&lt;xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=fullName&gt;</ph> property of <ph id="ph5">`appDomainInfo`</ph>, before you initialize the application domain.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only assemblies granted <ph id="ph1">`FullTrust`</ph>, such as assemblies in the global assembly cache or identified as <ph id="ph2">`fullTrustAssemblies`</ph> in the <ph id="ph3">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName&gt;</ph> method can be loaded in the  <ph id="ph4">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph> constructor and the <ph id="ph5">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An object that contains application domain initialization information.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>