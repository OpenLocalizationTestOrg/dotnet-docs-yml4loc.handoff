<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79e53dc75784afe777f64503f672ca466a5db194</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.InteropServices.RegistrationServices.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e205bb99b72b12a0d4083f194b8a2377a16fe4f4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79749b19dd3d972cfc265ec0571b2f80c1627c0e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a set of services for registering and unregistering managed assemblies for use from COM.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Registration is needed when the objects within an assembly are being used by COM clients.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt>Regasm.exe (Assembly Registration Tool)<ept id="p1">](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md)</ept> and <ph id="ph1">[!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)]</ph> use methods exposed by the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.RegistrationServices&gt;</ph> class to add or remove COM-enabling registry entries for managed assemblies.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the following methods to assist you in preparing a registration file:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although these methods help in gathering information to be used in a registration file, they do not actually produce a registration file.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you can use the <bpt id="p1">[</bpt>Regasm.exe (Assembly Registration Tool)<ept id="p1">](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md)</ept> tool with the <ph id="ph1">`/regfile`</ph> option to perform this task.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.RegistrationServices&gt;</ph> methods cannot export and register a type library.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>To export and register a type library, you can use the <bpt id="p1">[</bpt>Regasm.exe (Assembly Registration Tool)<ept id="p1">](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md)</ept> tool and the <bpt id="p2">[</bpt>Tlbexp.exe (Type Library Exporter)<ept id="p2">](~/docs/framework/tools/tlbexp-exe-type-library-exporter.md)</ept> tool.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.RegistrationServices"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Returns the GUID of the COM category that contains the managed classes.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The GUID of the COM category that contains the managed classes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Retrieves the COM ProgID for the specified type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The type corresponding to the ProgID that is being requested.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The ProgID for the specified type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Retrieves a list of classes in an assembly that would be registered by a call to <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.RegistrationServices.RegisterAssembly(System.Reflection.Assembly,System.Runtime.InteropServices.AssemblyRegistrationFlags)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The assembly to search for classes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> array containing a list of classes in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">assembly</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assembly</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Registers the classes in a managed assembly to enable creation from COM.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`RegisterAssembly`</ph> adds the appropriate registry entries for the types in the specified assembly.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method also calls any registration functions found in the assembly.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</ph> to get an assembly.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The assembly to be registered.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.AssemblyRegistrationFlags"&gt;&lt;/xref&gt;</ph> value indicating any special settings used when registering <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">assembly</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">assembly</ph><ept id="p1">&lt;/code&gt;</ept> contains types that were successfully registered; otherwise <ph id="ph3">`false`</ph> if the assembly contains no eligible types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assembly&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The full name of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assembly</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A method marked with <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComRegisterFunctionAttribute"&gt;&lt;/xref&gt;</ph> is not <ph id="ph2">`static`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>There is more than one method marked with <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComRegisterFunctionAttribute"&gt;&lt;/xref&gt;</ph> at a given level of the hierarchy.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The signature of the method marked with <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComRegisterFunctionAttribute"&gt;&lt;/xref&gt;</ph> is not valid.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A user-defined custom registration function (marked with the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComRegisterFunctionAttribute"&gt;&lt;/xref&gt;</ph> attribute) throws an exception.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Registers the specified type with COM using the specified GUID.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is equivalent to calling <ph id="ph1">`CoRegisterClassObject`</ph> in COM.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.RegistrationServices.RegisterTypeForComClients%2A&gt;</ph> method is not atomic and can cause unpredictable results when used in a multithreaded context.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0 and later, use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.RegistrationServices.UnregisterTypeForComClients%2A&gt;</ph> method to unregister a type in COM.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that using platform invoke to call the unmanaged <ph id="ph1">`CoRegisterClassObject`</ph> and  <ph id="ph2">`CoDisconnectObject`</ph> methods for registration and unregistration of COM objects is not supported.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> to be registered for use from COM.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Guid"&gt;&lt;/xref&gt;</ph> used to register the specified type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept> parameter cannot be created.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Registers the specified type with COM using the specified execution context and connection type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is equivalent to calling <ph id="ph1">`CoRegisterClassObject`</ph> in COM.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.RegistrationServices.RegisterTypeForComClients%2A&gt;</ph> method is not atomic and can cause unpredictable results when used in a multithreaded context.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework version 2.0 and later, use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.RegistrationServices.UnregisterTypeForComClients%2A&gt;</ph> method to unregister a type in COM.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that using platform invoke to call the unmanaged <ph id="ph1">`CoRegisterClassObject`</ph> and  <ph id="ph2">`CoDisconnectObject`</ph> methods for registration and unregistration of COM objects is not supported.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object to register for use from COM.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.RegistrationClassContext"&gt;&lt;/xref&gt;</ph> values that indicates the context in which the executable code will be run.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.RegistrationConnectionType"&gt;&lt;/xref&gt;</ph> values that specifies how connections are made to the class object.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An integer that represents a cookie value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">type</ph><ept id="p1">&lt;/code&gt;</ept> parameter cannot be created.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Indicates whether a type is marked with the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComImportAttribute"&gt;&lt;/xref&gt;</ph>, or derives from a type marked with the <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ComImportAttribute"&gt;&lt;/xref&gt;</ph> and shares the same GUID as the parent.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The type to check for being a COM type.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a type is marked with the <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ComImportAttribute"&gt;&lt;/xref&gt;</ph>, or derives from a type marked with the <ph id="ph3">&lt;xref href="System.Runtime.InteropServices.ComImportAttribute"&gt;&lt;/xref&gt;</ph> and shares the same GUID as the parent; otherwise <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Determines whether the specified type requires registration.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The type to check for COM registration requirements.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the type must be registered for use from COM; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Unregisters the classes in a managed assembly.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`UnregisterAssembly`</ph> removes the registry entries for the types in the specified assembly previously added by <ph id="ph2">&lt;xref:System.Runtime.InteropServices.RegistrationServices.RegisterAssembly%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method also calls any unregistration functions found in the assembly.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The assembly to be unregistered.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">assembly</ph><ept id="p1">&lt;/code&gt;</ept> contains types that were successfully unregistered; otherwise <ph id="ph3">`false`</ph> if the assembly contains no eligible types.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assembly&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The full name of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assembly</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A method marked with <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"&gt;&lt;/xref&gt;</ph> is not <ph id="ph2">`static`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>There is more than one method marked with <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"&gt;&lt;/xref&gt;</ph> at a given level of the hierarchy.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The signature of the method marked with <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"&gt;&lt;/xref&gt;</ph> is not valid.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A user-defined custom unregistration function (marked with the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComUnregisterFunctionAttribute"&gt;&lt;/xref&gt;</ph> attribute) throws an exception.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Removes references to a type registered with the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.RegistrationServices.RegisterTypeForComClients(System.Type,System.Runtime.InteropServices.RegistrationClassContext,System.Runtime.InteropServices.RegistrationConnectionType)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that using platform invoke to call the unmanaged <ph id="ph1">`CoRegisterClassObject`</ph> and  <ph id="ph2">`CoDisconnectObject`</ph> methods to register and unregister COM objects is not supported.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The cookie value returned by a previous call to the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.RegistrationServices.RegisterTypeForComClients(System.Type,System.Runtime.InteropServices.RegistrationClassContext,System.Runtime.InteropServices.RegistrationConnectionType)"&gt;&lt;/xref&gt;</ph> method overload.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>