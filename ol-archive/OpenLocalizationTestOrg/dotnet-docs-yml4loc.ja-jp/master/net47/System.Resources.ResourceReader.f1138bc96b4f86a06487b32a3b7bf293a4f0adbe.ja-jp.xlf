<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1bc8cc9fac4a77d5857732ffa1b83d903b772e65</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Resources.ResourceReader.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de24dc94441f2dc98f523f2d9466885a0353b059</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f36d5a26dde22187a4cb8a8a31b896d5891bbf48</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept>: Calling methods in this class with untrusted data is a security risk.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Call the methods in the class only with trusted data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class provides a standard implementation of the <ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>It differs from the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is used to retrieve resources whose names are known in advance, whereas the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class is useful for retrieving resources whose number or precise names are not known at compile time.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resources can then be named generically (such as <ph id="ph1">`Section1`</ph>, <ph id="ph2">`Section1Item1`</ph>, <ph id="ph3">`Section1Item2`</ph>, and so on) and retrieved by using a <ph id="ph4">&lt;xref:System.Resources.ResourceReader&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class, see the following sections:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Instantiating a ResourceReader object<ept id="p1">](#instantiate)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Enumerating a ResourceReader object's resources<ept id="p1">](#enumerate)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Retrieving resources by using IDictionaryEnumerator properties<ept id="p1">](#idictionaryenumerator)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Retrieving resources by name with GetResourceData<ept id="p1">](#getresourcedata)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instantiating a ResourceReader Object</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by <bpt id="p1">[</bpt>Resgen.exe (Resource File Generator)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>To instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that reads from a standalone .resources file, use the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class constructor with either an input stream or a string that contains the .resources file name.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates both approaches.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents a .resources file named <ph id="ph2">`Resources1.resources`</ph> by using its file name.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents a .resources file named <ph id="ph2">`Resources2.resources`</ph> by using a stream created from the file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Resources.ResourceReader.Class#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Resources.ResourceReader.Class#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents an embedded .resources file, instantiate an <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> object from the assembly in which the .resources file is embedded.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object that can be passed to the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents an embedded .resources file.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Resources.ResourceReader.Class#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Resources.ResourceReader.Class#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerating a ResourceReader Object's Resources</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enumerate the resources in a .resources file, you call the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method, which returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>You call the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method to move from one resource to the next.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method returns <ph id="ph1">`false`</ph> when all the resources in the .resources file have been enumerated.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface and the <ph id="ph3">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName&gt;</ph> method, the <ph id="ph4">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName&gt;</ph> method does not provide the <ph id="ph5">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName&gt;</ph> method  returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> interface object that provides access to each resource's name/value pair.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can retrieve the individual resources in the collection in two ways:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can iterate each resource in the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName&gt;</ph> collection and use <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName&gt;</ph> properties to retrieve the resource name and value.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can retrieve the name of each resource when you iterate the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName&gt;</ph> collection and call the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method to retrieve the resource's data.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving Resources by Using IDictionaryEnumerator Properties</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you call the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method to move to each resource in the collection, you can retrieve the resource name from the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName&gt;</ph> property and the resource data from the <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows how to retrieve the name and value of each resource in a .resources file by using the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>To run the example, create the following text file named ApplicationResources.txt to define string resources.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>resgen ApplicationResources.txt<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example then uses the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Resources.ResourceReader.Class#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Resources.ResourceReader.Class#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The attempt to retrieve resource data from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt;</ph> property can throw the following exceptions:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> if the data is not in the expected format.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> if the assembly that contains the type to which the data belongs cannot be found.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> if the type to which the data belongs cannot be cannot be found.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method, as the following section shows.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>This approach provides you with some information about the data type that the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt;</ph> property attempted to return.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Retrieving Resources by Name with GetResourceData</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each resource, you retrieve the resource's name from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName&gt;</ph> property, which is then passed to the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29&gt;</ph> method to retrieve the resource's data.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is returned as a byte array in the <ph id="ph1">`resourceData`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>This approach is more awkward than retrieving the resource name and value from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt;</ph> properties, because it returns the actual bytes that form the resource value.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the attempt to retrieve the resource throws an exception, the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method can help identify the source of the exception by supplying information about the resource's data type.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the string that indicates the resource's data type, see <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom <ph id="ph1">`DateTimeTZI`</ph> object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>To run the example, do the following:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create an assembly named Library.dll that contains the <ph id="ph1">`DateTimeTZI`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following is the source code for the assembly.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Resources.ResourceReader.Class#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Resources.ResourceReader.Class#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Compile the source code in C# by using the following command:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or, you can compile it in Visual Basic by using the following command:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Resources.ResourceReader.Class#5<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Resources.ResourceReader.Class#5<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The source code file is named CreateResources.cs.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can compile it in C# by using the following command:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or, you can compile it in Visual Basic by using the following command:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Compile and run the following code to enumerate the resources in the ContactResources.resources file.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Resources.ResourceReader.Class#6<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Resources.ResourceReader.Class#6<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>After modifying the source code (for example, by deliberately throwing a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> at the end of the <ph id="ph2">`try`</ph> block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> enable you to retrieve or recreate some resource information.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Resources.ResourceReader"&gt;&lt;/xref&gt;</ph> class for the specified stream.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read from a standalone .resources file, instantiate a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object and pass it to the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read from an embedded .resources file, call the <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName&gt;</ph> method with the case-sensitive name of the .resources file, and pass the returned <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object to the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this object only with trusted data.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=330378)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The input stream for reading resources.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">stream</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not readable.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">stream</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>An I/O error has occurred while accessing <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">stream</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Resources.ResourceReader"&gt;&lt;/xref&gt;</ph> class for the specified named resource file.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.String%29&gt;</ph> constructor instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that retrieves resources from a standalone .resources file.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve resources from an embedded .resources file, use the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this object only with trusted data.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=330378)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The path and name of the resource file to read.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">filename</ph><ept id="p1">&lt;/code&gt;</ept> is not case-sensitive.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">fileName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The file cannot be found.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>An I/O error has occurred.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The resource file has an invalid format.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For example, the length of the file may be zero.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Releases all operating system resources associated with this <ph id="ph1">&lt;xref href="System.Resources.ResourceReader"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> can be safely called multiple times.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;xref href="System.Resources.ResourceReader"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using this instance of <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>, call <ph id="ph2">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> to release all resources used by this instance.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should eliminate further references to this <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Returns an enumerator for this <ph id="ph1">&lt;xref href="System.Resources.ResourceReader"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you enumerate resources by calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method and then repeatedly calling the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method on the returned <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> object until the method returns <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource name is available from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName&gt;</ph> property; its value from the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example illustrates how to enumerate resources in this way.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName&gt;</ph> property by the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class can throw the following exceptions:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>The assembly that contains the type to which the data belongs cannot be found.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data is not in the expected format.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type to which the data belongs cannot be found.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can handle the exception by calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method to retrieve information about the data type and the byte array assigned to the named resource.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class includes two methods that return enumerators.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> interface object and is the recommended method to call when enumerating resources.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>An enumerator for this <ph id="ph1">&lt;xref href="System.Resources.ResourceReader"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The reader has been closed or disposed, and cannot be accessed.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Retrieves the type name and data of a named resource from an open resource file or stream.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method retrieves the value of a named resource as a byte array.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is typically used when the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A&gt;</ph> property throws an exception when it tries to retrieve the value of a resource.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`resourceType`</ph> is a string that represents the data type of the resource.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be any of the following values:</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string representation of a <ph id="ph1">`ResourceTypeCode`</ph> enumeration member that indicates the data type of the resource.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ResourceTypeCode`</ph> is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>These include the .NET Framework primitive data types (<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph5">&lt;xref:System.Double&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.Int32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.Single&gt;</ph>, <ph id="ph10">&lt;xref:System.SByte&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph12">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph13">&lt;xref:System.UInt64&gt;</ph>), as well as <ph id="ph14">&lt;xref:System.String&gt;</ph>, <ph id="ph15">&lt;xref:System.DateTime&gt;</ph>, and <ph id="ph16">&lt;xref:System.TimeSpan&gt;</ph>, In addition, the <ph id="ph17">`ResourceTypeCode`</ph> enumeration includes the values shown in the following table.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>ResourceTypeCode value</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data is a byte array.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data is a null reference.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=fullName&gt;</ph> method with an object whose value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data is stored in a stream.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assuming that <ph id="ph1">`resourceData`</ph> has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <ph id="ph2">&lt;xref:System.BitConverter&gt;</ph> or <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string that contains the fully qualified name of the type whose serialized data is assigned to the <ph id="ph1">`resourceData`</ph> argument (for example, <ph id="ph2">`System.String`</ph>).</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following string indicates that the serialized data represents an instance of the <ph id="ph1">`Person`</ph> type in the <ph id="ph2">`Extensions`</ph> namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assuming that <ph id="ph1">`resourceData`</ph> has not been corrupted and that the source type is available, <ph id="ph2">`resourceData`</ph> can be converted from a byte array back to its original value by converting the byte array to a <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object and passing the stream to the <ph id="ph4">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string used to describe the data type in the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=fullName&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The name of a resource.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>When this method returns, contains a string that represents the type name of the retrieved resource.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When this method returns, contains a byte array that is the binary representation of the retrieved type.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceName&lt;/code&gt;</ph> does not exist.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resourceName&lt;/code&gt;</ph> has an invalid type.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The retrieved resource data is corrupt.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">&lt;xref href="System.Resources.ResourceReader"&gt;&lt;/xref&gt;</ph> object is not initialized, probably because it is closed.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Returns an enumerator for this <ph id="ph1">&lt;xref href="System.Resources.ResourceReader"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=fullName&gt;</ph> is an explicit interface implementation.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended approach to enumerating the resources in a .resources file is to call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> object returned by the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>An enumerator for this <ph id="ph1">&lt;xref href="System.Resources.ResourceReader"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The reader has already been closed and cannot be accessed.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>