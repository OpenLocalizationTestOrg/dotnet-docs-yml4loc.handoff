<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f059c8ec99e80a29588ffaa9b87447cf1ec834ae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Automation.Provider.IRawElementProviderFragment.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">980952c3ee04ad161f605ac603c3880bc7e1795e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd6cf798558533aee037aa849cd9d5def7c5fe38</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exposes methods and properties on user interface (UI) elements that are part of a structure more than one level deep, such as a list box or a list item.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implemented by UI Automation providers.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The root node of the fragment must support the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot&gt;</ph> interface, which inherits from <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.IRawElementProviderFragment&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Gets the bounding rectangle of this element.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>No clipping is required if the element is partly obscured or partly off-screen.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen%2A&gt;</ph> property should be set to indicate whether the rectangle is actually visible.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all points within the bounding rectangle are necessarily clickable.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The bounding rectangle, in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Retrieves the root node of the fragment.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>A provider that implements <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot&gt;</ph> should return itself.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The root node.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Retrieves an array of fragment roots that are embedded in the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> element tree rooted at the current element.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns an array of fragments only if the current element is hosting another <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> framework.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most providers return <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An array of root fragments, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Retrieves the runtime identifier of an element.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations should return <ph id="ph1">`null`</ph> for an element that corresponds to a window handle.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other elements should return an array that contains <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId&gt;</ph>, followed by a value that is unique within the fragment.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is the provider's responsibility to ensure uniqueness within the fragment; for example, each item in a list must be individually numbered.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> engine ensures that the identifier is unique among all instances, by translating the <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId&gt;</ph>value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The unique run-time identifier of the element.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Retrieves the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> element in a specified direction within the tree.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> server's implementations of this method define the structure of the <ph id="ph2">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> element tree.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Navigation must be supported upward to the parent, downward to the first and last child, and laterally to the next and previous siblings, as applicable.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each child node has only one parent and must be placed in the chain of siblings reached from the parent by <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.NavigateDirection.FirstChild&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.NavigateDirection.LastChild&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Relationships among siblings must be identical in both directions: if A is B's <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling&gt;</ph>, then B is A's <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.NavigateDirection.NextSibling&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.NavigateDirection.FirstChild&gt;</ph> has no <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling&gt;</ph>, and a <ph id="ph3">&lt;xref:System.Windows.Automation.Provider.NavigateDirection.LastChild&gt;</ph> has no <ph id="ph4">&lt;xref:System.Windows.Automation.Provider.NavigateDirection.NextSibling&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fragment roots do not enable navigation to a parent or siblings; navigation among fragment roots is handled by the default window providers.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in fragments must navigate only to other elements within that fragment.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The direction in which to navigate.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The element in the specified direction, or <ph id="ph1">`null`</ph> if there is no element in that direction</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Sets the focus to this element.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> framework will ensure that the part of the interface that hosts this fragment is already focused before calling this method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your implementation should update only its internal focus state; for example, by repainting a list item to show that it has the focus.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you prefer that <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> not focus the parent window, set the <ph id="ph2">&lt;xref:System.Windows.Automation.Provider.ProviderOptions.ProviderOwnsSetFocus&gt;</ph> option in <ph id="ph3">&lt;xref:System.Windows.Automation.Provider.ProviderOptions&gt;</ph> for the fragment root.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>