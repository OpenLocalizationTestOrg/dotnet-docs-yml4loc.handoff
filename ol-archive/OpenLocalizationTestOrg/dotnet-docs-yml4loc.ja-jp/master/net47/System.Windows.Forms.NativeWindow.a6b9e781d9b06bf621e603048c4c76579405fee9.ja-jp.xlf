<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7e0c252c7d0e60c28c26b39fec3a991f3ba5a0f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Forms.NativeWindow.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">764d27fa3de3b8547a7f42aa5e72bdc44e240a7a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c0562174fad03674a02efa0fc328c95defdd0c5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a low-level encapsulation of a window handle and a window procedure.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class automatically manages window class creation and registration.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window is not eligible for garbage collection when it is associated with a window handle.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure proper garbage collection, handles must either be destroyed manually using <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph> or released using <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> method is called when the WM_NCDESTROY message is processed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means there are cases in which when you do not need to manually call <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>, but it is good practice to do so.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class provides the following properties and methods to manage handles: <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes an instance of the <ph id="ph1">&lt;xref href="System.Windows.Forms.NativeWindow"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the default <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.%23ctor%2A&gt;</ph> constructor provided by the compiler.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Assigns a handle to this window.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> intercepts window messages sent to the <ph id="ph2">`handle`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> to reset the handle's window procedure to the default window procedure.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to indicate that the value of the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The handle to assign cannot be in a different application process.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The handle to assign to this window.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This window already has a handle.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The windows procedure for the associated native window could not be retrieved.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creates a window and its handle with the specified creation parameters.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`cp`</ph> parameter specifies the values that are passed to the native Win32 <ph id="ph2">`CreateWindowEx`</ph> method to create a window and its handle.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> field is not <ph id="ph2">`null`</ph>, the newly created window handle inherits from the specified class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> is set to <ph id="ph2">`BUTTON`</ph>, the newly created window is based on the Win32 <ph id="ph3">`BUTTON`</ph> window class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Param%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> object must either be <ph id="ph3">`null`</ph> or reference an instance of a class that was declared as a structure.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This code is an excerpt from the example shown in the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some code is not shown for the purpose of brevity.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The class name provided is registered with the operating system.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.CreateParams"&gt;&lt;/xref&gt;</ph> that specifies the creation parameters for this window.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The operating system ran out of resources when trying to create the native window.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The native Win32 API could not create the specified window.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The handle of the current native window is already assigned; in explanation, the <ph id="ph1">&lt;xref href="System.Windows.Forms.NativeWindow.Handle"&gt;&lt;/xref&gt;</ph> property is not equal to <ph id="ph2">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Invokes the default window procedure associated with this window.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you only call the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> method when you are intercepting window messages and would like the default window procedure to handle the message.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> should not be called to send a window message to the window; call the Win32 <ph id="ph2">`SendMessage`</ph> function instead.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is an error to call <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> when the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property is 0.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The message that is currently being processed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Destroys the window and its handle.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method destroys the window associated with the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>, sets the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property to 0, and calls the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to reflect the change.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you only call <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph> when you are done with the native window.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Releases the resources associated with this window.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Finalize%2A&gt;</ph> method removes the Win32 derived class associated with the current <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Retrieves the window associated with the specified handle.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you receive a handle from another method, use this method to retrieve the window associated with the handle.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The handle must already be owned by another <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> in the current process; otherwise, <ph id="ph2">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A handle to a window.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.NativeWindow"&gt;&lt;/xref&gt;</ph> associated with the specified handle.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`null`</ph> when the handle does not have an associated window.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets the handle for this window.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method when calling Windows API methods that require a handle for a window or control.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If successful, an <ph id="ph1">&lt;xref href="System.IntPtr"&gt;&lt;/xref&gt;</ph> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specifies a notification method that is called when the handle for a window is changed.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, manages an unhandled thread exception.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, <ph id="ph1">&lt;xref:System.Windows.Forms.Application.OnThreadException%2A&gt;</ph> handles thread exceptions.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Exception"&gt;&lt;/xref&gt;</ph> that specifies the unhandled thread exception.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Releases the handle associated with this window.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not destroy the window handle.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, it sets the handle's window procedure to the default window procedure.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>It sets the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property to 0 and calls <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> to reflect the change.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Invokes the default window procedure associated with this window.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called when a window message is sent to the handle of the window.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph> that is associated with the current Windows message.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>