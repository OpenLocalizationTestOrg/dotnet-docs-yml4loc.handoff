<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4246ee40043ad1ceac93076a4773b64042f8521</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf7c4afa1fe2baae5fc0ef52ee660212a9667066</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1aa240bf80f3655161f946cc3d60a2c07bbd3084</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml"&gt;&lt;/xref&gt;</ph> namespace provides standards-based support for processing XML.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Supported standards</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml&gt;</ph> namespace supports these standards:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML 1.0, including DTD support: <bpt id="p1">[</bpt>http://www.w3.org/TR/2006/REC-xml-20060816/<ept id="p1">](http://www.w3.org/TR/2006/REC-xml-20060816/)</ept></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML namespaces, both stream-level and DOM: <bpt id="p1">[</bpt>http://www.w3.org/TR/REC-xml-names/<ept id="p1">](http://www.w3.org/TR/REC-xml-names/)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML schemas: <bpt id="p1">[</bpt>http://www.w3.org/2001/XMLSchema<ept id="p1">](http://www.w3.org/2001/XMLSchema)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>XPath expressions: <bpt id="p1">[</bpt>http://www.w3.org/TR/xpath<ept id="p1">](http://www.w3.org/TR/xpath)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>XSLT transformations: <bpt id="p1">[</bpt>http://www.w3.org/TR/xslt<ept id="p1">](http://www.w3.org/TR/xslt)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>DOM Level 1 Core: <bpt id="p1">[</bpt>http://www.w3.org/TR/REC-DOM-Level-1/<ept id="p1">](http://www.w3.org/TR/REC-DOM-Level-1/)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>DOM Level 2 Core: <bpt id="p1">[</bpt>http://www.w3.org/TR/DOM-Level-2/<ept id="p1">](http://www.w3.org/TR/DOM-Level-2/)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the section <bpt id="p1">[</bpt>Differences from the W3C specs<ept id="p1">](#diff)</ept> for two cases in which the XML classes differ from the W3C recommendations.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Related namespaces</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework also provides other namespaces for XML-related operations.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list, descriptions, and links, see the <bpt id="p1">[</bpt>System.Xml Namespaces<ept id="p1">](http://msdn.microsoft.com/library/gg145036.aspx)</ept> webpage.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Processing XML asynchronously</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlWriter?displayProperty=fullName&gt;</ph> classes include a number of asynchronous methods that are based on the .</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>These methods can be identified by the string "Async" at the end of their names.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>With these methods, you can write asynchronous code that's similar to your synchronous code, and you can migrate your existing synchronous code to asynchronous code easily.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the asynchronous methods in apps where there is significant network stream latency.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avoid using the asynchronous APIs for memory stream or local file stream read/write operations.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The input stream, <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph>, and <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> should support asynchronous operations as well.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, threads will still be blocked by I/O operations.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>We don't recommend mixing synchronous and asynchronous function calls, because you might forget to use the <ph id="ph1">`await`</ph> keyword or use a synchronous API where an asynchronous one is necessary.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.Async%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XmlWriterSettings.Async%2A?displayProperty=fullName&gt;</ph> flag to <ph id="ph3">`true`</ph> if you don't intend to use an asynchronous method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you forget to specify the <ph id="ph1">`await`</ph> keyword when you call an asynchronous method, the results are non-deterministic: You might receive the result you expected or an exception.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object is reading a large text node, it might cache only a partial text value and return the text node, so retrieving the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Value%2A?displayProperty=fullName&gt;</ph> property might be blocked by an I/O operation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.GetValueAsync%2A&gt;</ph> method to get the text value in asynchronous mode, or use the <ph id="ph2">&lt;xref:System.Xml.XmlReader.ReadValueChunkAsync%2A&gt;</ph> method to read a large text block in chunks.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.FlushAsync%2A&gt;</ph> method before calling <ph id="ph3">&lt;xref:System.Xml.XmlWriter.Close%2A&gt;</ph> to avoid blocking an I/O operation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Differences from the W3C specs</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>In two cases that involve constraints on model group schema components, the <ph id="ph1">&lt;xref:System.Xml&gt;</ph> namespace differs from the W3C recommendations.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Consistency in element declarations:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some cases, when substitution groups are used, the <ph id="ph1">&lt;xref:System.Xml&gt;</ph> implementation does not satisfy the "Schema Component Constraint: Element Declarations Consistent," which is described in the <bpt id="p1">[</bpt>Constraints on Model Group Schema Components<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=137029)</ept> section of the W3C spec.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following schema includes elements that have the same name but different types in the same content model, and substitution groups are used.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This should cause an error, but <ph id="ph1">&lt;xref:System.Xml&gt;</ph> compiles and validates the schema without errors.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this schema, type <ph id="ph1">`t3`</ph> contains a sequence of elements.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of the substitution, the reference to element <ph id="ph1">`e1`</ph> from the sequence can result either in element <ph id="ph2">`e1`</ph> of type <ph id="ph3">`t1`</ph> or in element <ph id="ph4">`e2`</ph> of type <ph id="ph5">`t2`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The latter case would result in a sequence of two <ph id="ph1">`e2`</ph> elements, where one is of type <ph id="ph2">`t2`</ph> and the other is of type <ph id="ph3">`xs:int`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Unique particle attribution:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Under the following conditions, the <ph id="ph1">&lt;xref:System.Xml&gt;</ph> implementation does not satisfy the "Schema Component Constraint: Unique Particle Attribution," which is described in the <bpt id="p1">[</bpt>Constraints on Model Group Schema Components<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=137029)</ept> section of the W3C spec.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>One of the elements in the group references another element.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The referenced element is a head element of a substitution group.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The substitution group contains an element that has the same name as one of the elements in the group.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cardinality of the element that references the substitution group head element and the element with the same name as a substitution group element is not fixed (minOccurs &lt; maxOccurs).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The definition of the element that references the substitution group precedes the definition of the element with the same name as a substitution group element.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in the schema below the content model is ambiguous and should cause a compilation error, but <ph id="ph1">&lt;xref:System.Xml&gt;</ph> compiles the schema without errors.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you try to validate the following XML against the schema above, the validation will fail with the following message: "The element 'e3' has invalid child element 'e2'." and an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaValidationException&gt;</ph> exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>To work around this problem, you can swap element declarations in the XSD document.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>becomes this:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Here's another example of the same issue:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you try to validate the following XML against the schema above, the validation will fail with the following exception: "Unhandled Exception: System.Xml.Schema.XmlSchemaValidationException: The 'e2' el element is invalid - The value 'abc' is invalid according to its datatype 'http://www.w3.org/2001/XMLSchema:int' - The string 'abc' is not a valid Int32 value."\</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Security considerations</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The types and members in the <ph id="ph1">&lt;xref:System.Xml&gt;</ph> namespace rely on the .</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following sections discuss security issues that are specific to XML technologies.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see the specific classes and members mentioned, and visit the <bpt id="p1">[</bpt>XML Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=42458)</ept> for technical information, downloads, newsgroups, and other resources for XML developers.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also note that when you use the <ph id="ph1">&lt;xref:System.Xml&gt;</ph> types and members, if the XML contains data that has potential privacy implications, you need to implement your app in a way that respects your end users' privacy.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>External access<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Several XML technologies have the ability to retrieve other documents during processing.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a document type definition (DTD) can reside in the document being parsed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The DTD can also live in an external document that is referenced by the document being parsed.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML Schema definition language (XSD) and XSLT technologies also have the ability to include information from other files.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>These external resources can present some security concerns.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you'll want to ensure that your app retrieves files only from trusted sites, and that the file it retrieves doesn't contain malicious data.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> class is used to load XML documents and to resolve external resources such as entities, DTDs, or schemas, and import or include directives.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override this class and specify the <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> object to use.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> class if you need to open a resource that you do not control, or that is untrusted.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> wraps an <ph id="ph2">&lt;xref:System.Xml.XmlResolver&gt;</ph> and allows you to restrict the resources that the underlying <ph id="ph3">&lt;xref:System.Xml.XmlResolver&gt;</ph> has access to.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Denial of service<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following scenarios are considered to be less vulnerable to denial of service attacks because the <ph id="ph1">&lt;xref:System.Xml&gt;</ph> classes provide a means of protection from such attacks.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parsing text XML data.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parsing binary XML data if the binary XML data was generated by Microsoft SQL Server.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writing XML documents and fragments from data sources to the file system, streams, a <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>, or a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Loading documents into the Document Object Model (DOM) object if you are using an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object and <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.DtdProcessing%2A&gt;</ph> set to <ph id="ph3">&lt;xref:System.Xml.DtdProcessing.Prohibit&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Navigating the DOM object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following scenarios are not recommended if you are concerned about denial of service attacks, or if you are working in an untrusted environment.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>DTD processing.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Schema processing.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes adding an untrusted schema to the schema collection, compiling an untrusted schema, and validating by using an untrusted schema.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>XSLT processing.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Parsing any arbitrary stream of user supplied binary XML data.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>DOM operations such as querying, editing, moving sub-trees between documents, and saving DOM objects.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are concerned about denial of service issues or if you are dealing with untrusted sources, do not enable DTD processing.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is disabled by default on <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> objects that the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method creates.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> allows DTD processing by default.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.DtdProcessing%2A?displayProperty=fullName&gt;</ph> property to disable this feature.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have DTD processing enabled, you can use the <ph id="ph1">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> class to restrict the resources that the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> can access.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also design your app so that the XML processing is memory and time constrained.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can configure timeout limits in your ASP.NET app.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Processing considerations<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because XML documents can include references to other files, it is difficult to determine how much processing power is required to parse an XML document.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, XML documents can include a DTD.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the DTD contains nested entities or complex content models, it could take an excessive amount of time to parse the document.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>, you can limit the size of the document that can be parsed by setting the <ph id="ph2">&lt;xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can limit the number of characters that result from expanding entities by setting the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the appropriate reference topics for examples of setting these properties.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XSD and XSLT technologies have additional capabilities that can affect processing performance.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, it is possible to construct an XML schema that requires a substantial amount of time to process when evaluated over a relatively small document.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also possible to embed script blocks within an XSLT style sheet.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both cases pose a potential security threat to your app.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>When creating an app that uses the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class, you should be aware of the following items and their implications:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>XSLT scripting is disabled by default.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>XSLT scripting should be enabled only if you require script support and you are working in a fully trusted environment.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XSLT <ph id="ph1">`document()`</ph> function is disabled by default.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you enable the <ph id="ph1">`document()`</ph> function, restrict the resources that can be accessed by passing an <ph id="ph2">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object to the <ph id="ph3">&lt;xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extension objects are enabled by default.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an <ph id="ph1">&lt;xref:System.Xml.Xsl.XsltArgumentList&gt;</ph> object that contains extension objects is passed to the <ph id="ph2">&lt;xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A&gt;</ph> method, the extension objects are used.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>XSLT style sheets can include references to other files and embedded script blocks.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>A malicious user can exploit this by supplying you with data or style sheets that, when executed, can cause your system to process until the computer runs low on resources.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>XSLT apps that run in a mixed trust environment can result in style sheet spoofing.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a malicious user can load an object with a harmful style sheet and hand it off to another user who subsequently calls the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A&gt;</ph> method and executes the transformation.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>These security issues can be mitigated by not enabling scripting or the <ph id="ph1">`document()`</ph> function unless the style sheet comes from a trusted source, and by not accepting <ph id="ph2">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> objects, XSLT style sheets, or XML source data from an untrusted source.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Exception handling<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions thrown by lower level components can disclose path information that you do not want exposed to the app.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your apps must catch exceptions and process them appropriately.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>