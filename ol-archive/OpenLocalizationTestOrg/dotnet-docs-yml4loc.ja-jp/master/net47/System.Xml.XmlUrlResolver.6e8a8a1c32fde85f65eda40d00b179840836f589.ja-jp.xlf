<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9de968e9d5e5788e1aee2dc383d5a48dfae2339a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.XmlUrlResolver.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3fb3e271865f1ec1b8013dc0d095bf1a605421f4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49b8132a6fa5fb179fc3af2a098b4aed5416a326</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Resolves external XML resources named by a Uniform Resource Identifier (URI).</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is used to resolve external XML resources such as entities, document type definitions (DTDs) or schemas.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also used to process include and import elements found in Extensible StyleSheet Language (XSL) style sheets or XML Schema definition language (XSD) schemas.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> is the default resolver for all classes in the <ph id="ph2">&lt;xref:System.Xml&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>It supports the <ph id="ph1">`file://`</ph> and <ph id="ph2">`http://`</ph> protocols and requests from the <ph id="ph3">&lt;xref:System.Net.WebRequest&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> objects can contain sensitive information such as user credentials.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should be careful when you cache <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> objects and should not pass <ph id="ph2">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> objects to an untrusted component.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resolving DTDs</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an XML reader (<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>) is reading an XML file that contains an external DTD, it calls the <ph id="ph2">&lt;xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A?displayProperty=fullName&gt;</ph> method to get a stream representation of the DTD.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the URI of the DTD is a relative URI, the XML reader calls the <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver.ResolveUri%2A?displayProperty=fullName&gt;</ph> method and returns an absolute URI for the given <ph id="ph2">`relativeUri`</ph> and <ph id="ph3">`baseURi`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> doesn't know how to resolve the URI, it returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName&gt;</ph> method uses the information in the <ph id="ph2">&lt;xref:System.Xml.XmlUrlResolver.Credentials%2A&gt;</ph> property as appropriate to gain access to the resource.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no <ph id="ph1">`get`</ph> accessor to this property for security reasons.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>When overwriting <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph>, <bpt id="p1">**</bpt>GetEntity<ept id="p1">**</ept> is the method that utilizes the credential information in the <bpt id="p2">**</bpt>Credentials<ept id="p2">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resolving all other XML resources is very similar to resolving DTDs.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> negotiates the connection with the external resource and returns a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> representation of the content.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The object that is making the call to <ph id="ph1">&lt;xref:System.Xml.XmlResolver&gt;</ph> interprets the stream.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extending the XmlUrlResolver class</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default behavior of the <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> class is to resolve an XML data resource from its source, not from cache.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some cases, resolving a data resource from cache can improve the performance of an application by saving a trip to the data resource's server.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The performance gains here must be weighed against the need for up-to-date content.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example extends <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> and builds a new class, <ph id="ph2">`XmlCachingResolver`</ph>, to retrieve resources from the cache.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is done by overriding the <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=fullName&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XmlCachingResolver_ex#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_Data/XmlCachingResolver_ex/CS/XmlCachingResolver_ex.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XmlCachingResolver_ex#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlCachingResolver_ex/VB/XmlCachingResolver_ex.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caching behavior of the <ph id="ph1">`XmlCachingResolver`</ph> class is implemented in the <ph id="ph2">`GetEntity`</ph> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is done by creating new <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Cache.HttpRequestCachePolicy&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Cache.HttpRequestCachePolicy&gt;</ph> object is created using the <ph id="ph2">&lt;xref:System.Net.Cache.HttpRequestCacheLevel.Default&gt;</ph> member of the <ph id="ph3">&lt;xref:System.Net.Cache.HttpRequestCacheLevel&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.CachePolicy%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Net.WebRequest&gt;</ph> object is set with the <ph id="ph3">&lt;xref:System.Net.Cache.HttpRequestCachePolicy&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>An instance of the <ph id="ph1">`XmlCachingResolver`</ph> class is created with the <ph id="ph2">`Boolean`</ph> <ph id="ph3">`enableHttpCaching`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this value is set to <ph id="ph1">`true`</ph>, the instance resolves a resource from the default cache if possible.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`enableHttpCaching`</ph> is set to <ph id="ph2">`false`</ph>, the instance uses the default behavior and resolves resources from their source.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This example leverages the extensibility of the XML classes in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other classes can be extended and customized to suit the needs of a particular application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlUrlResolver"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets or sets the cache policy for the underlying <ph id="ph1">&lt;xref href="System.Net.WebRequest"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The cache policy for the underlying web request.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Sets credentials used to authenticate web requests.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the virtual directory does not require authentication, this property does not need to be set.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the credentials of the user must be supplied.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can associate different credentials with different URIs and add them to a cache.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then use the credentials to check authentication for different URIs, regardless of the original source of the XML.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code shows how to set the <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver.Credentials%2A&gt;</ph> property to a credential cache.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The credentials to be used to authenticate web requests.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If this property is not set, the value defaults to <ph id="ph1">`null`</ph>; that is, the <ph id="ph2">`XmlUrlResolver`</ph> has no user credentials.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Maps a URI to an object that contains the actual resource.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used when the caller wants to map a given URI to an object that contains the resource that the URI represents.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your application can mitigate memory denial of service threats to the <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver.GetEntity%2A&gt;</ph> method by implementing IStream<ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComTypes.IStream&gt;</ph> to limit the number of bytes read.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>This helps guard against situations where malicious code attempts to pass an infinite stream of bytes to the <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver.GetEntity%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The URI returned from <ph id="ph1">&lt;xref href="System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Currently not used.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The type of object to return.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The current implementation only returns <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A stream object or <ph id="ph1">`null`</ph> if a type other than stream is specified.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;ofObjectToReturn&lt;/code&gt;</ph> is neither <ph id="ph2">`null`</ph> nor a <ph id="ph3">`Stream`</ph> type.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The specified URI is not an absolute URI.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;absoluteUri&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>There is a runtime error (for example, an interrupted server connection).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Asynchronously maps a URI to an object that contains the actual resource.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The URI returned from <ph id="ph1">&lt;xref href="System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Currently not used.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The type of object to return.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The current implementation only returns <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A stream object or <ph id="ph1">`null`</ph> if a type other than stream is specified.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets or sets the network proxy for the underlying <ph id="ph1">&lt;xref href="System.Net.WebRequest"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.IWebProxy"&gt;&lt;/xref&gt;</ph> to use to access the Internet resource.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Resolves the absolute URI from the base and relative URIs.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The absolute URI can be used as the base URI for any subsequent requests for entities that are relative to this URI.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The base URI used to resolve the relative URI.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The URI to resolve.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The URI can be absolute or relative.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If absolute, this value effectively replaces the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">baseUri</ph><ept id="p1">&lt;/code&gt;</ept> value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If relative, it combines with the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">baseUri</ph><ept id="p1">&lt;/code&gt;</ept> to make an absolute URI.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The absolute URI, or <ph id="ph1">`null`</ph> if the relative URI cannot be resolved.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;baseUri&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or <ph id="ph3">&lt;code&gt;relativeUri&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>