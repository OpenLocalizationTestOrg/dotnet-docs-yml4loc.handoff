<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0382b8c7c681dbd7fab2e10838023adcddbf1ea3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.InteropServices.ClassInterfaceAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7d03be966ec3d6dc22fa9c0b9d33a915518cbbc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11588754234dff56b87b3232b69dcf56f46d245b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this attribute to assemblies or classes.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This attribute controls whether the Type Library Exporter (Tlbexp.exe) automatically generates a class interface for the attributed class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>A class interface carries the same name as the class itself, but the name is prefixed with an underscore.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>When exposed, the class interface contains all the <ph id="ph1">`public`</ph>, non- <ph id="ph2">`static`</ph> members of the managed class, including members inherited from its base class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Managed classes cannot access a class interface and have no need to as they can access the class members directly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tlbexp.exe generates a unique interface identifier (IID) for the class interface.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Class interfaces can be dual or dispatch-only interfaces.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optionally, you can suppress the generation of the class interface and provide a custom interface instead.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You expose or suppress a class interface by specifying a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType?displayProperty=fullName&gt;</ph> enumeration member.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you apply <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> to an assembly, the attribute pertains to all classes in the assembly unless the individual classes override the setting with their own attribute.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although class interfaces eliminate the task of explicitly defining interfaces for each class, their use in production applications is strongly discouraged.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dual class interfaces allow clients to bind to a specific interface layout that is subject to change as the class evolves.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, consider a managed class that exposes a class interface to COM clients.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first version of the class contains methods <ph id="ph1">`North`</ph> and <ph id="ph2">`South`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>An unmanaged client can bind to the class interface, which provides <ph id="ph1">`North`</ph> as the first method in the class interface and method <ph id="ph2">`South`</ph> as the second method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Now consider the next version of the class, which has a new method, <ph id="ph1">`East`</ph>, inserted between methods <ph id="ph2">`North`</ph> and <ph id="ph3">`South`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unmanaged clients that try to bind to the new class through the old class interface end up calling method <ph id="ph1">`East`</ph> when they intend to call method <ph id="ph2">`South`</ph>, because the positioning of methods within the interface has changed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Moreover, any change to the layout of a base class also affects the layout of the class interface for all derived classes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Managed clients, which bind directly to classes, do not exhibit the same versioning problems.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For specific guidelines on using a class interface, see <bpt id="p1">[</bpt>COM Callable Wrapper<ept id="p1">](~/docs/framework/interop/com-callable-wrapper.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> always applies to imported classes the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType?displayProperty=fullName&gt;</ph> enumeration member to indicate that existing COM classes never expose managed interfaces.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ClassInterfaceAttribute"&gt;&lt;/xref&gt;</ph> class with the specified <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ClassInterfaceType"&gt;&lt;/xref&gt;</ph> enumeration value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor takes an underlying 16-bit signed integer that represents each <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType&gt;</ph> enumeration member.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> uses this constructor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Describes the type of interface that is generated for a class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ClassInterfaceAttribute"&gt;&lt;/xref&gt;</ph> class with the specified <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ClassInterfaceType"&gt;&lt;/xref&gt;</ph> enumeration member.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For readable code that is less prone to error, always use this constructor.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ClassInterfaceType"&gt;&lt;/xref&gt;</ph> values that describes the type of interface that is generated for a class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ClassInterfaceType"&gt;&lt;/xref&gt;</ph> value that describes which type of interface should be generated for the class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ClassInterfaceType"&gt;&lt;/xref&gt;</ph> value that describes which type of interface should be generated for the class.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>