<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79d14d7adbc654d4a51c0a41e970ecc7893069bb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Nullable.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac8aae830b7db262bfe35d935dbb8fdc69a2d76e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c95b144969add9254f550c62413a5a4d572e60c3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Supports a value type that can be assigned <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type is said to be nullable if it can be assigned a value or can be assigned <ph id="ph1">`null`</ph>, which means the type has no value whatsoever.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, all reference types, such as <ph id="ph1">&lt;xref:System.String&gt;</ph>, are nullable, but all value types, such as <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, are not.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>In C# and Visual Basic, you mark a value type as nullable by using the <ph id="ph1">`?`</ph> notation after the value type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`int?`</ph> in C# or <ph id="ph2">`Integer?`</ph> in Visual Basic declares an integer value type that can be assigned <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Nullable&gt;</ph> class provides complementary support for the <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Nullable&gt;</ph> class supports obtaining the underlying type of a nullable type, and comparison and equality operations on pairs of nullable types whose underlying value type does not support generic comparison and equality operations.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Boxing and Unboxing</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a nullable type is boxed, the common language runtime automatically boxes the underlying value of the <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> object, not the <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> object itself.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, if the <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the contents of the <ph id="ph3">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property is boxed.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`HasValue`</ph> property is <ph id="ph2">`false`</ph>, <ph id="ph3">`null`</ph> is boxed.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the underlying value of a nullable type is unboxed, the common language runtime creates a new <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> structure initialized to the underlying value.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Compares the relative values of two <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The underlying value type of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">n1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">n2</ph><ept id="p2">&lt;/code&gt;</ept> parameters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An integer that indicates the relative values of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">n1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">n2</ph><ept id="p2">&lt;/code&gt;</ept> parameters.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Less than zero</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property for <ph id="ph2">&lt;code&gt;n1&lt;/code&gt;</ph> is <ph id="ph3">`false`</ph>, and the <ph id="ph4">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property for <ph id="ph5">&lt;code&gt;n2&lt;/code&gt;</ph> is <ph id="ph6">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> properties for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">n1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">n2</ph><ept id="p2">&lt;/code&gt;</ept> are <ph id="ph4">`true`</ph>, and the value of the <ph id="ph5">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property for <bpt id="p3">&lt;code&gt;</bpt><ph id="ph6">n1</ph><ept id="p3">&lt;/code&gt;</ept> is less than the value of the <ph id="ph7">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property for <bpt id="p4">&lt;code&gt;</bpt><ph id="ph8">n2</ph><ept id="p4">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> properties for <ph id="ph2">&lt;code&gt;n1&lt;/code&gt;</ph> and <ph id="ph3">&lt;code&gt;n2&lt;/code&gt;</ph> are <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> properties for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">n1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">n2</ph><ept id="p2">&lt;/code&gt;</ept> are <ph id="ph4">`true`</ph>, and the value of the <ph id="ph5">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property for <bpt id="p3">&lt;code&gt;</bpt><ph id="ph6">n1</ph><ept id="p3">&lt;/code&gt;</ept> is equal to the value of the <ph id="ph7">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property for <bpt id="p4">&lt;code&gt;</bpt><ph id="ph8">n2</ph><ept id="p4">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Greater than zero</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property for <ph id="ph2">&lt;code&gt;n1&lt;/code&gt;</ph> is <ph id="ph3">`true`</ph>, and the <ph id="ph4">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property for <ph id="ph5">&lt;code&gt;n2&lt;/code&gt;</ph> is <ph id="ph6">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> properties for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">n1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">n2</ph><ept id="p2">&lt;/code&gt;</ept> are <ph id="ph4">`true`</ph>, and the value of the <ph id="ph5">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property for <bpt id="p3">&lt;code&gt;</bpt><ph id="ph6">n1</ph><ept id="p3">&lt;/code&gt;</ept> is greater than the value of the <ph id="ph7">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property for <bpt id="p4">&lt;code&gt;</bpt><ph id="ph8">n2</ph><ept id="p4">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Indicates whether two specified <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> objects are equal.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The underlying value type of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">n1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">n2</ph><ept id="p2">&lt;/code&gt;</ept> parameters.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">n1</ph><ept id="p1">&lt;/code&gt;</ept> parameter is equal to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">n2</ph><ept id="p2">&lt;/code&gt;</ept> parameter; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The return value depends on the <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> properties of the two parameters that are compared.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> properties for <ph id="ph2">&lt;code&gt;n1&lt;/code&gt;</ph> and <ph id="ph3">&lt;code&gt;n2&lt;/code&gt;</ph> are <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> properties for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">n1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">n2</ph><ept id="p2">&lt;/code&gt;</ept> are <ph id="ph4">`true`</ph>, and the <ph id="ph5">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> properties of the parameters are equal.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph2">`true`</ph> for one parameter and <ph id="ph3">`false`</ph> for the other parameter.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> properties for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">n1</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">n2</ph><ept id="p2">&lt;/code&gt;</ept> are <ph id="ph4">`true`</ph>, and the <ph id="ph5">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> properties of the parameters are unequal.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns the underlying type argument of the specified nullable type.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>A generic type definition is a type declaration, such as <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>, that contains a type parameter list, and the type parameter list declares one or more type parameters.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>A closed generic type is a type declaration where a particular type is specified for a type parameter.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the <ph id="ph1">`nullableType`</ph> parameter is the type of <ph id="ph2">`Nullable&lt;Int32&gt;`</ph> in C# (<ph id="ph3">`Nullable(Of Int32)`</ph> in Visual Basic), the return value is the type of <ph id="ph4">&lt;xref:System.Int32&gt;</ph> (that is, the type argument of the closed generic type).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object that describes a closed generic nullable type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The type argument of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">nullableType</ph><ept id="p1">&lt;/code&gt;</ept> parameter, if the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">nullableType</ph><ept id="p2">&lt;/code&gt;</ept> parameter is a closed generic nullable type; otherwise, <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;nullableType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>