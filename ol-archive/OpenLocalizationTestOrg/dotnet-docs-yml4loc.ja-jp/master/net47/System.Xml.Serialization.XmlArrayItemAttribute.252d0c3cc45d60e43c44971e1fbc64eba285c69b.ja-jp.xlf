<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5870382cb08ce09ab7c150fa9b90baa7dc4d5198</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.Serialization.XmlArrayItemAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d30e7a9fab87035a2334322c401121d2ac41f41a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16ae765862c5b901799d151f6642a1d7b8ae80c2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an attribute that specifies the derived types that the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlSerializer"&gt;&lt;/xref&gt;</ph> can place in a serialized array.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> belongs to a family of attributes that controls how the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> serializes or deserializes an object.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a complete list of similar attributes, see <bpt id="p1">[</bpt>Attributes That Control XML Serialization<ept id="p1">](~/docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> to any public read/write member that returns an array, or provides access to one.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a field that returns an array of objects, a collection, an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, or any class that implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> supports polymorphism--in other words, it allows the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to add derived objects to an array.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose a class named <ph id="ph1">`Mammal`</ph> is derived from a base class named <ph id="ph2">`Animal`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Further suppose that a class named <ph id="ph1">`MyAnimals`</ph> contains a field that returns an array of <ph id="ph2">`Animal`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>To allow the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to serialize both the <ph id="ph2">`Animal`</ph> and <ph id="ph3">`Mammal`</ph> type, apply the <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> to the field twice, each time specifying one of the two acceptable types.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply multiple instances of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> to specify types of objects that can be inserted into the array.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The serialization of a field or property that returns an interface or array of interfaces is not supported.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using attributes, see <bpt id="p1">[</bpt>Attributes<ept id="p1">](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the word <ph id="ph1">`XmlArrayItem`</ph> in your code instead of the longer <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlArrayItemAttribute"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlArrayItemAttribute"&gt;&lt;/xref&gt;</ph> class and specifies the name of the XML element generated in the XML document.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload sets the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this overload if you want the name of the generated XML element to differ from the member's identifier.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>An XML document that includes namespaces can contain more than one version of an element name.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The name of the XML element.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlArrayItemAttribute"&gt;&lt;/xref&gt;</ph> class and specifies the <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that can be inserted into the serialized array.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the object to serialize.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlArrayItemAttribute"&gt;&lt;/xref&gt;</ph> class and specifies the name of the XML element generated in the XML document and the <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that can be inserted into the generated XML document.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload sets the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this overload if you want the name of the generated XML element to differ from the member's identifier.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>An XML document that includes namespaces can contain more than one version of an element name.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The name of the XML element.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the object to serialize.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets or sets the XML data type of the generated XML element.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists the XML Schema simple data types with their .NET equivalents.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the XML Schema <ph id="ph1">`base64Binary`</ph> and <ph id="ph2">`hexBinary`</ph> data types, use an array of <ph id="ph3">&lt;xref:System.Byte&gt;</ph> objects, and apply an <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> with the <ph id="ph5">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A&gt;</ph> property set to "base64Binary" or "hexBinary", as appropriate.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the XML Schema <ph id="ph1">`time`</ph> and <ph id="ph2">`date`</ph> data types, use the <ph id="ph3">&lt;xref:System.DateTime&gt;</ph> type and apply the <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> with the <ph id="ph5">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A&gt;</ph> set to "date" or "time".</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>For every XML Schema type that is mapped to a string, apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> with its <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A&gt;</ph> property set to the XML Schema type.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this does not change the serialization format, only the schema for the member.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property is case-sensitive, so you must set it exactly to one of the XML Schema data types.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Passing binary data as an XML element is more efficient then passing it as an XML attribute.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about XML Schema data types, see the World Wide Web Consortium (www.w3.org) document "XML Schema Part 2: Datatypes."</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>XSD data type</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>.NET data type</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>anyURI</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>base64Binary</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Array of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> objects</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>boolean</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>byte</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>date</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>dateTime</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>decimal</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>double</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>ENTITY</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>ENTITIES</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>float</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>gDay</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>gMonth</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>gMonthDay</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>gYear</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>gYearMonth</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>hexBinary</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Array of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> objects</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>ID</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>IDREF</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>IDREFS</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>int</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>integer</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>language</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>long</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>NCName</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>negativeInteger</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>NMTOKEN</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>NMTOKENS</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>normalizedString</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>nonNegativeInteger</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>nonPositiveInteger</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>NOTATION</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>positiveInteger</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>QName</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>duration</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>string</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>short</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>time</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>token</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>unsignedByte</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>unsignedInt</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>unsignedLong</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>unsignedShort</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>An XML schema definition (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document "XML Schema Part 2: DataTypes".</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the generated XML element.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A&gt;</ph> if you want the name of the generated XML element to differ from the member's identifier.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the same <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A&gt;</ph> value to more than one class member if the generated XML document uses XML namespaces to distinguish between identically named members.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about how to use namespaces and prefixed names in the XML document, see the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The name of the generated XML element.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The default is the member identifier.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the name of the generated XML element is qualified.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A&gt;</ph> property determines whether an XML element name is qualified, based on the World Wide Web Consortium (www.w3.org) specification "Namespaces in XML."</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A&gt;</ph> property is set to any value, attempting to set the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute.Form%2A&gt;</ph> property to <ph id="ph3">`XmlSchemaForm.Unqualified`</ph> throws an exception.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value, <ph id="ph1">`XmlSchemaForm.None`</ph>, instructs the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to check the schema for the XML document to determine whether the namespace is qualified.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>For elements, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> checks the value of the schema-element attribute <ph id="ph2">`elementFormDefault`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>For attributes, it checks the value of the schema-element attribute <ph id="ph1">`attributeFormDefault`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following XML Schema indicates that the <ph id="ph1">`Name`</ph> element is qualified, while the <ph id="ph2">`Number`</ph> element is unqualified.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaForm"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`XmlSchemaForm.None`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlArrayItemAttribute.Form"&gt;&lt;/xref&gt;</ph> property is set to <ph id="ph2">`XmlSchemaForm.Unqualified`</ph> and a <ph id="ph3">&lt;xref href="System.Xml.Serialization.XmlArrayItemAttribute.Namespace"&gt;&lt;/xref&gt;</ph> value is specified.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlSerializer"&gt;&lt;/xref&gt;</ph> must serialize a member as an empty XML tag with the <ph id="ph2">`xsi:nil`</ph> attribute set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema specification for structures allows an XML document to explicitly signal that an element's content is missing.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such an element contains the attribute <ph id="ph1">`xsi:nil`</ph> set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the World Wide Web Consortium (www.w3.org) specification titled "XML Schema Part 1: Structures."</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the <ph id="ph3">`xsi:nil`</ph> attribute is generated for class members that have been set to <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you set a field named <ph id="ph1">`MyStringArray`</ph> to <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> generates the following XML code.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A&gt;</ph> property is <ph id="ph2">`false`</ph>, no XML element is generated.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A&gt;</ph> property to a member typed as a value type because a value type cannot contain <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Xml.Serialization.XmlSerializer"&gt;&lt;/xref&gt;</ph> generates the <ph id="ph3">`xsi:nil`</ph> attribute; otherwise, <ph id="ph4">`false`</ph>, and no instance is generated.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Gets or sets the namespace of the generated XML element.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A&gt;</ph> property conforms to the World Wide Web Consortium (www.w3.org) specification "Namespaces in XML."</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create namespaces to use in the XML document and associated prefixes, you must create an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph> that contains all the prefix and namespace pairs.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The namespace you set for each <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> must be contained in the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> generates the document, it correctly prefixes the element name for each array item.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The namespace of the generated XML element.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Gets or sets the level in a hierarchy of XML elements that the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlArrayItemAttribute"&gt;&lt;/xref&gt;</ph> affects.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>An XML document can contain hierarchies of XML elements.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>To represent such a hierarchy, an array of arrays is used.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>In such an array, each index represents a level in the hierarchy.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A&gt;</ph> property is only used when applying an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> to a field that returns an array of arrays.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>When applying the attribute, specify which hierarchy level the attribute affects by setting the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first index always has the value of 0; therefore it is optional to set its <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A&gt;</ph> --an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> without a <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A&gt;</ph> value is applied to the first array index.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the subsequent <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> objects require <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A&gt;</ph> values specified (as 1, 2, 3, and so forth).</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The zero-based index of a set of indexes in an array of arrays.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Gets or sets the type allowed in an array.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.Type%2A&gt;</ph> property to specify an overridden type for a public field or public read/write property value.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a field or property returns an array of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>, apply multiple instances of the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> to the field or property.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each instance, set the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.Type%2A&gt;</ph> property to a type of object that can be inserted into the array.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an array contains only primitive types, you do not need to apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> generates a series of elements, each with the same element name, for each value, but the type of each element is set to the XML Schema data type.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following code:</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>results in this XML:</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you specify the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A&gt;</ph> property for each primitive type, the element name for each value is generated using the .NET type name.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example this code:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>results in this XML:</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that is allowed in the array.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>