<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9cca4ee6356bd0e507cf7459e46c642ce8f687a2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.Serialization.DataContractSerializer.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8cff105ed66d9e45aa67e1339136d75b1d7a3d3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5edd0f0441defd4892a99aae2af5242a55fb4abf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Serializes and deserializes an instance of a type into an XML stream or document using a supplied data contract.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> class to serialize and deserialize instances of a type into an XML stream or document.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can create a type named <ph id="ph1">`Person`</ph> with properties that contain essential data, such as a name and address.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then create and manipulate an instance of the <ph id="ph1">`Person`</ph> class and write all of its property values in an XML document for later retrieval, or in an XML stream for immediate transport.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most important, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> is used to serialize and deserialize data sent in <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> messages.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute to classes, and the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> attribute to class members to specify properties and fields that are serialized.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crlist](~/includes/crlist-md.md)]</ph> types that can be serialized, see <bpt id="p1">[</bpt>Types Supported by the Data Contract Serializer<ept id="p1">](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, first create an instance of a class and an object appropriate to writing or reading the format; for example, an instance of the <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then call the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XmlObjectSerializer.WriteObject%2A&gt;</ph> method to persist the data.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve data, create an object appropriate to reading the data format (such as an <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> for an XML document) and call the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer.ReadObject%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, see <bpt id="p1">[</bpt>Serialization and Deserialization<ept id="p1">](~/docs/framework/wcf/feature-details/serialization-and-deserialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the type of a data contract serializer using the <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;dataContractSerializer<ph id="ph2">\&amp;</ph>gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/wcf/datacontractserializer-element.md)</ept> element in a client application configuration file.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Preparing Classes for Serialization or Deserialization</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> is used in combination with the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> and <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prepare a class for serialization, apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to the class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each member of the class that returns data that you want to serialize, apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can serialize fields and properties, regardless of accessibility: private, protected, internal, protected internal, or public.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, your schema specifies a <ph id="ph1">`Customer`</ph> with an <ph id="ph2">`ID`</ph> property, but you already have an existing application that uses a type named <ph id="ph3">`Person`</ph> with a <ph id="ph4">`Name`</ph> property.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a type that conforms to the contract, first apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to the class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to every field or property that you want to serialize.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to both private and public members.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The final format of the XML need not be text.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> writes the data as an XML infoset, which allows you to write the data to any format recognized by the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended that you use the <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> classes to read and write, because both are optimized to work with the <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are creating a class that has fields or properties that must be populated before the serialization or deserialization occurs, use callback attributes, as described in <bpt id="p1">[</bpt>Version-Tolerant Serialization Callbacks<ept id="p1">](~/docs/framework/wcf/feature-details/version-tolerant-serialization-callbacks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Adding to the Collection of Known Types</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>When serializing or deserializing an object, it is required that the type is "known" to the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Begin by creating an instance of a class that implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> (such as <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>) and adding the known types to the collection.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then create an instance of the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> using one of the overloads that takes the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> (for example, <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer.%23ctor%28System.Type%2CSystem.Collections.Generic.IEnumerable%7BSystem.Type%7D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike other primitive types, the <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> structure is not a known type by default, so it must be manually added to the list of known types (see <bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Forward Compatibility</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> understands data contracts that have been designed to be compatible with future versions of the contract.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such types implement the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The interface features the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject.ExtensionData%2A&gt;</ph> property that returns an <ph id="ph2">&lt;xref:System.Runtime.Serialization.ExtensionDataObject&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Forward-Compatible Data Contracts<ept id="p1">](~/docs/framework/wcf/feature-details/forward-compatible-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Running under Partial Trust</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>When instantiating the target object during deserialization, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> does not call the constructor of the target object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you author a <bpt id="p1">*</bpt>[DataContract]<ept id="p1">*</ept> type that is accessible from partial trust (that is, it is public and in an assembly that has the <ph id="ph1">`AllowPartiallyTrustedCallers`</ph> attribute applied) and that performs some security-related actions, you must be aware that the constructor is not called.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>In particular, the following techniques do not work:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you try to restrict partial trust access by making the constructor internal or private, or by adding a <ph id="ph1">`LinkDemand`</ph> to the constructor -- neither of these have any effect during deserialization under partial trust.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you code the class that assumes the constructor has run, the class may get into an invalid internal state that is exploitable.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, parameters of <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryString"&gt;&lt;/xref&gt;</ph> that specify the XML element and namespace that contains the content, and an alternative for mapping <ph id="ph2">`xsi:type`</ph> declarations at run time.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The XML element that encloses the content to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The namespace of the XML element that encloses the content to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that contains the known types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The maximum number of items in the graph to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to use non-standard XML constructs to preserve object reference data; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.IDataContractSurrogate"&gt;&lt;/xref&gt;</ph> to customize the serialization process.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractResolver"&gt;&lt;/xref&gt;</ph> to map <ph id="ph2">`xsi:type`</ph> declarations to data contract types.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, the XML element and namespace that contains the content, and an alternative for mapping <ph id="ph1">`xsi:type`</ph> declarations at run time.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The XML element that encloses the content to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The namespace of the XML element that encloses the content to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that contains the known types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The maximum number of items in the graph to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to use non-standard XML constructs to preserve object reference data; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.IDataContractSurrogate"&gt;&lt;/xref&gt;</ph> to customize the serialization process.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractResolver"&gt;&lt;/xref&gt;</ph> to map <ph id="ph2">`xsi:type`</ph> declarations to data contract types.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, and parameters of <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryString"&gt;&lt;/xref&gt;</ph> that specify the XML element and namespace that contain the content.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryString"&gt;&lt;/xref&gt;</ph> that specifies the XML element that encloses the content to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryString"&gt;&lt;/xref&gt;</ph> that specifies the XML namespace of the root.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that contains the known types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The maximum number of items in the graph to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to use non-standard XML constructs to preserve object reference data; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.IDataContractSurrogate"&gt;&lt;/xref&gt;</ph> to customize the serialization process.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The number of items exceeds the maximum value.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, and the XML element and namespace that contain the content.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The XML element that encloses the content to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The namespace of the XML element that encloses the content to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that contains the known types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The maximum number of items in the graph to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to use non-standard XML constructs to preserve object reference data; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.IDataContractSurrogate"&gt;&lt;/xref&gt;</ph> to customize the serialization process.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The number of items exceeds the maximum value.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, and a surrogate for custom serialization.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that contains the known types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The maximum number of items in the graph to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The default is the value returned by the <ph id="ph1">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to use non-standard XML constructs to preserve object reference data; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.IDataContractSurrogate"&gt;&lt;/xref&gt;</ph> to customize the serialization process.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The number of items exceeds the maximum value.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, and an alternative for mapping <ph id="ph1">`xsi:type`</ph> declarations at run time.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not available in Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that contains the known types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The maximum number of items in the graph to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The default is the value returned by the <ph id="ph1">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to use non-standard XML constructs to preserve object reference data; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.IDataContractSurrogate"&gt;&lt;/xref&gt;</ph> to customize the serialization process.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractResolver"&gt;&lt;/xref&gt;</ph> to map <ph id="ph2">`xsi:type`</ph> declarations to data contract types.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This method also specifies the root XML element and namespace in two string parameters as well as a list of known types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The root element name of the content.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The namespace of the root element.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that contains the types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type using the XML root element and namespace specified through the parameters of type <ph id="ph2">&lt;xref href="System.Xml.XmlDictionaryString"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryString"&gt;&lt;/xref&gt;</ph> that contains the root element name of the content.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryString"&gt;&lt;/xref&gt;</ph> that contains the namespace of the root element.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type using the supplied XML root element and namespace.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The name of the XML element that encloses the content to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The namespace of the XML element that encloses the content to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type and settings.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The type of the instance to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The serializer settings.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type, and a collection of known types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that contains the types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> class to serialize or deserialize an object of the specified type.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This method also specifies the root XML element and namespace in two <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryString"&gt;&lt;/xref&gt;</ph> parameters as well as a list of known types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The type of the instances that are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryString"&gt;&lt;/xref&gt;</ph> that contains the root element name of the content.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryString"&gt;&lt;/xref&gt;</ph> that contains the namespace of the root element.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.Generic.IEnumerable`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that contains the known types that may be present in the object graph.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Gets the component used to dynamically map <ph id="ph1">`xsi:type`</ph> declarations to known contract types.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractResolver&gt;</ph> is set using a <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractResolver"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Gets a surrogate type that can extend the serialization or deserialization process.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.IDataContractSurrogate&gt;</ph> can be used to customize how instances of a type are serialized and deserialized.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, it can be used to enable the serialization of legacy types that are not serializable, that is, types to which the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute has not been applied.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.IDataContractSurrogate"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Gets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer.IgnoreExtensionDataObject%2A&gt;</ph> property is used when the class to which a <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> has been applied also implements the <ph id="ph3">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the data added in a future version of the contract is ignored on read and write.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Forward-Compatible Data Contracts<ept id="p1">](~/docs/framework/wcf/feature-details/forward-compatible-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to omit the extension data; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> is positioned on an object that can be deserialized.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> used to read the XML stream.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the reader is at the start element of the stream to read; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> is positioned on an object that can be deserialized.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer.IsStartObject%2A&gt;</ph> determines whether it can read an object by checking that it is positioned on an XML element.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also examines the name and namespace of the XML element that the reader is positioned at and compares the values to the expected name and namespace.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expected name and namespace can be set with the following: the data contract name and namespace of the type passed into the constructor, or the <ph id="ph1">`rootName`</ph> and <ph id="ph2">`rootNamespace`</ph> values passed into the constructor (if present).</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> used to read the XML stream.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the reader is at the start element of the stream to read; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Gets a collection of types that may be present in the object graph serialized using this instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer.KnownTypes%2A&gt;</ph> property provides the set of known types that are used for serialization and deserialization.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an instance of the <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph> class contains instances of a <ph id="ph2">`Person`</ph> class, add the <ph id="ph3">`Person`</ph> type to an instance of the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class and use the instance to construct an instance of the <ph id="ph5">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you know of other types to add to the <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph>, then add those types to the collection.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.ObjectModel.ReadOnlyCollection`1"&gt;&lt;/xref&gt;</ph> that contains the expected types passed in as known types to the <ph id="ph2">&lt;xref href="System.Runtime.Serialization.DataContractSerializer"&gt;&lt;/xref&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Gets the maximum number of items in an object graph to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be set in configuration or imperatively in code.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set it in configuration, add a custom behavior to the behaviors section and add the following setting.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set this property imperatively in code find the operation description of the service, then get the operation behavior, finally set the property as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph%2A&gt;</ph> property specifies the maximum number of objects that the serializer serializes or deserializes in a single <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer.ReadObject%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>(The method always reads one root object, but this object may have other objects in its data members.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>Those objects may have other objects, and so on.) The default is <ph id="ph1">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that when serializing or deserializing arrays, every array entry counts as a separate object.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, note that some objects may have a large memory representation and so this quota alone may not be sufficient to prevent Denial of Service attacks.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to increase this quota beyond its default value, it is important to do so both on the sending (serializing) and receiving (deserializing) sides.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>It applies both when reading and writing data.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The maximum number of items to serialize or deserialize.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The number of items exceeds the maximum value.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Gets a value that specifies whether to use non-standard XML constructs to preserve object reference data.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to keep the references; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Reads the XML stream with an <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> and returns the deserialized object.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> used to read the XML stream.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The deserialized object.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Reads the XML stream with an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryReader"&gt;&lt;/xref&gt;</ph> used to read the XML stream.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The deserialized object.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">verifyObjectName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set to <ph id="ph2">`true`</ph>, and the element name and namespace do not correspond to the values set in the constructor.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Reads the XML stream with an <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> used to read the XML stream.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The deserialized object.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">verifyObjectName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set to <ph id="ph2">`true`</ph>, and the element name and namespace do not correspond to the values set in the constructor.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Reads an XML document or document stream and returns the deserialized object.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The method includes a parameter to specify whether the object name is verified is validated, and a resolver for mapping <ph id="ph1">`xsi:type`</ph> declarations at runtime.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The XML reader used to read the content.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to verify the object name; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractResolver"&gt;&lt;/xref&gt;</ph> to map <ph id="ph2">`xsi:type`</ph> declarations to data contract types.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The deserialized object.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Gets a value that specifies whether read-only types are serialized.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if read-only types are serialized; <ph id="ph2">`false`</ph> if all types are serialized.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Writes the closing XML element using an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> used to write the stream.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The type being serialized does not conform to data contract rules.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractAttribute"&gt;&lt;/xref&gt;</ph> attribute has not been applied to the type.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>There is a problem with the instance being written.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Writes the closing XML element using an <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> used to write the stream.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The type being serialized does not conform to data contract rules.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractAttribute"&gt;&lt;/xref&gt;</ph> attribute has not been applied to the type.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>There is a problem with the instance being written.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Writes all the object data (starting XML element, content, and closing element) to an XML document or stream with an <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> used to write the XML document or stream.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The object that contains the data to write to the stream.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The type being serialized does not conform to data contract rules.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractAttribute"&gt;&lt;/xref&gt;</ph> attribute has not been applied to the type.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>There is a problem with the instance being written.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Writes all the object data (starting XML element, content, and enclosing element) to an XML document or stream  using the specified XmlDictionaryWriter.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The method includes a resolver for mapping <ph id="ph1">`xsi:type`</ph> declarations at runtime.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>An XmlDictionaryWriter used to write the content to the XML document or stream.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The object that contains the content to write.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>An implementation of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractResolver"&gt;&lt;/xref&gt;</ph> used to map <ph id="ph2">`xsi:type`</ph> declarations to known data contracts.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Writes the XML content using an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> used to write the stream.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The object to write to the stream.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The type being serialized does not conform to data contract rules.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractAttribute"&gt;&lt;/xref&gt;</ph> attribute has not been applied to the type.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>There is a problem with the instance being written.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Writes the XML content using an <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> used to write the stream.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The object to write to the stream.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The type being serialized does not conform to data contract rules.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.DataContractAttribute"&gt;&lt;/xref&gt;</ph> attribute has not been applied to the type.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>There is a problem with the instance being written.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Writes the opening XML element using an <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlDictionaryWriter"&gt;&lt;/xref&gt;</ph> used to write the XML start element.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The object to write.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Writes the opening XML element using an <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> used to write the XML start element.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The object to write.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>