<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d3a2e7634ee7567edda66fe3a967f69382a6d17</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.AddIn.Hosting.AddInToken.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a8270e896124c709402043401e278fcaf2790ed</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">786805fdeb58f253a9741deec24a2684c9a4d5c3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an add-in that can be activated.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken&gt;</ph> object represents an add-in, and its associated pipeline segments, that can be activated.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The token contains the name, assembly name, description, publisher, and version of the add-in that it represents.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInStore.FindAddIns%2A?displayProperty=fullName&gt;</ph> method to get a collection of tokens that represent add-ins whose pipelines match a specified host view.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInStore.FindAddIn%2A?displayProperty=fullName&gt;</ph> method to get a collection of tokens that represent all the pipelines for a specified add-in that match a specified host view.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>To activate an add-in, pass the token that represents the desired add-in to the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken.Activate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns an instance of the type that represents the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken.Activate%2A&gt;</ph> method has several overloads.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use an overload that does not require the name of an application domain as one of its parameters, a new application domain for the add-in is automatically created.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use Language-Integrated Query (LINQ) extension methods to perform queries on an <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken&gt;</ph>, treating the token as a collection of <ph id="ph2">&lt;xref:System.AddIn.Hosting.QualificationDataItem&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Activates an add-in in the environment of another add-in.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overload activates the add-in in the same application domain and process as the add-in from which <ph id="ph1">`environment`</ph> was obtained.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The application domain and process that contains the original add-in.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The interface or abstract base type that represents the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Activates an add-in with a specified trust level in a new application domain.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overload loads the add-in into an automatically generated application domain.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify a name for the new application domain, use the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%2CSystem.String%29&gt;</ph> overload.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sets the base directory for the application domain to be the location of the add-in assembly.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also looks for the configuration file [addinassemblyname].dll.config and, if found, sets it to be the configuration file for the new application domain.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the trust level.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The interface or abstract base type that represents the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Activates an add-in in an existing application domain.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>To activate an add-in in an automatically generated application domain, use the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29&gt;</ph> overload to generate a new application domain with a specified security level or the <ph id="ph2">&lt;xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%2CSystem.String%29&gt;</ph> overload to include a friendly name for the application domain.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The application domain that the add-in should be activated in.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The interface or abstract base type that represents the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Full-trust permission is demanded.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A caller in the call chain does not have sufficient permission.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Activates an add-in with a specified permission set in a new application domain.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overload loads the add-in into an automatically generated application domain.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>It sets the base directory for the application domain to be the location of the add-in assembly.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also looks for the configuration file <ph id="ph1">`[addinassemblyname].dll.config`</ph> and, if found, sets it to be the configuration file for the new application domain.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The permissions granted for the add-in.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The interface or abstract base type that represents the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;permissions&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Activates an add-in in an external process, in a new application domain, and with a specified trust level.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sets the base directory for the application domain to be the location of the add-in assembly.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also looks for the configuration file <ph id="ph1">`[addinassemblyname].dll.config`</ph> and, if found, sets it to be the configuration file for the new application domain.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The external process in which to activate the add-in.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the trust level.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The interface or abstract base type that represents the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Activates an add-in in an external process, in a new application domain, and with a specified permission set.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sets the base directory for the application domain to be the location of the add-in assembly.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also looks for the configuration file <ph id="ph1">`[addinassemblyname].dll.config`</ph> and, if found, sets it to be the configuration file for the new application domain.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The external process in which to activate the add-in.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The required permission set granted for the add-in.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The interface or abstract base type that represents the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Activates an add-in in a new application domain with a specified name and trust level.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not need to specify an application domain name, use the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29&gt;</ph> overload.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sets the base directory for the application domain to be the location of the add-in assembly.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also looks for the configuration file <ph id="ph1">`[addinassemblyname].dll.config`</ph> and, if found, sets it to be the configuration file for the new application domain.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the trust level.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The friendly name to assign to the new application domain.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The interface or abstract base type that represents the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Gets the namespace and type of the add-in.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property obtains the full name of the add-in as it would be returned by the <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is always available on an instance of an <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The type of the add-in, fully qualified by its namespace.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets the name of the assembly that contains the add-in.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property obtains the display name of the assembly that contains the add-in, as it would be returned by the <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is always available on an instance of an <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The name of the assembly.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Gets the description of the add-in.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property obtains the description of the add-in as specified in the <ph id="ph1">&lt;xref:System.AddIn.AddInAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A description of the add-in, or <ph id="ph1">`null`</ph> if the description is not specified in the <ph id="ph2">&lt;xref href="System.AddIn.AddInAttribute"&gt;&lt;/xref&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Gets and sets a value that indicates whether add-ins should be directly connected to their hosts when conditions permit.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following conditions must exist for the direct connection to occur:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property must be set to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The add-in must be in the same application domain as the host.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The add-in view and the host view of the add-in must be the same type.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>All the segments of the pipeline must be available.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a direct connection is established, the add-in-side adapter and the host-side adapter are not instantiated.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the add-in should be directly connected to the host; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Determines whether a specified object is equal to the current instance.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The object to compare with the current instance.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified object and the current instance are equal; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Returns an enumerator for the qualification data of the pipeline segments that are associated with this token.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to treat a token as if it were a collection of qualification data items, for example, in a <ph id="ph1">`foreach`</ph> statement (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in Visual C++).</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the enumerator returned by this method to iterate through the qualification data items of the pipeline segments associated with the current token.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each item of qualification data is a <ph id="ph1">&lt;xref:System.AddIn.Hosting.QualificationDataItem&gt;</ph> structure that identifies the pipeline segment and contains a name/value pair from a <ph id="ph2">&lt;xref:System.AddIn.Pipeline.QualificationDataAttribute&gt;</ph> attribute applied to that segment.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The add-in model does not use qualification data that is applied to the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, when you enumerate qualification data you will not find any items whose <ph id="ph1">&lt;xref:System.AddIn.Hosting.QualificationDataItem.Segment%2A&gt;</ph> property is <ph id="ph2">&lt;xref:System.AddIn.Hosting.AddInSegmentType?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can use the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken.QualificationData%2A&gt;</ph> property to get a nested set of dictionaries that contain the qualification data of the pipeline segments.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>An enumerator that can be used to iterate through the qualification data of the pipeline segments that are associated with the current token.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Serves as a hash function for a token.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A hash code for the current token.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Gets the name of the add-in.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property obtains the name of the add-in as specified in the <ph id="ph1">&lt;xref:System.AddIn.AddInAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is always available on an instance of an <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The name of the add-in.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Gets the publisher of the add-in.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property obtains the publisher of the add-in as specified in the <ph id="ph1">&lt;xref:System.AddIn.AddInAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The publisher of the add-in, or <ph id="ph1">`null`</ph> if the publisher is not specified in the <ph id="ph2">&lt;xref href="System.AddIn.AddInAttribute"&gt;&lt;/xref&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Gets a dictionary of data about the segments in the pipeline associated with the current token.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to obtain data that has been applied to pipeline segments with the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.QualificationDataAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this data to identify and work with the types that compose your pipelines.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property returns a dictionary of dictionaries.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The top dictionary always has six keys.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each key is an <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInSegmentType&gt;</ph> value for a segment in the pipeline.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each value is a generic <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>of strings with string keys that contains the segment's qualification data.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The keys and values of these inner dictionaries are the names and values specified in the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.QualificationDataAttribute&gt;</ph> attributes for the segments.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no qualification data has been applied to a segment, its dictionary is empty.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The add-in model does not use qualification data that is applied to the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the dictionary for <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInSegmentType?displayProperty=fullName&gt;</ph> is always empty.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can obtain qualification data by enumerating an <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken&gt;</ph> as if it were a collection of <ph id="ph2">&lt;xref:System.AddIn.Hosting.QualificationDataItem&gt;</ph> structures, using a <ph id="ph3">`foreach`</ph> statement (<ph id="ph4">`For Each`</ph> in Visual Basic, <ph id="ph5">`for each`</ph> in Visual C++).</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the example provided for the <ph id="ph1">&lt;xref:System.AddIn.Hosting.QualificationDataItem&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A dictionary whose keys are pipeline segments and whose values are dictionaries of name/value pairs that represent qualification data for each segment.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Returns a string that represents the token.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A string that represents the token.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Gets the version of the add-in, as specified in the <ph id="ph1">&lt;xref href="System.AddIn.AddInAttribute"&gt;&lt;/xref&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The version number is a free-form string.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The version of the add-in, or <ph id="ph1">`null`</ph> if the version number is not specified in the <ph id="ph2">&lt;xref href="System.AddIn.AddInAttribute"&gt;&lt;/xref&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns an enumerator for the qualification data of the pipeline segments that are associated with this token.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method allows a token to be treated like a collection of qualification data items, for example in a <ph id="ph1">`foreach`</ph> statement (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in Visual C++).</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the enumerator returned by this method to iterate through the qualification data items of the pipeline segments associated with the current token.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each item of qualification data is a <ph id="ph1">&lt;xref:System.AddIn.Hosting.QualificationDataItem&gt;</ph> structure that identifies the pipeline segment and contains the name/value pair from a <ph id="ph2">&lt;xref:System.AddIn.Pipeline.QualificationDataAttribute&gt;</ph> attribute applied to that segment.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The add-in model does not use qualification data that is applied to the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, when you enumerate qualification data you will not find any items whose <ph id="ph1">&lt;xref:System.AddIn.Hosting.QualificationDataItem.Segment%2A&gt;</ph> property is <ph id="ph2">&lt;xref:System.AddIn.Hosting.AddInSegmentType?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can use the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken.QualificationData%2A&gt;</ph> property to get a nested set of dictionaries containing the qualification data of the pipeline segments.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>An enumerator that can be used to iterate through the qualification data of the pipeline segments that are associated with the current token.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>