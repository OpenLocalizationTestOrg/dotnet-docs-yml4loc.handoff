<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">977a81b346fb1d6c3661399d1a5b2297a0b3aace</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Controls.Primitives.Popup.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55db10e29fc4b6c92b82496fccf62b9390e962dc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f21c6bd69a8ecc5064d3bfe2d8443e8e9efb3b75</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a pop-up window that has content.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Content Model<ept id="p1">**</ept>:  <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> has one content property: <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.Child%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> can have a maximum of one child, which can be any <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following illustration shows a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control that has a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> as its parent.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Popup illustration<ept id="p1">]</ept><bpt id="p2">(~/add/media/popuppicture.JPG "</bpt>Popup illustration<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can position a popup by setting the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.Placement%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Popup Placement Behavior<ept id="p1">](~/docs/framework/wpf/controls/popup-placement-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> is displayed on the screen, it does not reposition itself if its parent is repositioned.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> displays its content in its own window on the screen.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control supports animation when the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph> and the application is running with full trust.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application that is running with full trust has complete access to system resources and is typically installed on the user's system.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see<bpt id="p1">[</bpt>Security (WPF)<ept id="p1">](~/docs/framework/wpf/security-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For bitmap and opacity effects to appear on the content of a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph>, you must set the effects directly on the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> content.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> does not inherit effects that are set on the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control or on any other element that is in the parent window.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> is sized to its content by default.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this occurs, applying a <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> or bitmap effects may cause the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> to be obscured.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurs because the default size of the content does not provide enough area for the effects to display.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If more space is required, you can define a margin around the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> content to increase the area that is available to the control.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Parent%2A&gt;</ph> property must be set on the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> when used in a <ph id="ph3">[!INCLUDE[TLA#tla_winfxwebapp](~/includes/tlasharptla-winfxwebapp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create a tooltip, use the <ph id="ph1">&lt;xref:System.Windows.Controls.ToolTip&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.ToolTipService&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>ToolTip Overview<ept id="p1">](~/docs/framework/wpf/controls/tooltip-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control can contain transparent content.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control can only contain transparent content when the application runs with full trust.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application that runs with full trust has complete access to system resources and is typically installed on the local system.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see<bpt id="p1">[</bpt>Security (WPF)<ept id="p1">](~/docs/framework/wpf/security-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property cannot be set to <ph id="ph1">`true`</ph> when the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> is hosted in a <ph id="ph3">[!INCLUDE[TLA#tla_winfxwebapp](~/includes/tlasharptla-winfxwebapp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> in an application that does not run in full trust, the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A&gt;</ph> property value is changed to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application that is hosted in a browser is an example of an application that does not run in full trust.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control can contain transparent content; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.AllowsTransparency"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The identifier for the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets or sets the content of the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Content Model<ept id="p1">**</ept>: The <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.Child%2A&gt;</ph> property is the only content property for the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> can only have one <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> as a child, but that child can contain complex embedded content.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the child can be a <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> that contains an <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph>, text, and other types of controls.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>When content is added to a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control, the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control becomes the logical parent to the content.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> content is considered to be the logical child of the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child content is not added to the visual tree that contains the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the child content is rendered in a separate window with its own visual tree when the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.UIElement"&gt;&lt;/xref&gt;</ph> content of the <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.Child"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.IsOpen"&gt;&lt;/xref&gt;</ph> property changes to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> is opened and closed by toggling the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Attaches a child element to a <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might want to create a custom control that has the same functionality as an existing control and also exhibits the behavior of a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can make your control behave like a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> by adding a <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> to your control and calling the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.CreateRootPopup%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method assigns <ph id="ph1">`child`</ph> to the child property and binds the following properties to <ph id="ph2">`child`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should implement these as dependency properties in your control so it can be used the same way as a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](~/docs/framework/wpf/advanced/custom-dependency-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.CreateRootPopup%2A&gt;</ph>, <ph id="ph2">`child`</ph> cannot be a child of a <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, <ph id="ph1">`PlacementTarget`</ph> should be set on your control before you call this method.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> to which to add child content.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.UIElement"&gt;&lt;/xref&gt;</ph> child content.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets or sets a delegate handler method that positions the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.CustomPopupPlacementCallback"&gt;&lt;/xref&gt;</ph> delegate method that provides placement information for the <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.CustomPopupPlacementCallback"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns the logical parent of a <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> does not have a defined parent and the <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup.PlacementTarget"&gt;&lt;/xref&gt;</ph> is not <ph id="ph3">`null`</ph>, the <ph id="ph4">&lt;xref href="System.Windows.Controls.Primitives.Popup.PlacementTarget"&gt;&lt;/xref&gt;</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Otherwise, the return values are the same as <ph id="ph1">&lt;xref href="System.Windows.FrameworkElement.GetUIParentCore"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> is displayed with a drop shadow effect.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>A drop shadow effect displays when the <ph id="ph1">&lt;xref:System.Windows.SystemParameters.DropShadow%2A?displayProperty=fullName&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A?displayProperty=fullName&gt;</ph> property are set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> is displayed with a drop shadow; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.HasDropShadow"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The identifier for the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.HasDropShadow%2A&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Get or sets the horizontal distance between the target origin and the popup alignment point.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can position a popup by setting the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.Placement%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Popup Placement Behavior<ept id="p1">](~/docs/framework/wpf/controls/popup-placement-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Double&gt;</ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strings do not have to explicitly include decimal points.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a value of <ph id="ph1">`1`</ph> is acceptable.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The same <ph id="ph1">&lt;xref:System.Double&gt;</ph> range restrictions apply as those that are mentioned in the Property Value section of this topic.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`double`</ph> value as described earlier in this table, followed by one of the following unit declaration strings: <ph id="ph2">`px`</ph>, <ph id="ph3">`in`</ph>, <ph id="ph4">`cm`</ph>, or <ph id="ph5">`pt`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`in`</ph> is inches; 1in=96px</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm=(96/2.54) px</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`pt`</ph> is points; 1pt=(96/72) px</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The horizontal distance between the target origin and the popup alignment point.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For information about the target origin and popup alignment point, see <bpt id="p1">[</bpt>Popup Placement Behavior<ept id="p1">](~/docs/framework/wpf/controls/popup-placement-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The default is 0.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.HorizontalOffset"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> is visible.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a control uses a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> as part of its default style, bind the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> to a property of the control.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Controls.ComboBox&gt;</ph> can bind its <ph id="ph2">&lt;xref:System.Windows.Controls.ComboBox.IsDropDownOpen%2A&gt;</ph> property to the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>This simplifies the logic for controlling when the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> is visible.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> is visible; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.IsOpen"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Gets an enumerator that you can use to access the logical child elements of the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you add content to a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control, the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control becomes the logical parent to the content.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> content is considered to be the logical child of the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child content is not added to the visual tree that contains the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the child content is rendered in a separate window that has its own visual tree when the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IEnumerator"&gt;&lt;/xref&gt;</ph> that you can use to access the logical child elements of a <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Determines the required size of the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> content within the visual tree of the logical parent.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method always returns a <ph id="ph1">&lt;xref:System.Windows.Size&gt;</ph> that has a width and height of zero (0), because <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> content is not located in the visual tree of its logical parent or <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child content is created in a different window that has its own visual tree.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The available size that this element can give to the child.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You can use infinity as a value to indicate that the element can size to whatever content is available.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Size"&gt;&lt;/xref&gt;</ph> structure that has the <ph id="ph2">&lt;xref href="System.Windows.Size.Height"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Windows.Size.Width"&gt;&lt;/xref&gt;</ph> properties both equal to zero (0).</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Responds when the value of the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.IsOpen"&gt;&lt;/xref&gt;</ph> property changes from to <ph id="ph2">`true`</ph> to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Responds to the condition in which the value of the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.IsOpen"&gt;&lt;/xref&gt;</ph> property changes from <ph id="ph2">`false`</ph> to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The event arguments.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.PreviewMouseLeftButtonDown"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation makes sure that a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> closes when a mouse event occurs outside the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> when the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A&gt;</ph> property is set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.PreviewMouseLeftButtonUp"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation makes sure that a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> closes when a mouse event occurs outside the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> when the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A&gt;</ph> property is set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.PreviewMouseRightButtonUp"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation makes sure that a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> closes when a mouse event occurs outside the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> when the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A&gt;</ph> property is set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.PreviewMouseRightButtonDown"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation makes sure that a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> closes when a mouse event occurs outside the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> when the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A&gt;</ph> property is set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.IsOpen"&gt;&lt;/xref&gt;</ph> property changes to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> is opened and closed by toggling the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Gets or sets the orientation of the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control when the control opens, and specifies the behavior of the <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control when it overlaps screen boundaries.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can position a popup by setting the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.Placement%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Popup Placement Behavior<ept id="p1">](~/docs/framework/wpf/controls/popup-placement-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.SystemParameters.MenuDropAlignment%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, setting <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.Placement%2A&gt;</ph> to <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.PlacementMode.Left&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Controls.Primitives.PlacementMode.Right&gt;</ph> reverses the position of the <ph id="ph6">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph>; a <ph id="ph7">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> with <ph id="ph8">&lt;xref:System.Windows.Controls.Primitives.Popup.Placement%2A&gt;</ph> set to <ph id="ph9">&lt;xref:System.Windows.Controls.Primitives.PlacementMode.Left&gt;</ph> aligns its left edge with the right edge of <ph id="ph10">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A&gt;</ph> and a <ph id="ph11">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> with <ph id="ph12">&lt;xref:System.Windows.Controls.Primitives.Popup.Placement%2A&gt;</ph> set to <ph id="ph13">&lt;xref:System.Windows.Controls.Primitives.PlacementMode.Right&gt;</ph> aligns its right edge with the left edge of <ph id="ph14">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.PlacementMode"&gt;&lt;/xref&gt;</ph> enumeration value that determines the orientation of the <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control when the control opens, and that specifies how the control interacts with screen boundaries.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.PlacementMode.Bottom"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.Placement"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Gets or sets the rectangle relative to which the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control is positioned when it opens.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can position a popup by setting the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.Placement%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Popup Placement Behavior<ept id="p1">](~/docs/framework/wpf/controls/popup-placement-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The rectangle that is used to position the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.PlacementRectangle"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Gets or sets the element relative to which the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> is positioned when it opens.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can position a popup by setting the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.Placement%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Popup Placement Behavior<ept id="p1">](~/docs/framework/wpf/controls/popup-placement-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.UIElement"&gt;&lt;/xref&gt;</ph> that is the logical parent of the <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.PlacementTarget"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Gets or sets an animation for the opening and closing of a <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> can only animate when the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.AllowsTransparency%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>This requires the application that creates the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control to run with full trust.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A&gt;</ph> is animated, the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> will not be animated.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.PopupAnimation"&gt;&lt;/xref&gt;</ph> enumeration value that defines an animation to open and close a <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.PopupAnimation.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.PopupAnimation"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control closes when the control is no longer in focus.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> stays open until it is explicitly closed by setting the <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A&gt;</ph> property to <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.StaysOpen%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control intercepts all mouse and keyboard events to determine when one of these events occurs outside the <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control closes when <ph id="ph3">&lt;xref href="System.Windows.Controls.Primitives.Popup.IsOpen"&gt;&lt;/xref&gt;</ph> property is set to <ph id="ph4">`false`</ph>; <ph id="ph5">`false`</ph> if the <ph id="ph6">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control closes when a mouse or keyboard event occurs outside the <ph id="ph7">&lt;xref href="System.Windows.Controls.Primitives.Popup"&gt;&lt;/xref&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.StaysOpen"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Gets or sets the vertical distance between the target origin and the popup alignment point.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can position a popup by setting the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementTarget%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Popup.PlacementRectangle%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup.Placement%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.Popup.HorizontalOffset%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Popup Placement Behavior<ept id="p1">](~/docs/framework/wpf/controls/popup-placement-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Double&gt;</ph></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string representation of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is interpreted as a <ph id="ph1">[!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]</ph> measurement.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strings do not have to explicitly include decimal points.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a value of <ph id="ph1">`1`</ph> is acceptable.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>The same <ph id="ph1">&lt;xref:System.Double&gt;</ph> range restrictions apply as those that are mentioned in the Property Value section of this topic.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`double`</ph> value as described earlier in this table, followed by one of the following unit declaration strings: <ph id="ph2">`px`</ph>, <ph id="ph3">`in`</ph>, <ph id="ph4">`cm`</ph>, or <ph id="ph5">`pt`</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`px`</ph> (default) is <ph id="ph2">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`in`</ph> is inches; 1in=96px</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`cm`</ph> is centimeters; 1cm=(96/2.54) px</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`pt`</ph> is points; 1pt=(96/72) px</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The vertical distance between the target origin and the popup alignment point.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>For information about the target origin and popup alignment point, see <bpt id="p1">[</bpt>Popup Placement Behavior<ept id="p1">](~/docs/framework/wpf/controls/popup-placement-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The default is 0.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.Popup.VerticalOffset"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>This member supports the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> infrastructure and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>An object to add as a child.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>This member supports the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> infrastructure and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>A string to add to the object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>