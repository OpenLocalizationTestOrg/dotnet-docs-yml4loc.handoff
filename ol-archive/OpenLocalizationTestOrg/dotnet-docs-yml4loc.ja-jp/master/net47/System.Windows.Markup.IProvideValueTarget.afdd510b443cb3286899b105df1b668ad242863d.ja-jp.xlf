<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e52b59c1052fdf179c88aaa36b9191229ca9a7a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Markup.IProvideValueTarget.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a626d382bb90d6b424c943ea68c807c8674efcdd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b54470540d51297f2e0a62d8054faed03471ff5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a service that reports situational object-property relationships for markup extension evaluation.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> represents a service that reports information regarding the object-property structure surrounding where a value converter is invoked.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Type converters and markup extensions can query for <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Type Converters and Markup Extensions for XAML<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept> and <bpt id="p2">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id="p2">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For markup extensions specifically, a scenario where <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is useful is to determine the validity of your markup extension's situational usage.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, your markup extension might implement a value deferral mechanism, but using that mechanism might only be appropriate if the target object is capable of using other components of your deferral mechanism at run time.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You could check the type system characteristics of the object returned as <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> and make sure that object supports your deferral technique.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>If so, your markup extension returns a value, and if not, your markup extension throws an exception that will be picked up as an inner exception by a XAML object writer.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>A similar scenario is assuring that a particular property supports a capability, by checking type system characteristics of the <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the API name <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> might imply an association with <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=fullName&gt;</ph>, the information reported by <ph id="ph3">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can also be useful to a <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> typically have more context than a markup extension because they are dedicated to a particular target type or target property, and thus the situational validity is usually predictable in the type system.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, other scenarios exist.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following is a list of some scenarios that might be implemented by either a type converter or a markup extension:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> to read instance values of other properties on that object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that your handling here might need to be robust for unset values, because the processing order of XAML members on the target object can be nondeterministic.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> to read type-level metadata, or to verify that required interfaces are implemented by the type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Get <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> to read property metadata.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario is to use <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> information to limit which objects or properties are permitted to be set by your markup extension.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before attempting to use the service, make sure that the service itself is not <ph id="ph1">`null`</ph> when returned by the relevant service provider parameter you are using for context.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using the service, it is particularly important not to modify the object referenced by the <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> property, or other objects referenced by that object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For WPF specifically, these changes could cause unexpected changes that would invalidate the WPF property system.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not use the type of <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> to determine which precise type a markup extension or type converter should return.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is not a best practice.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your return type should be consistent with attributing (<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph> for markup extensions) or patterns (class name of the type converter).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is in the System.Xaml assembly.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>This service supports framework features such as binding on a dependency property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>In WPF, the service represented by <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can return objects and properties for situations where the value to return from a markup extension or type converter depends on context.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is leveraged heavily in the internal implementation of <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph>, the class that implements the binding mechanism for dependency properties in WPF.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>A default internal service provider for WPF implements <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> for usage by a custom markup extension or type converter.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The object and property reported by <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can only be set by the internal WPF service.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Going beyond this definition of how <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> operates would require defining your own service provider for markup extension and type converter usages that implements at the very least the <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph> services, and that is an advanced scenario that is not described here.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>A null value for <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> does not necessarily mean that a markup extension or type converter cannot act, although that depends on your implementation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example case where the values from <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> are null even if the service is available is if your markup extension is nested within another markup extension, such as a <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>An implementation that relies on <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> should always check for null values if only for the purpose of throwing a specific exception, if that is your intended design.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets the target object being reported.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> is the actual reference, not a type system identifier or other identifier.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value can also be <ph id="ph1">`null`</ph>; see <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using the service, it is particularly important not to modify the object referenced by the <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> property, or other objects referenced by that object as properties that are not specifically the value-conversion case you are handling.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For WPF specifically, changing the target object could cause unexpected changes that would invalidate the WPF  property system.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The target object being reported.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets an identifier for the target property being reported.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value can also be <ph id="ph1">`null`</ph>; see <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a dependency property, the default WPF service may return a <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>, such that the markup extension or type converter can use metadata.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the returned object can be a <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> for a CLR property.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An identifier for the target property being reported.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>