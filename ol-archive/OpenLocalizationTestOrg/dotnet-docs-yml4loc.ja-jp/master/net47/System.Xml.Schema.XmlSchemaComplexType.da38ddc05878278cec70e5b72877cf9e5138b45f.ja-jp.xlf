<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b43e4fe2658f822c88106cf861d60dce305f1010</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.Schema.XmlSchemaComplexType.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">133233d828d75cf267ef7d2a2a93cecf379de80c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7bc37c4e753f8f0bfa07645215b59c9e9697b4fe</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the <ph id="ph1">`complexType`</ph> element from XML Schema as specified by the World Wide Web Consortium (W3C).</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class defines a complex type that determines the set of attributes and content of an element.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>An element can be declared with a type attribute that refers to a <ph id="ph1">`complexType`</ph> element that defines the structure, content, and attributes of that element.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaComplexType"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Gets or sets the value for the <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaAnyAttribute"&gt;&lt;/xref&gt;</ph> component of the complex type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is not null, the complex type can contain any attributes from the namespaces specified in the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaAnyAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaAnyAttribute"&gt;&lt;/xref&gt;</ph> component of the complex type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Gets the collection of attributes for the complex type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Contains <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Xml.Schema.XmlSchemaAttributeGroupRef"&gt;&lt;/xref&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Gets the collection of all the complied attributes of this complex type and its base types.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a combination of all the attributes from the <ph id="ph1">`Attributes`</ph> property from each type in the hierarchy.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property is read-only.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property has the value after the schema has been successfully compiled to determine the complete attribute set that is allowed in an instance document.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The collection of all the attributes from this complex type and its base types.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The post-compilation value of the <ph id="ph1">`AttributeUses`</ph> property.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets the post-compilation value for <ph id="ph1">`anyAttribute`</ph> for this complex type and its base type(s).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property is read-only.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property has values after the schema has been successfully compiled to determine the complete attribute set of the complex type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, it might be the <ph id="ph1">`anyAttribute`</ph> element from one of the base types.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The post-compilation value of the <ph id="ph1">`anyAttribute`</ph> element.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">`block`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Indicates the type of derivation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This attribute can contain the following values:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enum</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the derivation restriction defined by the <ph id="ph1">`BlockDefault`</ph> property of the schema, if it exists.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This element cannot be replaced by a type derived by Extension.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This element cannot be replaced by a type derived by Restriction.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`#all`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This element cannot be replaced by any type regardless of derivation method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Substitution`</ph>, <ph id="ph2">`List`</ph>, and <ph id="ph3">`Union`</ph> derivation methods are not supported by this property.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`block`</ph> attribute prevents a complex type from being used in the specified type of derivation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`XmlSchemaDerivationMethod.None`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets the value after the type has been compiled to the post-schema-validation information set (infoset).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This value indicates how the type is enforced when <ph id="ph1">`xsi:type`</ph> is used in the instance document.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is taken either from the type itself or, if not defined at the type level, it is taken from the <ph id="ph1">`schema`</ph> element.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the value is restricted, only the specifically defined type can be used, not types derived from the specifically defined type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>This attribute can contain the following values:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enum</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the derivation restriction defined by the <ph id="ph1">`BlockDefault`</ph> property of the schema, if it exists.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>This element cannot be replaced by a type derived by Extension.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This element cannot be replaced by a type derived by Restriction.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`#all`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This element cannot be replaced by any type regardless of derivation method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Substitution`</ph>, <ph id="ph2">`List`</ph>, and <ph id="ph3">`Union`</ph> derivation methods are not supported by this property.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The post-schema-validated infoset value.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`BlockDefault`</ph> value on the <ph id="ph2">`schema`</ph> element.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets or sets the post-compilation <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaContentModel"&gt;&lt;/xref&gt;</ph> of this complex type.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is mutually exclusive with the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaComplexType.Particle%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The content model type that is one of the <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaSimpleContent"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Xml.Schema.XmlSchemaComplexContent"&gt;&lt;/xref&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the content model of the complex type which holds the post-compilation value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the content in the post-schema-validation infoset.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`IsMixed`</ph> property is set to <ph id="ph2">`true`</ph> on the <ph id="ph3">`ContentModel`</ph> property that has the type <ph id="ph4">`XmlSchemaComplexContent`</ph>, the value returned is <ph id="ph5">`Mixed`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`IsMixed`</ph> property is <ph id="ph2">`false`</ph>, the value is either <ph id="ph3">`Empty`</ph> or <ph id="ph4">`ElementOnly`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the type on the <ph id="ph1">`ContentModel`</ph> property has the type <ph id="ph2">`XmlSchemaSimpleContent`</ph>, then this value is always <ph id="ph3">`TextOnly`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ContentType`</ph> property must have one of the values shown in the following table.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enum</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Text-only content.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Empty content.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element-only content.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mixed content model.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The post-compilation value of the content model for the complex type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets the particle that holds the post-compilation value of the <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaComplexType.ContentType"&gt;&lt;/xref&gt;</ph> particle.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`ContentTypeParticle`</ph> is determined after the content models of the most derived types and the base complex type have been resolved according to the rules defined in the W3C XML Schema definition language (XSD) specification.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The particle for the content type.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The post-compilation value of the <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaComplexType.ContentType"&gt;&lt;/xref&gt;</ph> particle.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Gets or sets the information that determines if the <ph id="ph1">`complexType`</ph> element can be used in the instance document.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, an element cannot use this <ph id="ph2">`complexType`</ph> element directly and must use a complex type that is derived from this <ph id="ph3">`complexType`</ph> element.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Gets or sets information that determines if the complex type has a mixed content model (markup within the content).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Indicates if character data can appear between the child elements of this <ph id="ph1">`complexType`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`simpleContent`</ph> element is a child element, the <ph id="ph2">`mixed`</ph> attribute is not allowed (<ph id="ph3">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`complexContent`</ph> element is a child element, the <ph id="ph2">`mixed`</ph> attribute can be overridden by the <ph id="ph3">`mixed`</ph> attribute on the <ph id="ph4">`complexContent`</ph> element.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph>, if character data can appear between child elements of this complex type; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Gets or sets the compositor type as one of the <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaGroupRef"&gt;&lt;/xref&gt;</ph>, <ph id="ph2">&lt;xref href="System.Xml.Schema.XmlSchemaChoice"&gt;&lt;/xref&gt;</ph>, <ph id="ph3">&lt;xref href="System.Xml.Schema.XmlSchemaAll"&gt;&lt;/xref&gt;</ph>, or <ph id="ph4">&lt;xref href="System.Xml.Schema.XmlSchemaSequence"&gt;&lt;/xref&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Particles must be one of the following compositors:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The complex type contains the elements defined in the referenced group.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The complex type contains the elements defined in the specified sequence.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The complex type allows one of the elements specified in the <ph id="ph1">`choice`</ph> element.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The complex type allows all of the elements specified in the <ph id="ph1">`all`</ph> element to appear once or not at all.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is mutually exclusive with the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaComplexType.ContentModel%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The compositor type.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>