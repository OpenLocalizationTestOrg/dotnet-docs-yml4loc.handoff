<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6181ceda33a392f073665bbf6784640a430a2a2a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Channels.ChannelBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">927d4414ac02b3e4e0157c917f5d9b427dff581e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70f11821c15b39a91ef604e4f9e8fa0cf8677caa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the base implementation for custom channels.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase&gt;</ph> class provides an abstract base class implementation of the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IChannel&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also requires that each channel be associated with a channel manager.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the only constructor available for creating instances of <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase&gt;</ph> requires a <ph id="ph2">`channelManager`</ph> input parameter.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>State changes are managed by inheriting from the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CommunicationObject&gt;</ph> implementation of the state machine.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase&gt;</ph> gets its default communication timeouts for the open, close, send and receive operations from the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelManagerBase&gt;</ph> associated with it.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase&gt;</ph> also manages the manager for you.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to exposing a reference to the manager, the base class also notifies the manager when channels are created and destroyed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>But the reference to the manager is only good until the channel is destroyed.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even if you do use the base class, you must still provide behaviors for opening and closing the channel.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementations of these methods do not provide useful information.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must also make sure to override <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase.GetProperty%2A&gt;</ph> whenever you implement a channel.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase.GetProperty%2A&gt;</ph> is an excellent way to communicate information along the channel stack without having to know what channels are below you, or what channels above you may perform queries.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Define interfaces that can be queried for available information.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whenever you do not recognize the type argument for <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase.GetProperty%2A&gt;</ph>, delegate down to the next channel in the stack or return <ph id="ph2">`null`</ph> if you are creating a new transport channel at the bottom of the stack.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.ChannelBase"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the only constructor available for creating instances of <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase&gt;</ph> requires a <ph id="ph2">`channelManager`</ph> input parameter.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.ChannelManagerBase"&gt;&lt;/xref&gt;</ph> that provides default timeouts for the channel operations (send, receive, open, and close).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;channelManager&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Gets the default interval of time provided for a close operation to complete.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Gets the <ph id="ph1">&lt;xref:System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout%2A&gt;</ph> associated with <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelBase.Manager%2A&gt;</ph> for the channel.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>All operations that are potentially lengthy must have a timeout.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods that do not take explicit timeouts, must delegate to those methods with default timeouts or must not do any work that blocks.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already accessed by earlier tries.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the close operation has to complete before timing out.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the default interval of time provided for an open operation to complete.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Gets the <ph id="ph1">&lt;xref:System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout%2A&gt;</ph> associated with <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelBase.Manager%2A&gt;</ph> for the channel.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>All operations that are potentially lengthy must have a timeout.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods that do not take explicit timeouts, must delegate to those methods with default timeouts or must not do any work that blocks.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already accessed by earlier tries.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the open operation has to complete before timing out.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets the default interval of time provided for a receive operation to complete.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Gets the <ph id="ph1">&lt;xref:System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout%2A&gt;</ph> associated with <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelBase.Manager%2A&gt;</ph> for the channel.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>All operations that are potentially lengthy must have a timeout.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods that do not take explicit timeouts, must delegate to those methods with default timeouts or must not do any work that blocks.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already accessed by earlier tries.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the receive operation has to complete before timing out.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets the default interval of time provided for a send operation to complete.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Gets the <ph id="ph1">&lt;xref:System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout%2A&gt;</ph> associated with <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelBase.Manager%2A&gt;</ph> for the channel.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>All operations that are potentially lengthy must have a timeout.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods that do not take explicit timeouts, must delegate to those methods with default timeouts or must not do any work that blocks.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already accessed by earlier tries.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Returns the typed object requested, if present, from the appropriate layer in the channel stack.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this to request a typed object such as an interface for setting properties or getting status from the appropriate layer in the channel stack.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a layer supports returning the requested object, it returns it.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>If not, it delegates the call down to the next layer in the stack.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it gets to the bottom of the stack and no channel layer supported the requested object, then the method returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must also make sure to override <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase.GetProperty%2A&gt;</ph> whenever you implement a channel.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase.GetProperty%2A&gt;</ph> is an excellent way to communicate information along the channel stack without having to know what channels are below you, or what channels above you may perform queries.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Define interfaces that can be queried for available information.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whenever you do not recognize the type argument for <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase.GetProperty%2A&gt;</ph>, delegate down to the next channel in the stack or return <ph id="ph2">`null`</ph> if you are creating a new transport channel at the bottom of the stack.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The typed object for which the method is querying.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The typed object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">T</ph><ept id="p1">&lt;/code&gt;</ept> requested, if it is present, or <ph id="ph2">`null`</ph>, if it is not.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Gets the channel manager that is associated with the current channel.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase&gt;</ph> must have a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelManagerBase&gt;</ph> associated with it.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.ChannelManagerBase"&gt;&lt;/xref&gt;</ph> that is associated with the current channel.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Uses diagnostic tracing during the transition into the closing state.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is reserved for system use and is not expected to be called by the user.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets the interval of time after which the close method, invoked by a communication object, times out.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase.System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout%2A&gt;</ph> calls <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelBase.DefaultCloseTimeout%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Timespan"&gt;&lt;/xref&gt;</ph> that specifies the interval of time to wait for the close method to time out.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets the interval of time after which the open method, invoked by a communication object, times out.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase.System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout%2A&gt;</ph> calls <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelBase.DefaultOpenTimeout%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Timespan"&gt;&lt;/xref&gt;</ph> that specifies the interval of time to wait for the open method to time out.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets the interval of time after which the receive method, invoked by a communication object, times out.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase.System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout%2A&gt;</ph> calls <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelBase.DefaultReceiveTimeout%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Timespan"&gt;&lt;/xref&gt;</ph> that specifies the interval of time to wait for the receive method to time out.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Gets the interval of time after which the send method, invoked by a communication object, times out.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelBase.System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout%2A&gt;</ph> calls <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Timespan"&gt;&lt;/xref&gt;</ph> that specifies the interval of time to wait for the send method to time out.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>