<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">500ebe3a5664aa26a05fd15061fdb604e27e577e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.BitConverter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f449b8ac6f6c9d5c3644096538864dd88bfa9a63</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1ecd650255dd18121b497c52e75179fae7d186a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Converts base data types to an array of bytes, and an array of bytes to base data types.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class helps manipulate value types in their fundamental form, as a series of bytes.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A byte is defined as an 8-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>To byte conversion</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>From byte conversion</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> methods to round-trip data, make sure that the <ph id="ph2">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> overload and the <ph id="ph3">`To`</ph><bpt id="p1">*</bpt>Type<ept id="p1">*</ept> method specify the same type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>As the following example illustrates, restoring an array that represents a signed integer by calling the <ph id="ph1">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> method can result in a value that is different from the original.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the entry <bpt id="p1">[</bpt>Working with Signed Non-Decimal and Bitwise Values<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=186999)</ept> in the BCL Team Blog.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.BitConverter.Class#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/example1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.BitConverter.Class#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/example1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method overloads (as well as the order of bits in the integer returned by the <ph id="ph2">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method and the order of hexadecimal strings returned by the <ph id="ph3">&lt;xref:System.BitConverter.ToString%28System.Byte%5B%5D%29&gt;</ph> method) depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, the order of bytes in the array and returned by the <ph id="ph1">`To`</ph><bpt id="p1">*</bpt>IntegerValue<ept id="p1">*</ept> methods and the <ph id="ph2">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The endianness of an architecture is indicated by the <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian&gt;</ph> property, which returns <ph id="ph2">`true`</ph> on little-endian systems and <ph id="ph3">`false`</ph> on big-endian systems.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>On little-endian systems, lower-order bytes precede higher-order bytes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>On big-endian system, higher-order bytes precede lower-order bytes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table illustrates the difference in the byte arrays that result from passing the integer 1,234,567,890 (0x499602D2) to the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The bytes are listed in order from the byte at index 0 to the byte at index 3.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Little-endian</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>D2-02-96-49</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Big-endian</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>49-96-02-D2</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the return value of some methods depends on system architecture, be careful when transmitting byte data beyond machine boundaries:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If all systems sending and receiving data are guaranteed to have the same endianness, nothing has be done to the data.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>If systems sending and receiving data can have different endianness, always transmit data in a particular order.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the order of bytes in the array may have to be reversed either before sending them or after receiving them.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>A common convention is to transmit data in network byte order (big-endian order).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example provides an implementation for sending an integer value in network byte order.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.BitConverter.Class#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/networkorder1.cs#4)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.BitConverter.Class#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/networkorder1.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If systems sending and receiving data can have different endianness and the data to be transmitted consists of signed integers, call the <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName&gt;</ph> method to convert the data to network byte order and the <ph id="ph2">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=fullName&gt;</ph> method to convert it to the order required by the recipient.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Converts the specified double-precision floating point number to a 64-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bits in the integer returned by the <ph id="ph1">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The number to convert.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A 64-bit signed integer whose value is equivalent to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns the specified Boolean value as a byte array.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can convert a byte array back to a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value by calling the <ph id="ph2">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A Boolean value.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A byte array with length 1.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns the specified Unicode character value as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A character to convert.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An array of bytes with length 2.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns the specified double-precision floating point value as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The number to convert.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An array of bytes with length 8.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns the specified 16-bit signed integer value as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The number to convert.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An array of bytes with length 2.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns the specified 32-bit signed integer value as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The number to convert.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An array of bytes with length 4.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns the specified 64-bit signed integer value as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The number to convert.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An array of bytes with length 8.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns the specified single-precision floating point value as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The number to convert.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An array of bytes with length 4.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns the specified 16-bit unsigned integer value as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The number to convert.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An array of bytes with length 2.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns the specified 32-bit unsigned integer value as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The number to convert.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An array of bytes with length 4.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns the specified 64-bit unsigned integer value as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The number to convert.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An array of bytes with length 8.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Converts the specified 64-bit signed integer to a double-precision floating point number.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, <ph id="ph1">`value`</ph> is an integer that is returned by the <ph id="ph2">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The number to convert.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A double-precision floating point number whose value is equivalent to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Indicates the byte order ("endianness") in which data is stored in this computer architecture.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Different computer architectures store data using different byte orders.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>"Big-endian" means the most significant byte is on the left end of a word.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>"Little-endian" means the most significant byte is on the right end of a word.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can convert from network byte order to the byte order of the host computer without retrieving  the value of the <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian?displayProperty=fullName&gt;</ph> field by passing a 16-bit, 32-bit, or 64 bit integer to the <ph id="ph2">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value converted from the byte at a specified position in a byte array.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>To convert a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value to its byte representation, call the <ph id="ph2">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A byte array.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The index of the byte within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the byte at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">startIndex</ph><ept id="p1">&lt;/code&gt;</ept> in <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">value</ph><ept id="p2">&lt;/code&gt;</ept> is nonzero; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Returns a Unicode character converted from two bytes at a specified position in a byte array.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 1 to a <ph id="ph4">&lt;xref:System.Char&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An array.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The starting position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A character formed by two bytes beginning at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> equals the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToDouble%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 7 to a <ph id="ph4">&lt;xref:System.Double&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The starting position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A double precision floating point number formed by eight bytes beginning at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 7, and is less than or equal to the length of <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToInt16%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 1 to an <ph id="ph4">&lt;xref:System.Int16&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The starting position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A 16-bit signed integer formed by two bytes beginning at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> equals the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 3 to an <ph id="ph4">&lt;xref:System.Int32&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The starting position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer formed by four bytes beginning at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 3, and is less than or equal to the length of <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToInt64%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 7 to a <ph id="ph4">&lt;xref:System.Int64&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The starting position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A 64-bit signed integer formed by eight bytes beginning at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 7, and is less than or equal to the length of <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToSingle%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 3 to a <ph id="ph4">&lt;xref:System.Single&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The starting position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A single-precision floating point number formed by four bytes beginning at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 3, and is less than or equal to the length of <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>All the elements of <ph id="ph1">`value`</ph> are converted.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of hexadecimal strings returned by the <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>; for example, "7F-2C-4A-00".</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements from array position <ph id="ph1">`startIndex`</ph> to the end of the array are converted.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of hexadecimal strings returned by the <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The starting position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>; for example, "7F-2C-4A-00".</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`length`</ph> elements from array position <ph id="ph2">`startIndex`</ph> are converted.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`length`</ph> equals zero, the method returns <ph id="ph2">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of hexadecimal strings returned by the <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The starting position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The number of array elements in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> to convert.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>; for example, "7F-2C-4A-00".</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than zero and is greater than or equal to the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The combination of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">length</ph><ept id="p2">&lt;/code&gt;</ept> does not specify a position within <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">value</ph><ept id="p3">&lt;/code&gt;</ept>; that is, the <bpt id="p4">&lt;code&gt;</bpt><ph id="ph4">startIndex</ph><ept id="p4">&lt;/code&gt;</ept> parameter is greater than the length of <bpt id="p5">&lt;code&gt;</bpt><ph id="ph5">value</ph><ept id="p5">&lt;/code&gt;</ept> minus the <bpt id="p6">&lt;code&gt;</bpt><ph id="ph6">length</ph><ept id="p6">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToUInt16%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 1 to a <ph id="ph4">&lt;xref:System.UInt16&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The array of bytes.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The starting position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>A 16-bit unsigned integer formed by two bytes beginning at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> equals the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 3 to a <ph id="ph4">&lt;xref:System.UInt32&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The starting position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A 32-bit unsigned integer formed by four bytes beginning at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 3, and is less than or equal to the length of <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToUInt64%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 7 to a <ph id="ph4">&lt;xref:System.UInt64&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The starting position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A 64-bit unsigned integer formed by the eight bytes beginning at <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">startIndex</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 7, and is less than or equal to the length of <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>