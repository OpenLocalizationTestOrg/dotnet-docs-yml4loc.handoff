<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf48778416e99b4f1f7edbf3d624ab615834811d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45cd4be1424b535d26352c1ab7a4509abdbe3518</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1bdaee4f934fe1ea96498389348fa696ff46de2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enables the factoring of legacy <ph id="ph1">`if-then-throw`</ph> code into separate methods for reuse, and provides full control over thrown exceptions and arguments.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your code uses explicit <ph id="ph1">`if-then-throw`</ph> code to validate parameters, you may be employing helper methods that perform checks and throw particular exceptions on failure, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this example, <ph id="ph1">`Execute`</ph> has an elective precondition specifying that the parameter value should not be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable the contract tools to recognize that the call to <ph id="ph1">`ValidationHelper.NotNull`</ph> represents a contract, you can mark the called method with the  <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=fullName&gt;</ph> method call should be used to enable the tools to extract the proper specifications for document generation and static checking, as follows.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow2.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow2.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to <ph id="ph1">`if-then-throw`</ph> statements, the contract section of contract validator methods may contain calls to other contract validator methods.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, no other contracts (such as <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=fullName&gt;</ph>, or <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName&gt;</ph>) are allowed.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code that follows the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=fullName&gt;</ph> call is ignored by all contract tools.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows a range argument validator written in terms of an existing <ph id="ph1">`NotNull`</ph> validator method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow3.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow3.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>From a specification point of view, the <ph id="ph1">`Execute`</ph> method has the following three contracts:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>In standard methods, calls to contract validator methods can be freely mixed with other contracts such as <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Diagnostics.Contracts.ContractArgumentValidatorAttribute"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>