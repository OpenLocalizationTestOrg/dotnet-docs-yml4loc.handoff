<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7af773866155b0a5ef8fc247f75025714555df10</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.Remoting.RemotingConfiguration.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d1714f142b27264de6568c4bf95fd9aee61b638</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af7f80cea248438ffe438d660504c0e7fff752d1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides various static methods for configuring the remoting infrastructure.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Gets the ID of the currently executing application.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application ID is prepended to the URI of the objects created by the currently executing application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that contains the ID of the currently executing application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of a remoting application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application name can be set only once, either through the current property or through a configuration file.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application is running inside a hosted environment, such as Internet Information Services (IIS), this value might have already been set (usually to the virtual directory).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current property will return <ph id="ph1">`null`</ph> if the application name has not been set.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The name of a remoting application.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This exception is thrown only when setting the property value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Reads the configuration file and configures the remoting infrastructure.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)"&gt;&lt;/xref&gt;</ph> is obsolete.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Please use <ph id="ph1">&lt;xref href="System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)"&gt;&lt;/xref&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%29&gt;</ph> is obsolete.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Please use <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Passing <ph id="ph1">`null`</ph> as the <ph id="ph2">`filename`</ph> parameter will cause default remoting initialization without requiring the existence of a configuration file.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For configuration file syntax, see <bpt id="p1">[</bpt>Remoting Settings Schema<ept id="p1">](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marshal-by-reference objects (MBRs) do not reside in memory forever.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, unless the type overrides <ph id="ph1">&lt;xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName&gt;</ph> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Lifetime Leases<ept id="p1">](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The name of the remoting configuration file.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Reads the configuration file and configures the remoting infrastructure.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Passing <ph id="ph1">`null`</ph> as the <ph id="ph2">`filename`</ph> parameter will cause default remoting initialization without requiring the existence of a configuration file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about remoting and security see <bpt id="p1">[</bpt>Security in Remoting.<ept id="p1">](http://msdn.microsoft.com/en-us/9574262c-d4b1-41c5-8600-24ff147c0add)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>For configuration file syntax, see <bpt id="p1">[</bpt>Remoting Settings Schema<ept id="p1">](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marshal-by-reference objects (MBRs) do not reside in memory forever.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, unless the type overrides <ph id="ph1">&lt;xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName&gt;</ph> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Lifetime Leases<ept id="p1">](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The name of the remoting configuration file.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If set to <ph id="ph1">`true`</ph> security is required.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If set to <ph id="ph1">`false`</ph>, security is not required but still may be used.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Indicates whether the server channels in this application domain return filtered or complete exception information to local or remote callers.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Complete exception information includes the exact server exception and the server stack trace.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Filtered information includes a standard remoting exception but no server stack trace.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`CustomErrorsEnabled`</ph> method reflects configuration settings that were specified in the <ph id="ph2">`mode`</ph> attribute of the <ph id="ph3">`&lt;customErrors&gt;`</ph> element of the application configuration file.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about configuration options, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconconfiguration&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/92c0c097-d984-4315-835b-7490ecdf1097)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the three server channel property values that specify which callers receive exception information and what type of information they receive.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>All callers receive complete exception information.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>All callers receive filtered exception information.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Local callers receive complete exception information; remote callers receive filtered exception information.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the interaction of the <ph id="ph1">`isLocalRequest`</ph> parameter and the server channel property.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>isLocalRequest</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return value</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Local callers receive filtered exception information.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remote callers receive filtered exception information.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Local callers receive complete exception information.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remote callers receive complete exception information.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Local callers receive complete exception information.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remote callers receive filtered exception information.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about using application configuration files to control the return of exception information to callers, see the <ph id="ph1">`&lt;customErrors&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to specify local callers; <ph id="ph2">`false`</ph> to specify remote callers.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if only filtered exception information is returned to local or remote callers, as specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">isLocalRequest</ph><ept id="p1">&lt;/code&gt;</ept> parameter; <ph id="ph3">`false`</ph> if complete exception information is returned.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets or sets value that indicates how custom errors are handled.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A member of the <ph id="ph1">&lt;xref href="System.Runtime.Remoting.CustomErrorsModes"&gt;&lt;/xref&gt;</ph> enumeration that indicates how custom errors are handled.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Retrieves an array of object types registered on the client as types that will be activated remotely.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of client-activated objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An array of object types registered on the client as types that will be activated remotely.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Retrieves an array of object types registered on the service end that can be activated on request from a client.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of client-activated objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An array of object types registered on the service end that can be activated on request from a client.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Retrieves an array of object types registered on the client end as well-known types.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Well-known object types can be either single call or singleton.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an object type is single call, then a new instance of it is created each time a call from the client comes in.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>All calls to a singleton object are handled by one instance of that object.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a more detailed description of well-known objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An array of object types registered on the client end as well-known types.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Retrieves an array of object types registered on the service end as well-known types.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Well-known object types can be either single call or singleton.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an object type is single call, then a new instance of it is created each time a call from the client comes in.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>All calls to a singleton object are handled by one instance of that object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a more detailed description of well-known objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>An array of object types registered on the service end as well-known types.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value that indicates whether the specified <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is allowed to be client activated.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current method is used at the server end to determine whether an activation of the object <ph id="ph1">&lt;xref:System.Type&gt;</ph> is explicitly allowed by the server.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> to check.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is allowed to be client activated; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Checks whether the object specified by its type name and assembly name is registered as a remotely activated client type.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The type name of the object to check.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The assembly name of the object to check.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ActivatedClientTypeEntry"&gt;&lt;/xref&gt;</ph> that corresponds to the specified object type.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Checks whether the specified object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is registered as a remotely activated client type.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The object type to check.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ActivatedClientTypeEntry"&gt;&lt;/xref&gt;</ph> that corresponds to the specified object type.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Checks whether the specified object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is registered as a well-known client type.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> to check.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Remoting.WellKnownClientTypeEntry"&gt;&lt;/xref&gt;</ph> that corresponds to the specified object type.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Checks whether the object specified by its type name and assembly name is registered as a well-known client type.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The type name of the object to check.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The assembly name of the object to check.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Remoting.WellKnownClientTypeEntry"&gt;&lt;/xref&gt;</ph> that corresponds to the specified object type.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Gets the ID of the currently executing process.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that contains the ID of the currently executing process.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The immediate caller does not have infrastructure permission.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Registers an object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> recorded in the provided <ph id="ph2">&lt;xref href="System.Runtime.Remoting.ActivatedClientTypeEntry"&gt;&lt;/xref&gt;</ph> on the client end as a type that can be activated on the server.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an instance of a client-activated object on the server, you must know its <ph id="ph1">&lt;xref:System.Type&gt;</ph> and it must be registered on the server end by using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <ph id="ph1">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph> and then activate the object by calling <ph id="ph2">`new`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>To activate a client-activated object type with the <ph id="ph1">`new`</ph> keyword, you must first register the object type on the client end using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote application where <ph id="ph2">`new`</ph> attempts to create it.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If, on the other hand, you use the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>To supply the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Activation.UrlAttribute&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of client-activated objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Configuration settings for the client-activated type.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Registers an object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> on the client end as a type that can be activated on the server, using the given parameters to initialize a new instance of the <ph id="ph2">&lt;xref href="System.Runtime.Remoting.ActivatedClientTypeEntry"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an instance of a client-activated object on the server, you must know its <ph id="ph1">&lt;xref:System.Type&gt;</ph> and it must be registered on the server end by using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <ph id="ph1">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph> and then activate the object by calling <ph id="ph2">`new`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>To activate a client-activated object type with the <ph id="ph1">`new`</ph> keyword, you must first register the object type on the client end using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote application where <ph id="ph2">`new`</ph> attempts to create it.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If, on the other hand, you use the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>To supply the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Activation.UrlAttribute&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of client-activated objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>URL of the application where this type is activated.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">URI</ph><ept id="p2">&lt;/code&gt;</ept> parameter is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Registers an object type recorded in the provided <ph id="ph1">&lt;xref href="System.Runtime.Remoting.ActivatedServiceTypeEntry"&gt;&lt;/xref&gt;</ph> on the service end as one that can be activated on request from a client.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an instance of a client-activated object on the server, you must know its <ph id="ph1">&lt;xref:System.Type&gt;</ph> and it must be registered on the server end by using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <ph id="ph1">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph> and then activate the object by calling <ph id="ph2">`new`</ph> or <ph id="ph3">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>To activate a client-activated object type with the <ph id="ph1">`new`</ph> keyword, you must first register the object type on the client end using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote application, where <ph id="ph2">`new`</ph> attempts to create it.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>If, on the other hand, you use the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A&gt;</ph> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>To supply the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A&gt;</ph> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Activation.UrlAttribute&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of client-activated objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Configuration settings for the client-activated type.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Registers a specified object type on the service end as a type that can be activated on request from a client.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an instance of a client-activated object on the server, you must know its <ph id="ph1">&lt;xref:System.Type&gt;</ph> and it must be registered on the server end by using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <ph id="ph1">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph> and then activate the object by calling <ph id="ph2">`new`</ph> or <ph id="ph3">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>To activate a client-activated object type with the <ph id="ph1">`new`</ph> keyword, you must first register the object type on the client end using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote application, where <ph id="ph2">`new`</ph> attempts to create it.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>If, on the other hand, you use the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A&gt;</ph> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>To supply the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%2A&gt;</ph> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Activation.UrlAttribute&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of client-activated objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconClientActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)</ept>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of object to register.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Registers an object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> recorded in the provided <ph id="ph2">&lt;xref href="System.Runtime.Remoting.WellKnownClientTypeEntry"&gt;&lt;/xref&gt;</ph> on the client end as a well-known type that can be activated on the server.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <ph id="ph1">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph>, and activating the object by calling <ph id="ph2">`new`</ph> or <ph id="ph3">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>To activate a well-known object with <ph id="ph1">`new`</ph>, you must first register the well-known object type on the client using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote object, which allows the <ph id="ph2">`new`</ph> keyword to create it.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>If, on the other hand, you use the <ph id="ph1">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of well-known objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Configuration settings for the well-known type.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Registers an object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> on the client end as a well-known type that can be activated on the server, using the given parameters to initialize a new instance of the <ph id="ph2">&lt;xref href="System.Runtime.Remoting.WellKnownClientTypeEntry"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <ph id="ph1">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph>, and activating the object by calling <ph id="ph2">`new`</ph> or <ph id="ph3">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>To activate a well-known object with <ph id="ph1">`new`</ph>, you must first register the well-known object type on the client using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote object, which allows the <ph id="ph2">`new`</ph> keyword to create it.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>If, on the other hand, you use the <ph id="ph1">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of well-known objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>URL of a well-known client object.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Registers an object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> recorded in the provided <ph id="ph2">&lt;xref href="System.Runtime.Remoting.WellKnownServiceTypeEntry"&gt;&lt;/xref&gt;</ph> on the service end as a well-known type.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <ph id="ph1">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph>, and activating the object by calling <ph id="ph2">`new`</ph> or the <ph id="ph3">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>To activate a well-known object with <ph id="ph1">`new`</ph>, you must first register the well-known object type on the client using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote object, which allows the <ph id="ph2">`new`</ph> keyword to create it.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>If, on the other hand, you use the <ph id="ph1">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object is registered as <ph id="ph1">&lt;xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall&gt;</ph>, it is destroyed after the method call is completed.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>A new instance of the object is created for each method called.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>The only difference between <ph id="ph1">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">`new`</ph> is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The remote object itself is not instantiated by the registration process.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>This only happens when a client attempts to call a method on the object or activates the object from the client side.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of well-known objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Configuration settings for the well-known type.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Registers an object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> on the service end as a well-known type, using the given parameters to initialize a new instance of <ph id="ph2">&lt;xref href="System.Runtime.Remoting.WellKnownServiceTypeEntry"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <ph id="ph1">&lt;xref:System.Runtime.Remoting.Channels.ChannelServices&gt;</ph>, and activating the object by calling <ph id="ph2">`new`</ph> or the <ph id="ph3">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>To activate a well-known object with <ph id="ph1">`new`</ph>, you must first register the well-known object type on the client using the <ph id="ph2">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A&gt;</ph> method gives the remoting infrastructure the location of the remote object, which allows the <ph id="ph2">`new`</ph> keyword to create it.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>If, on the other hand, you use the <ph id="ph1">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object is registered as <ph id="ph1">&lt;xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall&gt;</ph>, it is destroyed after the method call is completed.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>A new instance of the object is created for each method called.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The only difference between <ph id="ph1">&lt;xref:System.Activator.GetObject%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">`new`</ph> is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>The remote object itself is not instantiated by the registration process.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>This only happens when a client attempts to call a method on the object or activates the object from the client side.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of well-known objects, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconServerActivation&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The object <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The object URI.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The activation mode of the well-known object type being registered.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>(See <ph id="ph1">&lt;xref href="System.Runtime.Remoting.WellKnownObjectMode"&gt;&lt;/xref&gt;</ph>.)</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>