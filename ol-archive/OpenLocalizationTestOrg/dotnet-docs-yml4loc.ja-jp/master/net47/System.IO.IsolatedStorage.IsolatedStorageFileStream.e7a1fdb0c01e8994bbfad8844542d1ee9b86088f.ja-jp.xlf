<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eacdc6126dcba5ad288c78358a0c683092db7c7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.IO.IsolatedStorage.IsolatedStorageFileStream.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fdeaa5be7ac8adfcf0a7076d018c3d1214ce6443</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe6b2ccd111ee75ca022f8b523dd20e02b99d321</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exposes a file within isolated storage.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this class to read, write and create files in isolated storage.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since this class extends <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>, you can use an instance of <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> in most situations where a <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> might otherwise be used, such as to construct a <ph id="ph4">&lt;xref:System.IO.StreamReader&gt;</ph> or <ph id="ph5">&lt;xref:System.IO.StreamWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Isolated storage is not available for <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, use the application data classes in the <ph id="ph1">`Windows.Storage`</ph> namespaces included in the <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> API to store local data and files.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Application data<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=229175)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of an <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object giving access to the file designated by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p1">&lt;/code&gt;</ept> in the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">mode</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The isolated store that is used is scoped by the current executing assembly's identity and that of the application domain in which it is running.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This store will remain open only for the lifetime of the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a different isolated storage scope, or to allow the store to remain open (so multiple <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> objects can be opened from it), use the form of the constructor that accepts an <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`mode`</ph> parameter indicates whether a new file should be created, an existing one used, and so on.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and can cause an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The relative path of the file within isolated storage.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.IO.FileMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is badly formed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The directory in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> does not exist.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>No file was found and the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is set to <ph id="ph2">&lt;xref href="System.IO.FileMode.Open"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> class giving access to the file designated by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p1">&lt;/code&gt;</ept>, in the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">mode</ph><ept id="p2">&lt;/code&gt;</ept>, with the kind of <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">access</ph><ept id="p3">&lt;/code&gt;</ept> requested.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The isolated store that is used is scoped by the current executing assembly's identity and that of the application domain in which it is running.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This store will remain open only for the lifetime of the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a different isolated storage scope, or to allow the store to remain open (so multiple <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> objects can be opened from it), use the form of the constructor that accepts an <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`mode`</ph> parameter indicates whether a new file should be created or an existing one used.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`access`</ph> parameter includes read-only, read/write, and write-only.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The relative path of the file within isolated storage.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.IO.FileMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.IO.FileAccess"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is badly formed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>No file was found and the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is set to <ph id="ph2">&lt;xref href="System.IO.FileMode.Open"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> class giving access to the file designated by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p1">&lt;/code&gt;</ept>, in the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">mode</ph><ept id="p2">&lt;/code&gt;</ept>, and in the context of the <ph id="ph4">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFile"&gt;&lt;/xref&gt;</ph> specified by <bpt id="p3">&lt;code&gt;</bpt><ph id="ph5">isf</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`mode`</ph> parameter indicates whether a new file should be created, an existing one used, and so on.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The relative path of the file within isolated storage.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.IO.FileMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFile"&gt;&lt;/xref&gt;</ph> in which to open the <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is badly formed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>No file was found and the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is set to <ph id="ph2">&lt;xref href="System.IO.FileMode.Open"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;isf&lt;/code&gt;</ph> does not have a quota.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> class giving access to the file designated by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p1">&lt;/code&gt;</ept>, in the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">mode</ph><ept id="p2">&lt;/code&gt;</ept>, with the specified file <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">access</ph><ept id="p3">&lt;/code&gt;</ept>, using the file sharing mode specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">share</ph><ept id="p4">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The isolated store that is used is scoped by the current executing assembly's identity and that of the application domain in which it is running.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>This store will remain open only for the lifetime of the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a different isolated storage scope, or to allow the store to remain open (so multiple <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> objects can be opened from it), use the form of the constructor that accepts an <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and can cause an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The relative path of the file within isolated storage.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.IO.FileMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.IO.FileAccess"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.IO.FileShare"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is badly formed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>No file was found and the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is set to <ph id="ph2">&lt;xref href="System.IO.FileMode.Open"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> class giving access to the file designated by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p1">&lt;/code&gt;</ept> in the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">mode</ph><ept id="p2">&lt;/code&gt;</ept>, with the specified file <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">access</ph><ept id="p3">&lt;/code&gt;</ept>, and in the context of the <ph id="ph5">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFile"&gt;&lt;/xref&gt;</ph> specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph6">isf</ph><ept id="p4">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`mode`</ph> parameter indicates whether a new file should be created or an existing one used.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`access`</ph> parameter includes read-only, read/write, and write-only.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The relative path of the file within isolated storage.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.IO.FileMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.IO.FileAccess"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFile"&gt;&lt;/xref&gt;</ph> in which to open the <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is badly formed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The isolated store is closed.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>No file was found and the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is set to <ph id="ph2">&lt;xref href="System.IO.FileMode.Open"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;isf&lt;/code&gt;</ph> does not have a quota.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> class giving access to the file designated by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p1">&lt;/code&gt;</ept>, in the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">mode</ph><ept id="p2">&lt;/code&gt;</ept>, with the specified file <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">access</ph><ept id="p3">&lt;/code&gt;</ept>, using the file sharing mode specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">share</ph><ept id="p4">&lt;/code&gt;</ept>, with the <bpt id="p5">&lt;code&gt;</bpt><ph id="ph6">buffersize</ph><ept id="p5">&lt;/code&gt;</ept> specified.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The isolated store that is used is scoped by the current executing assembly's identity and that of the application domain in which it is running.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>This store will remain open only for the lifetime of the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a different isolated storage scope, or to allow the store to remain open (so multiple <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> objects can be opened from it), use the form of the constructor that accepts an <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`mode`</ph> parameter indicates whether a new file should be created or an existing one used.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`access`</ph> parameter includes read-only, read/write, and write-only.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The relative path of the file within isolated storage.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.IO.FileMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.IO.FileAccess"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.IO.FileShare"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.FileStream"&gt;&lt;/xref&gt;</ph> buffer size.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is badly formed.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>No file was found and the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is set to <ph id="ph2">&lt;xref href="System.IO.FileMode.Open"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> class giving access to the file designated by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p1">&lt;/code&gt;</ept>, in the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">mode</ph><ept id="p2">&lt;/code&gt;</ept>, with the specified file <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">access</ph><ept id="p3">&lt;/code&gt;</ept>, using the file sharing mode specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">share</ph><ept id="p4">&lt;/code&gt;</ept>, and in the context of the <ph id="ph6">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFile"&gt;&lt;/xref&gt;</ph> specified by <bpt id="p5">&lt;code&gt;</bpt><ph id="ph7">isf</ph><ept id="p5">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`mode`</ph> parameter indicates whether a new file should be created or an existing one used.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`access`</ph> parameter includes read-only, read/write, and write-only.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The relative path of the file within isolated storage.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.IO.FileMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.IO.FileAccess"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.IO.FileShare"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFile"&gt;&lt;/xref&gt;</ph> in which to open the <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is badly formed.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>No file was found and the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is set to <ph id="ph2">&lt;xref href="System.IO.FileMode.Open"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;isf&lt;/code&gt;</ph> does not have a quota.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> class giving access to the file designated by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p1">&lt;/code&gt;</ept>, in the specified <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">mode</ph><ept id="p2">&lt;/code&gt;</ept>, with the specified file <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">access</ph><ept id="p3">&lt;/code&gt;</ept>, using the file sharing mode specified by <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">share</ph><ept id="p4">&lt;/code&gt;</ept>, with the <bpt id="p5">&lt;code&gt;</bpt><ph id="ph6">buffersize</ph><ept id="p5">&lt;/code&gt;</ept> specified, and in the context of the <ph id="ph7">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFile"&gt;&lt;/xref&gt;</ph> specified by <bpt id="p6">&lt;code&gt;</bpt><ph id="ph8">isf</ph><ept id="p6">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`mode`</ph> parameter indicates whether a new file should be created or an existing one used.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`access`</ph> parameter includes read-only, read/write, and write-only.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The relative path of the file within isolated storage.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.IO.FileMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.IO.FileAccess"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.IO.FileShare"&gt;&lt;/xref&gt;</ph> values</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.FileStream"&gt;&lt;/xref&gt;</ph> buffer size.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFile"&gt;&lt;/xref&gt;</ph> in which to open the <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is badly formed.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>No file was found and the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> is set to <ph id="ph2">&lt;xref href="System.IO.FileMode.Open"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;isf&lt;/code&gt;</ph> does not have a quota.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous read.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> with this <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to find out how many bytes were read.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The buffer to read data into.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The byte offset in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> at which to begin reading.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The method to call when the asynchronous read operation is completed.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This parameter is optional.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The status of the asynchronous read.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> object that represents the asynchronous read, which is possibly still pending.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> must be passed to this stream's <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)"&gt;&lt;/xref&gt;</ph> method to determine how many bytes were read.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This can be done either by the same code that called <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> or in a callback passed to <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>An asynchronous read was attempted past the end of the file.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous write.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object is writable, writing at the end of the stream expands the stream.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> with the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> object that this method returns to find out how many bytes were written.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The buffer to write data to.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The byte offset in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> at which to begin writing.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The method to call when the asynchronous write operation is completed.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This parameter is optional.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The status of the asynchronous write.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that represents the asynchronous write, which is possibly still pending.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> must be passed to this stream's <ph id="ph2">&lt;xref href="System.IO.Stream.EndWrite(System.IAsyncResult)"&gt;&lt;/xref&gt;</ph> method to ensure that the write is complete, then frees resources appropriately.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This can be done either by the same code that called <ph id="ph1">&lt;xref href="System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> or in a callback passed to <ph id="ph2">&lt;xref href="System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>An asynchronous write was attempted past the end of the file.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value indicating whether the file can be read.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to determine whether the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object can be read.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if an <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object can be read; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value indicating whether seek operations are supported.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to determine whether the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object supports seek operations.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if an <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object supports seek operations; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value indicating whether you can write to the file.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to determine whether the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object can be written.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if an <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object can be written; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to true.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to false.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> references.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Ends a pending asynchronous read request.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead%2A&gt;</ph> must be called exactly once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> object from <ph id="ph3">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead%2A&gt;</ph>, and calling <ph id="ph4">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead%2A&gt;</ph> is the only way to know how many bytes were read from the <ph id="ph5">&lt;xref:System.IO.Stream&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead%2A&gt;</ph> will block until the I/O operation has completed.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The pending asynchronous request.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The number of bytes read from the stream, between zero and the number of requested bytes.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Streams will only return zero at the end of the stream.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Otherwise, they will block until at least one byte is available.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">asyncResult</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Ends an asynchronous write.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite%2A&gt;</ph> must be called exactly once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite%2A&gt;</ph> will block until the I/O operation has completed.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The pending asynchronous I/O request to end.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">asyncResult</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Clears buffers for this stream and causes any buffered data to be written to the file.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because a buffer can be used for either reading or writing, but not both simultaneously, <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush%2A&gt;</ph> performs two functions.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>First, any data previously written to the buffer is copied to the file and the buffer is cleared.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Second, if <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek%2A&gt;</ph> is <ph id="ph2">`true`</ph> and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The buffer is then cleared.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush%28System.Boolean%29&gt;</ph> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to flush all intermediate file buffers; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Gets the file handle for the file that the current <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object encapsulates.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Accessing this property is not permitted on an <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object, and throws an <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.IO.FileStream.Handle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The file handle for the file that the current <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object encapsulates.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle"&gt;&lt;/xref&gt;</ph> property always generates this exception.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Gets a Boolean value indicating whether the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object was opened asynchronously or synchronously.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Asynchronous <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> objects cannot be created, unlike <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead%2A&gt;</ph> methods are supported on synchronous instances, with some performance penalties.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object supports asynchronous access; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Gets the length of the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length%2A&gt;</ph> represents the number of bytes currently in the file.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is not affected by isolated storage quota.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The length of the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object in bytes.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Prevents other processes from reading from or writing to the stream.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>Locking a range of a file stream gives the threads of the locking process exclusive access to that range of the file stream.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The starting position of the range to lock.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The value of this parameter must be equal to or greater than 0 (zero).</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The number of bytes to lock.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;position&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;length&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The file is closed.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The process cannot access the file because another process has locked a portion of the file.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Gets or sets the current position of the current <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property works when the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The current position of this <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The position cannot be set to a negative number.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Copies bytes from the current buffered <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object to an array.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`buffer`</ph> parameter can be an instance of the <ph id="ph2">&lt;xref:System.Buffer&gt;</ph> class, or an array of one of the following types: <ph id="ph3">&lt;xref:System.Byte&gt;</ph>, <ph id="ph4">&lt;xref:System.SByte&gt;</ph>, <ph id="ph5">&lt;xref:System.Char&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.Int32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph10">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph12">&lt;xref:System.Single&gt;</ph>, or <ph id="ph13">&lt;xref:System.Double&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the byte in buffer at which to begin writing (index in the buffer), and the <ph id="ph2">`count`</ph> parameter gives the maximum number of bytes that will be read from this stream.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the read operation is successful, the current position of the stream is advanced by the number of bytes read.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception occurs, the current position of the stream is unchanged.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read%2A&gt;</ph> method treats the <ph id="ph2">`buffer`</ph> parameter as a block of bytes, regardless of its actual type.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, the <ph id="ph1">`offset`</ph> and <ph id="ph2">`count`</ph> parameters are always specified in bytes.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">`buffer`</ph> parameters other than byte arrays, this means that an element index must be multiplied by the element size in bytes to form a correct value for <ph id="ph2">`offset`</ph> or <ph id="ph3">`count`</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read%2A&gt;</ph> method will return zero only if the end of the stream is reached.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>In all other cases, <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read%2A&gt;</ph> always reads at least one byte from the stream before returning.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no data is available from the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object upon a call to <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read%2A&gt;</ph>, the method will block until at least one byte of data can be returned.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The buffer to read.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The offset in the buffer at which to begin writing.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The total number of bytes read into the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream is reached.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Reads a single byte from the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object in isolated storage.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The 8-bit unsigned integer value read from the isolated storage file.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="Microsoft.Win32.SafeHandles.SafeFileHandle"&gt;&lt;/xref&gt;</ph> object that represents the operating system file handle for the file that the current <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object encapsulates.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle%2A&gt;</ph> property is not supported and always generates an <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="Microsoft.Win32.SafeHandles.SafeFileHandle"&gt;&lt;/xref&gt;</ph> object that represents the operating system file handle for the file that the current <ph id="ph2">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object encapsulates.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle"&gt;&lt;/xref&gt;</ph> property always generates this exception.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Sets the current position of this <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object to the specified value.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> objects support positioning beyond the length of the stream, others will throw an exception in this case.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The new position of the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.IO.SeekOrigin"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The new position in the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">origin</ph><ept id="p1">&lt;/code&gt;</ept> must be one of the <ph id="ph2">&lt;xref href="System.IO.SeekOrigin"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Sets the length of this <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object to the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified <ph id="ph1">`value`</ph> is less than the current length of the <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object, the stream is truncated.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified <ph id="ph1">`value`</ph> is larger than the current length of the stream, the stream is expanded.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the stream is expanded, the contents of the stream between the old and the new length are undefined.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order to use this method, an <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object must support both writing and seeking.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The new length of the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is a negative number.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Allows other processes to access all or part of a file that was previously locked.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The starting position of the range to unlock.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The value of this parameter must be equal to or greater than 0 (zero).</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The number of bytes to unlock.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;position&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;length&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Writes a block of bytes to the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object using data read from a byte array.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the byte in the <ph id="ph2">`buffer`</ph> at which to begin reading, and the <ph id="ph3">`count`</ph> parameter gives the number of bytes that will be written to this <ph id="ph4">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the write operation is successful, the current position of the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object is advanced by the number of bytes written.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception occurs, the current position of the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> object is unchanged.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The buffer to write.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The byte offset in buffer from which to begin.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The write attempt exceeds the quota for the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Writes a single byte to the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The byte value to write to the isolated storage file.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The write attempt exceeds the quota for the <ph id="ph1">&lt;xref href="System.IO.IsolatedStorage.IsolatedStorageFileStream"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>