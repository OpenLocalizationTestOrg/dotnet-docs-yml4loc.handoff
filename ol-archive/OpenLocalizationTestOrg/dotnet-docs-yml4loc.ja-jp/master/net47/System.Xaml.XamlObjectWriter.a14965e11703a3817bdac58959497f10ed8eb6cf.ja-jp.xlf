<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">751de6c090674b6fe00dfcf0859a3fc601c20c83</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xaml.XamlObjectWriter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">602926ec1cda42c487a7b2874085389560a8cd35</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f9ef4e65f2d783b0d26086204d406b47899f2c5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creates an object graph from a source XAML node stream.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Write`</ph> methods of <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> implement a pattern so that the <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> uses the <ph id="ph4">&lt;xref:System.Xaml.XamlWriter&gt;</ph> that is defined by the <ph id="ph5">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> logic switches between the <ph id="ph2">`Write`</ph> methods, depending on which node type is at the current position in the reader.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> has a concept of scope; that is, the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> maintains a conceptual point of reference in its output object graph.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a particular scope, certain operations might be valid or invalid, or produce a no-operation result.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you call <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> to write directives for initialization on an object that already exists as an instance, the default implementation throws an exception.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>A possible technique for tracking scope in a custom <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> is to align the node actions with a stack or frame class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The stack or frame can keep track of push and pop for each level of object-model depth that is entered or exited while the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> writes the object graph.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Callbacks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To support intermediate and advanced <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> scenarios, the mechanism of writing an object graph provides callback entry points that occur when a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> commits or is about to commit certain actions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some callbacks are enabled in the settings and are not specific to the object type or the member being written; however, callback information is often available in context or is in the event data that is sent through the callback.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following is a list of relevant callbacks:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A&gt;</ph> is invoked when the scope goes to a new object and at the <ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.BeginInit%2A&gt;</ph> phase of object lifetime for each created object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A&gt;</ph> is invoked when the scope goes to a new object and at the <ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.EndInit%2A&gt;</ph> phase of object lifetime for each created object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A&gt;</ph> is invoked when the scope starts in an object, and occurs when the first <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> call to that object scope is made but not yet committed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A&gt;</ph> is invoked when the scope starts in an object, and happens when the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> call to that object scope is made but not yet committed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph> is invoked when <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.OnSetValue%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writing Dictionary Keys</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> supports type conversion on the constraints of a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> before the dictionary contents are added to the object graph.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this manner, a generic dictionary can be keyed at run time by objects and can match the relevant generic <ph id="ph1">`Add`</ph> and indexer behavior.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, as implemented for the base <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, this capability exists only for object graph creation from the base <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class and not for derived classes of <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Checks for Disposed</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML writers are potentially used for deferred operations or where a call is made against a XAML writer instance that has been disposed in the interim.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Various APIs of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> might throw <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> in these cases.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph> class using  the XAML schema context that is used by a <ph id="ph2">&lt;xref href="System.Xaml.XamlReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A XAML schema context that is shared with the XAML reader that provides nodes for writing.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;schemaContext&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph> class using the context that is used by a <ph id="ph2">&lt;xref href="System.Xaml.XamlReader"&gt;&lt;/xref&gt;</ph> and its settings.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A XAML schema context that is shared with the XAML reader that provides nodes for writing.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A settings object that specifies certain options for <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph> behavior and output.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;schemaContext&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Resets all possible frames and clears the object graph.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph>, and optionally, releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release the managed resources; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Invokes any <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler"&gt;&lt;/xref&gt;</ph> method that is associated with <ph id="ph2">&lt;xref href="System.Xaml.XamlObjectWriterSettings"&gt;&lt;/xref&gt;</ph> for this <ph id="ph3">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The object to report on.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The object is packaged into <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectEventArgs"&gt;&lt;/xref&gt;</ph> when the handler is invoked.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Invokes any <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler"&gt;&lt;/xref&gt;</ph> method that is associated with <ph id="ph2">&lt;xref href="System.Xaml.XamlObjectWriterSettings"&gt;&lt;/xref&gt;</ph> for this <ph id="ph3">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The object to report on.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The value  is packaged into <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectEventArgs"&gt;&lt;/xref&gt;</ph> when the handler is invoked.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Invokes any <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler"&gt;&lt;/xref&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;xref href="System.Xaml.XamlObjectWriterSettings"&gt;&lt;/xref&gt;</ph> for this <ph id="ph3">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The object to report on.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This is packaged into <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectEventArgs"&gt;&lt;/xref&gt;</ph> when the handler is invoked.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Invokes any <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler"&gt;&lt;/xref&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;xref href="System.Xaml.XamlObjectWriterSettings"&gt;&lt;/xref&gt;</ph> for this <ph id="ph3">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The value to pass through <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectEventArgs"&gt;&lt;/xref&gt;</ph> when the handler is invoked.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Invokes any <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler"&gt;&lt;/xref&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;xref href="System.Xaml.XamlObjectWriterSettings"&gt;&lt;/xref&gt;</ph> for this writer, as long as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">handled</ph><ept id="p1">&lt;/code&gt;</ept> in <ph id="ph4">&lt;xref href="System.Windows.Markup.XamlSetValueEventArgs"&gt;&lt;/xref&gt;</ph> event data is not <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`SetValue`</ph> operation for this XAML writer has an associated handler (a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph> is declared in <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;</ph>), this method creates new <ph id="ph4">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs&gt;</ph> and passes them to the handler.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is set by reading the <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A&gt;</ph> value that is passed through the event data.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no handler exists and this method is invoked, the call returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The object to report as the source to the handler.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The name of the property to set, which is passed to the handler as part of <ph id="ph1">&lt;xref href="System.Windows.Markup.XamlSetValueEventArgs"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The value to provide for the property that is named by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">property</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The value is passed to the handler as part of <ph id="ph1">&lt;xref href="System.Windows.Markup.XamlSetValueEventArgs"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A Boolean value that is set by any associated handler; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Gets the last object that was written.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Typically only called when the node stream is at its end and the object graph is complete.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most typical usage of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> is to call it only when the node stream is known to be at its end, and the object graph is complete.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the object graph is likely to be incomplete, and is not useful for most platform scenarios.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> typically only contains a non-null value if it is called immediately after a call to <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>, and if the current scope is in the member where the object provides a value.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The last object written, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Markup.INameScope"&gt;&lt;/xref&gt;</ph> service that maintains the XAML namescope for the absolute node root of the XAML object writer.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property may come from the object writer context.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Markup.INameScope"&gt;&lt;/xref&gt;</ph> service that maintains the XAML namescope for the current root of the object writer.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets the active XAML schema context.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML schema context is a necessary information source for most practical object-writing scenarios.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XAML schema context influences the type lookup for backing types and holds information about the assemblies where backing types exist.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default XAML schema context is based on CLR type-mapping rules.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Frameworks typically provide their own XAML schema context in order to assure that that the assembly-loading mechanisms match the framework's programming amd application models.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The XAML schema context.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">&lt;xref href="System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> and provides line information for exceptions.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This service method is not intended to be called directly from your code.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you are creating a derived class from <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> and expect to report a context where line numbers are unavailable or not useful, this method may be called.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The line number from the reader.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The line position from the reader.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Gets a value that reports whether a line information service should provide values and therefore, should also call the <ph id="ph1">&lt;xref href="System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> method when it is relevant.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation always returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if line information is used by the writer; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Closes the current member scope, and may write the value of the member scope while it closes.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The new scope becomes the parent object scope of the member.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Failed to create member value from a value node that is encountered between this call and a previous <ph id="ph1">`StartMember`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Closes the current object scope in the writer.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The new object scope becomes the parent member scope.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this <ph id="ph1">`EndObject`</ph> position scope is closing the root object, the new object scope becomes the root scope.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call to <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> might not yet have created the object because an object member might be a necessary initialization pathway, such as initialization text or initialization parameters.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>For these cases, the call to <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> actually writes the object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Writes the conceptual <ph id="ph1">`StartObject`</ph> into the object graph when the specified object is a default or implicit value of the parent property.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The implicit value comes from information that is obtained from the XAML schema context and backing type information, instead of being specified as an object value in the input XAML node set.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between writing with <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> and writing with <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> can be seen in the resulting object graph.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> does not construct an instance of a type because the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> API has no information to inform the object graph of what to construct.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the object was created when the parent property was initialized; so a <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> does not need to construct it.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> specifies that an instance of that type should be constructed and inserted into the object graph.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you think of the XAML node stream as a series of frames, a <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> is balanced to a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the number of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> plus <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> calls should equal the number of <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> calls as part of a complete object-writing evaluation of the XAML node stream.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The conceptual <ph id="ph1">`StartObject`</ph> position for an implicit object in the object graph is necessary because although the object value itself is an implicit default, that object might still have members that need to be written based on the XAML node stream.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>A typical scenario where this occurs is when <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> writes member nodes for a collection property, and the collection initialization is implicit to creating the object that owns the collection property.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Defines a namespace declaration that applies to the next object scope or member scope.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>A namespace declaration can be written if the current scope is a root scope, object scope, or member scope.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> can only be called immediately before a call to one of the following: <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The consecutive <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> case is for writing multiple namespace declarations to the same node.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Eventually, either <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> must be called.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> does not use a <ph id="ph2">`Start`</ph><ph id="ph3">/</ph><ph id="ph4">`End`</ph> metaphor.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although a XAML namespace has members in the CLR representation sense, the members are known and do not need to be represented as a special type of <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> for extensibility.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>To access the values of a <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>, you access its <ph id="ph2">&lt;xref:System.Xaml.NamespaceDeclaration.Namespace%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xaml.NamespaceDeclaration.Prefix%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>A namespace declaration may have a <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph> value for the prefix.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph> prefix represents a declaration of the default XAML namespace.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not attempt to use null to represent the default prefix;  it throws an exception in this API.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The namespace declaration to write.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">namespaceDeclaration</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A component of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">namespaceDeclaration</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Tried to write a XAML namespace node in an invalid scope.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Writes a new member node into the current object scope, and the scope becomes a new member scope.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Watch for a <ph id="ph1">&lt;xref:System.Xaml.XamlDuplicateMemberException&gt;</ph>, which occurs when the same XAML property is set twice in the XAML input.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>In simple cases, such as when the same property is set in both attribute syntax and property element syntax, you can easily see this exception in the input markup.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, more subtle cases can occur that are more difficult to spot.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, this exception might occur if you set a XAML content property, if you involve XAML ambient properties, and if a property enables both an attachable usage and an instance usage.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the debugging phases of development, you can often locate this exception by viewing the intermediate XAML node representation that connects the markup read and the object graph write.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The XAML property to write.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Typically you obtain this value from a XAML reader through the XAML node stream intermediate.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;property&lt;/code&gt;</ph> has <ph id="ph2">&lt;xref href="System.Xaml.XamlMember.IsUnknown"&gt;&lt;/xref&gt;</ph> set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Xaml.XamlLanguage.UnknownContent"&gt;&lt;/xref&gt;</ph> passed, which indicates that the XAML node stream contained content for an object that does not support content.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Attempted to write a start member in an invalid scope.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;property&lt;/code&gt;</ph> specifies a property that is already explicitly set in the parent object scope.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;property&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Writes an object node into the current scope, and sets the scope to a new object scope.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The type to write.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Typically you obtain this value from a XAML reader.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Processing an <ph id="ph1">&lt;xref href="System.Xaml.XamlType.IsUnknown"&gt;&lt;/xref&gt;</ph> type and cannot create an object.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Attempted to write a start object in an invalid scope.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Attempted to write a root object when the root object was already provided in the settings.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xamlType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Writes a value to the current member scope.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Attempted to write a value in an invalid scope.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>