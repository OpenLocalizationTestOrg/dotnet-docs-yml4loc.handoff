<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57b1a9391f985db3fdf63ac1d7cb2941f91ccc9b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.InteropServices.ComTypes.CALLCONV.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c783035fdc5d57deb56ec9587ab95d991db9922b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ee4536a76a9720b9b1907603e73e77c5ef78626</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Identifies the calling convention used by a method described in a <bpt id="p1">[</bpt>METHODDATA<ept id="p1">](https://msdn.microsoft.com/library/85fd7121-3eed-4a83-9ba2-caa81fa1e048)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The calling conventions in this class describe how functions pass arguments and return values.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>They specify the order in which parameters are set up for the called functions, where the parameters are stored (in registers or in memory), and who (caller or called function) is responsible for cleaning up the stack after the function returns.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>CC_CDECL uses the naming and calling conventions of the C language.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller pushes the parameters onto the stack in reverse (right-to-left) order, and cleans the stack after the function returns.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This calling convention enables you to call functions with <ph id="ph1">`varargs`</ph>, which makes it appropriate for use with methods that accept a variable number of parameters, such as the C run-time functions <bpt id="p1">[</bpt>printf, _printf_l, wprintf, _wprintf_l<ept id="p1">](https://docs.microsoft.com/cpp/c-runtime-library/reference/printf-printf-l-wprintf-wprintf-l)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>CC_PASCAL uses the Pascal calling convention.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller pushes the parameters onto the stack in left-to-right order.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The called function cleans the stack before returning.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>CC_STDCALL is the standard calling convention for Win32 functions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is the default convention for calling unmanaged functions with platform invoke.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller pushes the parameters onto the stack in reverse (right to left) order, and the called function cleans the stack before returning.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>CC_SYSCALL is similar to CDECL in that arguments are pushed from right to left.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The EAX, ECX, and EDX registers are not preserved.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>These calling convention identifiers are used by the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, the <ph id="ph2">[!INCLUDE[wince](~/includes/wince-md.md)]</ph> platform, and by Automation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information about <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL&gt;</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime throws an exception when a COM method in native code returns an HRESULT.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Map HRESULTs and Exceptions<ept id="p1">](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Indicates that the C declaration (CDECL) calling convention is used for a method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Indicates the end of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.CALLCONV"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Indicates that the Pascal calling convention is used for a method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This value is reserved for future use.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Indicates that the standard calling convention (STDCALL) is used for a method.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Indicates that the standard SYSCALL calling convention is used for a method.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>