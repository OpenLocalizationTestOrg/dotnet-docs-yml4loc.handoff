<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f39e0890ceca21c90336c4a72f0515e495cf8262</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.AddIn.Contract.Automation.IRemoteObjectContract.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">abee6c22850d3e153a53b0844a7bd45b31eb32a7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2342ede121fbb7c673ed30ef878e7b7d1940529</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines a contract that components can use to access an object across application domain and process boundaries.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you implement <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract&gt;</ph> on a type, components can use the contract to access type information for objects of the type.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Components access type information by calling the <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A&gt;</ph> method to obtain an <ph id="ph2">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract&gt;</ph> interface defines a contract that components can use to access specific type and member information, and to invoke members.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">&lt;xref href="System.AddIn.Contract.Automation.IRemoteTypeContract"&gt;&lt;/xref&gt;</ph> that specifies the type of the current <ph id="ph2">&lt;xref href="System.AddIn.Contract.Automation.IRemoteObjectContract"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A&gt;</ph> method to access the members of the remote object that the current <ph id="ph2">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract&gt;</ph> identifies.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.AddIn.Contract.Automation.IRemoteTypeContract"&gt;&lt;/xref&gt;</ph> that specifies the type of the current <ph id="ph2">&lt;xref href="System.AddIn.Contract.Automation.IRemoteObjectContract"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Casts the object identified by the current <ph id="ph1">&lt;xref href="System.AddIn.Contract.Automation.IRemoteObjectContract"&gt;&lt;/xref&gt;</ph> to a specified type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>A canonical name is a globally unique name, such as a GUID.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strings in the format <ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>assembly name<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph><bpt id="p2">*</bpt>fully qualified type name<ept id="p2">*</ept>&gt; are recommended.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example of the recommended format of a canonical name is "ShapeApp, Microsoft.VisualStudio.Tools.Applications.Samples.ShapeApp.Application".</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The canonical name for a type cannot change after a type is published in a component.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the canonical name of a type in a future version of a component breaks compatibility between the component and clients that are already using the type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended that <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast%2A&gt;</ph> implementations throw an <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph> if the cast operation fails.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The canonical name of the type to cast the object to.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.AddIn.Contract.RemoteArgument"&gt;&lt;/xref&gt;</ph> that represents the result of the cast operation.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>