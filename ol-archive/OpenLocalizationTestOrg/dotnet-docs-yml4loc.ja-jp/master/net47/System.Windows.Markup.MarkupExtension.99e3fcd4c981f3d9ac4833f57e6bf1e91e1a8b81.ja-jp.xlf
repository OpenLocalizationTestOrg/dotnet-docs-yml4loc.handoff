<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a620c5a91f398d1f21de685187121924b69d9f7d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Markup.MarkupExtension.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">381190effde5d87b7b7be081c503206f17c05d78</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3dc3b33f3338668d50a858a83cf38cadf277c355</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for XAML markup extension implementations that can be supported by .NET Framework XAML Services and other XAML readers and XAML writers.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Markup extensions return objects to callers, based on the input of string attribute values or markup elements in XAML.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Markup extensions return objects in a more sophisticated way than type converters alone can accomplish.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>A XAML object writer invokes a type converter because a type or member has a type converter implementation associated with it.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>From the CLR frame of reference, this means that a type or member is <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> attributed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>From the XAML type system perspective, this means that a XAML type or a XAML member has a value for its <ph id="ph1">`TypeConverter`</ph> property.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The invocation of a type converter is tied to the type or property definition, and is always invoked by XAML processing for these cases.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, a markup extension is more under the control of user code and user-produced markup, and can be applied whenever an application scenario demands it.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>A markup extension can be invoked and can be used for setting different type-member values, so long as the markup extension's return type is assignable to that value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information on creating a custom markup extension, see <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on markup extensions in general, see <bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are building on WPF and using or creating markup extensions for XAML, other relevant information can be found in the topic <bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> method of each markup extension implementation can use an <ph id="ph2">&lt;xref:System.IServiceProvider&gt;</ph> at run time that can provide context.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This  <ph id="ph1">&lt;xref:System.IServiceProvider&gt;</ph> is then queried for specific services that pass information, such as <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on service contexts for a markup extension, see <bpt id="p1">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id="p1">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived classes should be attributed with <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph> to inform consumers of the most specific return type available from the markup extension's <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of a class derived from <ph id="ph1">&lt;xref href="System.Windows.Markup.MarkupExtension"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph> abstract class does not hold any private values that require initialization.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a XAML processor processes a type node and member value that is a markup extension, it invokes the <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> method of that markup extension and writes the result into the object graph or serialization stream.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XAML object writer passes service context to each such implementation through the <ph id="ph1">`serviceProvider`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>See "Notes to Implementers" section for more information on how to implement <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> in a custom markup extension.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>WPF classes that have specific interactions with markup set operations should not rely on <ph id="ph1">&lt;xref:System.Windows.Markup.IReceiveMarkupExtension&gt;</ph> for a <ph id="ph2">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>-attributed callbacks instead.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A service provider helper that can provide services for the markup extension.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The object value to set on the property where the extension is applied.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>