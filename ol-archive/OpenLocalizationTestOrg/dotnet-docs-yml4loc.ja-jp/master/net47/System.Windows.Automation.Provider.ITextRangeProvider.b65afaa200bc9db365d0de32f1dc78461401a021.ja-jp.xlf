<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">def5aa475e7d5a8d9448ecc68cb2169c73eaa8a7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Automation.Provider.ITextRangeProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92724604e902317ce1fc0dfda4f202beb82a29ac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33a05fb78ab5b938083f5861c509b5dc88caa4fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exposes methods and properties to support UI Automation client access to a span of continuous text in a text container that implements <ph id="ph1">&lt;xref href="System.Windows.Automation.Provider.ITextProvider"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implemented on a UI Automation provider that must support the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> control pattern.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> can represent an insertion point, a subset, or all of the text in a <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> container.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text insertion point moves to the area of the new selection.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Providing a degenerate text range moves the insertion point.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If text provider does not support multiple, disjoint selections (that is, <ph id="ph1">&lt;xref href="System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection"&gt;&lt;/xref&gt;</ph> must have a value of <ph id="ph2">`Multiple`</ph>).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Returns a new <ph id="ph1">&lt;xref href="System.Windows.Automation.Provider.ITextRangeProvider"&gt;&lt;/xref&gt;</ph> identical to the original <ph id="ph2">&lt;xref href="System.Windows.Automation.Provider.ITextRangeProvider"&gt;&lt;/xref&gt;</ph> and inheriting all properties of the original.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The new range can be manipulated independently from the original.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The new text range.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]</ph>) is never returned.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the span (the <ph id="ph1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint.Start"&gt;&lt;/xref&gt;</ph> endpoint to the <ph id="ph2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint.End"&gt;&lt;/xref&gt;</ph> endpoint) of a text range is the same as another text range.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A text range to compare</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the span of both text ranges is identical; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the range being compared does not come from the same text provider.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Returns a value that specifies whether two text ranges have identical endpoints.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint.Start"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint.End"&gt;&lt;/xref&gt;</ph> endpoint of the caller.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The target range for comparison.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint.Start"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint.End"&gt;&lt;/xref&gt;</ph> endpoint of the target.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns zero if the caller's endpoint is at the same location as the target endpoint.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">targetRange</ph><ept id="p1">&lt;/code&gt;</ept> is from a different text provider.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Expands the text range to the specified text unit.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the range is already an exact quantity of the specified units then it remains unchanged.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> method to execute successfully.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range is moved forward or backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> by the requested number of <ph id="ph2">`unit`</ph> boundaries.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move &amp; ExpandToEnclosingUnit")</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A&gt;</ph> respects both hidden and visible text.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order, from smallest unit to largest, is listed below.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The textual unit.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns a text range subset that has the specified attribute value.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no differentiation between hidden and visible text.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The attribute to search for.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The attribute value to search for.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This value must match the type specified for the attribute.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the last occurring text range should be returned instead of the first; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A text range having a matching attribute and attribute value; otherwise null (<ph id="ph1">`Nothing`</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]</ph>).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns a text range subset that contains the specified text.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no differentiation between hidden and visible text.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The text string to search for.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the last occurring text range should be returned instead of the first; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if case should be ignored; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A text range matching the specified text; otherwise null (<ph id="ph1">`Nothing`</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]</ph>).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the specified attribute across the text range.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no differentiation between hidden and visible text.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The text attribute.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Retrieves an object representing the value of the specified attribute.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">GetAttributeValue(TextPattern.FontNameAttribute)</ph><ept id="p1">&lt;/code&gt;</ept> would return a string that represents the font name of the text range while <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">GetAttributeValue(TextPattern.IsItalicAttribute)</ph><ept id="p2">&lt;/code&gt;</ept> would return a value of type <ph id="ph3">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Windows.Automation.TextPattern.MixedAttributeValue"&gt;&lt;/xref&gt;</ph> if the value of the specified attribute varies over the text range.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Windows.Automation.AutomationElement.NotSupported"&gt;&lt;/xref&gt;</ph> if the specified attribute is not supported by the provider or the control.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If the specified attribute is not valid.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An array of bounding rectangles for each full or partial line of text in a text range.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An empty array for a degenerate range.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Retrieves a collection of all embedded objects that fall within the text range.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A collection of child objects that fall within the range.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns an empty collection if there are no child objects.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns the innermost control that encloses the text range.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The enclosing control, typically the text provider that supplies the text range.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Retrieves the plain text of the range.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A&gt;</ph> respects both hidden and visible text.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`maxLength`</ph> is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A&gt;</ph> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The maximum length of the string to return.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">-1</ph><ept id="p1">&lt;/code&gt;</ept> if no limit is required.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The plain text of the text range, possibly truncated at the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">maxLength</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">maxLength</ph><ept id="p1">&lt;/code&gt;</ept> is less than -1.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Moves the text range the specified number of text units.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> method to execute successfully.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range is moved forward or backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> by the requested number of <ph id="ph2">`unit`</ph> boundaries.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move &amp; ExpandToEnclosingUnit")</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Text ranges spanned by embedded objects.<ept id="p1">](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example of a text stream with embedded objects and their range spans</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> respects both hidden and visible text.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order, from smallest unit to largest, is listed below.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text is not altered in any way, the text range just spans a different part of the text.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The text unit boundary.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The number of text units to move.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The number of units actually moved.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This can be less than the number requested if either of the new text range endpoints is greater than or less than the <ph id="ph1">&lt;xref href="System.Windows.Automation.Provider.ITextProvider.DocumentRange"&gt;&lt;/xref&gt;</ph> endpoints.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Moves one endpoint of a text range to the specified endpoint of a second text range.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> is always less than or equal to <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The endpoint to move.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Another range from the same text provider.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An endpoint on the other range.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Moves one endpoint of the text range the specified number of text units within the document range.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> method to execute successfully.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt>http://www.microsoft.com<ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move &amp; ExpandToEnclosingUnit")</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order, from smallest unit to largest, is listed below.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The endpoint to move.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The textual unit for moving.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The number of units to move.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A positive value moves the endpoint forward.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A negative value moves backward.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A value of 0 has no effect.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Removes a highlighted section of text, corresponding to the caller's <ph id="ph1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint.Start"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint.End"&gt;&lt;/xref&gt;</ph> endpoints, from the collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>The text insertion point will move to the area of the removed highlight.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Providing a degenerate text range will move the insertion point.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If text provider does not support multiple, disjoint selections (for example, <ph id="ph1">&lt;xref href="System.Windows.Automation.TextPattern.SupportedTextSelection"&gt;&lt;/xref&gt;</ph> must have a value of <ph id="ph2">`Multiple`</ph>).</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Causes the text control to scroll vertically until the text range is visible in the viewport.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView%2A&gt;</ph> respects both hidden and visible text.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the text control should be scrolled so the text range is flush with the top of the viewport; <ph id="ph2">`false`</ph> if it should be flush with the bottom of the viewport.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Highlights text in the text control corresponding to the text range <ph id="ph1">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint.Start"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Windows.Automation.Text.TextPatternRangeEndpoint.End"&gt;&lt;/xref&gt;</ph> endpoints.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a degenerate text range is provided, the text insertion point will move to the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint of the text range.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Occurs when text selection is not supported by the text control.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>