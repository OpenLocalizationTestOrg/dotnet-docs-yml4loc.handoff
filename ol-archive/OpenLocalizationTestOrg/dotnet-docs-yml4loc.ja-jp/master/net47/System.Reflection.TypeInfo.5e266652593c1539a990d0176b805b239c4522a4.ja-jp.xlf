<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cf2b11fa770f41d52f9627ced050b5bd7c89c9d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Reflection.TypeInfo.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">174798a5c7d761e0cb9cf3bc3643b523cab1c97e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb26834ce5f40b1ef5ed62ae93830099f6a288a5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents type declarations for class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Reflection.TypeInfo&gt;</ph> class is included in the <ph id="ph3">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> subset for use in creating Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> is available in the full .NET Framework as well.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about reflection for Windows Store apps, see <bpt id="p1">[</bpt>System.Reflection namespaces<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/hh441595\(v=vs.110\).aspx)</ept> in the Windows Dev Center and <bpt id="p2">[</bpt>Reflection in the .NET Framework for Windows Store Apps<ept id="p2">](~/docs/framework/reflection-and-codedom/reflection-for-windows-store-apps.md)</ept> in the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> contains many of the members available in the <ph id="ph2">&lt;xref:System.Type&gt;</ph> class, and many of the reflection properties in the <ph id="ph3">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> return collections of <ph id="ph4">&lt;xref:System.Reflection.TypeInfo&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get a <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> object from a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object, use the <ph id="ph3">&lt;xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%28System.Type%29?displayProperty=fullName&gt;</ph> extension method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> object represents the type definition itself, whereas a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object represents a reference to the type definition.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Getting a <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> object forces the assembly that contains that type to load.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>In comparison, you can manipulate <ph id="ph1">&lt;xref:System.Type&gt;</ph> objects without necessarily requiring the runtime to load the assembly they reference.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph>, you use the reflection properties of <ph id="ph2">&lt;xref:System.Reflection.TypeInfo&gt;</ph> that return <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collections instead of methods that return arrays.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, use the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredMembers%2A&gt;</ph> property to get all declared members, or the <ph id="ph2">&lt;xref:System.Reflection.TypeInfo.DeclaredProperties%2A&gt;</ph> property to get all declared properties.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reflection contexts can implement lazy traversal of these collections for large assemblies or types.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get specific members, use methods such as <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.GetDeclaredMethod%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.TypeInfo.GetDeclaredProperty%2A&gt;</ph>, and pass the name of the method or property you would like to retrieve.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>To filter the results of <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> properties, use LINQ queries.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns the current type as a <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The current type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets a collection of the constructors declared by the current type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredConstructors%2A&gt;</ph> property, use LINQ queries.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A collection of the constructors declared by the current type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets a collection of the events defined by the current type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredEvents%2A&gt;</ph> property, use LINQ queries.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A collection of the events defined by the current type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets a collection of the fields defined by the current type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredFields%2A&gt;</ph> property, use LINQ queries.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A collection of the fields defined by the current type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets a collection of the members defined by the current type.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredMembers%2A&gt;</ph> property, use LINQ queries.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A collection of the members defined by the current type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets a collection of the methods defined by the current type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredMethods%2A&gt;</ph> property, use LINQ queries.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A collection of the methods defined by the current type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets a collection of the nested types defined by the current type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredNestedTypes%2A&gt;</ph> property, use LINQ queries.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A collection of nested types defined by the current type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets a collection of the properties defined by the current type.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A collection of the properties defined by the current type.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets an array of the generic type parameters of the current instance.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An array that contains the current instance's generic type parameters, or an array of <ph id="ph1">&lt;xref href="System.Array.Length"&gt;&lt;/xref&gt;</ph> zero if the current instance has no generic type parameters.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns an object that represents the specified public event declared by the current type.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The name of the event.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An object that represents the specified event, if found; otherwise, <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns an object that represents the specified public field declared by the current type.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The name of the field.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An object that represents the specified field, if found; otherwise, <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns an object that represents the specified public method declared by the current type.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The name of the method.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An object that represents the specified method, if found; otherwise, <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns a collection that contains all public methods declared on the current type that match the specified name.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The method name to search for.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A collection that contains methods that match <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns an object that represents the specified public nested type declared by the current type.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The name of the nested type.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An object that represents the specified nested type, if found; otherwise, <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns an object that represents the specified public property declared by the current type.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The name of the property.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An object that represents the specified property, if found; otherwise, <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Gets a collection of the interfaces implemented by the current type.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A collection of the interfaces implemented by the current type.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the specified type can be assigned to the current type.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The type to check.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified type can be assigned to this type; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Returns a representation of the current type as a <ph id="ph1">&lt;xref href="System.Reflection.TypeInfo"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Reflection.IReflectableType&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A reference to the current type.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>