<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15697a6c3fb0694cfd5bf098a901e65f1d0b8aa0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.AppDomainSetup.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9043779f1420d14f3171391d3822bd0dcb4e163</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">243489ab6c8f3a646163470c67e56d1a75caf344</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents assembly binding information that can be added to an instance of <ph id="ph1">&lt;xref href="System.AppDomain"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the properties of an <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> instance does not affect any existing <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can affect only the creation of a new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, when the <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> method is called with the <ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph> instance as a parameter.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class implements the <ph id="ph1">&lt;xref:System.IAppDomainSetup&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value for the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is false.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This setting is unsafe for services.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>To help prevent services from downloading partially trusted code, set this property to true</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.AppDomainSetup"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.AppDomainSetup"&gt;&lt;/xref&gt;</ph> class with the specified activation context to use for manifest-based activation of an application domain.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> object specified for <ph id="ph2">`activationContext`</ph> is used to generate an <ph id="ph3">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object containing information required to activate a new application domain.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object can be accessed by using the <ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The activation context to be used for an application domain.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;activationContext&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.AppDomainSetup"&gt;&lt;/xref&gt;</ph> class with the specified activation arguments required for manifest-based activation of an application domain.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The object specified for <ph id="ph1">`activationArguments`</ph> can be accessed by using the <ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An object that specifies information required for the manifest-based activation of a new application domain.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;activationArguments&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Gets or sets data about the activation of an application domain.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>No exception is thrown if this property is set to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information provided by the <ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object supports manifest-based activation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An object that contains data about the activation of an application domain.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The property is set to an <ph id="ph1">&lt;xref href="System.Runtime.Hosting.ActivationArguments"&gt;&lt;/xref&gt;</ph> object whose application identity does not match the application identity of the <ph id="ph2">&lt;xref href="System.Security.Policy.ApplicationTrust"&gt;&lt;/xref&gt;</ph> object returned by the <ph id="ph3">&lt;xref href="System.AppDomainSetup.ApplicationTrust"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>No exception is thrown if the <ph id="ph1">&lt;xref href="System.AppDomainSetup.ApplicationTrust"&gt;&lt;/xref&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.AppDomainInitializer"&gt;&lt;/xref&gt;</ph> delegate, which represents a callback method that is invoked when the application domain is initialized.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>To pass information to the callback method, assign an array of strings to the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array is passed to the callback method each time an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> is initialized.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The callback method is executed in the context of the newly created application domain.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A delegate that represents a callback method that is invoked when the application domain is initialized.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets or sets the arguments passed to the callback method represented by the <ph id="ph1">&lt;xref href="System.AppDomainInitializer"&gt;&lt;/xref&gt;</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The callback method is invoked when the application domain is initialized.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property to specify a callback method that is invoked during <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> initialization.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property is not set, the array assigned to this property is not used.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The callback method is executed in the context of the newly created application domain.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An array of strings that is passed to the callback method represented by the <ph id="ph1">&lt;xref href="System.AppDomainInitializer"&gt;&lt;/xref&gt;</ph> delegate, when the callback method is invoked during <ph id="ph2">&lt;xref href="System.AppDomain"&gt;&lt;/xref&gt;</ph> initialization.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets or sets the display name of the assembly that provides the type of the application domain manager for application domains created using this <ph id="ph1">&lt;xref href="System.AppDomainSetup"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify the type of the application domain manager, set both this property and the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If either of these properties is not set, the other is ignored.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=fullName&gt;</ph> method is called).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application domain is loaded, <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown if the assembly does not exist, or if the assembly does not contain the type specified by the <ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> is thrown if the assembly is found but the version information does not match.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the application domain manager for the default application domain, use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>appDomainManagerAssembly&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>appDomainManagerType&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> elements in the <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>runtime&gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the application configuration file, or use the environment variables described in <ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>This feature requires the application to have full trust.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For example, an application running on the desktop has full trust.) If the application does not have full trust, a <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The format of the assembly display name is given by the <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The display name of the assembly that provides the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the application domain manager.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets or sets the full name of the type that provides the application domain manager for application domains created using this <ph id="ph1">&lt;xref href="System.AppDomainSetup"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify the type of the application domain manager, set both this property and the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If either of these properties is not set, the other is ignored.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=fullName&gt;</ph> method is called).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application domain is loaded, <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown if the assembly specified by the <ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph> property does not contain the type specified by this property.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the application domain manager for the default application domain, use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>appDomainManagerAssembly&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>appDomainManagerType&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> elements in the <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>runtime&gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the application configuration file, or use the environment variables described in <ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>This feature requires the application to have full trust.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For example, an application running on the desktop has full trust.) If the application does not have full trust, a <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The format of the full name of a type is given by the <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The full name of the type, including the namespace.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the directory containing the application.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application base directory is where the assembly manager begins probing for assemblies.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property can influence which permissions are granted to an application domain.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an application domain originating from the local computer normally receives full trust based on its location of origin.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property of that <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> is set to the full name of an intranet directory, the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> setting restricts the permissions granted to the application domain to a LocalIntranet grant even though the application domain actually originates from the local computer.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The name of the application base directory.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the application.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The name of the application.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Gets or sets an object containing security and trust information.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is <ph id="ph1">`null`</ph> when the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> is created.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once changed, it cannot be reset to a null reference.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An object that contains security and trust information.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The property is set to an <ph id="ph1">&lt;xref href="System.Security.Policy.ApplicationTrust"&gt;&lt;/xref&gt;</ph> object whose application identity does not match the application identity of the <ph id="ph2">&lt;xref href="System.Runtime.Hosting.ActivationArguments"&gt;&lt;/xref&gt;</ph> object returned by the <ph id="ph3">&lt;xref href="System.AppDomainSetup.ActivationArguments"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>No exception is thrown if the <ph id="ph1">&lt;xref href="System.AppDomainSetup.ActivationArguments"&gt;&lt;/xref&gt;</ph> property is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The property is set to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of an area specific to the application where files are shadow copied.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for this property to have an effect, the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property must also be set.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property is not set, the <ph id="ph2">&lt;xref:System.AppDomainSetup.CachePath%2A&gt;</ph> property is ignored and the shadow copy cache location defaults to the download cache.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the directory path and file name where files are shadow copied.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the configuration file for an application domain.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The configuration file describes the search rules and configuration data for the application domain.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host that creates the application domain is responsible for supplying this data because the meaningful values vary from situation to situation.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the configuration data for ASP.NET applications is stored for each application, site, and computer, while the configuration data for an executable is stored for each application, user, and computer.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the host knows the specifics of the configuration data for a particular circumstance.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The name of the configuration file.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Specifies whether the application base path and private binary path are probed when searching for assemblies to load.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the value of the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property is ignored.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, no assemblies are probed for in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, the values of the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A&gt;</ph> property are ignored.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>No assemblies are probed for in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property provides an additional layer of control over the loading process.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the normal assembly loading sequence, the application base is probed before the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=fullName&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, some applications might need to load assemblies from an OLE compound file within a document, or from a unique known location that is neither in the global assembly cache nor in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such applications can use the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property to avoid the delay caused by normal probing, and to avoid loading copies of the necessary assembly that might be located in the normal probing paths.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if probing is not allowed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether an application domain allows assembly binding redirection.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowBindingRedirects%2A&gt;</ph> property is designed to be used by services and server applications where assembly binding redirection is not part of the application scenario.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if redirection of assemblies is not allowed; <ph id="ph2">`false`</ph> if it is allowed.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether HTTP download of assemblies is allowed for an application domain.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is designed to be used by services and server applications where downloading code from an intranet or the Internet is not part of the application scenario.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value for the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>This setting is unsafe for services.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>To help prevent services from downloading partially trusted code, set this property to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if HTTP download of assemblies is not allowed; <ph id="ph2">`false`</ph> if it is allowed.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the <bpt id="p1">[</bpt><ph id="ph1">&lt;publisherPolicy&gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/publisherpolicy-element.md)</ept> section of the configuration file is applied to an application domain.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowPublisherPolicy%2A&gt;</ph> property specifically applies to a Web application that is loaded locally.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to help prevent a malicious attempt to execute an unsafe Web application in safe mode.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about bypassing publisher policy, see the <bpt id="p1">[</bpt>Redirecting Assembly Versions<ept id="p1">](~/docs/framework/configure-apps/redirect-assembly-versions.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about safe mode, see the "Examining the Configuration Files" section of the <bpt id="p1">[</bpt>How the Runtime Locates Assemblies<ept id="p1">](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">`&lt;publisherPolicy&gt;`</ph> section of the configuration file for an application domain is ignored; <ph id="ph3">`false`</ph> if the declared publisher policy is honored.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Gets or sets the base directory where the directory for dynamically generated files is located.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to set the base directory where the dynamic directory for the new application domain will be located.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>When code in the new application domain loads an assembly, assembly resolution looks first in the normal probing paths.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it does not find the assembly, it looks in the dynamic directory, which is returned by the <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dynamic assemblies that will be loaded and executed by the new application domain can be placed there.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you assign a path to the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property, an additional subdirectory is added; the name of this subdirectory is the hash code of the value assigned to the <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, the base directory subsequently returned by this property is always different from the value assigned.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assigning a value to this property does not create any directories.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The directories must be created or verified by the code that uses them.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dynamic directory is a subdirectory of <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its simple name is the value returned by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property, so its format is <bpt id="p1">*</bpt>original path<ept id="p1">*</ept><ph id="ph2">\\</ph><bpt id="p2">*</bpt>hash code<ept id="p2">*</ept><ph id="ph3">\\</ph><bpt id="p3">*</bpt>application name<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The directory where the <ph id="ph1">&lt;xref href="System.AppDomain.DynamicDirectory"&gt;&lt;/xref&gt;</ph> is located.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The return value of this property is different from the value assigned.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This property cannot be set because the application name on the application domain is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Returns the XML configuration information set by the <ph id="ph1">&lt;xref href="System.AppDomainSetup.SetConfigurationBytes(System.Byte[])"&gt;&lt;/xref&gt;</ph> method, which overrides the application's XML configuration information.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method provides a way to override the configuration information of an application that creates a new application domain.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The configuration file information in <ph id="ph1">`value`</ph> overrides the configuration file information for the application.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when the Example.exe application creates a new application domain, it can override the configuration information originally obtained from Example.exe.config file.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some consumers of configuration file information do not use the information stored by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime does not enforce this.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that all configuration file information is overridden in a new application domain, use the <ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph> property to specify a configuration file.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method does affect assembly binding.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML in <ph id="ph1">`value`</ph> is the same as the XML in a normal configuration file, except that it is stored as a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> array.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>To access the configuration bytes for an application domain, use the <ph id="ph1">&lt;xref:System.AppDomain.SetupInformation%2A?displayProperty=fullName&gt;</ph> property to get the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object for the application domain, then use the <ph id="ph3">&lt;xref:System.AppDomainSetup.GetConfigurationBytes%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>An array that contains the XML configuration information that was set by the <ph id="ph1">&lt;xref href="System.AppDomainSetup.SetConfigurationBytes(System.Byte[])"&gt;&lt;/xref&gt;</ph> method, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref href="System.AppDomainSetup.SetConfigurationBytes(System.Byte[])"&gt;&lt;/xref&gt;</ph> method has not been called.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Gets or sets the location of the license file associated with this domain.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The location and name of the license file.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Specifies the optimization policy used to load an executable.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>An enumerated constant that is used with the <ph id="ph1">&lt;xref href="System.LoaderOptimizationAttribute"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Gets or sets a list of assemblies marked with the <ph id="ph1">&lt;xref href="System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault"&gt;&lt;/xref&gt;</ph> flag that are made visible to partial-trust code running in a sandboxed application domain.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> (APTCA) attribute can be made conditional by setting its <ph id="ph3">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A&gt;</ph> property to <ph id="ph4">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>An APTCA assembly that is marked with <ph id="ph1">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph> cannot be used by partially trusted code unless the host application allows it.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host of a sandboxed application domain allows code in the application domain to use assemblies with conditional APTCA attributes by creating an array that contains the simple name and public key of each assembly, and assigning the array to this property.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, an element of the array might look like the following: "MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9".</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are using a subclass of <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>, and the assembly that defines it depends on assemblies that are marked with the conditional APTCA attribute, you must include those assemblies in the list that you pass to the <ph id="ph2">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph> you use to create application domains.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise the assemblies that are marked with the conditional APTCA attribute will be disabled.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are debugging an application that is running in a sandboxed application domain, some <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> messages can be misleading.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a message might state that one of your fully trusted assemblies has only limited permissions, when the real cause of the problem is that a security demand that exceeds the grant set of the sandboxed application domain has propagated to the boundary of the sandboxed application domain and failed.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>An array of partial assembly names, where each partial name consists of the simple assembly name and the public key.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Gets or sets the list of directories under the application base directory that are probed for private assemblies.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Private assemblies are deployed in the same directory structure as the application.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the directories specified for <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> are not under <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>, they are ignored.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A list of directory names separated by semicolons.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Gets or sets a string value that includes or excludes <ph id="ph1">&lt;xref href="System.AppDomainSetup.ApplicationBase"&gt;&lt;/xref&gt;</ph> from the search path for the application, and searches only <ph id="ph2">&lt;xref href="System.AppDomainSetup.PrivateBinPath"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set this property to any non-null string value, including <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> (""), to exclude the application directory path — that is, <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> — from the search path for the application, and to search for assemblies only in <ph id="ph3">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic) to include the application base path when searching for assemblies; any non-null string value to exclude the path.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether interface caching is disabled for interop calls in the application domain, so that a <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">QueryInterface</ph><ept id="p1">&lt;/code&gt;</ept> is performed on each call.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Disabling interface caching has a significant impact on the performance of interop calls.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if interface caching is disabled for interop calls in application domains created with the current <ph id="ph2">&lt;xref href="System.AppDomainSetup"&gt;&lt;/xref&gt;</ph> object; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Sets the specified switches, making the application domain compatible with previous versions of the .NET Framework for the specified issues.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>Major versions of the .NET Framework sometimes introduce breaking changes from the previous version.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> introduces a small number of breaking changes from the <ph id="ph2">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetCompatibilitySwitches%2A&gt;</ph> method to specify that one or more of these breaking changes should be rolled back for the application domain, to make the behavior compatible with the previous version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time you call this method, it replaces the existing switch settings.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>To erase the settings, specify <ph id="ph1">`null`</ph> for the <ph id="ph2">`switches`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>The set of string values you provide for <ph id="ph1">`switches`</ph> can be a simple string array, because arrays implement the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Switch</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>"NetFx40_LegacySecurityPolicy"</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security (CAS) for the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> is enabled in this application domain.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;NetFx40_LegacySecurityPolicy<ph id="ph2">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>"NetFx40_Legacy20SortingBehavior"</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>String sorting defaults for the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> are enabled in this application domain.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>Successfully restoring legacy sorting behavior also requires the sort00001000.dll dynamic link library to be available on the local system.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;CompatSortNLSVersion<ph id="ph2">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>"NetFx40_Legacy40SortingBehavior"</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>String sorting defaults for the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> and Unicode 5.0 are enabled in this application domain.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Successfully restoring legacy sorting behavior also requires the sort00060101.dll dynamic link library to be available on the local system.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>"NetFx40_TimeSpanLegacyFormatMode"</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> formatting behavior for the <ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> is enabled in this application domain.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;TimeSpan_LegacyFormatMode<ph id="ph2">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md)</ept> and the "Restoring Legacy TimeSpan Formatting" section of the <ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph> topic.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>"UseRandomizedStringHashAlgorithm"</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;UseRandomizedStringHashAlgorithm<ph id="ph2">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>An enumerable set of string values that specify compatibility switches, or <ph id="ph1">`null`</ph> to erase the existing compatibility switches.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Provides XML configuration information for the application domain, replacing the application's XML configuration information.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method provides a way to replace the configuration information of an application that creates a new application domain.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The configuration file information in <ph id="ph1">`value`</ph> replaces the configuration file information for the application.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when the Example.exe application creates a new application domain, it can replace the configuration information originally obtained from the Example.exe.config file.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some consumers of configuration file information do not use the information stored by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime does not enforce this.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>To ensure that all configuration file information is replaced in a new application domain, use the <ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph> property to specify a configuration file.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method does affect assembly binding.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML in <ph id="ph1">`value`</ph> is the same as the XML in a normal configuration file, except that it is stored as a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> array.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>An array that contains the XML configuration information to be used for the application domain.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Provides the common language runtime with an alternate implementation of a string comparison function.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following string comparison and sorting methods can be overridden by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetNativeFunction%2A&gt;</ph> method:</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about these functions, see <bpt id="p1">[</bpt>National Language Support Functions<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=228134)</ept>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The name of the string comparison function to override.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The function version.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, its value must be 1 or greater.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>A pointer to the function that overrides <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">functionName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;functionName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;functionVersion&lt;/code&gt;</ph> is not 1 or greater.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;functionPointer&lt;/code&gt;</ph> is <ph id="ph2">&lt;xref href="System.IntPtr.Zero"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Gets or sets the names of the directories containing assemblies to be shadow copied.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>When shadow copying is enabled, the default is to shadow copy all assemblies found through probing; that is, in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> property restricts the shadow copy to the assemblies in the directories specified by <ph id="ph2">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you don’t assign a string to the <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> property, or if you set this property to <ph id="ph2">`null`</ph>, all assemblies in the directories specified by the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> properties are shadow copied.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Directory paths must not contain semicolons, because the semicolon is the delimiter character.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no escape character for semicolons.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>When shadow copying is in effect, assembly files are copied to another location before the assemblies are loaded.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>The original assembly file is not locked, so it can be updated.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>A list of directory names separated by semicolons.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Gets or sets a string that indicates whether shadow copying is turned on or off.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The string value "true" to indicate that shadow copying is turned on; or "false" to indicate that shadow copying is turned off.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Gets or sets a string that specifies the target version and profile of the .NET Framework for the application domain, in a format that can be parsed by the <ph id="ph1">&lt;xref href="System.Runtime.Versioning.FrameworkName.#ctor(System.String)"&gt;&lt;/xref&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set this property to tell the currently running version of the .NET Framework that the application domain will be used to load and run assemblies that have been compiled for the target version and profile.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the currently running version of the .NET Framework has optional behaviors that affect the compatibility of code that was compiled with the target version, it can enable or disable those behaviors, as appropriate, to improve compatibility.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be useful when an application supports add-ins compiled with multiple versions of the .NET Framework by running them in separate application domains.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>For client applications, the value of the <ph id="ph1">&lt;xref:System.AppDomainSetup.TargetFrameworkName%2A&gt;</ph> property is inferred from the <ph id="ph2">&lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph> and later, this attribute is added to the assembly automatically based on the setting of the project's <bpt id="p1">**</bpt>Target Framework<ept id="p1">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The target version and profile of the .NET Framework.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>