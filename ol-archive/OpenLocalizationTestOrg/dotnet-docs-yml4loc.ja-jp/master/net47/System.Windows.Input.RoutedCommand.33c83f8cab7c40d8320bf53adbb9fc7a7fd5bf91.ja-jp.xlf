<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17949ad63bb3cda8a53f22d35dabc6ba56f7f879</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Input.RoutedCommand.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3211db66c8227e28436d6bdd7aef060c4f09a0d5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e16c3e76f642702a6505235037963e183fdac2d9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines a command that implements <ph id="ph1">&lt;xref href="System.Windows.Input.ICommand"&gt;&lt;/xref&gt;</ph> and is routed through the element tree.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> methods on a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> do not contain the application logic for the command as is the case with a typical <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>, but rather, these methods raise events that traverse the element tree looking for an object with a <ph id="ph5">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event handlers attached to the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> contain the command logic.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> method raises the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method raises the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">*</bpt>property<ept id="p2">*</ept>="<bpt id="p3">*</bpt>predefinedCommandName<ept id="p3">*</ept>"/&gt;</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\-</ph> or -</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">*</bpt>property<ept id="p2">*</ept>="<bpt id="p3">*</bpt>predefinedClassName<ept id="p3">*</ept>.<bpt id="p4">*</bpt>predefinedCommandName<ept id="p4">*</ept>"/&gt;</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\-</ph> or -</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">*</bpt>property<ept id="p2">*</ept>="{ <bpt id="p3">*</bpt>customClassName<ept id="p3">*</ept>.<bpt id="p4">*</bpt>customCommandName<ept id="p4">*</ept>}"/&gt;</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>predefinedClassName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>One of the predefined command classes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>predefinedCommandName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>One of the predefined commands.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>customClassName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>A custom class which contains the custom command.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom classes generally require an <ph id="ph1">`xlmns`</ph> prefix mapping; see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>customCommandName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>A custom command.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;&lt;/xref&gt;</ph> class with the specified name and owner type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Declared name for serialization.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The type which is registering the command.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;ownerType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;&lt;/xref&gt;</ph> class with the specified name, owner type, and collection of gestures.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Declared name for serialization.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The type that is registering the command.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Default input gestures associated with this command.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>the length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> is zero</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\-</ph> or -</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;ownerType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Determines whether this <ph id="ph1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;&lt;/xref&gt;</ph> can execute in its current state.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The actual logic that determines if a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> can execute on the current command target is not contained in the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> methods, rather <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> raises the <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and the <ph id="ph5">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events which tunnel and bubble through element tree looking for a object with a <ph id="ph6">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for that <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is found, then the <ph id="ph3">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> attached to <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>These handlers supply the programming logic for determining if the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> can execute or not.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> events are raised on the <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is not set on the <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events are raised on the element with keyboard focus.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A user defined data type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The command target.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the command can execute on the current command target; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.Windows.UIElement"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Windows.ContentElement"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Occurs when changes to the command source are detected by the command manager.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These changes often affect whether the command should execute on the current command target.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> listens for the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event, which is raised by the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the command receives the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event, it raises the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecuteChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, the command source will listen for this event and query the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> by way of the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most command sources will disable themselves if the command cannot be executed, as part of their command binding.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example of this is when a <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> grays itself out when the command cannot be executed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some situations, the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> is unaware of a change in conditions that alters the ability of a command to execute.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>In these cases, you can force the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raises the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event by calling the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> method, this will in turn cause the <ph id="ph4">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> to raise the <ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand.CanExecuteChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Executes the <ph id="ph1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;&lt;/xref&gt;</ph> on the current command target.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The actual logic that executes the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is not contained in the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events, which tunnel and bubble through the element tree looking for an object with a <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for that <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is found, then the <ph id="ph3">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> attached to <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>These handlers supply the programming logic that performs the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events are raised on the <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is not set on the <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events are raised on the element with keyboard focus.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>User defined parameter to be passed to the handler.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Element at which to begin looking for command handlers.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is not a <ph id="ph2">&lt;xref href="System.Windows.UIElement"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Windows.ContentElement"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets the collection of <ph id="ph1">&lt;xref href="System.Windows.Input.InputGesture"&gt;&lt;/xref&gt;</ph> objects that are associated with this command.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The input gestures.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Gets the name of the command.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used when referencing a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The name of the command.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets the type that is registered with the command.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The type of the command owner.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For a description of this members, see <ph id="ph1">&lt;xref href="System.Windows.Input.ICommand.CanExecute(System.Object)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Data used by the command.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If the command does not require data to be passed, this object can be set to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this command can be executed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For a description of this members, see <ph id="ph1">&lt;xref href="System.Windows.Input.ICommand.Execute(System.Object)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Data used by the command.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If the command does not require data to be passed, this object can be set to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>