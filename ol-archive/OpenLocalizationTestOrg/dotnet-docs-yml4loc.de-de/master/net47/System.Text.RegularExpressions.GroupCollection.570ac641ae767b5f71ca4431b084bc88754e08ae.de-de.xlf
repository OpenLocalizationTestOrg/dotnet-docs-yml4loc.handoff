<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">519e8ce47a6ed8bfa4ae15befceef0783db4cf9f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Text.RegularExpressions.GroupCollection.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d09834a9f4f899ecab3093e514584df0f38d6a60</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe4b977a425ff2362b1462ef911eff1971ec6345</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Returns the set of captured groups in a single match.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> class is a zero-based collection class that consists of one or more <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> objects that provide information about captured groups in a regular expression match.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The collection is immutable (read-only) and has no public constructor.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object is returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The collection contains one or more <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group?displayProperty=fullName&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the match is successful, the first element in the collection contains the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object that corresponds to the entire match.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each subsequent element represents a captured group, if the regular expression includes capturing groups.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the match is unsuccessful, the collection contains a single <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group?displayProperty=fullName&gt;</ph> object whose <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> property is <ph id="ph3">`false`</ph> and whose <ph id="ph4">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property equals <ph id="ph5">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the "Grouping Constructs and Regular Expression Objects" section in the <bpt id="p1">[</bpt>Grouping Constructs<ept id="p1">](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as <ph id="ph1">`foreach`</ph> in C# and <ph id="ph2">`For Each`</ph>â€¦<ph id="ph3">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>in Visual Basic) instead of retrieving the enumerator that is returned by the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you can access individual numbered captured groups from the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29&gt;</ph> property (the indexer in C#), and you can access individual named captured groups from the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName&gt;</ph> methods, respectively.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both are instance methods and require that you instantiate a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object that represents the regular expression to be matched.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Copies all the elements of the collection to the given array beginning at the given index.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The array the collection is to be copied into.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The position in the destination array where the copying is to begin.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is outside the bounds of <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> plus <ph id="ph2">&lt;xref href="System.Text.RegularExpressions.GroupCollection.Count"&gt;&lt;/xref&gt;</ph> is outside the bounds of <ph id="ph3">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns the number of groups in the collection.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object always has at least one member.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a match is unsuccessful, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object that contains a single member.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The number of groups in the collection.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Provides an enumerator that iterates through the collection.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A&gt;</ph> method to retrieve an enumerator that lets you iterate through the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> objects in the collection, you should use the group iteration construct (such as <ph id="ph3">`foreach`</ph> in C# and <ph id="ph4">`For Each`</ph>â€¦<ph id="ph5">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>in Visual Basic) that is provided by your programming language.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An enumerator that contains all <ph id="ph1">&lt;xref href="System.Text.RegularExpressions.Group"&gt;&lt;/xref&gt;</ph> objects in the <ph id="ph2">&lt;xref href="System.Text.RegularExpressions.GroupCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the collection is read-only.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> in all cases.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether access to the <ph id="ph1">&lt;xref href="System.Text.RegularExpressions.GroupCollection"&gt;&lt;/xref&gt;</ph> is synchronized (thread-safe).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName&gt;</ph> property instead.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> in all cases.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Enables access to a member of the collection by integer index.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29&gt;</ph> property is the index (in C#) or the default property (in Visual Basic) of the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>It allows you to enumerate the members of the collection by using a <ph id="ph1">`foreach`</ph> statement in C# or a <ph id="ph2">`For Each`</ph> statement in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use this property to retrieve individual captured groups by their index number.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also map named capturing groups to their numbers by calling the instance <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can determine the number of items in the collection by retrieving the value of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Count%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Valid values for the <ph id="ph1">`groupnum`</ph> parameter range from 0 to one less than the number of items in the collection.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName&gt;</ph> property always has at least one member.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the regular expression engine cannot find any matches in a particular input string, the single <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object in the collection has its <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName&gt;</ph> property set to <ph id="ph3">`false`</ph> and its <ph id="ph4">`Group.Value`</ph> property set to <ph id="ph5">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`groupnum`</ph> is not the index of a member of the collection, or if <ph id="ph2">`groupnum`</ph> is the index of a capturing group that has not been matched in the input string, the method returns a <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object whose <ph id="ph4">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName&gt;</ph> property is <ph id="ph5">`false`</ph> and whose <ph id="ph6">`Group.Value`</ph> property is <ph id="ph7">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The zero-based index of the collection member to be retrieved.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The member of the collection specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">groupnum</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Enables access to a member of the collection by string index.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`groupName`</ph> can be either the name of a capturing group that is defined by the <ph id="ph2">`(?&lt;`</ph><bpt id="p1">*</bpt>name<ept id="p1">*</ept><ph id="ph3">`&gt;)`</ph> element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about groups in regular expressions, see <bpt id="p1">[</bpt>Grouping Constructs<ept id="p1">](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can retrieve the names of all the captured groups in a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also map the numbers of capturing groups in a regular expression to their names by calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Individual names from the array can then be passed to the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29&gt;</ph> property to retrieve the captured string.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`groupname`</ph> is not the name of a capturing group in the collection, or if <ph id="ph2">`groupname`</ph> is the name of a capturing group that has not been matched in the input string, the method returns a <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object whose <ph id="ph4">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName&gt;</ph> property is <ph id="ph5">`false`</ph> and whose <ph id="ph6">`Group.Value`</ph> property is <ph id="ph7">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The name of a capturing group.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The member of the collection specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">groupname</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;xref href="System.Text.RegularExpressions.GroupCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName&gt;</ph> property instead.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A copy of the <ph id="ph1">&lt;xref href="System.Text.RegularExpressions.Match"&gt;&lt;/xref&gt;</ph> object to synchronize.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>