<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4786a2f19a4eecef6cab40022d5f894df6b0a53b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Buffer.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f34bb6cbaa093f239d031fa65232fe57aadc50b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6395407debdba9c729cb80541b075a65a2c99153</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Manipulates arrays of primitive types.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> only affects arrays of primitive types; this class does not apply to objects.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each primitive type is treated as a series of bytes without regard to any behavior or limitation associated with the primitive type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class provides better performance for manipulating primitive types than similar methods in the <ph id="ph1">&lt;xref:System.Array?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> is applicable to the following primitive types: <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.SByte&gt;</ph>, <ph id="ph5">&lt;xref:System.Byte&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph8">&lt;xref:System.Int32&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph10">&lt;xref:System.Int64&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph12">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph13">&lt;xref:System.UIntPtr&gt;</ph>, <ph id="ph14">&lt;xref:System.Single&gt;</ph>, and <ph id="ph15">&lt;xref:System.Double&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method copies <ph id="ph1">`count`</ph> bytes from <ph id="ph2">`src`</ph>, beginning at <ph id="ph3">`srcOffset`</ph>, to <ph id="ph4">`dst`</ph>, beginning at <ph id="ph5">`dstOffset`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both <ph id="ph1">`srcOffset`</ph> and <ph id="ph2">`dstOffset`</ph> are zero-based; that is, the first byte in each buffer is at position 0, not position 1.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method accesses the bytes in the <ph id="ph2">`src`</ph> parameter array using offsets into memory, not programming constructs such as indexes or upper and lower array bounds.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if in the programming language of your application you declare an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> array with a zero-based lower bound of -50, and then pass the array and an offset of 5 to the <ph id="ph2">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method, the first array element the method will access is the second element of the array, which is at index -49.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Furthermore, which byte of array element -49 is accessed first depends on the endianness of the computer that is executing your application.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>As its name suggests, the <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method copies a block of bytes as a whole, rather than copying one byte at a time.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if <ph id="ph1">`src`</ph> and <ph id="ph2">`dst`</ph> reference the same array, and the range from <ph id="ph3">`srcOffset`</ph><ph id="ph4"> + </ph><ph id="ph5">`count`</ph> -1 overlaps the range from <ph id="ph6">`dstOffset`</ph><ph id="ph7"> + </ph><ph id="ph8">`count`</ph> - 1, the values of the overlapping bytes are not overwritten before they are copied to the destination.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, the values of bytes 0-16 in an array named <ph id="ph1">`arr`</ph> are copied to bytes 12-28.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Despite the overlapping range, the values of the source bytes are successfully copied.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Buffer.BlockCopy#3<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Buffer.BlockCopy#3<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#3)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Buffer.BlockCopy#3<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#3)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, the values of bytes 12-28 in an array named <ph id="ph1">`arr`</ph> are copied to bytes 0-16.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Again, despite the overlapping range, the values of the source bytes are successfully copied.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Buffer.BlockCopy#4<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Buffer.BlockCopy#4<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#4)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Buffer.BlockCopy#4<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#4)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The source buffer.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset into <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">src</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The destination buffer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset into <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dst</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The number of bytes to copy.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;src&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;dst&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;src&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;dst&lt;/code&gt;</ph> is not an array of primitives.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The number of bytes in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">src</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">srcOffset</ph><ept id="p2">&lt;/code&gt;</ept> plus <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The number of bytes in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dst</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">dstOffset</ph><ept id="p2">&lt;/code&gt;</ept> plus <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;srcOffset&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;dstOffset&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes in the specified array.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An array.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The number of bytes in the array.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is not a primitive.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is larger than 2 gigabytes (GB).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Retrieves the byte at a specified location in a specified array.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`GetByte`</ph> method gets a particular byte out of the array.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The array must be an array of primitives.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An array.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A location in the array.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> byte in the array.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is not a primitive.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is negative or greater than the length of <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is larger than 2 gigabytes (GB).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Copies a number of bytes specified as a long integer value from one address in memory to another.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This API is not CLS-compliant.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method copies <ph id="ph1">`sourceBytesToCopy`</ph> bytes from the address specified by <ph id="ph2">`source`</ph> to the address specified by <ph id="ph3">`destination`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the buffers overlap and the difference between <ph id="ph1">`destination`</ph> minus <ph id="ph2">`source`</ph> is less than <ph id="ph3">`sourceBytesToCopy`</ph>, the source block is copied to the destination block in reverse order.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The address of the bytes to copy.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The target address.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The number of bytes available in the destination memory block.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The number of bytes to copy.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceBytesToCopy&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;code&gt;destinationSizeInBytes&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This API is not CLS-compliant.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method copies <ph id="ph1">`sourceBytesToCopy`</ph> bytes from the address specified by <ph id="ph2">`source`</ph> to the address specified by <ph id="ph3">`destination`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the buffers overlap and the difference between <ph id="ph1">`destination`</ph> minus <ph id="ph2">`source`</ph> is less than <ph id="ph3">`sourceBytesToCopy`</ph>, the source block is copied to the destination block in reverse order.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The address of the bytes to copy.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The target address.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The number of bytes available in the destination memory block.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The number of bytes to copy.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;sourceBytesToCopy&lt;/code&gt;</ph> is greater than <ph id="ph2">&lt;code&gt;destinationSizeInBytes&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Assigns a specified value to a byte at a particular location in a specified array.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`array`</ph> must be an array of primitives.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An array.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A location in the array.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A value to assign.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is not a primitive.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is negative or greater than the length of <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is larger than 2 gigabytes (GB).</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>