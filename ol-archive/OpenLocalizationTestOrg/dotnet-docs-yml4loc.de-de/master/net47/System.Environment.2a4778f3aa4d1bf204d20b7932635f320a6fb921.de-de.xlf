<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5cd436fb705b647253dc1894bdf5055253e2912</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Environment.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a65e246818e5929388fea853b8df5f3c1c4ed14e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59700d6f0e84d752d8b24f7dc4aab3a670d50fca</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides information about, and means to manipulate, the current environment and platform.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment&gt;</ph> class to retrieve information such as command-line arguments, the exit code, environment variable settings, contents of the call stack, time since last system boot, and the version of the common language runtime.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Gets the command line for this process.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property provides access to the program name and any arguments specified on the command line when the current process was started.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The program name can  include path information, but is not required to do so.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph> method to retrieve the command-line information parsed and stored in an array of strings.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The maximum size of the command-line buffer is not set to a specific number of characters; it varies depending on the Windows operating system that is running on the computer.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A string containing command-line arguments.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Gets or sets the fully qualified path of the current working directory.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>By definition, if this process starts in the root directory of a local or network drive, the value of this property is the drive name followed by a trailing slash (for example, "C:<ph id="ph1">\\</ph>").</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this process starts in a subdirectory, the value of this property is the drive and subdirectory path, without a trailing slash (for example, "C:\mySubDirectory").</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A string containing a directory path.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Attempted to set to an empty string ("").</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Attempted to set to <ph id="ph1">`null.`</ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Attempted to set a local path that cannot be found.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The caller does not have the appropriate permission.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets a unique identifier for the current managed thread.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An integer that represents a unique identifier for this managed thread.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Terminates this process and returns an exit code to the operating system.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the <ph id="ph1">`exitCode`</ph> parameter, use a non-zero number to indicate an error.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>In your application, you can define your own error codes in an enumeration, and return the appropriate error code based on the scenario.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, return a value of 1 to indicate that the required file is not present, and a value of 2 to indicate that the file is in the wrong format.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of exit codes used by the Windows operating system, see <bpt id="p1">[</bpt>System Error Codes<ept id="p1">](http://msdn.microsoft.com/library/ms681381.aspx)</ept> in the Windows documentation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> method differs from using your programming language's <ph id="ph2">`return`</ph> statement in the following ways:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> always terminates an application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">`return`</ph> statement may terminate an application only if it is used in the application entry point, such as in the <ph id="ph2">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> terminates an application immediately, even if other threads are running.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`return`</ph> statement is called in the application entry point, it causes an application to terminate only after all foreground threads have terminated.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> requires the caller to have permission to call unmanaged code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`return`</ph> statement does not.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> is called from a <ph id="ph2">`try`</ph> or <ph id="ph3">`catch`</ph> block, the code in any <ph id="ph4">`finally`</ph> block does not execute.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`return`</ph> statement is used, the code in the <ph id="ph2">`finally`</ph> block does execute.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> is called when code in a <bpt id="p1">[</bpt>constrained execution region<ept id="p1">](~/docs/framework/performance/constrained-execution-regions.md)</ept> (CER) is running, the CER will not complete execution.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`return`</ph> statement is used, the CER completes execution.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The exit code to return to the operating system.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use 0 (zero) to indicate that the process completed successfully.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient security permission to perform this function.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets or sets the exit code of the process.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`Main`</ph> method returns <ph id="ph2">`void`</ph>, you can use this property to set the exit code that will be returned to the calling environment.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Main`</ph> does not return <ph id="ph2">`void`</ph>, this property is ignored.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial value of this property is zero.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.ExitCode%2A&gt;</ph> property is a signed 32-bit integer.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent the property from returning a negative exit code, you should not use values greater than or equal to 0x80000000.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use a non-zero number to indicate an error.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>In your application, you can define your own error codes in an enumeration, and return the appropriate error code based on the scenario.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, return a value of 1 to indicate that the required file is not present and a value of 2 to indicate that the file is in the wrong format.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of exit codes used by the Windows operating system, see <bpt id="p1">[</bpt>System Error Codes<ept id="p1">](http://msdn.microsoft.com/library/ms681381\(v=vs.85\))</ept> in the Windows documentation.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer containing the exit code.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The default value is 0 (zero), which indicates that the process completed successfully.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>COM interop is used to retrieve the environment variables from the operating system.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the environment variables cannot be retrieved due to a COM error, the HRESULT that explains the cause of the failure is used to generate one of several possible exceptions; that is, the exception depends on the HRESULT.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how the HRESULT is processed, see the Remarks section of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Replacement only occurs for environment variables that are set.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose <ph id="ph1">`name`</ph> is "MyENV = %MyENV%".</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the environment variable, MyENV, is set to 42, this method returns "MyENV = 42".</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If MyENV is not set, no change occurs; this method returns "MyENV = %MyENV%".</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The size of the return value is limited to 32K.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A string containing the names of zero or more environment variables.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Each environment variable is quoted with the percent sign character (%).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A string with each environment variable replaced by its value.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message in error reporting to Microsoft.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method terminates a process without running any active <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> blocks or finalizers.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph> method writes the <ph id="ph2">`message`</ph> string to the Windows Application event log, creates a dump of your application, and then terminates the current process.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`message`</ph> string is also included in error reporting to Microsoft.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph> method instead of the <ph id="ph2">&lt;xref:System.Environment.Exit%2A&gt;</ph> method to terminate your application if the state of your application is damaged beyond repair, and executing your application's <ph id="ph3">`try`</ph><ph id="ph4">/</ph><ph id="ph5">`finally`</ph> blocks and finalizers will corrupt program resources.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Information is reported to Microsoft by using Windows Error Reporting.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Windows Error Reporting: Getting Started<ept id="p1">](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A message that explains why the process was terminated, or <ph id="ph1">`null`</ph> if no explanation is provided.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and exception information in error reporting to Microsoft.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method terminates the process without running any active <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> blocks or finalizers.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph> method writes the <ph id="ph2">`message`</ph> string to the Windows Application event log, creates a dump of your application, and then terminates the current process.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Information is reported to Microsoft by using Windows Error Reporting.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Windows Error Reporting: Getting Started<ept id="p1">](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Error reporting to Microsoft includes <ph id="ph1">`message`</ph> and <ph id="ph2">`exception`</ph> information, which provides details used to classify the error.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although <ph id="ph1">`exception`</ph> is not handled because the process is terminated, the contextual information that raised the exception is still obtained.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`exception`</ph> is <ph id="ph2">`null`</ph>, or if <ph id="ph3">`exception`</ph> is not thrown, this method operates the same as the <ph id="ph4">&lt;xref:System.Environment.FailFast%28System.String%29&gt;</ph> method overload.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph> method instead of the <ph id="ph2">&lt;xref:System.Environment.Exit%2A&gt;</ph> method to terminate your application if the state of your application is damaged beyond repair, and executing your application's <ph id="ph3">`try`</ph><ph id="ph4">/</ph><ph id="ph5">`finally`</ph> blocks and finalizers will corrupt program resources.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A message that explains why the process was terminated, or <ph id="ph1">`null`</ph> if no explanation is provided.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An exception that represents the error that caused the termination.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This is typically the exception in a <ph id="ph1">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Returns a string array containing the command-line arguments for the current process.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first element in the array contains the file name of the executing program.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the file name is not available, the first element is equal to <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The remaining elements contain any additional tokens entered on the command line.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The program file name can, but is not required to, include path information.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Command line arguments are delimited by spaces.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use double quotation marks (") to include spaces within an argument.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The single quotation mark ('), however, does not provide this functionality.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a double quotation mark follows two or an even number of backslashes, each proceeding backslash pair is replaced with one backslash and the double quotation mark is removed.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a double quotation mark follows an odd number of backslashes, including just one, each preceding pair is replaced with one backslash and the remaining backslash is removed; however, in this case the double quotation mark is not removed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows how command line arguments can be delimited, and assumes <ph id="ph1">`MyApp`</ph> as the current executing application.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Input at the command line</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resulting command line arguments</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain the command line as a single string, use the <ph id="ph1">&lt;xref:System.Environment.CommandLine%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An array of string where each element contains a command-line argument.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The first element is the executable file name, and the following zero or more elements contain the remaining command-line arguments.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The system does not support command-line arguments.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Retrieves the value of an environment variable from the current process.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariable%28System.String%29&gt;</ph> method retrieves an environment variable from the environment block of the current process only.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is equivalent to calling the <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariable%28System.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph> method with a <ph id="ph2">`target`</ph> value of <ph id="ph3">&lt;xref:System.EnvironmentVariableTarget?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The environment block of the current process includes the following environment variables:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>All per-machine environment variables that are defined at the time the process is created, along with their values.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>All per-user environment variables that are defined at the time the process is created, along with their values.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any variables added to the process block while the process is running by calling either the <ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph> method with a <ph id="ph3">`target`</ph> value of <ph id="ph4">&lt;xref:System.EnvironmentVariableTarget?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>If environment variables are created after the process has started, you can use this method to retrieve only those variables that were created by calling the <ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph> method with a <ph id="ph3">`target`</ph> value of .<ph id="ph4">&lt;xref:System.EnvironmentVariableTarget?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve all environment variables along with their values, call the <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Environment variable names are not case-sensitive.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The name of the environment variable.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The value of the environment variable specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">variable</ph><ept id="p1">&lt;/code&gt;</ept>, or <ph id="ph2">`null`</ph> if the environment variable is not found.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;variable&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission to perform this operation.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Retrieves the value of an environment variable from the current process or from the Windows operating system registry key for the current user or local machine.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`target`</ph> parameter specifies whether the environment variable is retrieved from the current process or from the Windows operating system registry key for the current user or local machine.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>All per-user and per-machine environment variables are automatically copied into the environment block of the current process.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, environment variables added only to the environment block of the current process  persist only for the duration of the process.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve all environment variables along with their values, call the <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Environment variable names are not case-sensitive.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The name of an environment variable.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.EnvironmentVariableTarget"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The value of the environment variable specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">variable</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">target</ph><ept id="p2">&lt;/code&gt;</ept> parameters, or <ph id="ph3">`null`</ph> if the environment variable is not found.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;variable&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.EnvironmentVariableTarget"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission to perform this operation.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Retrieves all environment variable names and their values from the current process.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The names and values for the environment variables are stored as key-value pairs in the returned <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A dictionary that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission to perform this operation.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The buffer is out of memory.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Retrieves all environment variable names and their values from the current process, or from the Windows operating system registry key for the current user or local machine.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`target`</ph> parameter specifies whether the source is the current process, the registry key for the current user, or the registry key for the local machine.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>The names and values of the environment variables are stored as key/value pairs in the returned <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.EnvironmentVariableTarget"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A dictionary that contains all environment variable names and their values from the source specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">target</ph><ept id="p1">&lt;/code&gt;</ept> parameter; otherwise, an empty dictionary if no environment variables are found.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission to perform this operation for the specified value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">target</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> contains an illegal value.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Gets the path to the system special folder that is identified by the specified enumeration.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method retrieves the path to a system special folder, such as Program Files, Programs, System, or Startup, which can be used to access common information.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`folder`</ph> parameter designates the special folder to retrieve and must be one of the values in the <ph id="ph2">&lt;xref:System.Environment.SpecialFolder&gt;</ph> enumeration; any other value throws an exception.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about special folders, see the <bpt id="p1">[</bpt>CSIDL<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=116664)</ept> values topic.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>An enumerated constant that identifies a system special folder.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, an empty string ("").</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;folder&lt;/code&gt;</ph> is not a member of <ph id="ph2">&lt;xref href="System.Environment.SpecialFolder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The current platform is not supported.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Gets the path to the system special folder that is identified by the specified enumeration, and uses a specified option for accessing special folders.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method retrieves the path to a system special folder, such as Program Files, Programs, System, or Startup, which can be used to access common information.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`folder`</ph> parameter designates the special folder to retrieve and must be one of the values in the <ph id="ph2">&lt;xref:System.Environment.SpecialFolder&gt;</ph> enumeration; any other value throws an exception.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about special folders, see the <bpt id="p1">[</bpt>CSIDL<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=116664)</ept> values topic.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>An enumerated constant that identifies a system special folder.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Specifies options to use for accessing a special folder.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, an empty string ("").</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;folder&lt;/code&gt;</ph> is not a member of <ph id="ph2">&lt;xref href="System.Environment.SpecialFolder"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Returns an array of string containing the names of the logical drives on the current computer.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>An array of strings where each element contains the name of a logical drive.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>For example, if the computer's hard drive is the first logical drive, the first element returned is "C:<ph id="ph1">\\</ph>".</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permissions.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the current application domain is being unloaded or the common language runtime (CLR) is shutting down.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the CLR unloads an application domain, it runs the finalizers on all objects that have a finalizer method in that application domain.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the CLR shuts down, it starts the finalizer thread on all objects that have a finalizer method.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.HasShutdownStarted%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> only after the finalizer thread has been started.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the property returns <ph id="ph1">`true`</ph>, you can determine whether an application domain is being unloaded or the CLR itself is shutting down by calling the <ph id="ph2">&lt;xref:System.AppDomain.IsFinalizingForUnload%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns <ph id="ph1">`true`</ph> if finalizers are called because the application domain is unloading or <ph id="ph2">`false`</ph> if the CLR is shutting down.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.HasShutdownStarted%2A&gt;</ph> property returns <ph id="ph2">`false`</ph> if the finalizer thread has not been started.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>By using this property, you can determine whether to access static variables in your finalization code.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>If either an application domain or the CLR is shutting down, you cannot reliably access any object that has a finalization method and that is referenced by a static field.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because these objects may have already been finalized.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current application domain is being unloaded or the CLR is shutting down; otherwise, <ph id="ph2">`false.`</ph></source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Determines whether the current operating system is a 64-bit operating system.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the operating system is 64-bit; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Determines whether the current process is a 64-bit process.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the process is 64-bit; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Gets the NetBIOS name of this local computer.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of this computer is established at system startup when the name is read from the registry.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this computer is a node in a cluster, the name of the node is returned.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>A string containing the name of this computer.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The name of this computer cannot be obtained.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Gets the newline string defined for this environment.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property value of <ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph> is a constant customized specifically for the current platform and implementation of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the escape characters in the property value, see <bpt id="p1">[</bpt>Character Escapes<ept id="p1">](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The functionality provided by <ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph> is often what is meant by the terms newline, line feed, line break, carriage return, CRLF, and end of line.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph> can be used in conjunction with language-specific newline support such as the escape characters '\r' and '\n' in Microsoft C# and C/C++, or <ph id="ph2">`vbCrLf`</ph> in Microsoft Visual Basic.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph> is automatically appended to text processed by the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendLine%2A?displayProperty=fullName&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>A string containing "\r\n" for non-Unix platforms, or a string containing "\n" for Unix platforms.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Gets an <ph id="ph1">&lt;xref href="System.OperatingSystem"&gt;&lt;/xref&gt;</ph> object that contains the current platform identifier and version number.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with Windows 8, the  <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property returns the same major and minor version numbers for all Windows platforms.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, we do not recommend that you retrieve the value of this property to determine the operating system version.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property is used to ensure that an app is running on some base version of an operating system in which a particular feature was introduced.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this is the case, you should perform a version check by testing whether the current operating system version returned by the <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property is the same as, or greater than, the base operating system version.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Version&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>Through Windows 8, the <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property returns the version reported by the Windows <bpt id="p1">[</bpt>GetVersionEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724451\(v=vs.85\).aspx)</ept> function.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of Windows desktop operating system versions and their corresponding version numbers, see <bpt id="p1">[</bpt>Operating System Version<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms724832.aspx)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property reports the same version number (6.2.0.0) for both <ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph> and <ph id="ph3">[!INCLUDE[win81](~/includes/win81-md.md)]</ph> and the same major and minor version number for Windows 10.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some cases, the <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property may not return the operating system version that matches the version specified for the Windows Program Compatibility mode feature.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>An object that contains the platform identifier and version number.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This property was unable to obtain the system version.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The obtained platform identifier is not a member of <ph id="ph1">&lt;xref href="System.PlatformID"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Gets the number of processors on the current machine.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about processor groups and logical processors, see <bpt id="p1">[</bpt>Processor Groups<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd405503.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The 32-bit signed integer that specifies the number of processors on the current machine.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>There is no default.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If the current machine contains multiple processor groups, this property returns the number of logical processors that are available for use by the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Creates, modifies, or deletes an environment variable stored in the current process.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method is equivalent to calling the <ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph> overload with a value of <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget?displayProperty=fullName&gt;</ph> for the <ph id="ph3">`target`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`value`</ph> argument is not empty (see the discussion of deleting an environment variable later in this section for the definition of an empty value) and the environment variable named by the <ph id="ph2">`variable`</ph> parameter does not exist, the environment variable is created and assigned the contents of <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it does exist, its value is modified.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the environment variable is defined in the environment block of the current process only, it does not persist after the process has ended.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`variable`</ph> contains a non-initial hexadecimal zero character, the characters before the zero character are considered the environment variable name and all subsequent characters are ignored.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable and all subsequent characters are ignored.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is empty and the environment variable named by <ph id="ph2">`variable`</ph> exists, the environment variable is deleted.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`variable`</ph> does not exist, no error occurs even though the operation cannot be performed.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`value`</ph> is considered empty under any of the following conditions:</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>It consists of a single character whose value is U+0000.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The name of an environment variable.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A value to assign to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">variable</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;variable&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;variable&lt;/code&gt;</ph> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign ("=").</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">variable</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p2">&lt;/code&gt;</ept> is greater than or equal to 32,767 characters.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>An error occurred during the execution of this operation.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission to perform this operation.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Creates, modifies, or deletes an environment variable stored in the current process or in the Windows operating system registry key reserved for the current user or local machine.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph> method lets you define an environment variable that is available to all processes that run on a machine (the <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget?displayProperty=fullName&gt;</ph> value), to all processes run by a user (the <ph id="ph3">&lt;xref:System.EnvironmentVariableTarget?displayProperty=fullName&gt;</ph> value), or to the current process (the <ph id="ph4">&lt;xref:System.EnvironmentVariableTarget.Process&gt;</ph> value).</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>Per-machine and per-user environment variables are copied into the environment block of the current process.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, environment variables that are unique to the current process environment block persist only until the process ends.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`value`</ph> argument is not empty (see the discussion of deleting an environment variable later in this section for the definition of an empty value) and the environment variable named by the <ph id="ph2">`variable`</ph> parameter does not exist, the environment variable is created and assigned the contents of <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it does exist, its value is modified.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`variable`</ph> contains a non-initial hexadecimal zero character, the characters before the zero character are considered the environment variable name and all subsequent characters are ignored.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable and all subsequent characters are ignored.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is empty and the environment variable named by <ph id="ph2">`variable`</ph> exists, the environment variable is deleted.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`value`</ph> is considered empty under any of the following conditions:</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>It consists of a single character whose value is U+0000.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`variable`</ph> does not exist, no error occurs although the operation cannot be performed.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be careful when <ph id="ph1">`target`</ph> is <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.Machine&gt;</ph>, because you can accidentally delete an environment variable that affects your entire local machine, not just the current process or user.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`target`</ph> is <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.User&gt;</ph>, the environment variable is stored in the HKEY_CURRENT_USER\Environment key of the local computer's registry.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also copied to instances of File Explorer that are running as the current user.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The environment variable is then inherited by any new processes that the user launches from File Explorer.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, if <ph id="ph1">`target`</ph> is <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget?displayProperty=fullName&gt;</ph>, the environment variable is stored in the HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Session Manager\Environment key of the local computer's registry.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also copied to all instances of File Explorer.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>The environment variable is then inherited by any new processes that are launched from File Explorer.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`target`</ph> is <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.User&gt;</ph> or <ph id="ph3">&lt;xref:System.EnvironmentVariableTarget.Machine&gt;</ph>, other applications are notified of the set operation by a Windows <ph id="ph4">`WM_SETTINGCHANGE`</ph> message.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`target`</ph> is <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget?displayProperty=fullName&gt;</ph> or <ph id="ph3">&lt;xref:System.EnvironmentVariableTarget?displayProperty=fullName&gt;</ph>, we recommend that the length of <ph id="ph4">`value`</ph> be less than 2048 characters.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The name of an environment variable.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A value to assign to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">variable</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the location of the environment variable.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;variable&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;variable&lt;/code&gt;</ph> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign ("=").</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">variable</ph><ept id="p1">&lt;/code&gt;</ept> is greater than or equal to 32,767 characters.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is not a member of the <ph id="ph2">&lt;xref href="System.EnvironmentVariableTarget"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id="ph2">&lt;xref href="System.EnvironmentVariableTarget.Machine"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.EnvironmentVariableTarget.User"&gt;&lt;/xref&gt;</ph>, and the length of <ph id="ph4">&lt;code&gt;variable&lt;/code&gt;</ph> is greater than or equal to 255.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id="ph2">&lt;xref href="System.EnvironmentVariableTarget.Process"&gt;&lt;/xref&gt;</ph> and the length of <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> is greater than or equal to 32,767 characters.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>An error occurred during the execution of this operation.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission to perform this operation.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Gets current stack trace information.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.StackTrace%2A&gt;</ph> property lists method calls in reverse chronological order, that is, the most recent method call is described first, and one line of stack trace information is listed for each method call on the stack.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.Environment.StackTrace%2A&gt;</ph> property might not report as many method calls as expected due to code transformations that occur during optimization.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a hierarchical view of the stack trace information by class, use the <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.StackTrace%2A&gt;</ph> property formats the stack trace information for each method call as follows:</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>"at <ph id="ph1">`FullClassName`</ph>.<ph id="ph2">`MethodName`</ph>(<ph id="ph3">`MethodParams`</ph>) in <ph id="ph4">`FileName`</ph> :line <ph id="ph5">`LineNumber`</ph> "</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>The literal "at" is preceded by three spaces, and the entire substring starting with "in" is omitted if debug symbols are not available.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>The placeholders, <ph id="ph1">`FullClassName`</ph>, <ph id="ph2">`MethodName`</ph>, <ph id="ph3">`MethodParams`</ph>, <ph id="ph4">`FileName`</ph>, and <ph id="ph5">`LineNumber`</ph>, are replaced by actual values, and are defined as follows:</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>FullClassName</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>The full name of the class, including the namespace.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of the method.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>The list of parameter type/name pairs.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each pair is separated by a comma (",").</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>This information is omitted if <ph id="ph1">`MethodName`</ph> takes no parameters.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of the source file where the <ph id="ph1">`MethodName`</ph> method is declared.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>This information is omitted if debug symbols are not available.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>The number of the line in <ph id="ph1">`FileName`</ph> that contains the source code from <ph id="ph2">`MethodName`</ph> for the instruction that is on the call stack.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>This information is omitted if debug symbols are not available.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=fullName&gt;</ph> string terminates each line of the stack trace.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>A string containing stack trace information.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>This value can be <ph id="ph1">&lt;xref href="System.String.Empty"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Gets the fully qualified path of the system directory.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example of the value returned is the string "C:\WinNT\System32".</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>A string containing a directory path.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Gets the number of bytes in the operating system's memory page.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>This information can be useful when determining whether to use the <ph id="ph1">&lt;xref:System.IO.MemoryMappedFiles.MemoryMappedFileOptions?displayProperty=fullName&gt;</ph> option when you work with memory-mapped files.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Windows, this value is the <ph id="ph1">`dwPageSize`</ph> member in the <ph id="ph2">`SYSTEM_INFO`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The number of bytes in the system memory page.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Gets the number of milliseconds elapsed since the system started.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property is derived from the system timer and is stored as a 32-bit signed integer.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that, because it is derived from the system timer, the resolution of the <ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph> property is limited to the resolution of the system timer, which is typically in the range of 10 to 16 milliseconds.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the value of the <ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph> property value is a 32-bit signed integer, if the system runs continuously, <ph id="ph2">&lt;xref:System.Environment.TickCount%2A&gt;</ph> will increment from zero to <ph id="ph3">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph> for approximately 24.9 days, then jump to <ph id="ph4">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>, which is a negative number, then increment back to zero during the next 24.9 days.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can work around this issue by calling the Windows <bpt id="p1">[</bpt>GetTickCount<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms724408.aspx)</ept> function, which resets to zero after approximately 49.7 days, or by calling the <bpt id="p2">[</bpt>GetTickCount64<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ms724411.aspx)</ept> function.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph> is different from the <ph id="ph2">&lt;xref:System.DateTime.Ticks%2A?displayProperty=fullName&gt;</ph> property, which is the number of 100-nanosecond intervals that have elapsed since 1/1/0001, 12:00am.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.DateTime.Now%2A?displayProperty=fullName&gt;</ph> property to obtain the current local date and time on this computer.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Gets the network domain name associated with the current user.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>The domain account credentials for a user are formatted as the user's domain name, the '<ph id="ph1">\\</ph>' character, and user name.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph> property to obtain the user's domain name without the user name, and the <ph id="ph2">&lt;xref:System.Environment.UserName%2A&gt;</ph> property to obtain the user name without the domain name.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a user's domain name and user name are CORPORATENETWORK\john, the <ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph> property returns "CORPORATENETWORK".</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph> property first attempts to get the domain name component of the Windows account name for the current user.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that attempt fails, this property attempts to get the domain name associated with the user name provided by the <ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that attempt fails because the host computer is not joined to a domain, then the host computer name is returned.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The network domain name associated with the current user.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The operating system does not support retrieving the network domain name.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The network domain name cannot be retrieved.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current process is running in user interactive mode.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.UserInteractive%2A&gt;</ph> property reports <ph id="ph2">`false`</ph> for a Windows process or a service like IIS that runs without a user interface.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is <ph id="ph1">`false`</ph>, do not display modal dialogs or message boxes because there is no graphical user interface for the user to interact with.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current process is running in user interactive mode; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Gets the user name of the person who is currently logged on to the Windows operating system.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph> property to identify the user on the current thread, to the system and application for security or access purposes.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also be used to customize a particular application for each user.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph> property wraps a call to the Windows <bpt id="p1">[</bpt>GetUserName<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724432.aspx)</ept> function.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>The domain account credentials for a user are formatted as the user's domain name, the '<ph id="ph1">\\</ph>' character, and user name.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph> property to obtain the user's domain name and the <ph id="ph2">&lt;xref:System.Environment.UserName%2A&gt;</ph> property to obtain the user name.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an ASP.NET application runs in a development environment, the <ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph> property returns the name of the current user.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a published ASP.NET application, this property returns the name of the application pool account (such as Default AppPool).</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The user name of the person who is logged on to Windows.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Version"&gt;&lt;/xref&gt;</ph> object that describes the major, minor, build, and revision numbers of the common language runtime.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the .NET Framework Versions 4, 4.5, 4.5.1, and 4.5.2, the <ph id="ph1">&lt;xref:System.Environment.Version%2A?displayProperty=fullName&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.Version&gt;</ph> object whose string representation has the form <ph id="ph3">`4.0.30319.xxxxx`</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, its point releases, and the .NET Framework 4.7, it has the form <ph id="ph2">`4.0.30319.42000`</ph>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> and later, we do not recommend using the <ph id="ph2">&lt;xref:System.Environment.Version%2A&gt;</ph> property to detect the version of the runtime; instead, you can determine the version of the common language runtime by querying the registry.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Determine Which .NET Framework Versions Are Installed<ept id="p1">](~/docs/framework/migration-guide/how-to-determine-which-versions-are-installed.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the version of the common language runtime that is installed with each version of the .NET Framework, see <bpt id="p1">[</bpt>Versions and Dependencies<ept id="p1">](~/docs/framework/migration-guide/versions-and-dependencies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>An object that displays the version of the common language runtime.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Gets the amount of physical memory mapped to the process context.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>A 64-bit signed integer containing the number of bytes of physical memory mapped to the process context.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>