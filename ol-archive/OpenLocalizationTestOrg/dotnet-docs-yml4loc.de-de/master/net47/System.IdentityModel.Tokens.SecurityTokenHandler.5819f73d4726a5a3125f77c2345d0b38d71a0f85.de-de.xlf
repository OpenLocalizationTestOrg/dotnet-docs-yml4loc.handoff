<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8c7b3d6cf7553673bf5207578a6c31f90d3e520</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.IdentityModel.Tokens.SecurityTokenHandler.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9fe7638f51dbd477ea00497f7bbe1bfd79469a02</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dafe04c4768b4720e60e866c321bb17c87138a1d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The abstract base class for security token handlers.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class is the base class from which all security token handlers derive.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A security token handler is responsible for:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Validating security tokens (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) of the type it is designed to process and packaging the claims contained in the token into a <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Serializing and deserializing security tokens of the type it is designed to process.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Serializing and deserializing key identifier clauses (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) that refer to tokens of the type it is designed to process to and from <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating security tokens from a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenDescriptor&gt;</ph> object passed by implementations of the <ph id="ph2">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating key identifier clauses from a security token for implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows Identity Foundation (WIF) ships the following security token handlers out of the box:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>In many cases it may be better to derive from one of these classes rather than directly from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>A security token handler can be added or removed from  a token handler collection by specifying the <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;add<ph id="ph2">\&amp;</ph>gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept>, <bpt id="p2">[</bpt><ph id="ph3">\&amp;</ph>lt;remove<ph id="ph4">\&amp;</ph>gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)</ept>, or <bpt id="p3">[</bpt><ph id="ph5">\&amp;</ph>lt;clear<ph id="ph6">\&amp;</ph>gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)</ept> elements under the <bpt id="p4">[</bpt><ph id="ph7">\&amp;</ph>lt;securityTokenHandlers<ph id="ph8">\&amp;</ph>gt;<ept id="p4">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)</ept> element in a configuration file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration&gt;</ph> object that contains the configuration settings for the handler collection can be accessed through the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property and the handler collection that the token handler is a member of can be accessed from the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> method to process any custom configuration elements that your handler takes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class exposes several other properties and methods.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depending on the functionality that you choose to implement, you may override some or all of these members.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> property and  the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method: Validates a token and packages the claims contained in the token into a <ph id="ph3">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> methods: Token serialization.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> methods and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> methods: Token deserialization.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> method: Deserializing key identifier clauses.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> method: Serializing key identifier clauses.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> methods are called from the pipeline in implementations of the <ph id="ph3">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> method is called by the WIF infrastructure to determine whether the specified token has already been received.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default this method returns <ph id="ph1">`false`</ph>, which indicates that the token has not already been received.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the method and provide logic to detect replayed tokens.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Called from constructors in derived classes to initialize the <ph id="ph1">&lt;xref href="System.IdentityModel.Tokens.SecurityTokenHandler"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns <ph id="ph1">`false`</ph> to indicate that the key identifier clause cannot be read.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is typically accomplished through a call to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=fullName&gt;</ph> method with the appropriate element and namespace strings specified.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> method to provide the logic to deserialize the key identifier clause.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An XML reader positioned at the start element.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The reader should not be advanced by this method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)"&gt;&lt;/xref&gt;</ph> method can read the element; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override this method, you must also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName&gt;</ph> method to provide the logic to deserialize the token.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The token string to read.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)"&gt;&lt;/xref&gt;</ph> method can read the element; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is typically accomplished through a call to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> method with the appropriate element and namespace strings specified.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName&gt;</ph> method or the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName&gt;</ph> method to provide the logic to deserialize the key identifier clause.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An XML reader positioned at a start element.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The reader should not be advanced by this method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)"&gt;&lt;/xref&gt;</ph> method can read the element; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the handler supports validation of security tokens.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>To implement validation in a derived class, override this property to return <ph id="ph1">`true`</ph> and override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method to implement the validation logic.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the class is capable of validating security tokens; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> method to provide the logic to serialize the key identifier clause.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The key identifier clause to be checked.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the key identifier clause can be serialized; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the handler can serialize security tokens.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>To implement serialization in a derived class, override this property to return <ph id="ph1">`true`</ph> and override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> methods to implement the serialization logic.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the class is capable of serializing tokens; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"&gt;&lt;/xref&gt;</ph> object that provides configuration for the current instance.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property is typically set by the configuration infrastructure from the <bpt id="p1">[</bpt><ph id="ph2">\&amp;</ph>lt;securityTokenHandlerConfiguration<ph id="ph3">\&amp;</ph>gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)</ept> element in the configuration file during application start up.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>In derived classes, you use the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property to access configuration settings; for example, the issuer name registry to use in the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method can be accessed from the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=fullName&gt;</ph> property of the configuration object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The configuration object for the current instance.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Gets the token handler collection that contains the current instance.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the token handler is added to a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection&gt;</ph> instance, this property is automatically set.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The token handler collection that contains the current instance.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates the security token reference for tokens processed by that class.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This method is typically called by a security token service (STS).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived classes override this method to return a key identifier clause (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) that can be used to create a <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> element for the specified token.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Called from implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph> does not need to be used, other than when a custom security token service is created.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>These references typically affirm the authenticity of the issued security token.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The token for which the reference is to be created.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if an attached reference should be created; <ph id="ph2">`false`</ph> if an unattached reference should be created.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A key identifier clause that references the specified token.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a security token using the specified token descriptor.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This method is called by a security token service (STS).</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Called from implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The security token descriptor from which the token is to be created.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Properties of the token descriptor are set before this method is called.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A security token that matches the properties of the token descriptor.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, throws an exception if the specified token is detected as being replayed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation does nothing.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived classes should throw a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException&gt;</ph> if the token has already been used.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows Identity Foundation (WIF) provides the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.TokenReplayCache&gt;</ph> class from which replay caches may be derived and the <bpt id="p1">[</bpt><ph id="ph2">\&amp;</ph>lt;tokenReplayCache<ph id="ph3">\&amp;</ph>gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)</ept> configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the <ph id="ph4">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> method is up to the designer of the derived class.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The token to check for replay.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the token processed by the current instance is accessed through the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method returns the set of acceptable identifiers that can be used in messages to refer to the token type.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the URI value used in the <ph id="ph1">`&lt;wst:TokenType&gt;`</ph> element under the <ph id="ph2">`&lt;wst:RequestSecurityToken&gt;`</ph> element to request a specific kind of token (represented by the <ph id="ph3">&lt;xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=fullName&gt;</ph> property in the object model).</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The set of URIs that identify the token type that this handler supports.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, loads custom configuration from XML.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> method is called by the configuration infrastructure.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method is called, the <ph id="ph1">`nodelist`</ph> will contain the top-level child elements of the token handler’s <bpt id="p1">[</bpt><ph id="ph2">\&amp;</ph>lt;add<ph id="ph3">\&amp;</ph>gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept> element from the configuration file.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method in your derived class to enable initialization of your security token handler from a configuration file.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The configuration XML elements.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Each node in the list is of type <ph id="ph1">&lt;xref href="System.Xml.XmlElement"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method to provide the logic to deserialize a key identifier clause from XML.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The key identifier clause that was deserialized from the XML.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method with untrusted data is a security risk.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method only with trusted data.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=330378)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method to provide functionality that can deserialize a security token from a string.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override, this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The string to be deserialized.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The security token that was deserialized from the specified string.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method with untrusted data is a security risk.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method only with trusted data.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=330378)</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method to provide the logic to deserialize a security token from XML.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>An XML reader positioned at the start element of the token.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The security token that was deserialized from the XML.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method with untrusted data is a security risk.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method only with trusted data.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=330378)</ept>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation ignores the <ph id="ph1">`tokenResolver`</ph> parameter and delegates the call to the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method to provide the logic to deserialize a security token from XML.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>An XML reader positioned at the start element of the token.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A token resolver that contains out-of-band and cached tokens.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The security token that was deserialized from the XML.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the type of the security token that is processed by this instance.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must override this property in derived classes and return the <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the security token (<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) that is processed by the derived class.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The type of the security token that is processed by this instance.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Traces the failure event during the validation of security tokens when tracing is enabled.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be called from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method when validation of the token fails.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The security token that is being validated.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The message to write to the trace.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Traces the successful validation of security tokens event when tracing is enabled.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method should be called from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method after the token has been successfully validated.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The token that was validated.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, validates the specified security token.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The token must be of the type processed by the derived class.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method is called by the infrastructure to validate and extract the claims from the deserialized security token.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>These claims are returned in the collection of <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> objects returned by the method.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the typical case, this collection will contain a single identity.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=fullName&gt;</ph> property of the token handler configuration object specified on the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>These URIs are typically set in the configuration file under the <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;audienceUris<ph id="ph2">\&amp;</ph>gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)</ept> element.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the audience cannot be validated, an <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException&gt;</ph> exception should be thrown.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>When processing the token, the issuer is typically validated by passing the issuer token to one of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> methods on the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry&gt;</ph> object that is configured for the handler through the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The issuer name registry is typically configured through the <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;issuerNameRegistry<ph id="ph2">\&amp;</ph>gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)</ept> element in the configuration file.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> returns the name of the issuer.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>This name should be used to set the <ph id="ph1">&lt;xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=fullName&gt;</ph> property in claims contained in the token.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the issuer name registry does not contain an entry for the issuer token, <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenException&gt;</ph> is typically thrown in derived classes, but this behavior is up to the designer of the class.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The token to validate.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The identities contained in the token.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, serializes the specified key identifier clause to XML.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The key identifier clause must be of the type supported by the derived class.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method to provide the logic to serialize a key identifier clause to XML.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The XML writer.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The key identifier clause to serialize.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, serializes the specified security token to a string.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The token must be of the type processed by the derived class.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method to provide the logic to serialize a security token to XML.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The token to serialize.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The serialized token.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, serializes the specified security token to XML.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The token must be of the type processed by the derived class.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method to provide the logic to serialize a security token to XML.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The XML writer.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The token to serialize.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>