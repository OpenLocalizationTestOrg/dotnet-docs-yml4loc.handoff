<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0b880e88ecd70d14bb1a9821d30dcbf8ccd23eb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Microsoft.JScript.IDebugVsaScriptCodeItem.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5b901db0c7cd89226e5bb96eb6af3e399990911</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b344ba059fd5217842bf380fec6f7de78941876</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines methods that evaluate expressions and parse strings.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This interface provides extra functionality that is needed by an IActiveScript host.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When implemented in a class, evaluates the block, expression, or statement represented by the code item and returns the value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It is typically called by a debugger that needs to evaluate an expression (in a Watch window, for example).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For expressions, the value is the result of the expression.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For blocks and statements, the resulting expression is the last expression calculated by the block or statement.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the <ph id="ph1">&lt;xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A&gt;</ph> method is functionally identical to the <ph id="ph2">&lt;xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the marshaling attributes differ.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This version of the interface allows an unmanaged debugger to obtain the return value as an <ph id="ph1">`IUnknown`</ph> pointer rather than a <ph id="ph2">`VARIANT`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Returns a value that represents the evaluation of the statement, expression, or block.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When implemented in a class, parses strings and returns the parsed-out information.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This method is typically called by a debugger that needs to parse information about a breakpoint that is represented as a <ph id="ph1">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The debugger might have a breakpoint typed in by the user in the form <bpt id="p1">*</bpt>functionname-arguments-ILoffset<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A named breakpoint string can have a complex format, for example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">F.B(C.D[], int, arg : double ) : C.Abc + 123.</ph><ept id="p1">&lt;/code&gt;</ept> The parameter list is optional, as is the IL offset.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A well-formed named breakpoint string giving a function, optional argument list, and optional IL offset.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Out parameter returning the name of the function parsed out of the input string, or the empty string if the input string is not well formed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Out parameter returning the number of arguments in the optional argument list.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Returns zero if there is no arguments list or if the string is not well formed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Out parameter returning a space-separated list of the names of the types of all the arguments in the arguments list, or an empty string if the arguments list was missing or the input string was not well formed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Out parameter returning a string containing the return type of the function named in the input, or the empty string if the return type was missing or the input string was not well formed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Unsigned long integer giving the IL offset from the input string, or zero if there was no IL offset or the string was not well formed.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph> if the named breakpoint is successfully parsed, <ph id="ph2">`false`</ph> otherwise.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>