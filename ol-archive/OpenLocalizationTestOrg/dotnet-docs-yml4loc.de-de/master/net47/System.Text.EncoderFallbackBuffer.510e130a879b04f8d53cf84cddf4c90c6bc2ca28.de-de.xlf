<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6ab1eac276249d631285f45249f317c21d0923e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Text.EncoderFallbackBuffer.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97c4251966165d877e6597bd33a49f82f687d8c9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3327106be4f5e3a0560ea05ba5199afe2b738353</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>An encoding defines a mapping between a Unicode character and an encoded sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>An encoding operation, which converts an input character to an output byte sequence, fails if no mapping is defined for a particular character.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>All encoder fallback handlers must implement the following:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>An encoder fallback, which is represented by a class derived from the <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>An encoder fallback buffer, which is represented by a type derived from the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> class that can return a string to the conversion operation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fallbacks can use three strategies to handle conversion failures:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Best-fit mapping.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The encoder fallback buffer can return a string that represents a close approximation to the input character.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework does not provide a public best-fit <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Replacement.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The encoder fallback buffer can return a string, such as a question mark ("?"), that indicates that a character could not be encoded.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework, the <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.EncoderReplacementFallbackBuffer&gt;</ph> classes provide a public replacement fallback buffer implementation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor of the <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> class enables you to define the replacement string.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exception.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation throws an exception, which indicates that a character cannot be encoded, and terminates the encoding operation.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the fallback handler must provide an <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation, although it does not return a string to the encoder.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework, the <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> classes provide a public exception fallback implementation that throws an <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> when a character cannot be encoded.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The buffer in an <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation represents the entire string to be returned to the encoder in response to an encoder fallback.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, implementations also include state information, such as the index of the next character to return to the encoder and the number of remaining characters to be returned.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> is an abstract class, it requires derived classes to implement the following members at a minimum:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overloaded <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method, which is called by the encoder when it cannot encode a character.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The encoder passes two pieces of information to the fallback buffer implementation: the character or surrogate pair that could not be encoded and the index of the character in the input.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>In an encoder fallback exception handler, the exception is thrown in this method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the method returns <ph id="ph1">`true`</ph> if it provides a fallback, or <ph id="ph2">`false`</ph> if it does not.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method, which is called repeatedly by the encoder if the <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>In successive calls, the handler should return each character in its buffer.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>When it has returned all characters, it should return U+0000.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception handler always returns U+0000.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A&gt;</ph> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception handler always returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Remaining%2A&gt;</ph> property, which indicates the number of remaining characters to be returned to the encoder.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception fallback handler always returns zero.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.EncoderFallbackBuffer"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, prepares the fallback buffer to handle the specified input character.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=fullName&gt;</ph> methods call <ph id="ph3">&lt;xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29&gt;</ph> if they encounter an unknown input character that cannot be encoded.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>A return value of <ph id="ph1">`true`</ph> indicates that the fallback buffer can process the input character, which causes the calling method to call the <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method to obtain each character of the fallback buffer.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because it does not process individual characters, the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method in an exception fallback handler throws an exception.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An input character.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The index position of the character in the input buffer.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the fallback buffer can process <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">charUnknown</ph><ept id="p1">&lt;/code&gt;</ept>; <ph id="ph3">`false`</ph> if the fallback buffer ignores <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">charUnknown</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=fullName&gt;</ph> methods call <ph id="ph3">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29&gt;</ph> if they encounter a surrogate pair in their input.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>A return value of <ph id="ph1">`true`</ph> indicates that the fallback buffer can process the surrogate pair, which causes the calling method to call the <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method to obtain each character of the fallback buffer.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because it does not process individual characters, the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method in an exception fallback handler throws an exception.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The high surrogate of the input pair.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The low surrogate of the input pair.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The index position of the surrogate pair in the input buffer.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the fallback buffer can process <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">charUnknownHigh</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">charUnknownLow</ph><ept id="p2">&lt;/code&gt;</ept>; <ph id="ph4">`false`</ph> if the fallback buffer ignores the surrogate pair.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, retrieves the next character in the fallback buffer.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>An encoding operation calls the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method if the operation encounters an unknown character or surrogate pair in the input.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in the case of a replacement fallback, if the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>, a substitute string exists that can be encoded instead of the unknown input.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The encoding operation calls the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method repeatedly and obtains the substitute string one character at a time.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>When all characters in the fallback buffer have been returned to the encoder, the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method should return U+0000.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an exception fallback handler, the <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method should return U+0000.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The next character in the fallback buffer.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, causes the next call to the <ph id="ph1">&lt;xref href="System.Text.EncoderFallbackBuffer.GetNextChar"&gt;&lt;/xref&gt;</ph> method to access the data buffer character position that is prior to the current character position.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception fallback handler should return <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Text.EncoderFallbackBuffer.MovePrevious"&gt;&lt;/xref&gt;</ph> operation was successful; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the number of characters in the current <ph id="ph1">&lt;xref href="System.Text.EncoderFallbackBuffer"&gt;&lt;/xref&gt;</ph> object that remain to be processed.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> if <ph id="ph3">&lt;xref:System.Text.EncoderFallbackBuffer.Remaining%2A&gt;</ph> is a nonzero value.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an exception fallback handler, the <ph id="ph1">&lt;xref:System.Text.DecoderFallbackBuffer.Remaining%2A&gt;</ph> method should return zero.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The number of characters in the current fallback buffer that have not yet been processed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Initializes all data and state information pertaining to this fallback buffer.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>