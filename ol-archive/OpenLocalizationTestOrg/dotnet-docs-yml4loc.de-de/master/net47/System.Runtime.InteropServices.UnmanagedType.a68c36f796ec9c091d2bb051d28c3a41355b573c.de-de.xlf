<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">167c4653c02ed14d4752c2e708fcfc9880ef8e6c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.InteropServices.UnmanagedType.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">801e4c95a05234bf296793cd4b382f77f5088aef</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1fa2ba9014c3a0321f8cdb1aabd34b99648728e4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Identifies how to marshal parameters or fields to unmanaged code.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration with the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName&gt;</ph> attribute to specify how types are marshaled during interoperation with unmanaged code.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this enumeration to marshal code using simple value types (I1, I2, I4, I8, R4, R8, U2, U4, and U8), unmanaged types that are unavailable in the .NET Framework, and various miscellaneous types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Interoperating with Unmanaged Code<ept id="p1">](http://msdn.microsoft.com/library/ccb68ce7-b0e9-4ffb-839d-03b1cd2c1258)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An ANSI character string that is a length-prefixed single byte.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can use this member on the <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> data type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A dynamic type that determines the type of an object at run time and marshals the object as that type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This member is valid for platform invoke methods only.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A 4-byte Boolean value (<ph id="ph1">`true`</ph> != 0, <ph id="ph2">`false`</ph> = 0).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is the Win32 BOOL type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A Unicode character string that is a length-prefixed double byte.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use this member, which is the default string in COM, on the <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> data type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute.Value"&gt;&lt;/xref&gt;</ph> property is set to <ph id="ph2">`ByValArray`</ph>, the <ph id="ph3">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute.SizeConst"&gt;&lt;/xref&gt;</ph> field must be set to indicate the number of elements in the array.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType"&gt;&lt;/xref&gt;</ph> field can optionally contain the <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.UnmanagedType"&gt;&lt;/xref&gt;</ph> of the array elements when it is necessary to differentiate among string types.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can use this <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.UnmanagedType"&gt;&lt;/xref&gt;</ph> only on an array that whose elements appear as fields in a structure.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Used for in-line, fixed-length character arrays that appear within a structure.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The character type used with <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.UnmanagedType.ByValTStr"&gt;&lt;/xref&gt;</ph> is determined by the <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.CharSet"&gt;&lt;/xref&gt;</ph> argument of the <ph id="ph3">&lt;xref href="System.Runtime.InteropServices.StructLayoutAttribute"&gt;&lt;/xref&gt;</ph> attribute applied to the containing structure.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Always use the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute.SizeConst"&gt;&lt;/xref&gt;</ph> field to indicate the size of the array.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>.NET Framework ByValTStr types behave like C-style, fixed-size strings inside a structure (for example, <ph id="ph1">`char s[5]`</ph>).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior in managed code differs from the Microsoft Visual Basic 6.0 behavior, which is not null terminated (for example, <ph id="ph1">`MyString As String * 5`</ph>).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A currency type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Used on a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> to marshal the decimal value as a COM currency type instead of as a <ph id="ph2">`Decimal`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Specifies the custom marshaler class when used with the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute.MarshalType"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef"&gt;&lt;/xref&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie"&gt;&lt;/xref&gt;</ph> field can be used to pass additional information to the custom marshaler.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can use this member on any reference type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This member is valid for parameters and return values only.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It cannot be used on fields.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A native type that is associated with an <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.UnmanagedType.I4"&gt;&lt;/xref&gt;</ph> or an <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.UnmanagedType.U4"&gt;&lt;/xref&gt;</ph> and that causes the parameter to be exported as an HRESULT in the exported type library.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An integer that can be used as a C-style function pointer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can use this member on a <ph id="ph1">&lt;xref href="System.Delegate"&gt;&lt;/xref&gt;</ph> data type or on a type that inherits from a <ph id="ph2">&lt;xref href="System.Delegate"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> string.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can use this member on the <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> data type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A 1-byte signed integer.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can use this member to transform a Boolean value into a 1-byte, C-style <ph id="ph1">`bool`</ph> (<ph id="ph2">`true`</ph> = 1, <ph id="ph3">`false`</ph> = 0).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A 2-byte signed integer.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A 4-byte signed integer.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An 8-byte signed integer.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A COM <ph id="ph1">`IDispatch`</ph> pointer (<ph id="ph2">`Object`</ph> in Microsoft Visual Basic 6.0).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> interface pointer.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can use this member on the <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> data type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A COM interface pointer.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Guid"&gt;&lt;/xref&gt;</ph> of the interface is obtained from the class metadata.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Use this member to specify the exact interface type or the default interface type if you apply it to a class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This member produces the same behavior as <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.UnmanagedType.IUnknown"&gt;&lt;/xref&gt;</ph> when you apply it to the <ph id="ph2">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> data type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A COM <ph id="ph1">`IUnknown`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can use this member on the <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> data type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A pointer to the first element of a C-style array.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When marshaling from managed to unmanaged code, the length of the array is determined by the length of the managed array.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When marshaling from unmanaged to managed code, the length of the array is determined from the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute.SizeConst"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex"&gt;&lt;/xref&gt;</ph> fields, optionally followed by the unmanaged type of the elements within the array when it is necessary to differentiate among string types.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A single byte, null-terminated ANSI character string.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can use this member on the <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> data types.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A pointer to a C-style structure that you use to marshal managed formatted classes.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This member is valid for platform invoke methods only.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A platform-dependent character string: ANSI on Windows 98, and Unicode on Windows NT and Windows XP.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This value is supported only for platform invoke and not for COM interop, because exporting a string of type <ph id="ph1">`LPTStr`</ph> is not supported.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A pointer to a UTF-8 encoded string.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A 2-byte, null-terminated Unicode character string.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you cannot use the LPWStr value with an unmanaged string unless the string was created by using the unmanaged <ph id="ph1">`CoTaskMemAlloc`</ph> function.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A 4-byte floating-point number.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An 8-byte floating-point number.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`SafeArray`</ph>, which is a self-describing array that carries the type, rank, and bounds of the associated array data.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can use this member with the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType"&gt;&lt;/xref&gt;</ph> field to override the default element type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A VARIANT, which is used to marshal managed formatted classes and value types.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A platform-dependent, signed integer: 4 bytes on 32-bit Windows, 8 bytes on 64-bit Windows.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A platform-dependent, unsigned integer: 4 bytes on 32-bit Windows, 8 bytes on 64-bit Windows.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A length-prefixed, platform-dependent <ph id="ph1">`char`</ph> string: ANSI on Windows 98, Unicode on Windows NT.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You rarely use this BSTR-like member.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A 1-byte unsigned integer.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A 2-byte unsigned integer.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A 4-byte unsigned integer.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An 8-byte unsigned integer.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A 2-byte, OLE-defined VARIANT_BOOL type (<ph id="ph1">`true`</ph> = -1, <ph id="ph2">`false`</ph> = 0).</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A value that enables Visual Basic to change a string in unmanaged code and have the results reflected in managed code.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This value is only supported for platform invoke.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>