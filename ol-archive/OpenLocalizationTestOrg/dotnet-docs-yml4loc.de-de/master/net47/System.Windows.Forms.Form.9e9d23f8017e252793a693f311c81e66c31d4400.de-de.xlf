<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8522515a854968333ee645b956a0140d7f35aeea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Forms.Form.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e14cd2cf9511f2155fde4ea42b73df1d8f29111d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99a6ce681d24974b06e2d7bf3ffffa6ede64cc4c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a window or dialog box that makes up an application's user interface.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> is a representation of any window displayed in your application.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class can be used to create standard, tool, borderless, and floating windows.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class to create modal windows such as a dialog box.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A special kind of form, the multiple-document interface (MDI) form, can contain other forms called MDI child forms.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>An MDI form is created by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.IsMdiContainer%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>MDI child forms are created by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.MdiParent%2A&gt;</ph> property to the MDI parent form that will contain the child form.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the properties available in the <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class, you can determine the appearance, size, color, and window management features of the window or dialog box you are creating.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property allows you to specify the caption of the window in the title bar.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Size%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.DesktopLocation%2A&gt;</ph> properties allow you to define the size and position of the window when it is displayed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> color property to change the default foreground color of all controls placed on the form.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormBorderStyle%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Form.MinimizeBox%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.Form.MaximizeBox%2A&gt;</ph> properties allow you to control whether the form can be minimized, maximized, or resized at run time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to properties, you can use the methods of the class to manipulate a form.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A&gt;</ph> method to show a form as a modal dialog box.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.SetDesktopLocation%2A&gt;</ph> method to position the form on the desktop.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The events of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class allow you to respond to actions performed on the form.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> event to perform operations such as updating the data displayed in the controls of the form when the form is activated.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use a form as the starting class in your application by placing a method called <ph id="ph1">`Main`</ph> in the class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">`Main`</ph> method add code to create and show the form.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>You will also need to add the <ph id="ph1">`STAThread`</ph> attribute to the <ph id="ph2">`Main`</ph> method in order for the form to run.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the starting form is closed, the application is also closed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property to <ph id="ph2">`false`</ph> before the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> is visible (for example, setting <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> to false in the <ph id="ph5">[!INCLUDE[TLA#tla_visualstu](~/includes/tlasharptla-visualstu-md.md)]</ph> designer), the minimize, maximize, close, and system buttons remain enabled.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> to <ph id="ph2">`false`</ph> after the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> is visible (for example, when the Load event occurs), the buttons are disabled.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default size of a form is 300 pixels in height and 300 pixels in width.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets or sets the button on the form that is clicked when the user presses the ENTER key.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property enables you to designate a default action to occur when the user presses the ENTER key in your application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The button assigned to this property must be an <ph id="ph1">&lt;xref:System.Windows.Forms.IButtonControl&gt;</ph> that is on the current form or located within a container on the current form.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to allow the user to quickly navigate a simple form by allowing them to simply press the ENTER key when they are finished instead of manually clicking the accept button with their mouse.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The accept button might not be activated if the currently selected control on the form intercepts the ENTER key and processes it.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a multiline text box control allows the ENTER key to be pressed when it is selected to insert a new line character in the control.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.IButtonControl"&gt;&lt;/xref&gt;</ph> that represents the button to use as the accept button for the form.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Activates the form and gives it focus.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Activating a form brings it to the front if this is the active application, or it flashes the window caption if this is not the active application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The form must be visible for this method to have any effect.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine the active form in an application, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ActiveForm%2A&gt;</ph> property or the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ActiveMdiChild%2A&gt;</ph> property if your forms are in a Multiple-document interface (MDI) application.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Occurs when the form is activated in code or by the user.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application is active and has multiple forms, the active form is the form with the input focus.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>A form that is not visible cannot be the active form.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The simplest way to activate a visible form is to click it or use an appropriate keyboard combination.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>To activate a form at run time using code, call the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Activate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this event for tasks such as updating the contents of the form based on changes made to the form's data when the form was not activated.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Activates the MDI child of a form.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`form`</ph> parameter is already the active MDI child form, then the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ActivateMdiChild%2A&gt;</ph> method simply returns.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`form`</ph> is not <ph id="ph2">`null`</ph>, then it is set to be the active MDI child form.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether the <ph id="ph1">`form`</ph> parameter is <ph id="ph2">`null`</ph> or not, <ph id="ph3">&lt;xref:System.Windows.Forms.Form.ActivateMdiChild%2A&gt;</ph> raises the <ph id="ph4">&lt;xref:System.Windows.Forms.Form.MdiChildActivate&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The child form to activate.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets the currently active form for this application.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to obtain a reference to the currently active form to perform actions on the form or its controls.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application is a multiple-document interface (MDI) application, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ActiveMdiChild%2A&gt;</ph> property to obtain the currently active MDI child form.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> that represents the currently active form, or <ph id="ph2">`null`</ph> if there is no active form.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the currently active multiple-document interface (MDI) child window.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to determine whether there are any MDI child forms open in your MDI application.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use this method to perform operations on an MDI child window from its MDI parent form or from another form that is displayed in your application.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the currently active form is not an MDI child form, you can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ActiveForm%2A&gt;</ph> property to obtain a reference to it.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> that represents the currently active MDI child window, or <ph id="ph2">`null`</ph> if there are currently no child windows present.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Adds an owned form to this form.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The form assigned to the owner form remains owned until the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RemoveOwnedForm%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also make a form owned by another by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Owner%2A&gt;</ph> property with a reference to its owner form.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is owned by another form, it is closed or hidden with the owner form.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, consider a form named <ph id="ph1">`Form2`</ph> that is owned by a form named <ph id="ph2">`Form1`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Form1`</ph> is closed or minimized, <ph id="ph2">`Form2`</ph> is also closed or hidden.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Owned forms are also never displayed behind their owner form.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use owned forms for windows such as find and replace windows, which should not be displayed behind the owner form when the owner form is selected.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the form is a multiple-document interface (MDI) parent form, this property returns all forms that are displayed with the exception of any MDI child forms that are currently open.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain the MDI child forms opened in an MDI parent form, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.MdiChildren%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> that this form will own.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Adjusts the scroll bars on the container based on the current control positions and the control currently selected.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to show the scroll bars; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the opacity of the form can be adjusted.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is automatically set to <ph id="ph1">`true`</ph> if the <ph id="ph2">`Opacity`</ph> is changed.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the opacity of a form is set using the <ph id="ph1">`Opacity`</ph> property, the form will layer objects on the form.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AllowTransparency%2A&gt;</ph> property to <ph id="ph2">`false`</ph> the form will not be in layered mode which will improve the display performance of the form.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the opacity of the form can be changed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Resizes the form according to the current value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.AutoScaleBaseSize"&gt;&lt;/xref&gt;</ph> property and the size of the current font.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines the form size using the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Size%2A&gt;</ph> value returned by the <ph id="ph3">&lt;xref:System.Windows.Forms.Form.GetAutoScaleSize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the form adjusts its size to fit the height of the font used on the form and scales its controls.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AutoScale%2A&gt;</ph> is obsolete and has been retained for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The non-obsolete alternative is <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about automatic scaling, see <bpt id="p1">[</bpt>Automatic Scaling in Windows Forms<ept id="p1">](~/docs/framework/winforms/automatic-scaling-in-windows-forms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to allow your form and its controls to automatically adjust based on changes in the font.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be useful in applications where the font might increase or decrease based on the language specified for use by Windows.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain the size the form will auto scale to, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to determine the size the form will auto scale to based on a specific font, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.GetAutoScaleSize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the form will automatically scale itself and its controls based on the current font assigned to the form; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Gets or sets the base size used for autoscaling of the form.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member has been retained for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about automatic scaling, see <bpt id="p1">[</bpt>Automatic Scaling in Windows Forms<ept id="p1">](~/docs/framework/winforms/automatic-scaling-in-windows-forms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A&gt;</ph> property is used at form-display time to compute the scaling factor for the form.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The autoscaling base size is used by the form as a baseline for comparison to the system's font size to determine how much to scale the form when autoscaling is used.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to determine the size a form will auto scale to based on a specific font, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.GetAutoScaleSize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property is used when the form is initially created.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the property is set, it cannot be changed.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> that represents the base size that this form uses for autoscaling.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the form enables autoscrolling.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is set to <ph id="ph1">`true`</ph>, scroll bars are displayed on the form if any controls are located outside the form's client region.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, when autoscrolling is on, the client area of the form automatically scrolls to make the control with input focus visible.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to prevent users from losing the ability to view controls when their video resolution settings are set to a low resolution.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to enable autoscrolling on the form; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Resize the form according to the setting of <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.AutoSizeMode"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AutoSize%2A&gt;</ph> to force a form to resize to fit its contents.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>A form does not automatically resize in the Visual Studio forms designer, regardless of the values of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AutoSize%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.AutoSizeMode%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>The form correctly resizes itself at run time according to the values of these two properties.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>By contrast, a custom <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> automatically resizes itself both at design time and at run time.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AutoSize%2A&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MinimumSize%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MaximumSize%2A&gt;</ph> properties are respected, but the current value of the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> property is ignored.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AutoSize%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.AutoSizeMode%2A&gt;</ph> also renders the <ph id="ph3">&lt;xref:System.Windows.Forms.Form.AutoScroll%2A&gt;</ph> property superfluous, as there is no way to shrink the form to hide its contained controls from view.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Forms.AutoSizeMode&gt;</ph> enumeration for information on how a form behaves when <ph id="ph2">&lt;xref:System.Windows.Forms.Form.AutoSize%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the form will automatically resize; <ph id="ph2">`false`</ph> if it must be manually resized.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.AutoSize"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Gets or sets the mode by which the form automatically resizes itself.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AutoSizeMode%2A&gt;</ph> property to a new value causes the form to be laid out again.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>A form does not automatically resize in the Visual Studio forms designer, regardless of the values of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AutoSize%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.AutoSizeMode%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The form correctly resizes itself at run time according to the values of these two properties.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>By contrast, a custom <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> automatically resizes itself both at design time and at run time.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.AutoSizeMode"&gt;&lt;/xref&gt;</ph> enumerated value.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Forms.AutoSizeMode.GrowOnly"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The value is not a valid <ph id="ph1">&lt;xref href="System.Windows.Forms.AutoSizeMode"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether controls in this container will be automatically validated when the focus changes.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.AutoValidate"&gt;&lt;/xref&gt;</ph> enumerated value that indicates whether contained controls are implicitly validated on focus change.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The default is Inherit.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.AutoValidate"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Gets or sets the background color for the control.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> that represents the background color of the control.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The default is the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.DefaultBackColor"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Gets or sets the button control that is clicked when the user presses the ESC key.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cancel button for a form is the button control that is clicked whenever the user presses the ESC key.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The button assigned to this property must be an <ph id="ph1">&lt;xref:System.Windows.Forms.IButtonControl&gt;</ph> that is on the current form or located within a container on the current form.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property allows you to designate a default action to occur when the user presses the ESC key in your application.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to allow the user to quickly navigate a simple form by allowing them to simply press the ESC key to close a window without committing changes instead of manually clicking the cancel button with their mouse.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Form.CancelButton%2A&gt;</ph> may not work if another control on the form intercepts the ESC key.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you have a <ph id="ph1">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> open on your form, ESC will close the <ph id="ph2">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> instead of closing the Form.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.IButtonControl&gt;</ph> object assigned to <ph id="ph2">&lt;xref:System.Windows.Forms.Form.CancelButton%2A&gt;</ph> must be visible on the form, or else pressing the ESC key will have no effect.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.IButtonControl"&gt;&lt;/xref&gt;</ph> that represents the cancel button for the form.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Centers the position of the form within the bounds of the parent form.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.CenterToParent%2A&gt;</ph> method directly from your code.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, set the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.StartPosition%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.Forms.FormStartPosition.CenterParent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the form or dialog is top-level, then <ph id="ph1">&lt;xref:System.Windows.Forms.Form.CenterToParent%2A&gt;</ph> centers the form with respect to the screen or desktop.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Centers the form on the current screen.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call this directly from your code.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, set the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.StartPosition%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.Forms.FormStartPosition.CenterScreen&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.CenterToScreen%2A&gt;</ph> method uses the following priority list to determine the screen used to center the form:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Owner%2A&gt;</ph> property of the form.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The HWND owner of the form.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>The screen that currently has the mouse cursor.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Gets or sets the size of the client area of the form.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The size of the client area of the form is the size of the form excluding the borders and the title bar.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client area of a form is the area within a form where controls can be placed.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to get the proper dimensions when performing graphics operations or when sizing and positioning controls on the form.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get the size of the entire form, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Size%2A&gt;</ph> property or use the individual properties <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot currently bind to this property using application settings.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on application settings, see <bpt id="p1">[</bpt>Application Settings Overview<ept id="p1">](~/docs/framework/winforms/advanced/application-settings-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> that represents the size of the form's client area.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Closes the form.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is closed, all resources created within the object are closed and the form is disposed.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can prevent the closing of a form at run time by handling the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event and setting the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> passed as a parameter to your event handler.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the form you are closing is the startup form of your application, your application ends.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>The two conditions when a form is not disposed on <ph id="ph1">`Close`</ph> is when (1) it is part of a multiple-document interface (MDI) application, and the form is not visible; and (2) you have displayed the form using <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>In these cases, you will need to call <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Dispose%2A&gt;</ph> manually to mark all of the form's controls for garbage collection.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A&gt;</ph> method is called on a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> displayed as a modeless window, you cannot call the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Show%2A&gt;</ph> method to make the form visible, because the form's resources have already been released.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>To hide a form and then make it visible, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Hide%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Prior to the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> 2.0, the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closed?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Closing?displayProperty=fullName&gt;</ph> events are not raised when the <ph id="ph4">&lt;xref:System.Windows.Forms.Application.Exit%2A?displayProperty=fullName&gt;</ph> method is called to exit your application.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have validation code in either of these events that must be executed, you should call the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A?displayProperty=fullName&gt;</ph> method for each open form individually before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The form was closed while a handle was being created.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>You cannot call this method from the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.Activated"&gt;&lt;/xref&gt;</ph> event when <ph id="ph2">&lt;xref href="System.Windows.Forms.Form.WindowState"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph3">&lt;xref href="System.Windows.Forms.FormWindowState.Maximized"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Occurs when the form is closed.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closed&gt;</ph> event is obsolete in the .NET Framework version 2.0; use the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.FormClosed&gt;</ph> event instead.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs after the form has been closed by the user or by the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A&gt;</ph> method of the form.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent a form from closing, handle the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event and set the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> passed to your event handler to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this event to perform tasks such as freeing resources used by the form and to save information entered in the form or to update its parent form.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closed?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closing?displayProperty=fullName&gt;</ph> events are not raised when the <ph id="ph3">&lt;xref:System.Windows.Forms.Application.Exit%2A?displayProperty=fullName&gt;</ph> method is called to exit your application.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have validation code in either of these events that must be executed, you should call the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A?displayProperty=fullName&gt;</ph> method for each open form individually before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the form is an MDI parent form, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> events of all MDI child forms are raised before the MDI parent form's <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closed&gt;</ph> events of all MDI child forms are raised before the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closed&gt;</ph> event of the MDI parent form is raised.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Occurs when the form is closing.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event is obsolete in the .NET Framework version 2.0; use the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> event instead.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event occurs as the form is being closed.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is closed, all resources created within the object are released and the form is disposed.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you cancel this event, the form remains opened.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel the closure of a form, set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> passed to your event handler to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is displayed as a modal dialog box, clicking the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button (the button with an X at the upper-right corner of the form) causes the form to be hidden and the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property to be set to <ph id="ph2">`DialogResult.Cancel`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the value assigned to the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property when the user clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property in an event handler for the <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event of the form.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A&gt;</ph> method is called on a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> displayed as a modeless window, you cannot call the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Show%2A&gt;</ph> method to make the form visible, because the form's resources have already been released.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>To hide a form and then make it visible, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Hide%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closed?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closing?displayProperty=fullName&gt;</ph> events are not raised when the <ph id="ph3">&lt;xref:System.Windows.Forms.Application.Exit%2A?displayProperty=fullName&gt;</ph> method is called to exit your application.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have validation code in either of these events that must be executed, you should call the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A?displayProperty=fullName&gt;</ph> method for each open form individually before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the form is an MDI parent form, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> events of all MDI child forms are raised before the MDI parent form's <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closed&gt;</ph> events of all MDI child forms are raised before the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closed&gt;</ph> event of the MDI parent form is raised.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>Canceling the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event of an MDI child form does not prevent the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event of the MDI parent form from being raised.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, canceling the event will set to <ph id="ph1">`true`</ph> the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> that is passed as a parameter to the parent form.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>To force all MDI parent and child forms to close, set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property to <ph id="ph2">`false`</ph> in the MDI parent form.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether a control box is displayed in the caption bar of the form.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ControlBox%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the control box is displayed in the upper-left corner of the caption bar.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>The control box is where the user can click to access the system menu.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ControlBox%2A&gt;</ph> to <ph id="ph2">`false`</ph>, and also set the <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Location%2A&gt;</ph> property, the <ph id="ph4">&lt;xref:System.Windows.Forms.Form.Size%2A&gt;</ph> property of Form will not update to reflect that the non-client area of the form has been hidden.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>To fix this problem, put the code which alters the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Location%2A&gt;</ph> property to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleCreated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>When set to <ph id="ph1">`false`</ph>, the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ControlBox%2A&gt;</ph> property has no effect on a Multiple-document interface (MDI) child form that is displayed maximized at time of creation.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the form displays a control box in the upper left corner of the form; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the control collection for the control.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A new instance of <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.ControlCollection"&gt;&lt;/xref&gt;</ph> assigned to the control.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Creates the handle for the form.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>If a derived class overrides this function, it must call the base implementation.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A handle for this <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> has already been created.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Gets the required creation parameters when the control handle is created.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.CreateParams"&gt;&lt;/xref&gt;</ph> that contains the required creation parameters when the handle to the control is created.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Occurs when the form loses focus and is no longer the active form.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this event to perform tasks such as updating another window in your application with data from the deactivated form.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Gets the default Input Method Editor (IME) mode supported by the control.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>An input method editor (IME) is a program that allows users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>As implemented in the <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class, this property always returns the <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode?displayProperty=fullName&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property is assigned to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.ImeMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Gets the default size of the control.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Sends the specified message to the default window procedure.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The Windows <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph> to process.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Gets or sets the size and location of the form on the Windows desktop.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>Desktop coordinates are based on the working area of the screen, which excludes the taskbar.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>The coordinate system of the desktop is pixel-based.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application is running on a multiple monitor system, the coordinates of the form are the coordinates for the combined desktop.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to size and position a form relative to other forms or applications on the Windows desktop.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that represents the bounds of the form on the Windows desktop using desktop coordinates.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Gets or sets the location of the form on the Windows desktop.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>Desktop coordinates are based on the working area of the screen, which excludes the taskbar.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>The coordinate system of the desktop is pixel based.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application is running on a multimonitor system, the coordinates of the form are the coordinates for the combined desktop.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to position your form relative to other forms and applications on the Windows desktop.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.SetDesktopLocation%2A&gt;</ph> method before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Show%2A&gt;</ph> method, your form will be positioned at its default location, which is determined by the operating system.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about window positioning, see the "Window Size and Position" section of the "Window Features" document in the MSDN library at http://msdn.microsoft.com/library.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Windows.Forms.Form.SetDesktopLocation%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Show%2A&gt;</ph>, your form will be positioned at the location you specified.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> that represents the location of the form on the desktop.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Gets or sets the dialog result for the form.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dialog result of a form is the value that is returned from the form when it is displayed as a modal dialog box.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the form is displayed as a dialog box, setting this property with a value from the <ph id="ph1">&lt;xref:System.Windows.Forms.DialogResult&gt;</ph> enumeration sets the value of the dialog box result for the form, hides the modal dialog box, and returns control to the calling form.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is typically set by the <ph id="ph1">&lt;xref:System.Windows.Forms.Button.DialogResult%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> control on the form.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the user clicks the <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control, the value assigned to the <ph id="ph2">&lt;xref:System.Windows.Forms.Button.DialogResult%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> is assigned to the <ph id="ph4">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property of the form.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is displayed as a modal dialog box, clicking the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button (the button with an X in the top-right corner of the form) causes the form to be hidden and the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property to be set to <ph id="ph2">`DialogResult.Cancel`</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A&gt;</ph> method is not automatically called when the user clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button of a dialog box or sets the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the form is hidden and can be shown again without creating a new instance of the dialog box.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this behavior, you must call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;</ph> method of the form when the form is no longer needed by your application.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to determine how a dialog box is closed in order to properly process the actions performed in the dialog box.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the value assigned to the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property when the user clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property in an event handler for the <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event of the form.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> is displayed as a modeless window, the value returned by the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property might not return a value assigned to the form because the form's resources are automatically released when the form is closed.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.DialogResult"&gt;&lt;/xref&gt;</ph> that represents the result of the form when used as a dialog box.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The value specified is outside the range of valid values.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Disposes of the resources (other than memory) used by the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">`Dispose`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> references.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Form.Dispose%2A&gt;</ph> will be called automatically if the form is shown using the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Show%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>If another method such as <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A&gt;</ph> is used, or the form is never shown at all, you must call <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Dispose%2A&gt;</ph> yourself within your application.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Occurs when the DPI setting changes on the display device where the form is currently displayed.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Gets or sets the border style of the form.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>The border style of the form determines how the outer edge of the form appears.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to changing the border display for a form, certain border styles prevent the form from being sized.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">`FormBorderStyle.FixedDialog`</ph> border style changes the border of the form to that of a dialog box and prevents the form from being resized.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>The border style can also affect the size or availability of the caption bar section of a form.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>With the <ph id="ph1">&lt;xref:System.Windows.Forms.FormBorderStyle.Sizable&gt;</ph> style, it is impossible to resize the window below a certain minimum value, even if you have set <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ControlBox%2A&gt;</ph> to <ph id="ph3">`false`</ph> and assigned a zero-length string to <ph id="ph4">&lt;xref:System.Windows.Forms.Form.Text%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider working around this by using the <ph id="ph1">&lt;xref:System.Windows.Forms.FormBorderStyle.SizableToolWindow&gt;</ph> style instead.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.FormBorderStyle"&gt;&lt;/xref&gt;</ph> that represents the style of border to display for the form.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`FormBorderStyle.Sizable`</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The value specified is outside the range of valid values.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Occurs after the form is closed.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosed&gt;</ph> event occurs after the form has been closed by the user or by the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Close%2A&gt;</ph> method or the <ph id="ph3">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> method of the <ph id="ph4">&lt;xref:System.Windows.Forms.Application&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent a form from closing, handle the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> event and set the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> passed to your event handler to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this event to perform tasks such as freeing resources used by the form and to save information entered in the form or to update its parent form.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the form is a multiple-document interface (MDI) parent form, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> events of all MDI child forms are raised before the MDI parent form's <ph id="ph2">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosed&gt;</ph> events of all MDI child forms are raised before the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.FormClosed&gt;</ph> event of the MDI parent form is raised.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Occurs before the form is closed.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> event occurs as the form is being closed.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is closed, it is disposed, releasing all resources associated with the form.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you cancel this event, the form remains opened.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel the closure of a form, set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.FormClosingEventArgs&gt;</ph> passed to your event handler to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is displayed as a modal dialog box, clicking the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button (the button with an X at the upper-right corner of the form) causes the form to be hidden and the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property to be set to <ph id="ph2">`DialogResult.Cancel`</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the value assigned to the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property when the user clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property in an event handler for the <ph id="ph3">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> event of the form.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A&gt;</ph> method is called on a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> displayed as a modeless window, you cannot call the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Show%2A&gt;</ph> method to make the form visible, because the form's resources have already been released.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>To hide a form and then make it visible, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Hide%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the form is a multiple-document interface (MDI) parent form, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> events of all MDI child forms are raised before the MDI parent form's <ph id="ph2">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosed&gt;</ph> events of all MDI child forms are raised before the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.FormClosed&gt;</ph> event of the MDI parent form is raised.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>Canceling the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> event of an MDI child form does not prevent the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> event of the MDI parent form from being raised.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, canceling the event will set to <ph id="ph1">`true`</ph> the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.FormClosingEventArgs&gt;</ph> class that is passed as a parameter to the parent form.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>To force all MDI parent and child forms to close, set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property to <ph id="ph2">`false`</ph> in the MDI parent form.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Gets the size when autoscaling the form based on a specified font.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.GetAutoScaleSize%2A&gt;</ph> method is obsolete in.NET Framework version 2.0.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member has been retained for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about automatic scaling, see <bpt id="p1">[</bpt>Automatic Scaling in Windows Forms<ept id="p1">](~/docs/framework/winforms/automatic-scaling-in-windows-forms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to determine the size a form would autoscale to for a specific font before applying the font to the form.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to determine the size a form is autoscaled to based on the font currently assigned to the form, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AutoScaleBaseSize%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Font"&gt;&lt;/xref&gt;</ph> representing the font to determine the autoscaled base size of the form.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.SizeF"&gt;&lt;/xref&gt;</ph> representing the autoscaled size of the form.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Retrieves the bounds within which the control is scaled.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that specifies the area for which to retrieve the display bounds.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The height and width of the control's bounds.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>One of the values of <ph id="ph1">&lt;xref href="System.Windows.Forms.BoundsSpecified"&gt;&lt;/xref&gt;</ph> that specifies the bounds of the control to use when defining its size and position.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> representing the bounds within which the control is scaled.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether a Help button should be displayed in the caption box of the form.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is set to <ph id="ph1">`true`</ph>, a small button with a question mark appears in the caption bar to the left of the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this button to display help for your application.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create an event handler for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HelpRequested&gt;</ph> event of the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class to display Help information to the user when the Help button of the form is clicked.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.HelpButton%2A&gt;</ph> property is ignored if the <bpt id="p1">**</bpt>Maximize<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Minimize<ept id="p2">**</ept> buttons are shown.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to display a Help button in the form's caption bar; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> button is clicked.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.HelpButtonClicked&gt;</ph> event occurs when the <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> button in the form's caption bar is clicked.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> button is displayed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.HelpButton%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Form.HelpButtonClicked&gt;</ph> can be canceled.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Gets or sets the icon for the form.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>A form's icon designates the picture that represents the form in the taskbar as well as the icon that is displayed for the control box of the form.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property will have no effect if <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormBorderStyle%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.Forms.FormBorderStyle.FixedDialog&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the form will not display an icon.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Drawing.Icon"&gt;&lt;/xref&gt;</ph> that represents the icon for the form.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Occurs after the input language of the form has changed.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this event to make changes to your form's appearance and text based on changes made to the input language of the form.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Occurs when the user attempts to change the input language for the form.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs before the change of input language is made for the form.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the language change by setting the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.InputLanguageChangingEventArgs&gt;</ph> passed to your event handler to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the event is canceled, the input language is not changed.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this event to determine whether the requested input language change is appropriate for your application.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the form is a multiple-document interface (MDI) child form.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>At run time, MDI child forms are displayed inside the client area of an MDI parent form.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>An MDI child form can be maximized, minimized, and moved within the MDI parent form.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an MDI child form, assign the <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that will be the MDI parent form to the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.MdiParent%2A&gt;</ph> property of the child form.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.IsMdiContainer%2A&gt;</ph> property to determine whether a form is an MDI parent form.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.IsMdiChild%2A&gt;</ph> property to determine whether a form returned by a method or property is an MDI child form or a standard form in your application such as a dialog box.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>All MDI child forms have sizable borders, a control-menu box, and Minimize and <bpt id="p1">**</bpt>Maximize<ept id="p1">**</ept> buttons, regardless of the settings of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormBorderStyle%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ControlBox%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Form.MinimizeBox%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Forms.Form.MaximizeBox%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the form is an MDI child form; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the form is a container for multiple-document interface (MDI) child forms.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property changes the display and behavior of the form to an MDI parent form.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is set to <ph id="ph1">`true`</ph>, the form displays a sunken client area with a raised border.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>All MDI child forms assigned to the parent form are displayed within its client area.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an MDI parent form is closed, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> events of all MDI child forms are raised before the MDI parent form's <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closed&gt;</ph> events of all MDI child forms are raised before the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closed&gt;</ph> event of the MDI parent form is raised.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are two <ph id="ph1">&lt;xref:System.Windows.Forms.MenuStrip&gt;</ph> controls on an MDI child form, setting <ph id="ph2">&lt;xref:System.Windows.Forms.Form.IsMdiContainer%2A&gt;</ph> to <ph id="ph3">`true`</ph> for the parent form merges the contents of only one of the <ph id="ph4">&lt;xref:System.Windows.Forms.MenuStrip&gt;</ph> controls.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripManager.Merge%2A&gt;</ph> to merge the contents of additional child <ph id="ph2">&lt;xref:System.Windows.Forms.MenuStrip&gt;</ph> controls on the MDI parent form.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the form is a container for MDI child forms; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the form can use all windows and user input events without restriction.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.IsRestrictedWindow%2A&gt;</ph> property determines whether the <ph id="ph2">&lt;xref:System.Security.Permissions.UIPermissionWindow.AllWindows&gt;</ph> permission is granted.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is set at run time in the form's constructor, and is cached for the lifetime of the form.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows Forms applications running in partial trust cannot circumvent this check, as the common language runtime ensures that the parent constructor is always called in partial trust.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the form has restrictions; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the form will receive key events before the event is passed to the control that has focus.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is set to <ph id="ph1">`true`</ph>, the form will receive all <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the form's event handlers have completed processing the keystroke, the keystroke is then assigned to the control with focus.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.KeyPreview%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> and the currently selected control is a <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>, after the keystroke is handled by the event handlers of the form the <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control will receive the key that was pressed.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>To handle keyboard events only at the form level and not allow controls to receive keyboard events, set the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=fullName&gt;</ph> property in your form's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event handler to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to process most keystrokes in your application and either handle the keystroke or call the appropriate control to handle the keystroke.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when an application uses function keys, you might want to process the keystrokes at the form level rather than writing code for each control that might receive keystroke events.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a form has no visible or enabled controls, it automatically receives all keyboard events.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>A control on a form may be programmed to cancel any keystrokes it receives.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the control never sends these keystrokes to the form, the form will never see them regardless of the setting of <ph id="ph1">&lt;xref:System.Windows.Forms.Form.KeyPreview%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the form will receive all key events; <ph id="ph2">`false`</ph> if the currently selected control on the form receives key events.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Arranges the multiple-document interface (MDI) child forms within the MDI parent form.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to arrange the MDI child forms in your MDI parent form to allow for easier navigation and manipulation of MDI child forms.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>MDI child forms can be tiled horizontally and vertically, cascaded, or as icons within the MDI parent form.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.MdiLayout"&gt;&lt;/xref&gt;</ph> values that defines the layout of MDI child forms.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Occurs before a form is displayed for the first time.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this event to perform tasks such as allocating resources used by the form.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> that represents the upper-left corner of the <ph id="ph2">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> is a structure, which means that it is a value type.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you access a property in <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph>, a copy of the property is returned.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, changing the <ph id="ph1">&lt;xref:System.Drawing.Point.X%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Drawing.Point.Y%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> returned from the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property will not affect the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph>, or <ph id="ph8">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> property values of the <ph id="ph9">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>To adjust these properties, set each property value individually, or set the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Location%2A&gt;</ph> property with a new <ph id="ph2">&lt;xref:System.Drawing.Point&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Location%2A&gt;</ph> property gets or sets the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.Control&gt;</ph> base class, and sets the <ph id="ph4">&lt;xref:System.ComponentModel.SettingsBindableAttribute.Bindable%2A&gt;</ph> property to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Drawing.Point"&gt;&lt;/xref&gt;</ph> that represents the upper-left corner of the <ph id="ph2">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Gets or sets the primary menu container for the form.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.MainMenuStrip%2A&gt;</ph> property, you must <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlCollection.Add%2A&gt;</ph> the <ph id="ph3">&lt;xref:System.Windows.Forms.MenuStrip&gt;</ph> control to the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> collection of the form.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.MenuStrip&gt;</ph> class supersedes the <ph id="ph2">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph> class in previous versions of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.MenuStrip"&gt;&lt;/xref&gt;</ph> that represents the container for the menu structure of the form.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Gets or sets the space between controls.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>A value that represents the space between controls.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.Margin"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the <bpt id="p1">**</bpt>Maximize<ept id="p1">**</ept> button is displayed in the caption bar of the form.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <bpt id="p1">**</bpt>Maximize<ept id="p1">**</ept> button enables users to enlarge a window to full-screen size.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>To display a <bpt id="p1">**</bpt>Maximize<ept id="p1">**</ept> button, you must also set the form's <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormBorderStyle%2A&gt;</ph> property to <ph id="ph2">`FormBorderStyle.FixedSingle`</ph>, <ph id="ph3">`FormBorderStyle.Sizable`</ph>, <ph id="ph4">`FormBorderStyle.Fixed3D`</ph>, or <ph id="ph5">`FormBorderStyle.FixedDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <bpt id="p1">**</bpt>Maximize<ept id="p1">**</ept> button automatically becomes a restore button when a window is maximized.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>Minimizing or restoring a window automatically changes the restore button back to a <bpt id="p1">**</bpt>Maximize<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>Maximizing a form at run time generates a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.WindowState%2A&gt;</ph> property reflects the current state of the window.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.WindowState%2A&gt;</ph> property to <ph id="ph2">`FormWindowState.Maximized`</ph>, the form is maximized independently of whatever settings are in effect for the <ph id="ph3">&lt;xref:System.Windows.Forms.Form.MaximizeBox%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Form.FormBorderStyle%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to display a <bpt id="p1">**</bpt>Maximize<ept id="p1">**</ept> button for the form; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Gets and sets the size of the form when it is maximized.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that represents the bounds of the form when it is maximized.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Drawing.Rectangle.Top"&gt;&lt;/xref&gt;</ph> property is greater than the height of the form.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Drawing.Rectangle.Left"&gt;&lt;/xref&gt;</ph> property is greater than the width of the form.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.MaximizedBounds"&gt;&lt;/xref&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Gets the maximum size the form can be resized to.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property enables you to limit the size of a form to a specified maximum size.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this feature when displaying multiple windows at the same time, to ensure that a single window does not cause other windows to be hidden.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is set to a <ph id="ph1">&lt;xref:System.Drawing.Size&gt;</ph> object that is 0 in height and 0 in width, the form will have no maximum size beyond the limits set by Windows.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> that represents the maximum size for the form.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The values of the height or width within the <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> object are less than zero.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.MaximumSize"&gt;&lt;/xref&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Occurs when a multiple-document interface (MDI) child form is activated or closed within an MDI application.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this event to perform tasks such as updating the contents of the MDI child form and changing the menu options available in the MDI parent form based on the status of the MDI child form that is activated.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Gets an array of forms that represent the multiple-document interface (MDI) child forms that are parented to this form.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property allows you to obtain references to all the MDI child forms currently opened in an MDI parent form.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an MDI child form, assign the <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that will be the MDI parent form to the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.MdiParent%2A&gt;</ph> property of the child form.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to loop through all the MDI child forms to perform operations such as saving data to a database when the MDI parent form closes or to update fields on the child forms based on actions performed in your application.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> objects, each of which identifies one of this form's MDI child forms.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Gets or sets the current multiple-document interface (MDI) parent form of this form.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an MDI child form, assign the <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that will be the MDI parent form to the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.MdiParent%2A&gt;</ph> property of the child form.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property from an MDI child form to obtain global information that all child forms need or to invoke methods that perform actions to all child forms.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are two <ph id="ph1">&lt;xref:System.Windows.Forms.MenuStrip&gt;</ph> controls on an MDI child form, setting <ph id="ph2">&lt;xref:System.Windows.Forms.Form.IsMdiContainer%2A&gt;</ph> to <ph id="ph3">`true`</ph> for the parent form merges the contents of only one of the <ph id="ph4">&lt;xref:System.Windows.Forms.MenuStrip&gt;</ph> controls.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripManager.Merge%2A&gt;</ph> to merge the contents of additional child <ph id="ph2">&lt;xref:System.Windows.Forms.MenuStrip&gt;</ph> controls on the MDI parent form.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> that represents the MDI parent form.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> assigned to this property is not marked as an MDI container.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> assigned to this property is both a child and an MDI container form.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> assigned to this property is located on a different thread.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Forms.MainMenu"&gt;&lt;/xref&gt;</ph> that is displayed in the form.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to switch between complete menu sets at run time.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can define one <ph id="ph1">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph> to be displayed when your multiple-document interface (MDI) form has no active MDI child forms and another <ph id="ph2">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph> to display when a child window is displayed.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use a different <ph id="ph1">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph> when specific conditions exist in your application that require displaying a different menu set.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.MainMenu"&gt;&lt;/xref&gt;</ph> that represents the menu to display in the form.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Occurs when the menu of a form loses focus.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised when you click on any menu item in a menu that results in a command being performed and the menu losing focus.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this event to perform tasks such as updating the text of a <ph id="ph1">&lt;xref:System.Windows.Forms.StatusBar&gt;</ph> control or enabling and disabling buttons on a <ph id="ph2">&lt;xref:System.Windows.Forms.ToolBar&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Occurs when the menu of a form receives focus.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised when any menu item in the menu is clicked by the user.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this event to perform tasks such as enabling and disabling controls on the form that should not be accessed by the user when the menus are being accessed.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Gets the merged menu for the form.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is primarily used when the form is a multiple-document interface (MDI) child form that merges its menu with its parent form's menu.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to obtain the current menu structure in an MDI application to make changes or additions to the menu structure.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain the nonmerged <ph id="ph1">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph> assigned to a form, use the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Menu%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.MainMenu"&gt;&lt;/xref&gt;</ph> that represents the merged menu of the form.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the <bpt id="p1">**</bpt>Minimize<ept id="p1">**</ept> button is displayed in the caption bar of the form.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <bpt id="p1">**</bpt>Minimize<ept id="p1">**</ept> button enables users to minimize a window to an icon.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>To display a <bpt id="p1">**</bpt>Minimize<ept id="p1">**</ept> button, you must also set the form's <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormBorderStyle%2A&gt;</ph> property to <ph id="ph2">`FormBorderStyle.FixedSingle`</ph>, <ph id="ph3">`FormBorderStyle.Sizable`</ph>, <ph id="ph4">`FormBorderStyle.Fixed3D`</ph>, or <ph id="ph5">`FormBorderStyle.FixedDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>Minimizing a form at run time generates a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.WindowState%2A&gt;</ph> property reflects the current state of the window.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.WindowState%2A&gt;</ph> property to <ph id="ph2">`FormWindowState.Minimized`</ph>, the form is minimized independently of whatever settings are in effect for the <ph id="ph3">&lt;xref:System.Windows.Forms.Form.MinimizeBox%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Form.FormBorderStyle%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to display a <bpt id="p1">**</bpt>Minimize<ept id="p1">**</ept> button for the form; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Gets or sets the minimum size the form can be resized to.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property enables you to limit the size of a form to a specified minimum size.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this feature to prevent a user from sizing a window to an undesirable size.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is set to a <ph id="ph1">&lt;xref:System.Drawing.Size&gt;</ph> object that is 0 in height and 0 in width, the form will have no minimum size beyond the limits set by Windows.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> that represents the minimum size for the form.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The values of the height or width within the <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> object are less than zero.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.MinimumSize"&gt;&lt;/xref&gt;</ph> property has changed.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether this form is displayed modally.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is displayed modally, no input (keyboard or mouse click) can occur except to objects on the modal form.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>The program must hide or close a modal form (usually in response to some user action) before input to another form can occur.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>Forms that are displayed modally are typically used as dialog boxes in an application.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to determine whether a form that you have obtained from a method or property has been displayed modally.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>To display a form modally use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the form is displayed modally; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.Activated"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnActivated%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overriding this method is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BackgroundImageChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnBackgroundImageChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the data.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.BackgroundImageLayoutChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnBackgroundImageLayoutChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.Closed"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnClosed%2A&gt;</ph> method is obsolete in the .NET Framework version 2.0; use the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.OnFormClosed%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnFormClosed%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overriding this method is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnClosed%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.OnClosing%2A&gt;</ph> methods are not called when the <ph id="ph3">&lt;xref:System.Windows.Forms.Application.Exit%2A?displayProperty=fullName&gt;</ph> method is called to exit your application.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have validation code in either of these methods that must be executed, you should call the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A?displayProperty=fullName&gt;</ph> method for each open form individually before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.Closing"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnClosing%2A&gt;</ph> method is obsolete in the .NET Framework version 2.0; use the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.OnFormClosing%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnClosing%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overriding this method is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnClosed%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.OnClosing%2A&gt;</ph> methods are not called when the <ph id="ph3">&lt;xref:System.Windows.Forms.Application.Exit%2A?displayProperty=fullName&gt;</ph> method is called to exit your application.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have validation code in either of these methods that must be executed, you should call the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A?displayProperty=fullName&gt;</ph> method for each open form individually before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.CancelEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">`CreateControl`</ph> event.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.Deactivate"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnDeactivate%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.DpiChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.DpiChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.EnabledChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Enter"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnEnter%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.FontChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.FormClosed"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnFormClosing%2A&gt;</ph> method removes the current form from the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.OpenForms%2A&gt;</ph> collection of the associated <ph id="ph3">&lt;xref:System.Windows.Forms.Application&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnFormClosed%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overriding this method is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.FormClosedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.FormClosing"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnFormClosing%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.FormClosingEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Raises the GetDpiScaledSize event.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>The DPI value for the display device where the form was previously displayed.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The DPI value for the display device where the form will be displayed.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> representing the new size of the form based on the new DPI value.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if successful; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.HandleCreated"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.HandleDestroyed"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.HelpButtonClicked"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnHelpButtonClicked%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.CancelEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.InputLanguageChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnInputLanguageChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.InputLanguageChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.InputLanguageChanging"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnInputLanguageChanging%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.InputLanguageChangingEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Layout"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.Load"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnLoad%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.MaximizedBoundsChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnMaximizedBoundsChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.MaximumSizeChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnMaximumSizeChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.MdiChildActivate"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnMdiChildActivate%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.MenuComplete"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnMenuComplete%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.MenuStart"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnMenuStart%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.MinimumSizeChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnMinimumSizeChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Paint"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.PaintEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Resize"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.ResizeBegin"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ResizeBegin&gt;</ph> event will only be raised if the form's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CanRaiseEvents%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnResizeBegin%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.ResizeEnd"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ResizeEnd&gt;</ph> event will only be raised if the form's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CanRaiseEvents%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnResizeEnd%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.RightToLeftLayoutChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current form or one of its parents is disposing of resources, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnRightToLeftLayoutChanged%2A&gt;</ph> method will return without performing any action.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of the form has a value of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft.Yes&gt;</ph>, then the handles of the form and its child controls will be recreated through calls to the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnRightToLeftLayoutChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.Shown"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Shown&gt;</ph> event occurs whenever the form is first shown.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnShown%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.StyleChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.TextChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.VisibleChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OnVisibleChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Gets or sets the opacity level of the form.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Opacity%2A&gt;</ph> property enables you to specify a level of transparency for the form and its controls.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is set to a value less than 100 percent (1.00), the entire form, including borders, is made more transparent.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property to a value of 0 percent (0.00) makes the form completely invisible.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to provide different levels of transparency or to provide effects such as phasing a form in or out of view.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can phase a form into view by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Opacity%2A&gt;</ph> property to a value of 0 percent (0.00) and gradually increasing the value until it reaches 100 percent (1.00).</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Form.Opacity%2A&gt;</ph> differs from the transparency provided by the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.TransparencyKey%2A&gt;</ph>, which only makes a form and its controls completely transparent if they are the same color as the value specified in the <ph id="ph3">&lt;xref:System.Windows.Forms.Form.TransparencyKey%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is not supported when <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Opacity%2A&gt;</ph> property depends on the Layered Windows API that was introduced with Windows 2000.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the "Layered Windows: A New Way to Use Translucency and Transparency Effects in Windows Applications" in the Platform SDK documentation at <bpt id="p1">[</bpt>http://msdn.microsoft.com<ept id="p1">](http://msdn.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>The level of opacity for the form.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>The default is 1.00.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Gets an array of <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> objects that represent all forms that are owned by this form.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property returns an array that contains all forms that are owned by this form.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT">
          <source>To make a form owned by another form, call the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AddOwnedForm%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT">
          <source>The form assigned to the owner form will remain owned until the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RemoveOwnedForm%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also make a form owned by another by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Owner%2A&gt;</ph> property with a reference to its owner form.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is owned by another form, it is closed or hidden with the owner form.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, consider a form named <ph id="ph1">`Form2`</ph> that is owned by a form named <ph id="ph2">`Form1`</ph>.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Form1`</ph> is closed or minimized, <ph id="ph2">`Form2`</ph> is also closed or hidden.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT">
          <source>Owned forms are also never displayed behind their owner form.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use owned forms for windows such as find and replace windows, which should not be displayed behind the owner form when the owner form is selected.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the form is a multiple-document interface (MDI) parent form, this property will return all forms that are displayed with the exception of any MDI child forms that are currently open.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain the MDI child forms opened in an MDI parent form, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.MdiChildren%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> array that represents the owned forms for this form.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Gets or sets the form that owns this form.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT">
          <source>To make a form owned by another form, assign its <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Owner%2A&gt;</ph> property a reference to the form that will be the owner.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is owned by another form, it is closed or hidden with the owner form.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, consider a form named <ph id="ph1">`Form2`</ph> that is owned by a form named <ph id="ph2">`Form1`</ph>.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Form1`</ph> is closed or minimized, <ph id="ph2">`Form2`</ph> is also closed or hidden.Owned forms are also never displayed behind their owner form.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use owned forms for windows such as find and replace windows, which should not disappear when the owner form is selected.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine the forms that are owned by a parent form, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.OwnedForms%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> that represents the form that is the owner of this form.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>A top-level window cannot have an owner.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Processes a command key.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ProcessCmdKey%2A&gt;</ph> method overrides the base</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.ProcessCmdKey%2A?displayProperty=fullName&gt;</ph> implementation to provide additional handling of main menu command keys and MDI accelerators.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about trapping keystrokes, see "How to trap keystrokes in controls by using Visual C#" and "How to trap keystrokes in .NET controls by using Visual Basic .NET" in the Microsoft Knowledge Base at http://support.microsoft.com.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph>, passed by reference, that represents the Win32 message to process.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Keys"&gt;&lt;/xref&gt;</ph> values that represents the key to process.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the keystroke was processed and consumed by the control; otherwise, <ph id="ph2">`false`</ph> to allow further processing.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Processes a dialog character.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>The character to process.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the character was processed by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Processes a dialog box key.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ProcessDialogKey%2A&gt;</ph> method overrides the base <ph id="ph2">&lt;xref:System.Windows.Forms.ContainerControl.ProcessDialogKey%2A?displayProperty=fullName&gt;</ph> implementation to provide additional handling of the RETURN and ESCAPE keys in dialog boxes.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method performs no processing on keystrokes that include the ALT or CONTROL modifiers.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Keys"&gt;&lt;/xref&gt;</ph> values that represents the key to process.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the keystroke was processed and consumed by the control; otherwise, <ph id="ph2">`false`</ph> to allow further processing.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Previews a keyboard message.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph>, passed by reference, that represents the window message to process.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message was processed by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Processes a mnemonic character.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>The character to process.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the character was processed as a mnemonic by the control; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Selects the next available control and makes it the active control.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to cycle forward through the controls in the ContainerControl; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a control is selected; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Removes an owned form from this form.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT">
          <source>The form assigned to the owner form remains owned until the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RemoveOwnedForm%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to removing the owned form from the list of owned form, this method also sets the owner form to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> representing the form to remove from the list of owned forms for this form.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Occurs when a form enters resizing mode.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ResizeBegin&gt;</ph> event is raised when the user begins to resize a form, typically by clicking and dragging one of the borders or the sizing grip located on the lower-right corner of the form.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT">
          <source>This action puts the form into a modal sizing loop until the resize operation is completed.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the following set of events occurs during a resize operation:</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT">
          <source>A single <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ResizeBegin&gt;</ph> event occurs as the form enters resizing mode.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more pairs of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> events occur as the form's <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Size%2A&gt;</ph> is modified.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT">
          <source>A single <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ResizeEnd&gt;</ph> event occurs as the form exits resizing mode.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT">
          <source>Just clicking without dragging on a border or resizing grip will generate the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ResizeBegin&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ResizeEnd&gt;</ph> events without any intermediate <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> event pairs.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ResizeBegin&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ResizeEnd&gt;</ph> pair of events is also raised when the user moves the form, typically by clicking and dragging on the caption bar.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT">
          <source>These events are not generated by programmatic manipulation of the form, for example by changing the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Size%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Occurs when a form exits resizing mode.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ResizeEnd&gt;</ph> event is raised when the user finishes resizing a form, typically by dragging one of the borders or the sizing grip located on the lower-right corner of the form, and then releasing it.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the resizing operation, see the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ResizeBegin&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ResizeEnd&gt;</ph> event is also generated after the user moves a form, typically by clicking and dragging on the caption bar.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is not generated by programmatic manipulation of the form, for example by changing the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Size%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Gets the location and size of the form in its normal window state.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RestoreBounds%2A&gt;</ph> property to track the user's window size and position preferences for the form in its normal window state.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should track both the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.WindowState%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.RestoreBounds%2A&gt;</ph> properties when tracking the user's window preferences.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RestoreBounds%2A&gt;</ph> property is valid only when the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.WindowState%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> class is not equal to <ph id="ph4">&lt;xref:System.Windows.Forms.FormWindowState.Normal&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Rectangle"&gt;&lt;/xref&gt;</ph> that contains the location and size of the form in the normal window state.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether right-to-left mirror placement is turned on.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> property is primarily useful for developing world-ready forms for worldwide audiences.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many forms are designed so that controls are laid out on a form in a left-to-right fashion.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT">
          <source>These forms are compatible with languages that follow this writing direction.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when you display the same forms to users of right-to-left languages, it is often preferable to reverse the order of the controls on the form.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT">
          <source>If both the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> properties are <ph id="ph3">`true`</ph>, mirroring will be turned on for the form, and control placement and text flow will be right-to-left.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> does not inherit.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want it to take effect for child controls, you must set it on each child control that you want mirrored.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT">
          <source>Owner draw is not supported when <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> is set to <ph id="ph2">`Yes`</ph>.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT">
          <source>The owner draw events will still occur, but the behavior of any code you author in these events is not defined.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Opacity%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Form.TransparencyKey%2A&gt;</ph>, and the painting events are not supported.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> properties cause the following Win32 API window styles to be set:</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> is set to <ph id="ph2">`Yes`</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> is set to <ph id="ph4">`true`</ph>, Windows Forms sets the <ph id="ph5">`WS_EX_LAYOUTRTL`</ph> window style, and removes the <ph id="ph6">`WS_EX_RIGHT`</ph> and <ph id="ph7">`WS_EX_RTLREADING`</ph> styles.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> is set to <ph id="ph2">`Yes`</ph> but <ph id="ph3">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> is set to <ph id="ph4">`No`</ph>, Windows Forms sets the <ph id="ph5">`WS_EX_RIGHT`</ph> and <ph id="ph6">`WS_EX_RTLREADING`</ph> window styles.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the value of this property raises the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RightToLeftLayoutChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about globalization issues, see <bpt id="p1">[</bpt>Best Practices for Developing World-Ready Applications<ept id="p1">](~/docs/standard/globalization-localization/best-practices-for-developing-world-ready-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if right-to-left mirror placement is turned on; otherwise, <ph id="ph2">`false`</ph> for standard child control placement.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>Occurs after the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.RightToLeftLayout"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> properties are typically used in developing World-Ready applications.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Scales the location, size, padding, and margin of a control.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The factor by which the height and width of the control are scaled.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.BoundsSpecified"&gt;&lt;/xref&gt;</ph> value that specifies the bounds of the control to use when defining its size and position.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>Performs scaling of the form.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Percentage to scale the form horizontally</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Percentage to scale the form vertically</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>Selects this form, and optionally selects the next or previous control.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>If set to true that the active control is changed</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>If directed is true, then this controls the direction in which focus is moved.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>If this is <ph id="ph1">`true`</ph>, then the next control is selected; otherwise, the previous control is selected.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Performs the work of setting the specified bounds of this control.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Left"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Top"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Width"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Height"&gt;&lt;/xref&gt;</ph> property value of the control.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.Windows.Forms.BoundsSpecified"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>Sets the client size of the form.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>This will adjust the bounds of the form to make the client size the requested size.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>Requested width of the client region.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Requested height of the client region.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Sets the bounds of the form in desktop coordinates.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT">
          <source>Desktop coordinates are based on the working area of the screen, which excludes the taskbar.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to set the position and size of your form on the desktop.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since desktop coordinates are based on the working area of the form, you can use this method to ensure that your form is completely visible on the desktop.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the form's location.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the form's location.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>The width of the form.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>The height of the form.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Sets the location of the form in desktop coordinates.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT">
          <source>Desktop coordinates are based on the working area of the screen, which excludes the taskbar.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to position your form on the desktop.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since desktop coordinates are based on the working area of the form, you can use this method to ensure that your form is completely visible on the desktop.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is intended to be used primarily for top-level forms; use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.LayoutMdi%2A&gt;</ph> method to position multiple-document interface (MDI) child forms.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>The x-coordinate of the form's location.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>The y-coordinate of the form's location.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>Sets the control to the specified visible state.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to make the control visible; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Shows the form with the specified owner to the user.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to display a non-modal form.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use this method, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Owner%2A&gt;</ph> property of the form is set to <ph id="ph2">`owner`</ph>.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT">
          <source>The non-modal form can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Owner%2A&gt;</ph> property to get information about the owning form.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method is identical to setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Owner%2A&gt;</ph> property of the non-modal and then calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Show&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT">
          <source>Showing the form is equivalent to setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Show%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property returns a value of <ph id="ph3">`true`</ph> until the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Hide%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Any object that implements <ph id="ph1">&lt;xref href="System.Windows.Forms.IWin32Window"&gt;&lt;/xref&gt;</ph> and represents the top-level window that will own this form.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>The form being shown is already visible.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>The form specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">owner</ph><ept id="p1">&lt;/code&gt;</ept> parameter is the same as the form being shown.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>The form being shown is disabled.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>The form being shown is not a top-level window.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>The form being shown as a dialog box is already a modal form.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>The current process is not running in user interactive mode (for more information, see <ph id="ph1">&lt;xref href="System.Windows.Forms.SystemInformation.UserInteractive"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Shows the form as a modal dialog box.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to display a modal dialog box in your application.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method is called, the code following it is not executed until after the dialog box is closed.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dialog box can be assigned one of the values of the <ph id="ph1">&lt;xref:System.Windows.Forms.DialogResult&gt;</ph> enumeration by assigning it to the <ph id="ph2">&lt;xref:System.Windows.Forms.Button.DialogResult%2A&gt;</ph> property of a <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> on the form or by setting the <ph id="ph4">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property of the form in code.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is then returned by this method.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this return value to determine how to process the actions that occurred in the dialog box.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the dialog box was closed and returned the <ph id="ph1">`DialogResult.Cancel`</ph> value through this method, you could prevent code following the call to <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A&gt;</ph> from executing.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is displayed as a modal dialog box, clicking the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button (the button with an X at the upper-right corner of the form) causes the form to be hidden and the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property to be set to <ph id="ph2">`DialogResult.Cancel`</ph>.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike non-modal forms, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A&gt;</ph> method is not called by the .NET Framework when the user clicks the close form button of a dialog box or sets the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead the form is hidden and can be shown again without creating a new instance of the dialog box.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because a form displayed as a dialog box is hidden instead of closed, you must call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;</ph> method of the form when the form is no longer needed by your application.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT">
          <source>This version of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A&gt;</ph> method does not specify a form or control as its owner.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this version is called, the currently active window is made the owner of the dialog box.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify a specific owner, use the other version of this method.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.DialogResult"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>The form being shown is already visible.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>The form being shown is disabled.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>The form being shown is not a top-level window.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>The form being shown as a dialog box is already a modal form.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>The current process is not running in user interactive mode (for more information, see <ph id="ph1">&lt;xref href="System.Windows.Forms.SystemInformation.UserInteractive"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>Shows the form as a modal dialog box with the specified owner.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to display a modal dialog box in your application.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this method is called, the code following it is not executed until after the dialog box is closed.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dialog box can be assigned one of the values of <ph id="ph1">&lt;xref:System.Windows.Forms.DialogResult&gt;</ph> by assigning it to the <ph id="ph2">&lt;xref:System.Windows.Forms.Button.DialogResult%2A&gt;</ph> property of a <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> on the form or by setting the <ph id="ph4">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property of the form in code.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is then returned by this method.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this return value to determine how to process the actions that occurred in the dialog box.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the dialog box was closed and returned the <ph id="ph1">`DialogResult.Cancel`</ph> value through this method, you could prevent code following the call to <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A&gt;</ph> from executing.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a form is displayed as a modal dialog box, clicking the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button (the button with an X at the upper-right corner of the form) causes the form to be hidden and the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property to be set to <ph id="ph2">`DialogResult.Cancel`</ph>.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike modeless forms, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A&gt;</ph> method is not called by the .NET Framework when the user clicks the close form button of a dialog box or sets the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.DialogResult%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead the form is hidden and can be shown again without creating a new instance of the dialog box.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because a form displayed as a dialog box is hidden instead of closed, you must call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;</ph> method of the form when the form is no longer needed by your application.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT">
          <source>This version of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A&gt;</ph> method allows you to specify a specific form that will own the dialog box that is shown.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>Any object that implements <ph id="ph1">&lt;xref href="System.Windows.Forms.IWin32Window"&gt;&lt;/xref&gt;</ph> that represents the top-level window that will own the modal dialog box.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Windows.Forms.DialogResult"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>The form specified in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">owner</ph><ept id="p1">&lt;/code&gt;</ept> parameter is the same as the form being shown.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>The form being shown is already visible.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>The form being shown is disabled.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>The form being shown is not a top-level window.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>The form being shown as a dialog box is already a modal form.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>The current process is not running in user interactive mode (for more information, see <ph id="ph1">&lt;xref href="System.Windows.Forms.SystemInformation.UserInteractive"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether an icon is displayed in the caption bar of the form.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowIcon%2A&gt;</ph> property contains a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the form's <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Icon%2A&gt;</ph> is displayed in the caption bar of the form.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ControlBox%2A&gt;</ph> property is <ph id="ph2">`false`</ph>, both the icon and control box will be suppressed.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowIcon%2A&gt;</ph> is <ph id="ph2">`false`</ph> when the primary form is shown, a generic icon will be displayed in the taskbar button for the application.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property has no effect if <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormBorderStyle%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.Forms.FormBorderStyle.FixedDialog&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the form does not display an icon.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the form displays an icon in the caption bar; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the form is displayed in the Windows taskbar.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a form is parented within another form, the parented form is not displayed in the Windows taskbar.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to prevent users from selecting your form through the Windows taskbar.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you display a Find and Replace tool window in your application, you might want to prevent that window from being selected through the Windows taskbar because you would need both the application's main window and the Find and Replace tool window displayed in order to process searches appropriately.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT">
          <source>You will often wish to use this property when creating a form with the <ph id="ph1">&lt;xref:System.Windows.Forms.FormBorderStyle.FixedToolWindow&gt;</ph> style.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.FormBorderStyle.FixedToolWindow&gt;</ph> style does not alone guarantee that a window will not appear in the taskbar.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to display the form in the Windows taskbar at run time; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Occurs whenever the form is first displayed.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Shown&gt;</ph> event is only raised the first time a form is displayed; subsequently minimizing, maximizing, restoring, hiding, showing, or invalidating and repainting will not raise this event.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the order of events of a form, see <bpt id="p1">[</bpt>Order of Events in Windows Forms<ept id="p1">](~/docs/framework/winforms/order-of-events-in-windows-forms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the window will be activated when it is shown.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property if you want to show a top-level window, but don't want to interrupt a user's work by taking the input focus away from the current window.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be an informational pop-up window or a floating window, such as a Tools palette in the Paint application.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this property is read-only, you can only change its value by overriding <ph id="ph1">&lt;xref:System.Windows.Forms.Form.ShowWithoutActivation%2A&gt;</ph> in your own form, and programming it to return <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your non-activated window needs to use UI controls, you should consider using the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStrip&gt;</ph> controls, such as <ph id="ph2">&lt;xref:System.Windows.Forms.ToolStripDropDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT">
          <source>These controls are windowless, and will not cause a window to activate when they are selected.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`True`</ph> if the window will not be activated when it is shown; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Gets or sets the size of the form.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property allows you to set both the height and width (in pixels) of the form at the same time instead of setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> properties individually.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to set the size and location of a form, you can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.DesktopBounds%2A&gt;</ph> property to size and locate the form based on desktop coordinates or use the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.Control&gt;</ph> class to set the size and location of the form based on screen coordinates.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT">
          <source>The maximum value of this property is limited by the resolution of the screen on which the form runs.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value cannot be greater than 12 pixels over each screen dimension (horizontal + 12 and vertical + 12).</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT">
          <source>On Pocket PC devices, you can create a resizable window by setting <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormBorderStyle%2A&gt;</ph> to <ph id="ph2">`None`</ph> and removing any <ph id="ph3">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT">
          <source>On SmartPhone devices, you can never resize a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> - it will always fill the entire screen.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Size"&gt;&lt;/xref&gt;</ph> that represents the size of the form.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>Gets or sets the style of the size grip to display in the lower-right corner of the form.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property enables you to determine when the sizing grip is displayed on the form.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set this property to display the sizing grip or have it automatically displayed based on the setting of the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormBorderStyle%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.SizeGripStyle"&gt;&lt;/xref&gt;</ph> that represents the style of the size grip to display.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Forms.SizeGripStyle.Auto"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>The value specified is outside the range of valid values.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>Gets or sets the starting position of the form at run time.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property enables you to set the starting position of the form when it is displayed at run time.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT">
          <source>The form’s position can be specified manually by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Location%2A&gt;</ph> property or use the default location specified by Windows.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also position the form to display in the center of the screen or in the center of its parent form for forms such as multiple-document interface (MDI) child forms.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property should be set before the form is shown.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set this property before you call the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Show%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A&gt;</ph> method or in your form's constructor.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.FormStartPosition"&gt;&lt;/xref&gt;</ph> that represents the starting position of the form.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>The value specified is outside the range of valid values.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>Gets or sets the tab order of the control within its container.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT">
          <source>Forms are not included in the tab order.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.TabIndex%2A&gt;</ph> property does nothing.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> containing the index of the control within the set of controls within its container that is included in the tab order.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.TabIndex"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the user can give the focus to the control using the TAB key; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.TabStop"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>Gets or sets the text associated with this control.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>The text associated with this control.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether to display the form as a top-level window.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT">
          <source>A top-level form is a window that has no parent form, or whose parent form is the desktop window.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT">
          <source>Top-level windows are typically used as the main form in an application.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to display the form as a top-level window; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>A Multiple-document interface (MDI) parent form must be a top-level window.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the form should be displayed as a topmost form.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT">
          <source>A topmost form is a form that overlaps all the other (non-topmost) forms even if it is not the active or foreground form.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT">
          <source>Topmost forms are always displayed at the highest point in the z-order of the windows on the desktop.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this property to create a form that is always displayed in your application, such as a Find and Replace tool window.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to display the form as a topmost form; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>Gets a string representing the current instance of the form.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>A string consisting of the fully qualified name of the form object's class, with the <ph id="ph1">&lt;xref href="System.Windows.Forms.Form.Text"&gt;&lt;/xref&gt;</ph> property of the form appended to the end.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>For example, if the form is derived from the class <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">MyForm</ph><ept id="p1">&lt;/code&gt;</ept> in the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">MyNamespace</ph><ept id="p2">&lt;/code&gt;</ept> namespace, and the <ph id="ph3">&lt;xref href="System.Windows.Forms.Form.Text"&gt;&lt;/xref&gt;</ph> property is set to <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">Hello, World</ph><ept id="p3">&lt;/code&gt;</ept>, this method will return <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">MyNamespace.MyForm, Text: Hello, World</ph><ept id="p4">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>Gets or sets the color that will represent transparent areas of the form.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.TransparencyKey%2A&gt;</ph> property is assigned a <ph id="ph2">&lt;xref:System.Drawing.Color&gt;</ph>, the areas of the form that have the same <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> will be displayed transparently.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any mouse actions, such as the click of the mouse, that are performed on the transparent areas of the form will be transferred to the windows below the transparent area.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the client region of a form is made transparent, clicking the mouse on that area would send the event notification of the click to any window that is below it.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the color assigned to the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.TransparencyKey%2A&gt;</ph> property is the same as any controls on the form, they also will be displayed transparently.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control on a form that has its <ph id="ph2">&lt;xref:System.Windows.Forms.Form.TransparencyKey%2A&gt;</ph> property set to <ph id="ph3">`SystemColors.Control`</ph>, the control will be displayed transparently unless the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> property of the <ph id="ph5">&lt;xref:System.Windows.Forms.Button&gt;</ph> control is changed to a different color.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is not supported when <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Drawing.Color"&gt;&lt;/xref&gt;</ph> that represents the color to display transparently on the form.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Updates which button is the default button.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.UpdateDefaultButton%2A&gt;</ph> method determines which button on the form raises its Click event when the user presses ENTER, according to the following priority:</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> property implements the <ph id="ph2">&lt;xref:System.Windows.Forms.IButtonControl&gt;</ph> interface, that control is the default button.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form.AcceptButton%2A&gt;</ph> property is the default button.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Causes all of the child controls within a control that support validation to validate their data.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if all of the children validated successfully; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>If called from the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Validating"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.Validated"&gt;&lt;/xref&gt;</ph> event handlers, this method will always return <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>Causes all of the child controls within a control that support validation to validate their data.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>Places restrictions on which controls have their <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Validating"&gt;&lt;/xref&gt;</ph> event raised.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if all of the children validated successfully; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>If called from the <ph id="ph1">&lt;xref href="System.Windows.Forms.Control.Validating"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.Forms.Control.Validated"&gt;&lt;/xref&gt;</ph> event handlers, this method will always return <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether form is minimized, maximized, or normal.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before a form is displayed, the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.WindowState%2A&gt;</ph> property is always set to <ph id="ph2">`FormWindowState.Normal`</ph>, regardless of its initial setting.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is reflected in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> property settings.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a form is hidden after it has been shown, these properties reflect the previous state until the form is shown again, regardless of any changes made to the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.WindowState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.FormWindowState"&gt;&lt;/xref&gt;</ph> that represents whether form is minimized, maximized, or normal.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`FormWindowState.Normal`</ph>.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>The value specified is outside the range of valid values.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>Processes Windows messages.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>The Windows <ph id="ph1">&lt;xref href="System.Windows.Forms.Message"&gt;&lt;/xref&gt;</ph> to process.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>