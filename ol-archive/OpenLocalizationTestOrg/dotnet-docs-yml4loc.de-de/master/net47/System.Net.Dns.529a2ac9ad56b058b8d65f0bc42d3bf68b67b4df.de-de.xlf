<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d44f6df08b26d98ea531778df16822fcc218201e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Net.Dns.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ec09f40edb951d78ada70e2d7459c689587a610</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3c894de9bb63a0846c63ce4b404bea3e4b49092</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides simple domain name resolution functionality.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns&gt;</ph> class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host information from the DNS query is returned in an instance of the <ph id="ph1">&lt;xref:System.Net.IPHostEntry&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the specified host has more than one entry in the DNS database, <ph id="ph1">&lt;xref:System.Net.IPHostEntry&gt;</ph> contains multiple IP addresses and aliases.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Asynchronously returns the Internet Protocol (IP) addresses for the specified host.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt;</ph> method asynchronously queries a DNS server for the IP addresses that are associated with a host name.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Dns.EndGetHostAddresses%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the method is invoked by the <ph id="ph1">`requestCallback`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not block until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>To block until the operation is complete, use the <ph id="ph1">&lt;xref:System.Net.Dns.GetHostAddresses%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The host name or IP address to resolve.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the operation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This object is passed to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">requestCallback</ph><ept id="p1">&lt;/code&gt;</ept> delegate when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> instance that references the asynchronous request.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> is greater than 255 characters.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous request for <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> information about the specified DNS host name.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Dns.BeginGetHostByName%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Dns.EndGetHostByName%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the method is invoked by the <ph id="ph1">`requestCallback`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not block until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>To block until the operation is complete, use the <ph id="ph1">&lt;xref:System.Net.Dns.GetHostByName%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The DNS name of the host.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the operation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This object is passed to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">requestCallback</ph><ept id="p1">&lt;/code&gt;</ept> delegate when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> instance that references the asynchronous request.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An error was encountered executing the DNS query.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Asynchronously resolves an IP address to an <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.BeginGetHostEntry%2A&gt;</ph> method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Dns.BeginGetHostEntry%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Dns.EndGetHostEntry%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the method is invoked by the <ph id="ph1">`requestCallback`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not block until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>To block until the operation is complete, use the <ph id="ph1">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The IP address to resolve.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the operation.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This object is passed to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">requestCallback</ph><ept id="p1">&lt;/code&gt;</ept> delegate when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> instance that references the asynchronous request.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">address</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>is an invalid IP address.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Asynchronously resolves a host name or IP address to an <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.BeginGetHostEntry%2A&gt;</ph> method queries a DNS server for the IP address that is associated with a host name or IP address.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Dns.BeginGetHostEntry%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Dns.EndGetHostEntry%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the method is invoked by the <ph id="ph1">`requestCallback`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not block until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>To block until the operation is complete, use the <ph id="ph1">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The host name or IP address to resolve.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the operation.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This object is passed to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">requestCallback</ph><ept id="p1">&lt;/code&gt;</ept> delegate when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> instance that references the asynchronous request.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> is greater than 255 characters.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous request to resolve a DNS host name or IP address to an <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Dns.BeginResolve%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Dns.EndResolve%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the method is invoked by the <ph id="ph1">`requestCallback`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not block until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>To block until the operation is complete, use the <ph id="ph1">&lt;xref:System.Net.Dns.Resolve%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The DNS name of the host.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the operation.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This object is passed to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">requestCallback</ph><ept id="p1">&lt;/code&gt;</ept> delegate when the operation is complete.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> instance that references the asynchronous request.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to access DNS information.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Ends an asynchronous request for DNS information.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt;</ph> method queries a DNS server for the IP addresses associated with a host name.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> instance returned by a call to the <ph id="ph2">&lt;xref href="System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> that holds the IP addresses for the host specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> parameter of <ph id="ph3">&lt;xref href="System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Ends an asynchronous request for DNS information.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>To perform this operation synchronously, use the <ph id="ph1">&lt;xref:System.Net.Dns.GetHostByName%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> instance that is returned by a call to the <ph id="ph2">&lt;xref href="System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> object that contains DNS information about a host.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Ends an asynchronous request for DNS information.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>To perform this operation synchronously, use a <ph id="ph1">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> instance returned by a call to an <ph id="ph2">&lt;xref href="System.Net.Dns.BeginGetHostEntry*"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Ends an asynchronous request for DNS information.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the operation is complete.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName&gt;</ph> is set to <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>To perform this operation synchronously, use the <ph id="ph1">&lt;xref:System.Net.Dns.Resolve%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> instance that is returned by a call to the <ph id="ph2">&lt;xref href="System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> object that contains DNS information about a host.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Returns the Internet Protocol (IP) addresses for the specified host.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.GetHostAddresses%2A&gt;</ph> method queries a DNS server for the IP addresses associated with a host name.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>IPv6 addresses are filtered from the results of the <ph id="ph1">&lt;xref:System.Net.Dns.GetHostAddresses%2A&gt;</ph> method if the local computer does not have IPv6 installed.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, it is possible to get back an empty <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> instance if only IPv6 results where available for the <ph id="ph2">`hostNameOrAddress`</ph>.parameter.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The host name or IP address to resolve.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> that holds the IP addresses for the host that is specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> is greater than 255 characters.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the <ph id="ph2">`hostNameOrAddress`</ph> has been resolved.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method queries a DNS server for the IP addresses associated with a host name.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The host name or IP address to resolve.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1.Result"&gt;&lt;/xref&gt;</ph> property on the task object returns an array of type <ph id="ph2">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> that holds the IP addresses for the host that is specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> is greater than 255 characters.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance from the specified <ph id="ph2">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">address</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance from an IP address.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>An IP address.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">address</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>is not a valid IP address.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Gets the DNS information for the specified DNS host name.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.GetHostByName%2A&gt;</ph> method queries the Internet DNS server for host information.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you pass an empty string as the host name, this method retrieves the standard host name for the local computer.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>For asynchronous access to DNS information, use the <ph id="ph1">&lt;xref:System.Net.Dns.BeginGetHostByName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Dns.EndGetHostByName%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The DNS name of the host.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> object that contains host information for the address specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">hostName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostName</ph><ept id="p1">&lt;/code&gt;</ept> is greater than 255 characters.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Resolves an IP address to an <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method queries a DNS server for the IP addresses and aliases associated with an IP address.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>IPv6 addresses are filtered from the results of the <ph id="ph1">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method if the local computer does not have IPv6 installed.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, it is possible to get back an empty <ph id="ph1">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance if only IPv6 results where available for the <ph id="ph2">`address`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>An IP address.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">address</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">address</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>is an invalid IP address.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Resolves a host name or IP address to an <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method queries a DNS server for the IP address that is associated with a host name or IP address.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the host name could not be found, the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND).</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception can be returned if the DNS server does not respond.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception is also returned if the <ph id="ph2">`hostNameOrAddress`</ph> parameter contains <ph id="ph3">&lt;xref:System.Net.IPAddress.Any&gt;</ph> or <ph id="ph4">&lt;xref:System.Net.IPAddress.IPv6Any&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method assumes that if an IP literal string is passed in the <ph id="ph2">`hostNameOrAddress`</ph> parameter that the application wants an <ph id="ph3">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned with all of the properties set.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>These properties include the <ph id="ph1">&lt;xref:System.Net.IPHostEntry.AddressList%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the implementation of the <ph id="ph1">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method exhibits the following behavior when an IP string literal is passed:</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method tries to parse the address.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`hostNameOrAddress`</ph> parameter contains a legal IP string literal, then the first phase succeeds.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>This result is set as the <ph id="ph1">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <ph id="ph1">&lt;xref:System.Net.IPHostEntry.AddressList%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an IPv4 string literal, all three steps above may succeed.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <ph id="ph1">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.GetHostAddresses%2A&gt;</ph> method has different behavior with respect to IP literals.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no attempt at a reverse lookup.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>IPv6 addresses are filtered from the results of the <ph id="ph1">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method if the local computer does not have IPv6 installed.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, it is possible to get back an empty <ph id="ph1">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance if only IPv6 results where available for the <ph id="ph2">`hostNameOrAddress`</ph>.parameter.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The host name or IP address to resolve.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> parameter is greater than 255 characters.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>An error was encountered when resolving the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> parameter is an invalid IP address.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Resolves an IP address to an <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the <ph id="ph2">`address`</ph> has been resolved.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method queries a DNS server for the IP addresses and aliases associated with an IP address.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, it is possible to get back an empty <ph id="ph1">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance if only IPv6 results where available for the <ph id="ph2">`address`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>An IP address.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1.Result"&gt;&lt;/xref&gt;</ph> property on the task object returns an <ph id="ph2">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">address</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">address</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>is an invalid IP address.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Resolves a host name or IP address to an <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the <ph id="ph2">`hostNameOrAddress`</ph> has been resolved.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method queries a DNS server for the IP address that is associated with a host name or IP address.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the host name could not be found, the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND).</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception can be returned if the DNS server does not respond.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> exception is also returned if the <ph id="ph2">`hostNameOrAddress`</ph> parameter contains <ph id="ph3">&lt;xref:System.Net.IPAddress.Any&gt;</ph> or <ph id="ph4">&lt;xref:System.Net.IPAddress.IPv6Any&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method assumes that if an IP literal string is passed in the <ph id="ph1">`hostNameOrAddress`</ph> parameter that the application wants an <ph id="ph2">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned with all of the properties set.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>These properties include the <ph id="ph1">&lt;xref:System.Net.IPHostEntry.AddressList%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the implementation of this method exhibits the following behavior when an IP string literal is passed:</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method tries to parse the address.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`hostNameOrAddress`</ph> parameter contains a legal IP string literal, then the first phase succeeds.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>This result is set as the <ph id="ph1">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <ph id="ph1">&lt;xref:System.Net.IPHostEntry.AddressList%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an IPv4 string literal, all three steps above may succeed.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <ph id="ph1">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.GetHostAddresses%2A&gt;</ph> method has different behavior with respect to IP literals.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no attempt at a reverse lookup.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, it is possible to get back an empty <ph id="ph1">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance if only IPv6 results where available for the <ph id="ph2">`hostNameOrAddress`</ph>.parameter.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The host name or IP address to resolve.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1.Result"&gt;&lt;/xref&gt;</ph> property on the task object returns an <ph id="ph2">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> parameter is greater than 255 characters.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>An error was encountered when resolving the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostNameOrAddress</ph><ept id="p1">&lt;/code&gt;</ept> parameter is an invalid IP address.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Gets the host name of the local computer.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>A string that contains the DNS host name of the local computer.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving the local host name.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Resolves a DNS host name or IP address to an <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.Dns.Resolve%2A&gt;</ph> method queries a DNS server for the IP address associated with a host name or IP address.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`hostName`</ph> is a DNS-style host name associated with multiple IP addresses, only the first IP address that resolves to that host name is returned.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member emits trace information when you enable network tracing in your application.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>A DNS-style host name or IP address.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPHostEntry"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">hostName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostName</ph><ept id="p1">&lt;/code&gt;</ept> is greater than 255 characters.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>An error is encountered when resolving <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">hostName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>