<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7943cfff6864c05230d78a915100938842f6bac5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Data.DataSourceProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf378c0b01fcce006809b6aaadeb36b65ac0aed3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92576392f40293a1447c7f280cb8dad4a31df63a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Common base class and contract for <ph id="ph1">&lt;xref href="System.Windows.Data.DataSourceProvider"&gt;&lt;/xref&gt;</ph> objects, which are factories that execute some queries to produce a single object or a list of objects that you can use as binding source objects.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider&gt;</ph> is a convenience wrapper around an existing data model; it does not replace any data model.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A data provider does not attempt to condense the complexity and versatility of a data model such as <ph id="ph1">[!INCLUDE[TLA2#tla_ado](~/includes/tla2sharptla-ado-md.md)]</ph> into one single object with a few properties.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider&gt;</ph> is an abstract class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use one of the derived classes, which are <ph id="ph1">&lt;xref:System.Windows.Data.XmlDataProvider&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.ObjectDataProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider&gt;</ph> is aware of the <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> threading and dispatcher model.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>It assumes the thread at creation time to be the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Events will get marshaled from a worker thread to the UI thread of the application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Data.DataSourceProvider"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is a protected constructor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Indicates that initialization of this object is about to begin; no implicit <ph id="ph1">&lt;xref href="System.Windows.Data.DataSourceProvider.Refresh"&gt;&lt;/xref&gt;</ph> occurs until the matched <ph id="ph2">&lt;xref href="System.Windows.Data.DataSourceProvider.EndInit"&gt;&lt;/xref&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, this base class calls this method when <ph id="ph1">&lt;xref href="System.Windows.Data.DataSourceProvider.InitialLoad"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.Data.DataSourceProvider.Refresh"&gt;&lt;/xref&gt;</ph> has been called.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The base class delays the call if refresh is deferred or initial load is disabled.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Notes to Implementers:<ept id="p1">**</ept> You can choose to execute the query on the same thread or on a background thread or using <ph id="ph1">`IsAsynchronous`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the query is complete, call <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.OnQueryFinished%2A&gt;</ph> to have the public properties updated.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets the underlying data object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider&gt;</ph> is used as the source of a binding, this is the resulting binding source object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> that is the underlying data object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Data.DataSourceProvider.Data"&gt;&lt;/xref&gt;</ph> property has a new value.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Notes to implementers:<ept id="p1">**</ept> Raise this event when a new data object becomes available on the <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.Data%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Enters a defer cycle that you can use to change properties of the provider and delay automatic refresh.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The typical usage is to create a <ph id="ph1">`using`</ph> scope with this method and then place multiple property changes within the scope.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This delays automatic refresh until the defer cycle is exited.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IDisposable"&gt;&lt;/xref&gt;</ph> object that you can use to dispose of the calling object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets or sets the current <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> object to the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread to use.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> object to the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread to use.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>By default, this is the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> object that is associated with the thread on which this instance was created.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Indicates that the initialization of this object has completed; this causes a <ph id="ph1">&lt;xref href="System.Windows.Data.DataSourceProvider.Refresh"&gt;&lt;/xref&gt;</ph> if no other <ph id="ph2">&lt;xref href="System.Windows.Data.DataSourceProvider.DeferRefresh"&gt;&lt;/xref&gt;</ph> is outstanding.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets the error of the last query operation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;xref href="System.Exception"&gt;&lt;/xref&gt;</ph> that is the error of the last query operation, or <ph id="ph2">`null`</ph> if there was no error.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Starts the initial query to the underlying data model.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The result is returned on the <ph id="ph1">&lt;xref href="System.Windows.Data.DataSourceProvider.Data"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is typically called by the binding engine when dependent data bindings are activated.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled%2A&gt;</ph> to <ph id="ph2">`false`</ph> to prevent or delay the automatic loading of data.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.InitialLoad%2A&gt;</ph> method can be called multiple times.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The provider ignores subsequent calls once it is busy executing the initial query; the provider does not restart an already running query when <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.InitialLoad%2A&gt;</ph> is called again.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the query finishes successfully, any <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.InitialLoad%2A&gt;</ph> call still does not re-query data.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.InitialLoad%2A&gt;</ph> operation is typically asynchronous, a <ph id="ph2">&lt;xref:System.Windows.Data.DataSourceProvider.DataChanged&gt;</ph> event is raised when the <ph id="ph3">&lt;xref:System.Windows.Data.DataSourceProvider.Data%2A&gt;</ph> property assumed a new value.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application calls <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.Refresh%2A&gt;</ph> to cause a refresh of the data.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether to prevent or delay the automatic loading of data.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically the <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider&gt;</ph> runs its query and sets its <ph id="ph2">&lt;xref:System.Windows.Data.DataSourceProvider.Data%2A&gt;</ph> property the first time it is used by a binding or a <ph id="ph3">&lt;xref:System.Windows.Data.CollectionViewSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can omit this step by setting the <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the application must explicitly call <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.Refresh%2A&gt;</ph> to cause the provider to obtain its data.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> to prevent or delay the automatic loading of data; otherwise, <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether there is an outstanding <ph id="ph1">&lt;xref href="System.Windows.Data.DataSourceProvider.DeferRefresh"&gt;&lt;/xref&gt;</ph> in use.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Notes to implementers:<ept id="p1">**</ept> To get the best use out of refresh deferral, do not call <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.Refresh%2A&gt;</ph> when this property is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if there is an outstanding <ph id="ph2">&lt;xref href="System.Windows.Data.DataSourceProvider.DeferRefresh"&gt;&lt;/xref&gt;</ph> in use; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Data.DataSourceProvider.PropertyChanged"&gt;&lt;/xref&gt;</ph> event with the provided arguments.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Arguments of the event being raised.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Derived classes call this method to indicate that a query has finished.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>This callback can be called from any thread.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation marshals back the result to the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread before setting any of the public properties and before raising any events.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The data that is the result of the query.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Derived classes call this method to indicate that a query has finished.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>This callback can be called from any thread.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation marshals back the result to the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread before setting any of the public properties and before raising any events.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The data that is the result of the query.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The error that occurred while running the query.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This value is <ph id="ph1">`null`</ph> if there is no error.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Optional delegate that is used to execute completion work on the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread, for example, to set additional properties.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Optional arguments to send as a parameter with the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">completionWork</ph><ept id="p1">&lt;/code&gt;</ept> delegate.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Occurs when a property value changes.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Initiates a refresh operation to the underlying data model.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The result is returned on the <ph id="ph1">&lt;xref href="System.Windows.Data.DataSourceProvider.Data"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>A refresh operation is typically asynchronous, a <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.DataChanged&gt;</ph> event is raised when the <ph id="ph2">&lt;xref:System.Windows.Data.DataSourceProvider.Data%2A&gt;</ph> property assumed a new value.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the refresh operation fails, the <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.Data%2A&gt;</ph> property is set to <ph id="ph2">`null`</ph>; the <ph id="ph3">&lt;xref:System.Windows.Data.DataSourceProvider.Error%2A&gt;</ph> property is set with the error exception.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application can call <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.Refresh%2A&gt;</ph> while a previous refresh is still underway.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Data.DataSourceProvider.Refresh%2A&gt;</ph> twice raises the <ph id="ph2">&lt;xref:System.Windows.Data.DataSourceProvider.DataChanged&gt;</ph> event twice.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This member supports the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This member supports the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure and is not intended to be used directly from your code.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>