<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36c047eda893e96e3aacd00a6238028d06a5ce39</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7970511788f49cd7deac9d4ddbeb4ee2425b2dc4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f92caded926e7ff3a79f0609ce80ac807e6a392</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the interface for a random access iterator.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Random access iterators support the following operations: moving forward one position by calling <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">operator++</ph><ept id="p1">&lt;/code&gt;</ept>, moving backward one position by calling <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">operator--</ph><ept id="p2">&lt;/code&gt;</ept>, accessing an element by using <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">operator[]</ph><ept id="p3">&lt;/code&gt;</ept>, and accessing an element by using pointer arithmetic.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A valid iterator that points to the same container as the current iterator.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">_Right</ph><ept id="p1">&lt;/code&gt;</ept> is pointing to.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This number is negative if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">_Right</ph><ept id="p1">&lt;/code&gt;</ept> points to an element that is before the element that the current iterator points to.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Determines whether the current iterator is pointing to an element in the container that precedes the element that the given iterator points to.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A valid iterator that points to the same container as the current iterator.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current iterator is pointing to an element that comes before the element that <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">_Right</ph><ept id="p1">&lt;/code&gt;</ept> is pointing to; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Moves the iterator by the given number of elements.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The number of elements to traverse.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To move the iterator forward, specify a positive number.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To move the iterator backward, use a negative number.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The actual number of elements traversed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This number will differ from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">_Offset</ph><ept id="p1">&lt;/code&gt;</ept> if the beginning or end of the container is reached before iterating the desired number of elements.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>