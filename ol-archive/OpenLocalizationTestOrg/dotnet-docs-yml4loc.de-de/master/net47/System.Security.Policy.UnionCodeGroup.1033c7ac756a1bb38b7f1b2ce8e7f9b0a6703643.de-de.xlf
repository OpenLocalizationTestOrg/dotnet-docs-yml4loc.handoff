<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0a9cf191af76e5d2577acb2621286e01e4abfe2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Security.Policy.UnionCodeGroup.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d29ff75e1769cb03af304531d1f9c2cd33080c8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">409cbef0f454b0c422bff706f9a6db9bdd82812b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a code group whose policy statement is the union of the current code group's policy statement and the policy statement of all its matching child code groups.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code groups are the building blocks of code access security policy.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each policy level consists of a root code group that can have child code groups (and so on), forming a tree.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each code group has a membership condition that determines if a given assembly belongs to it or not, based on the evidence for that assembly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only code groups whose membership conditions match a given assembly and their child code groups apply policy.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.Policy.UnionCodeGroup&gt;</ph> is the most common type of code group; the policy statement of all matching child code groups (and by extension their child code groups) are combined with the permission set of the matching parent code group.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, if its membership condition matches, this code group forms the union of its policy statement and those of all its child code groups that also match the evidence.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.Policy.UnionCodeGroup&gt;</ph> code groups are the code groups created by the CASPOL utility (see <bpt id="p1">[</bpt>Caspol.exe (Code Access Security Policy Tool)<ept id="p1">](~/docs/framework/tools/caspol-exe-code-access-security-policy-tool.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.Policy.UnionCodeGroup"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates a basic code group and should be called from the constructors of custom code groups.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add child code groups by using the <ph id="ph1">&lt;xref:System.Security.Policy.CodeGroup.AddChild%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A membership condition that tests evidence to determine whether this code group applies policy.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">membershipCondition</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not valid.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The type of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">policy</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not valid.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Makes a deep copy of the current code group.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method makes a deep copy of the code group, so that copies of all objects the code group contains are also made.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An equivalent copy of the current code group, including its membership conditions and child code groups.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the merge logic.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Always the string "Union".</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Resolves policy for the code group and its descendants for a set of evidence.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a match, this method returns a policy statement for the code group, including evaluation of child code groups.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For union code groups, all child code groups whose membership condition match the evidence are also resolved, and all resulting policy statements form a union with the policy statement of the parent union code group.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each child code group type determines how its child groups are applied, depending on how their respective <ph id="ph1">&lt;xref:System.Security.Policy.UnionCodeGroup.Resolve%2A&gt;</ph> methods work.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework security system uses <ph id="ph1">&lt;xref:System.Security.Policy.UnionCodeGroup.Resolve%2A&gt;</ph> on the policy levels to determine which permissions to grant to loaded code from the resulting policy statements and the code request on the assembly.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the membership condition does not match the specified evidence, this method returns <ph id="ph1">`null`</ph>; otherwise, it sets the permission set to be returned (P) equal to the code group's policy statement, and then continues.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each child code group, the method resolves the code group with the same evidence; if the result is not <ph id="ph1">`null`</ph>, it sets P equal to the union of P and the child code group's policy statement.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>It then returns P, which is now the union of the current code group's policy statement and all child group policy statements.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The evidence for the assembly.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A policy statement consisting of the permissions granted by the code group with optional attributes, or <ph id="ph1">`null`</ph> if the code group does not apply (the membership condition does not match the specified evidence).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">evidence</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>More than one code group (including the parent code group and any child code groups) is marked <ph id="ph1">&lt;xref href="System.Security.Policy.PolicyStatementAttribute.Exclusive"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Resolves matching code groups.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is a match, this method returns a root code group.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code group that is returned may contain child code groups, which, in turn, may also contain child code groups, so the return value reflects the complete set of code groups that were matched by the evidence provided.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The evidence for the assembly.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The complete set of code groups that were matched by the evidence.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">evidence</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>