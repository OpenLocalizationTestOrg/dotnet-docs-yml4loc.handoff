<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0043eb116b022fc770f4dbf3257897c3851df0b4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xaml.AmbientPropertyValue.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7ed2f1cb79249aaa48a5c47b45b8b8b2dcfe9e0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e750f467f0a23cdb4de2dd23c53a29e9edf819a7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reports information about an ambient property, as part of an <ph id="ph1">&lt;xref href="System.Xaml.IAmbientProvider"&gt;&lt;/xref&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.AmbientPropertyValue&gt;</ph> represents an information item that is returned by calling an <ph id="ph2">&lt;xref:System.Xaml.IAmbientProvider&gt;</ph> service method.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`GetAll`</ph> methods return enumerations or arrays of <ph id="ph2">&lt;xref:System.Xaml.AmbientPropertyValue&gt;</ph> items; the <ph id="ph3">`GetFirst`</ph> methods return a single <ph id="ph4">&lt;xref:System.Xaml.AmbientPropertyValue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>About Ambient Properties</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ambient property is a property whose property value should be available to value converter usage in the XAML node structure and to the object graph underneath it.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ambient concept  is relevant for a XAML processor during the object-writing phase of the load path or the serialization phase of a save path.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type can also be attributed as ambient.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, all properties that use the attributed type are reported as ambient.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the load path case, the ambient property value might influence the object graph produced value of other properties that exist underneath it in a XAML node structure.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When processed as a XAML node stream, the ambient concept implies that the ambient property value must be available to type converters and markup extensions from <ph id="ph1">`StartObject`</ph> to <ph id="ph2">`EndObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, a type converter or markup extension that is used for the save path can look up the ambient property and its value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the XAML that is produced is a better round-trip representation.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>By its language definition, XAML does not specify the order in which members of an object must be processed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, any ambient property value must be processed first by the XAML reader so that the type converter and markup extension usage that are contained in other properties can access it through the <ph id="ph1">&lt;xref:System.Xaml.IAmbientProvider&gt;</ph> service.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> is a similar concept that also influences XAML node-processing order.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> can only be used for peer member and node relationships; it cannot influence all descendants.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> directly influences object graph property setting, whereas the ambient technique relies on type converters or markup extensions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the ambient technique, there must also be a specific type converter or markup extension definition.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is up to each type converter or markup extension to determine how the ambient property value should be interpreted and applied to the object graph location where the type converter or markup extension is used.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ambient property scenario that is illustrated in the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> feature set is <ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=fullName&gt;</ph>, which can qualify the necessary property name lookups for other values.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=fullName&gt;</ph> value qualifies the <ph id="ph2">&lt;xref:System.Windows.Setter.Property%2A?displayProperty=fullName&gt;</ph> values in the XAML nodes underneath it.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Setter.Property%2A?displayProperty=fullName&gt;</ph> uses the type converter behavior for a <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior accesses the ambient <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=fullName&gt;</ph> value by querying <ph id="ph2">&lt;xref:System.Xaml.IAmbientProvider.GetFirstAmbientValue%2A&gt;</ph> from a service context that is available to type converters and markup extensions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.AmbientPropertyValue"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The identifier that represents the ambient property.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The value to report.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets the XAML type system identifier (<ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>) that represents the ambient property.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The identifier that represents the ambient property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets the value of the ambient property.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The value of the ambient property.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>