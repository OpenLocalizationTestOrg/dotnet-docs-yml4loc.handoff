<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d839a61308d23f73204b218c730149020f3620a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xaml.Schema.XamlValueConverter-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1f1e61665063bee4f1bd22434decc9f377f86c2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">030fe11c55d1b5918bcacc683f05bfd971a04838</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a common API surface for techniques that generate initialization or serialization values for XAML based on input other than the eventual destination type.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This includes markup extensions and type converters.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instances of this type are returned by methods of the XAML schema API such as <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generic implementation of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> provides indirection for the System.Xaml assembly so that the basic XAML schema and type system does not have to take dependencies on different value conversion techniques that are typically implementations in other assemblies.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> can be constructed with a null implementation type, but such a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> will return <ph id="ph3">`null`</ph> for <ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Constructor signatures for <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> use a <ph id="ph2">`converterType`</ph> parameter that references the specific type that implements the conversion behavior.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a properly functioning <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> (one that has a nonnull <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>), the <ph id="ph3">`converterType`</ph> type is expected to be castable to the <ph id="ph4">`TConverterBase`</ph> constraint.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>A mismatch condition is not enforced by constructors, but might produce an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> at run time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The CLR base class for the particular converter that this <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> represents.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Typically this is one of the following: <ph id="ph1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;&lt;/xref&gt;</ph>; <ph id="ph2">&lt;xref href="System.Windows.Markup.MarkupExtension"&gt;&lt;/xref&gt;</ph>; <ph id="ph3">&lt;xref href="System.Windows.Markup.ValueSerializer"&gt;&lt;/xref&gt;</ph>;</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> class, based on a converter implementing <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> and the target/destination type of the <ph id="ph3">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that implements the converter behavior.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The target/destination <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> of the <ph id="ph2">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> class, based on a converter implementing <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> the target/destination type of the <ph id="ph3">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>, and a string name.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`name`</ph> is provided as <ph id="ph2">`null`</ph>, a default name is generated based on either <ph id="ph3">`converterType`</ph> or <ph id="ph4">`targetType`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that implements the converter behavior.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The target/destination <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> of the <ph id="ph2">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The string name.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>All three parameters are <ph id="ph1">`null`</ph> (at least one is required to be non-null).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Gets a created instance of the converter implementation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> calls the protected default implementation of <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph> to get its value (and might be accessing a stored value if <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> was already called once on this <ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> can be constructed with a null implementation type, but such a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> will return <ph id="ph3">`null`</ph> for <ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A created instance of the converter implementation, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> for the class that implements the converter behavior.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> for the class that implements the converter behavior.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Returns an instance of the converter implementation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph> is protected.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get a converter instance with a public API, get the value of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> can be constructed with a null implementation type, but such a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> will return <ph id="ph3">`null`</ph> for <ph id="ph4">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.CreateInstance%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An instance of the converter implementation, or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Converter did not implement the correct base type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Determines whether this instance of <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> and a specified object, which must also be a <ph id="ph2">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> object, have the same value.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The object to compare.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> is a <ph id="ph3">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> and its value is the same as this instance; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Determines whether this instance of <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> and another <ph id="ph2">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> object have the same value.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> to compare.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">other</ph><ept id="p1">&lt;/code&gt;</ept> is a <ph id="ph3">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> and its value is the same as this instance; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An integer hash code.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets a string name for this <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property is established by one of the following:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>A constructor parameter (see <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.%23ctor%2A?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Internal logic that processes other constructor inputs and forms a string.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A string name for this <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> objects have the same value.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>, or <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>, or <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">converter1</ph><ept id="p1">&lt;/code&gt;</ept> is the same as the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">converter2</ph><ept id="p2">&lt;/code&gt;</ept>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> objects have different values.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>, or <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>, or <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">converter1</ph><ept id="p1">&lt;/code&gt;</ept> is different than the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">converter2</ph><ept id="p2">&lt;/code&gt;</ept>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the target/destination <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> of the <ph id="ph2">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The target/destination <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> of the <ph id="ph2">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that represents this <ph id="ph2">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ToString%2A&gt;</ph> value is based on <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that represents this <ph id="ph2">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>