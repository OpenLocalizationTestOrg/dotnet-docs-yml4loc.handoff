<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">154fa46a5ce8ae51948d162a433e0d7dc1d8979d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.FrameworkPropertyMetadata.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbde809e00a17f522eacd1eb2af8a1ee13a21e1c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11046a3f84e71af01749ea8342d451f88546bb86</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class derives from <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> (through <ph id="ph2">&lt;xref:System.Windows.UIPropertyMetadata&gt;</ph>) .</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For most WPF framework-level application development purposes, <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> is the type used for dependency property metadata, rather than the base metadata types <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.UIPropertyMetadata&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is true both for existing dependency properties and for most custom dependency property scenarios.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The members declared by this class that supplement the <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Several constructor signatures for creating a <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> instance take a <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</ph> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> is constructed.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class is not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This signature initializes all values of <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A&gt;</ph> to their property defaults.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> will be <ph id="ph2">`null`</ph>, and the various <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> Boolean properties will be <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;&lt;/xref&gt;</ph> class with the specified default value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> has special meaning in the property system, and cannot be used as a dependency property default value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;&lt;/xref&gt;</ph> class with the specified <ph id="ph2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;&lt;/xref&gt;</ph> callback.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;&lt;/xref&gt;</ph> class with the provided default value and framework-level metadata options.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> has special meaning in the property system, and cannot be used as a dependency property default value.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> properties that match that <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</ph> flag's name to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;&lt;/xref&gt;</ph> values).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;&lt;/xref&gt;</ph> class with the provided default value and specified <ph id="ph2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;&lt;/xref&gt;</ph> callback.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> has special meaning in the property system, and cannot be used as a dependency property default value.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;&lt;/xref&gt;</ph> class with the specified callbacks.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation calls a base initializer and then adds the <ph id="ph1">`coerceValueCallback`</ph> by setting the property on the base instance.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation will be called whenever the property system calls <ph id="ph1">&lt;xref href="System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"&gt;&lt;/xref&gt;</ph> for this dependency property.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;&lt;/xref&gt;</ph> class with the provided default value and framework metadata options, and specified <ph id="ph2">&lt;xref href="System.Windows.PropertyChangedCallback"&gt;&lt;/xref&gt;</ph> callback.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> has special meaning in the property system, and cannot be used as a dependency property default value.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> properties that match that <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</ph> flag's name to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a value of a specific type.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;&lt;/xref&gt;</ph> values).</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;&lt;/xref&gt;</ph> class with the provided default value and specified callbacks.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> has special meaning in the property system, and cannot be used as a dependency property default value.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls <ph id="ph1">&lt;xref href="System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"&gt;&lt;/xref&gt;</ph> for this dependency property.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;&lt;/xref&gt;</ph> class with the provided default value and framework metadata options, and specified callbacks.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> has special meaning in the property system, and cannot be used as a dependency property default value.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> properties that match that <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</ph> flag's name to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;&lt;/xref&gt;</ph> values).</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls <ph id="ph1">&lt;xref href="System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"&gt;&lt;/xref&gt;</ph> against this property.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;&lt;/xref&gt;</ph> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> has special meaning in the property system, and cannot be used as a dependency property default value.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`isAnimationProhibited`</ph> parameter sets the initial value of the <ph id="ph2">&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;</ph> property declared by the immediate base <ph id="ph3">&lt;xref:System.Windows.UIPropertyMetadata&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> properties that match that <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</ph> flag's name to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;&lt;/xref&gt;</ph> values).</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls <ph id="ph1">&lt;xref href="System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"&gt;&lt;/xref&gt;</ph> on this dependency property.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to prevent the property system from animating the property that this metadata is applied to.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> to permit animating the property.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadata"&gt;&lt;/xref&gt;</ph> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value provided for <ph id="ph1">`defaultValue`</ph> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> has special meaning in the property system, and cannot be used as a dependency property default value.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`isAnimationProhibited`</ph> parameter sets the initial value of the <ph id="ph2">&lt;xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A&gt;</ph> property declared by the immediate base <ph id="ph3">&lt;xref:System.Windows.UIPropertyMetadata&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the update source behavior for bindings, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](~/docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values marked as set flags in the <ph id="ph1">`flags`</ph> parameter will set the Boolean value of <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> properties that match that <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</ph> flag's name to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The default value of the dependency property, usually provided as a specific type.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The metadata option flags (a combination of <ph id="ph1">&lt;xref href="System.Windows.FrameworkPropertyMetadataOptions"&gt;&lt;/xref&gt;</ph> values).</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A reference to a handler implementation that will be called whenever the property system calls <ph id="ph1">&lt;xref href="System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"&gt;&lt;/xref&gt;</ph> against this property.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to prevent the property system from animating the property that this metadata is applied to.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;&lt;/xref&gt;</ph> to use when bindings for this property are applied that have their <ph id="ph2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;&lt;/xref&gt;</ph> set to <ph id="ph3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger.Default"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;defaultValue&lt;/code&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> include an implementation of <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;</ph> that monitors effective value changes to all dependency properties that exist on an element.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of that logic, dependency properties that change effective value and have metadata with <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;</ph> set to <ph id="ph2">`true`</ph> will initiate a deferred request to invalidate the visuals for that element (a call to <ph id="ph3">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;</ph> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom <ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> implementations might choose to have similar behavior for dependency property changes where <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are either not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> include an implementation of <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;</ph> that monitors effective value changes to all dependency properties that exist on an element.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of that logic, dependency properties that change effective value and have metadata with <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph> set to <ph id="ph2">`true`</ph> will initiate a deferred request to invalidate the visuals for that element.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom <ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> implementations might choose to have similar behavior for dependency property changes where <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> include an implementation of <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;</ph> that monitors effective value changes to all dependency properties that exist on an element.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of that logic, dependency properties that change effective value and have metadata with <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph> set to <ph id="ph2">`true`</ph> will initiate a deferred request to invalidate the visuals for the parent element.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, you do not need to report changes of a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> property to a parent element using <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph> because the element itself would already have its own <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;</ph> as <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph> is sometimes used for a <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> derived class.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the child element sets a property, but a <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> derived class does not control its own rendering.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rendering is handled by a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> parent element that serves as the content host.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, a change to the value of the <ph id="ph1">&lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;</ph> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the <ph id="ph1">&lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt;</ph> attached property has metadata where <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another example is <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Padding%2A&gt;</ph>; when this property changes, the parent might change the positioning of the child, depending on available space.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom <ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> implementations might choose to have similar behavior for dependency property changes where <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on any derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> include an implementation of <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;</ph> that monitors effective value changes to all dependency properties that exist on an element.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of that logic, dependency properties that change effective value and have metadata with <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</ph> set to <ph id="ph2">`true`</ph> will initiate a deferred request to invalidate the visuals for the parent element.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</ph> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, you do not need to report changes of a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> property to a parent element using <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</ph> because the element itself would already have its own <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph> as <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</ph> is sometimes used for a <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> derived class.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the child element sets a property, but a <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> derived class does not control its own rendering.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rendering is handled by a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> parent element that serves as the content host.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, a change to the value of the <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;</ph> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName&gt;</ph> property has metadata where <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Content host elements also frequently look for changes in dependency properties where <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</ph> is <ph id="ph2">`true`</ph>, as part of content host rendering logic.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> element must respond to certain changes within text that might require that the bounding box of the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> itself be changed.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom <ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> implementations might choose to have similar behavior for dependency property changes where <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on any derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <ph id="ph2">`false`</ph>.The default is <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> include an implementation of <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.OnPropertyChanged%2A&gt;</ph> that monitors effective value changes to all dependency properties that exist on an element.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>As part of that logic, dependency properties that change effective value and have metadata with <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt;</ph> set to <ph id="ph2">`true`</ph> will initiate a deferred request to invalidate the visuals for that element.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt;</ph> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom <ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> implementations might choose to have similar behavior for dependency property changes where <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A&gt;</ph> is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on any derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the dependency property on which this metadata exists affects rendering; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the property binds two-way by default.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>In absence of this property being <ph id="ph1">`true`</ph>, binding updates are one-way by default, based on the default behavior of the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> constructors or equivalent <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>In existing elements, you will usually find this property set to <ph id="ph1">`true`</ph> in metadata for dependency properties that both report state and are modifiable by user action, for example <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property only reports the default binding update characteristics of the dependency property in general.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any binding set to this property on an instance can locally set the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;</ph> property of the binding and change this default.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on any derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the dependency property on which this metadata exists binds two-way by default; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Gets or sets the default for <ph id="ph1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;&lt;/xref&gt;</ph> to use when bindings for the property with this metadata are applied, which have their <ph id="ph2">&lt;xref href="System.Windows.Data.UpdateSourceTrigger"&gt;&lt;/xref&gt;</ph> set to <ph id="ph3">&lt;xref href="System.Windows.Data.UpdateSourceTrigger.Default"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A value of the enumeration, other than <ph id="ph1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger.Default"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>This property is set to <ph id="ph1">&lt;xref href="System.Windows.Data.UpdateSourceTrigger.Default"&gt;&lt;/xref&gt;</ph>; the value you set is supposed to become the default when requested by bindings.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the value of the dependency property is inheritable.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property value inheritance is a feature of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property value inheritance is not enabled by default, and enabling it does have some performance implications.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Property Value Inheritance<ept id="p1">](~/docs/framework/wpf/advanced/property-value-inheritance.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always use <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</ph> to register properties where you specify <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> in the metadata.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the property value is inheritable; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether data binding is supported for the dependency property.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property reports <ph id="ph1">`false`</ph> for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;</ph>, is set to <ph id="ph3">`true`</ph> in this metadata.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is exposed as a convenience so that callers do not have to check both <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable&gt;</ph> (note the slight naming convention difference versus <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if data binding is supported on the dependency property to which this metadata applies; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the dependency property supports data binding.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that this metadata property is set to <ph id="ph1">`true`</ph> specifically for properties that should not support data binding, despite being read-write properties.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A&gt;</ph>, this does not merely change a default that can later be changed on a specific binding.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property <ph id="ph1">`true`</ph> in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report <ph id="ph1">`false`</ph> for <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because properties that correspond to a <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadataOptions&gt;</ph> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine whether a given dependency property permits data binding, you should usually check <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A&gt;</ph> is a convenience for checking both <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A&gt;</ph> as a single operation, yielding the expected result.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the property does not support data binding; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Enables a merge of the source metadata with base metadata.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used internally when metadata is being overridden.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The base metadata to merge.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The dependency property this metadata is being applied to.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any mutability of the data structure of a <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph> instance should be marked as immutable when this method is invoked.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The dependency property to which the metadata has been applied.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The type associated with this metadata if this is type-specific metadata.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>If this is default metadata, this value can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>The canonical example of such a boundary is the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>, where the <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph> content might get reloaded independently of the existence of the <ph id="ph3">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>The desired property system behavior is that property value inheritance should not traverse into the contents of the <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>, because these contents might be elements that the application hosting the frame does not own or control.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying metadata with <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A&gt;</ph> set to <ph id="ph2">`true`</ph>, as well as specifying <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> as <ph id="ph4">`true`</ph>, will cause the property on which the metadata is applied to be inheritable even across the <ph id="ph5">&lt;xref:System.Windows.Controls.Frame&gt;</ph> boundary or similar boundaries.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the property value inheritance should span across certain content boundaries; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this option to <ph id="ph1">`true`</ph> is useful for optimizing performance of the WPF framework level layout system implementation.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>Properties on derived classes of <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> are typically defined in the object model as read-write.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is so they can be adjusted after initialization of the instance.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, once the metadata is consumed as part of a call to <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to set this property after <ph id="ph1">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id="ph2">`true`</ph> on this metadata instance will raise an exception.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>Members of this class are not typically used in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if changes to sub-property values do not affect rendering if changed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>