<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02c21bf83448995c12d9a049b9744581daeb4949</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.Linq.XNamespace.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b61c65722634009601f9de2a2386a152eafe9b35</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0504374f48d9257606d74e667baa8fec26dec14</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an XML namespace.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class represents the XML construct of namespaces.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> contains an <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even if an element is not in a namespace, the element's <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> still contains a namespace, <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=fullName&gt;</ph> property is guaranteed to not be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating an XNamespace Object</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most common way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object is to simply assign a string to it.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then combine the namespace with a local name by using the override of the addition operator.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows this idiom:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in Visual Basic, you would typically declare a global default namespace, as follows:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assigning a string to an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> uses the implicit conversion from <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>How to: Create a Document with Namespaces (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept> for more information and examples.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>Namespaces in Visual Basic (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept> for more information on using namespaces in <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controlling Namespace Prefixes</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.Xmlns%2A&gt;</ph>, and the name of the attribute is the namespace prefix.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the attribute is the URI of the namespace.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows this idiom:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Control Namespace Prefixes (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating a Default Namespace</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The special attribute with the name of "xmlns" itself is not in any namespace.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the attribute is the namespace URI.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>XNamespace Atomization</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects are guaranteed to be atomized; that is, if two <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects have exactly the same URI, they will share the same instance.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equality and comparison operators are provided explicitly for this purpose.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using Expanded Names</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another way to specify a namespace and a local name is to use an expanded name in the form <ph id="ph1">`{namespace}name`</ph>:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This approach has performance implications.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time that you pass a string that contains an expanded name to <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph>, it must parse the name, find the atomized namespace, and find the atomized name.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>This process takes CPU time.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>If performance is important, you may want to use a different approach.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Determines whether the specified <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> is equal to the current <ph id="ph2">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For two <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objects to be equal, they must have the same URI.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> to compare to the current <ph id="ph2">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> that indicates whether the specified <ph id="ph2">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> is equal to the current <ph id="ph3">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets an <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> for the specified Uniform Resource Identifier (URI).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that contains a namespace URI.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> created from the specified URI.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets a hash code for this <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method serves as a hash function for <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.GetHashCode%2A&gt;</ph> in hashing algorithms and data structures like a hash table.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> that contains the hash code for the <ph id="ph2">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">&lt;xref href="System.Xml.Linq.XName"&gt;&lt;/xref&gt;</ph> object created from this <ph id="ph2">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> and the specified local name.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that contains a local name.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Linq.XName"&gt;&lt;/xref&gt;</ph> created from this <ph id="ph2">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> and the specified local name.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Gets the Uniform Resource Identifier (URI) of this namespace.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that contains the URI of the namespace.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> object that corresponds to no namespace.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> that corresponds to no namespace.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Combines an <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> object with a local name to create an <ph id="ph2">&lt;xref href="System.Xml.Linq.XName"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>This eliminates syntactic noise in the code that creates XML trees.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is ?qualifyHint=True&amp;autoUpgrade=False</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> that contains the namespace.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that contains the local name.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref href="System.Xml.Linq.XName"&gt;&lt;/xref&gt;</ph> constructed from the namespace and local name.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> are equal.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are provided to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and string (for example, <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>).</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is ?qualifyHint=True&amp;autoUpgrade=False</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> to compare.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> to compare.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> that indicates whether <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">right</ph><ept id="p2">&lt;/code&gt;</ept> are equal.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> are not equal.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are provided to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and string (for example, <ph id="ph4">`element.Name.Namespace == "http://www.adventure-works.com"`</ph>).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is ?qualifyHint=True&amp;autoUpgrade=False</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> to compare.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> to compare.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> that indicates whether <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">left</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">right</ph><ept id="p2">&lt;/code&gt;</ept> are not equal.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Returns the URI of this <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The URI of this <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> object that corresponds to the XML URI (<bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">http://www.w3.org/XML/1998/namespace</ph><ept id="p1">&lt;/code&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Certain standardized attributes, such as <ph id="ph1">`space`</ph>, are in the <ph id="ph2">`http://www.w3.org/XML/1998/namespace`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is a reserved namespace that is always automatically available in the XML parser.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> that corresponds to the XML URI (<bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">http://www.w3.org/XML/1998/namespace</ph><ept id="p1">&lt;/code&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> object that corresponds to the xmlns URI (<bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">http://www.w3.org/2000/xmlns/</ph><ept id="p1">&lt;/code&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you declare namespaces, the namespace attributes themselves are in the <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> namespace.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is a reserved namespace that is always automatically available in the XML parser.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.Linq.XNamespace"&gt;&lt;/xref&gt;</ph> that corresponds to the <bpt id="p1">**</bpt>xmlns<ept id="p1">**</ept> URI (<bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">http://www.w3.org/2000/xmlns/</ph><ept id="p2">&lt;/code&gt;</ept>).</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>