<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">811d5da880109941c3dd0d08813b686910bd14cf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.ContentElement.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d98049e0dc4572a9e6aa58b03bc10c914eeb5fa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7829b9e26143764fec006b4ba099bfd7b9e7490</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a WPF core-level base class for content elements.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> defines the following common content characteristics:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Input: All <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Focus: All <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes are potentially focusable.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>(However, the default focusable state for the <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> base class is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details on how to make a <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> focusable, see <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph>.) In addition, this class contains <ph id="ph3">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> that you can use for traversing the focus across related elements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Events: <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> includes events that are related to input and focus; it also includes events for changes in state.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>In many cases, the <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> events are routed events.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> defines <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> that can raise routed events and that can add or remove handlers to events.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> shares many common <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> with <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>These common <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> do not come from a shared class inheritance.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>But they do share common naming, similar behavior, and similar internal implementation of <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in each class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The similarity is because <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> are each classes that are an element base, although each has different intentions for its markup object model behavior.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>In particular, <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> descends from <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>, which provides the lower-level graphics support for rendering a <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> to a rectangular region within a composited window, whereas <ph id="ph4">&lt;xref:System.Windows.ContentElement&gt;</ph> defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>These two related classes also implement the common interfaces <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.Animation.IAnimatable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An identifier for the routed event to be handled.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A reference to the handler implementation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Specify <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">handledEventsToo</ph><ept id="p1">&lt;/code&gt;</ept> as <ph id="ph2">`true`</ph> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Processing low-level input events in a practical way is a complex task.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is for these scenarios that registering handlers with <ph id="ph1">`handledEventsToo`</ph> as <ph id="ph2">`true`</ph> is appropriate.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>But you should not do this routinely.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may see a decrease in performance if the handler logic is substantial.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> is marked handled by class handling, you might be able to add handlers for <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An identifier for the.routed event to be handled.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A reference to the handler implementation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <ph id="ph2">`false`</ph> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Do not routinely ask to rehandle a routed event.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Adds handlers to the specified <ph id="ph1">&lt;xref href="System.Windows.EventRoute"&gt;&lt;/xref&gt;</ph> for the current <ph id="ph2">&lt;xref href="System.Windows.ContentElement"&gt;&lt;/xref&gt;</ph> event handler collection.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method for content host elements (regardless whether they implement <ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph>) in order to add handlers for the content host child elements to the host <ph id="ph2">&lt;xref:System.Windows.EventRoute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The event route that handlers are added to.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The event data that is used to add the handlers.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This method uses the <ph id="ph1">&lt;xref href="System.Windows.RoutedEventArgs.RoutedEvent"&gt;&lt;/xref&gt;</ph> property of the arguments to create the handlers.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> to  <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> or any other base element class.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Certain controls, for example, <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, do have a default behavior, but no <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes have such a behavior.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on drag and drop, see <bpt id="p1">[</bpt>Drag and Drop Overview<ept id="p1">](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> overrides the metadata for this dependency property in its implementation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> designates that this property allows property value inheritance (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> is <ph id="ph3">`true`</ph> in metadata).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property value inheritance in this context means that if there are child elements with no other value for <ph id="ph1">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> child elements that have not specifically assigned it a value of <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this element can be used as the target of a drag-and-drop operation; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.AllowDrop"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Applies an animation to a specified dependency property on this element.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Any existing animations are stopped and replaced with the new animation.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This removes the animation and the animated property is set to its base value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the originally associated animation clock is not stopped.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other animations assigned to that clock will continue to run.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The identifier for the property to animate.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The animation clock that controls and declares the animation.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>This removes the animation and the animated property is set to its base value.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the originally associated animation clock is not stopped.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other animations assigned to that clock will continue to run.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The property to animate.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The animation clock that controls and declares the animation.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A value of the enumeration.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace"&gt;&lt;/xref&gt;</ph>, which will stop any existing animation and replace with the new one.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is captured to this element.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if at least one touch is captured to this element; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.AreAnyTouchesCaptured"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.AreAnyTouchesCapturedWithin"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is pressed over this element.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if at least one touch is pressed over this element; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.AreAnyTouchesDirectlyOver"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.AreAnyTouchesOver"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Starts an animation for a specified animated property on this element.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id="ph2">`animation`</ph> is <ph id="ph3">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the originally associated animation timeline is not stopped.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other animations assigned to that timeline will continue to run.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The property to animate, which is specified as a dependency property identifier.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The timeline of the animation to start.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id="ph2">`animation`</ph> is <ph id="ph3">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the originally associated animation timeline is not stopped.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other animations assigned to that timeline will continue to run.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The property to animate, which is specified as the dependency property identifier.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The timeline of the animation to be applied.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Attempts to force capture of the mouse to this element.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be captured, an element must be enabled.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check whether <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`true`</ph> before you call <ph id="ph3">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> is also <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> events are raised, with <ph id="ph5">&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName&gt;</ph> in the event data reported as the element where the <ph id="ph6">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>To clear mouse capture from all elements, call <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName&gt;</ph> with the <ph id="ph2">`element`</ph> parameter provided as <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the mouse is successfully captured; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Attempts to force capture of the stylus to this element.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation based on the underlying default stylus device always returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method calls an underlying static <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph> method <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The actual capture behavior is implemented by the active stylus device implementation.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be captured, an element must be enabled.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check whether <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`true`</ph> return before you call <ph id="ph3">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> is also <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the stylus is successfully captured; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Attempts to force capture of a touch to this element.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> will return <ph id="ph2">`false`</ph> if the <ph id="ph3">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> is currently captured to another element.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>To release capture of a single touch from this element, use the <ph id="ph1">&lt;xref:System.Windows.ContentElement.ReleaseTouchCapture%2A&gt;</ph> method and specify the touch device to release.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>To release all touches from this element, use the <ph id="ph1">&lt;xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The device to capture.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified touch is captured to this element; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;touchDevice&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Gets a collection of <ph id="ph1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;&lt;/xref&gt;</ph> objects that are associated with this element.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another typical way to populate the <ph id="ph1">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> collection is to use <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> methods programmatically.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Property Element Usage</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>oneOrMoreCommandBindings<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> elements.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of these should have a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> attribute set to a known command, and attributes set for the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> handler implementations.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information see <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The collection of all <ph id="ph1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragEnter?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.DragEnter"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragLeave?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.DragLeave"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs even if the drag originates in the element bounds.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> and related preview events.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.DragOver?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.DragOver"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.Drop?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnDrop%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.Drop"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Attempts to set focus to this element.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be focusable, <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> must both be <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that nearly all <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes are not <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> by default.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sets the logical focus.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Focus Overview<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept> and <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> are also <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the related properties are not already <ph id="ph1">`true`</ph>, when you call <ph id="ph2">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, one or more of the following events are raised in the following order: <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> (source is the new focus target), <ph id="ph5">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> (source is the new focus target).</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if keyboard focus could be set to this element; <ph id="ph2">`false`</ph> if this method call did not force focus.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the element can receive focus.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the focused element receives keyboard input.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> or its derived classes, <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> overrides the metadata for this dependency property and redefines the default value of this property to be <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element is focusable; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.Focusable"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.Focusable"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no animations are attached to the property, then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GetAnimationBaseValue%2A&gt;</ph> return value is always identical to the <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> return value.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The.dependency property to check.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The property value as if no animations are attached to the specified dependency property.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns an alternative <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> parent for this element if no visual parent exists.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default virtual implementation of this method returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> provides a practical implementation.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>An object, if implementation of a derived class has an alternate parent connection to report.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag-and-drop event that involves this element.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>The visual feedback reinforces that a drag-and-drop operation is in process.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.GiveFeedback"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Occurs when this element gets logical focus.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, keyboard focus remains where it is and the element where a <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> method is called still gets logical focus.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>A more precise interpretation of this event is that it is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property of an element in the route is changed from <ph id="ph2">`false`</ph> to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no corresponding tunneling event.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.GotFocus"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is focused on this element.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> event is raised in many of the same circumstances.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.GotKeyboardFocus"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Occurs when this element captures the mouse.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has mouse capture.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;</ph> attached event for  this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no defined corresponding tunneling event.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.GotMouseCapture"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Occurs when this element captures the stylus.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has capture.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the  attached event for this class so that <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> is part of the class members list when <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no defined corresponding tunneling event.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.GotStylusCapture"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Occurs when a touch is captured to this element.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.GotTouchCapture"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this element has any animated properties.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property returns <ph id="ph1">`true`</ph> either for persistent (unclocked, always-running) animations or for animations that have a specific timeline.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this element has animations attached to any of its properties; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Gets the collection of input bindings that are associated with this element.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>Input bindings support the binding of commands to input devices.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> implements input bindings that include properties that are specific to mouse devices.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>A related property, <ph id="ph1">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph>, maintains a collection of command bindings.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Property Element Usage</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>oneOrMoreInputBindings<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> elements (typically the <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> derived classes).</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of these is expected to have a <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> attribute set.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The collection of input bindings.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this element is enabled in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element is enabled; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsEnabled"&gt;&lt;/xref&gt;</ph> property on this element changes.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Gets a value that becomes the return value of <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsEnabled"&gt;&lt;/xref&gt;</ph> in derived classes.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element is enabled; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsEnabled"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Gets a value that determines whether this element has logical focus.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on logical focus, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept> and <bpt id="p2">[</bpt>Focus Overview<ept id="p2">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this element has logical focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsFocused"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether an input method system, such as an <ph id="ph1">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph>, is enabled for processing the input to this element.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property returns the value that is returned by the attached property <ph id="ph1">&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName&gt;</ph> for the currently enabled input methods (keyboard, speech, and other input devices).</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if an input method is active; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The default value of the underlying attached property is <ph id="ph1">`true`</ph>; however, this value is influenced by the state of input methods at runtime.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this element has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this element has keyboard focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsKeyboardFocused"&gt;&lt;/xref&gt;</ph> property changes on this element.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsKeyboardFocused"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes to the value of this property typically raise the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event, unless a derived class has overridden <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A&gt;</ph> to suppress the event.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do not set this property directly, but you can set the focus to the element by calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, or by making a <ph id="ph2">&lt;xref:System.Windows.ContentElement.MoveFocus%2A&gt;</ph> request.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either of these method calls might change this property value.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if keyboard focus is on the element or its child elements; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsKeyboardFocusWithinChanged"&gt;&lt;/xref&gt;</ph> property changes on this element.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsKeyboardFocusWithin"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the mouse is captured by this element.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse capture state is related to in-process drag-and-drop operations.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element has mouse capture; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsMouseCaptured"&gt;&lt;/xref&gt;</ph> property changes on this element.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsMouseCaptured"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this element or a contained element has mouse capture; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsMouseCaptureWithinProperty"&gt;&lt;/xref&gt;</ph> changes on this element.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsMouseCaptureWithin"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph>, this property is only <ph id="ph2">`true`</ph> if the mouse pointer is over the literal element—as it is for a hit test.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>For most scenarios where you are not authoring controls, use <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the mouse is captured by this element, and this property is <ph id="ph1">`true`</ph> at time of capture, this property will continue to return <ph id="ph2">`true`</ph> until mouse capture is lost and the pointer is not over its bounds.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the mouse pointer is over the same element result as a hit test; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsMouseDirectlyOver"&gt;&lt;/xref&gt;</ph> property changes on this element.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsMouseDirectlyOver"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this element captures the mouse, this property remains <ph id="ph1">`true`</ph> until mouse capture is lost and the mouse pointer leaves the element bounds.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if mouse pointer is over the element or its child elements; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsMouseOver"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the stylus is captured to this element.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element has stylus capture; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsStylusCaptured"&gt;&lt;/xref&gt;</ph> property changes on this element.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsStylusCaptured"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if stylus capture is held within this element; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsStylusCaptureWithin"&gt;&lt;/xref&gt;</ph> property changes on this element.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsStylusCaptureWithin"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph>, this property is only <ph id="ph2">`true`</ph> if the stylus is over the element.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the stylus is instead over a child element or over elements that are part of an element's deeper compositing, this property will be <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>For most scenarios where you are not authoring controls, use <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this element has stylus capture and this property is <ph id="ph1">`true`</ph> at the time of capture, this property remains <ph id="ph2">`true`</ph> until stylus capture is lost and the stylus is not over its bounds.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the stylus is over the same element as a hit test; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsStylusDirectlyOver"&gt;&lt;/xref&gt;</ph> property changes on this element.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsStylusDirectlyOver"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the stylus is located over this element (including visual child elements).</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this element has stylus capture, this property remains <ph id="ph1">`true`</ph> until stylus capture is lost and the pointer is out of its bounds.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the stylus is over the element or its child elements; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsStylusOver"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Occurs when a key is pressed while focus is on this element.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.KeyDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Occurs when a key is released while focus is on this element.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;</ph> attached event for this class so that  <ph id="ph2">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.KeyUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses logical focus.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, keyboard focus remains where it is, and the element where a <ph id="ph1">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> method is called still gets logical focus.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>A more precise interpretation of this event is that it is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property of an element in the route changes from <ph id="ph2">`true`</ph> to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no corresponding tunneling event.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.LostFocus"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is no longer focused on this element.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.LostKeyboardFocus"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses mouse capture.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>The mouse is typically captured only during drag-and-drop operations.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost capture.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no defined corresponding tunneling event.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.LostMouseCapture"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses stylus capture.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no defined corresponding tunneling event.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.LostStylusCapture"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses a touch capture.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.LostTouchCapture"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event reaches this element along the event route.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT">
          <source>A few <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes that have control-like behavior, for example, <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, might have inherent class handling for mouse button events.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT">
          <source>The class handling often marks the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attach handlers for the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT">
          <source>Register a handler on the control procedurally by calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer enters the bounds of this element.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id="ph3">`false`</ph> to <ph id="ph4">`true`</ph> on this element.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseEnter"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer leaves the bounds of this element.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> tracks when the mouse leaves an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id="ph3">`true`</ph> to <ph id="ph4">`false`</ph> on this element.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseLeave"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT">
          <source>A few <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes that have control-like behavior, for example, <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, might have inherent class handling for mouse button events.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT">
          <source>The class handling often marks the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attach handlers for the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT">
          <source>Register a handler on the control procedurally by calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer moves while over this element.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseMove"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT">
          <source>Right button mouse events frequently have native handling in application scenarios.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, a right mouse button down might display a context menu.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <bpt id="p1">[</bpt>ContextMenu Overview<ept id="p1">](~/docs/framework/wpf/controls/contextmenu-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is released over this element.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>, which correspond to a release of one of the two standard mouse buttons.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event reaches this element along the event route.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> event from a focused or captured element, the mouse pointer might actually be over another element.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseWheel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseWheel"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Attempts to move focus from this element to another element.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT">
          <source>Make sure you check the return value of this method.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT">
          <source>A return value of <ph id="ph1">`false`</ph> might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the requested traversal was performed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>Returns class-specific <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> implementations for the <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>The type-specific <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;&lt;/xref&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.DragEnter"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.DragLeave"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.DragOver"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.DragEnter"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.GiveFeedback"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.GiveFeedbackEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.GotFocus"&gt;&lt;/xref&gt;</ph> routed event by using the event data provided.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method, although virtual, does have a default implementation that raises the event.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT">
          <source>This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property value changes.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> implementation differs from some other <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;&lt;/xref&gt;</ph> that contains event data.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>This event data must contain the identifier for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.GotFocus"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.GotKeyboardFocus"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.GotMouseCapture"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.GotStylusCapture"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.GotTouchCapture"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch is captured to this element.</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> method so that base classes receive the event.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsKeyboardFocusedChanged"&gt;&lt;/xref&gt;</ph> event is raised on this element.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> dependency property changes.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> event is raised with that same event data instance.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice that the  <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> event is not a routed event.</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>Invoked just before the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsKeyboardFocusWithinChanged"&gt;&lt;/xref&gt;</ph> event is raised by this element.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> dependency property changes its value.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event is raised with that same event data instance.</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event is not a routed event.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsMouseCapturedChanged"&gt;&lt;/xref&gt;</ph> event is raised on this element.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> dependency property changes its value.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> event is raised with that same event data instance.</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> event is not a routed event.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsMouseCaptureWithinChanged"&gt;&lt;/xref&gt;</ph> event is raised on this element.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsMouseDirectlyOverChanged"&gt;&lt;/xref&gt;</ph> event is raised on this element.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A&gt;</ph> dependency property changes its value.</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> event is not a routed event.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsStylusCapturedChanged"&gt;&lt;/xref&gt;</ph> event is raised on this element.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> dependency property changes its value.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCapturedChanged&gt;</ph> event is raised with that same event data instance.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice that the event is not a routed event.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsStylusCaptureWithinChanged"&gt;&lt;/xref&gt;</ph> event is raised on this element.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A&gt;</ph> dependency property changes its value.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged&gt;</ph> event is raised with that same event data instance.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice that the event is not a routed event.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsStylusDirectlyOverChanged"&gt;&lt;/xref&gt;</ph> event is raised on this element.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A&gt;</ph> dependency property changes its value.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Notice that the event is not a routed event.</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore you cannot mark it as handled in the class handler.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.KeyDown"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Keystrokes are handled by a dedicated input manager.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If these input system features mark the event as handled, then <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> is not invoked.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.KeyUp"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Keystrokes are handled by a dedicated input manager.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If these input system features mark the event as handled, then <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> is not invoked.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.LostFocus"&gt;&lt;/xref&gt;</ph> routed event by using the event data that is provided.</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method, although virtual, does have a default implementation that raises the event.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT">
          <source>This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property value changes.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation differs from some other <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;&lt;/xref&gt;</ph> that contains event data.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>This event data must contain the identifier for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.LostFocus"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.LostKeyboardFocus"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains event data.</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.LostMouseCapture"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains event data.</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.LostStylusCapture"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains event data.</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.LostTouchCapture"&gt;&lt;/xref&gt;</ph> routed event that occurs when this element loses a touch capture.</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.LostTouchCapture&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> method so that base classes receive the event.</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.MouseDown"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> is not invoked.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either of these events may be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> is received.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>This event data reports details about the mouse button that was pressed and the handled state.</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.MouseEnter"&gt;&lt;/xref&gt;</ph> attached event is raised on this element.</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.MouseLeave"&gt;&lt;/xref&gt;</ph> attached event is raised on this element.</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonDown"&gt;&lt;/xref&gt;</ph> routed event is raised on this element.</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to override this logic, you must create a derived class.</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was pressed.</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonUp"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to override this logic, you must create a derived class.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was released.</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.MouseMove"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonDown"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.</source>
        </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to override this logic, you must create a derived class.</source>
        </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
        </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
        </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.</source>
        </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was pressed.</source>
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonUp"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.</source>
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to override this logic, you must create a derived class.</source>
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was released.</source>
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.MouseUp"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
        </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
        </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> is not invoked.</source>
        </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either of these events might be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> is received.</source>
        </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.</source>
        </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
        </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
        </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>The event data reports that the mouse button was released.</source>
        </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.MouseWheel"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseWheelEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.PreviewDragEnter"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.PreviewDragLeave"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.PreviewDragOver"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.PreviewDrop"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.PreviewGiveFeedback"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.GiveFeedbackEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.PreviewGotKeyboardFocus"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.PreviewKeyDown"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.PreviewKeyUp"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.PreviewKeyDown"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.PreviewMouseDown"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
        </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
        </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> is not invoked.</source>
        </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either of these events may be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> is received.</source>
        </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
        </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
        </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.</source>
        </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
        </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
        </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve">
          <source>The event data reports that one or more mouse buttons were pressed.</source>
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonDown"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
        </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
        </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.</source>
        </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to override this logic, you must create a derived class.</source>
        </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
        </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
        </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was pressed.</source>
        </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonUp"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
        </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
        </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.</source>
        </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to override this logic, you must create a derived class.</source>
        </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was released.</source>
        </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.PreviewMouseMove"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonDown"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
        </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
        </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.</source>
        </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to override this logic, you must create a derived class.</source>
        </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
        </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
        </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.</source>
        </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was pressed.</source>
        </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonUp"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
        </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
        </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.</source>
        </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to override this logic, you must create a derived class.</source>
        </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was released.</source>
        </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.PreviewMouseUp"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
        </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
        </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" extradata="MT">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> is not invoked.</source>
        </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either of these events might be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> is received.</source>
        </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
        </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
        </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" extradata="MT">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.</source>
        </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
        </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
        </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source>The event data reports that one or more mouse buttons were released.</source>
        </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.PreviewMouseWheel"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.MouseWheelEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.PreviewQueryContinueDrag"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.QueryContinueDragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.PreviewStylusButtonDown"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.PreviewStylusButtonUp"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.PreviewStylusDown"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusDownEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.PreviewStylusInAirMove"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.PreviewStylusInRange"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.PreviewStylusMove"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.PreviewStylusOutOfRange"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.PreviewStylusSystemGesture"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusSystemGestureEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.PreviewStylusUp"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.TextCompositionManager.PreviewTextInput"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" extradata="MT">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
        </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.TextCompositionEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewTouchDown"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch presses this element.</source>
        </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> method so that base classes receive the event.</source>
        </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewTouchMove"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves while inside this element.</source>
        </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> method so that base classes receive the event.</source>
        </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewTouchUp"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch is released inside this element.</source>
        </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> method so that base classes receive the event.</source>
        </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.QueryContinueDrag"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.QueryContinueDragEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.QueryCursor"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.QueryCursorEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.StylusButtonDown"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.StylusButtonUp"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.StylusDown"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusDownEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.StylusEnter"&gt;&lt;/xref&gt;</ph> attached event is raised by this element.</source>
        </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.StylusInAirMove"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.StylusInRange"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.StylusLeave"&gt;&lt;/xref&gt;</ph> attached event is raised by this element.</source>
        </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
        </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.StylusMove"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.StylusOutOfRange"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.StylusSystemGesture"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusSystemGestureEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Stylus.StylusUp"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.TextCompositionManager.TextInput"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
        </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
        </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
        </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
        </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not try to reraise the event in most cases.</source>
        </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
        </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
        </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.TextCompositionEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.TouchDown"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch presses inside this element.</source>
        </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> method so that base classes receive the event.</source>
        </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.TouchEnter"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves from outside to inside the bounds of this element.</source>
        </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchEnter&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> method so that base classes receive the event.</source>
        </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.TouchLeave"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves from inside to outside the bounds of this element.</source>
        </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchLeave&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> method so that base classes receive the event.</source>
        </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.TouchMove"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves while inside this element.</source>
        </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> method so that base classes receive the event.</source>
        </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.TouchUp"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch is released inside this element.</source>
        </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> method so that base classes receive the event.</source>
        </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</source>
        </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of this method in this class is incomplete and always returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve">
          <source>The direction of the requested focus traversal.</source>
        </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve">
          <source>The element that would have received focus if <ph id="ph1">&lt;xref href="System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)"&gt;&lt;/xref&gt;</ph> were actually invoked.</source>
        </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
        </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewDragEnter"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
        </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewDragLeave"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
        </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewDragOver"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
        </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewDrop%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewDrop"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve">
          <source>Occurs when a drag-and-drop operation is started.</source>
        </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewGiveFeedback"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is focused on this element.</source>
        </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
        </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.</source>
        </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewGotKeyboardFocus"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve">
          <source>Occurs when a key is pressed while the keyboard is focused on this element.</source>
        </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" extradata="MT">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
        </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
        </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
        </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewKeyDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve">
          <source>Occurs when a key is released while the keyboard is focused on this element.</source>
        </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" extradata="MT">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
        </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
        </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
        </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, check the documentation for individual controls.</source>
        </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewKeyUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is no longer focused on this element.</source>
        </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
        </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
        </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewLostKeyboardFocus"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
        </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event reaches this element along the event route.</source>
        </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
        </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
        </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
        </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
        </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
        </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
        </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer moves while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</source>
        </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseMove"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
        </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
        </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
        </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
        </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arguments of this event expose the arguments of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" extradata="MT">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
        </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
        </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is released while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
        </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event reaches this element along the event route.</source>
        </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</source>
        </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewMouseWheel"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</source>
        </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewQueryContinueDrag"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewStylusButtonDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewStylusButtonUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus touches the digitizer while it is over this element.</source>
        </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewStylusDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
        </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewStylusInAirMove"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
        </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewStylusInRange"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves while over the element.</source>
        </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve">
          <source>The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewStylusInAirMove"&gt;&lt;/xref&gt;</ph> is raised instead.</source>
        </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewStylusMove"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is too far from the digitizer to be detected.</source>
        </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewStylusOutOfRange"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve">
          <source>Occurs when a user performs one of several stylus gestures.</source>
        </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about stylus gestures, see <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewStylusSystemGesture"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve">
          <source>Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</source>
        </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewStylusUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve">
          <source>Occurs when this element gets text in a device-independent manner.</source>
        </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.</source>
        </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve" extradata="MT">
          <source>The keyboard is the primary means of <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>; but speech, handwriting, and other input devices can also generate <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.</source>
        </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewTextInput"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
        </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.</source>
        </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve" extradata="MT">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
        </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cause the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;</ph> attached property to <ph id="ph4">`false`</ph> for this element.</source>
        </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewTouchDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
        </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewTouchMove"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
        </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tunneling</source>
        </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.PreviewTouchUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</source>
        </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.QueryContinueDrag"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve">
          <source>Occurs when the cursor is requested to display.</source>
        </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve">
          <source>This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</source>
        </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</source>
        </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in <ph id="ph1">[!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)]</ph> programming.</source>
        </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve" extradata="MT">
          <source>That object is represented by the <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> class in <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</source>
        </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use predefined values from the <ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph> enumeration, or you can declare a custom cursor as an image file.</source>
        </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve" extradata="MT">
          <source>Listening for the <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> event is not an efficient technique for cursor management.</source>
        </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, each element should define its own cursor behavior with <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should only rely on <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</source>
        </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on implementing cursor behavior in response to <ph id="ph1">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph>, see <ph id="ph2">&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no defined corresponding tunneling event.</source>
        </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnQueryCursor%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.QueryCursor"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve">
          <source>Raises a specific routed event.</source>
        </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.RoutedEvent"&gt;&lt;/xref&gt;</ph> to be raised is identified within the <ph id="ph2">&lt;xref href="System.Windows.RoutedEventArgs"&gt;&lt;/xref&gt;</ph> instance that is provided (as the <ph id="ph3">&lt;xref href="System.Windows.RoutedEventArgs.RoutedEvent"&gt;&lt;/xref&gt;</ph> property of that event data).</source>
        </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`e`</ph> parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</source>
        </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> is not just the state properties for the event; it also identifies which routed event to raise.</source>
        </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event-raising pattern and the routed event data both differ from <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> events and data classes, which typically just contain properties that are related to the event.</source>
        </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data and also identifies the event to raise.</source>
        </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve">
          <source>Releases all captured touch devices from this element.</source>
        </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve">
          <source>Releases the mouse capture, if this element held the capture.</source>
        </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
        </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider checking the value of <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> before you call this method.</source>
        </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve">
          <source>Releases the stylus device capture, if this element held the capture.</source>
        </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
        </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider checking the value of <ph id="ph1">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> before you call this method.</source>
        </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve">
          <source>Attempts to release the specified touch device from this element.</source>
        </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve">
          <source>The device to release.</source>
        </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the touch device is released; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;touchDevice&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve">
          <source>Removes the specified routed event handler from this element.</source>
        </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most common scenario for using this <ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> is when you implement the <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> level.</source>
        </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example that follows this remarks section illustrates this scenario.</source>
        </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.</source>
        </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve" extradata="MT">
          <source>If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</source>
        </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior is consistent with <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> behavior of the <ph id="ph2">`-=`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve" extradata="MT">
          <source>Neither <ph id="ph1">`routedEvent`</ph> nor <ph id="ph2">`handler`</ph> may be <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to provide either value as <ph id="ph1">`null`</ph> will raise an exception.</source>
        </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method ignores the <ph id="ph1">`handledEventsToo`</ph> parameter information, which is provided if the handler was first added with the <ph id="ph2">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature that enables handling of already-handled events.</source>
        </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either type of handler is removed.</source>
        </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve">
          <source>The identifier of the.routed event for which the handler is attached.</source>
        </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve">
          <source>The specific handler implementation to remove from the event handler collection on this element.</source>
        </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.CommandBindings"&gt;&lt;/xref&gt;</ph> property on instances of this class.</source>
        </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will return <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> is locally set.</source>
        </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> property does not have a simple default value.</source>
        </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method indicates whether the property has changed from its default value.</source>
        </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.ContentElement.CommandBindings"&gt;&lt;/xref&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.InputBindings"&gt;&lt;/xref&gt;</ph> property on instances of this class.</source>
        </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve" extradata="MT">
          <source>This will return <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Windows.ContentElement.InputBindings%2A&gt;</ph> is locally set.</source>
        </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> property does not have a simple default value.</source>
        </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method indicates whether the property has changed from its default value.</source>
        </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.ContentElement.InputBindings"&gt;&lt;/xref&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusButtonDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
        </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2618" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2619" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2620" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2621" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2622" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2623" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2624" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusButtonUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2625" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2626" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2627" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2628" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2629" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2630" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus touches the digitizer while the stylus is over this element.</source>
        </trans-unit>
        <trans-unit id="2631" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2632" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2633" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2634" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2635" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2636" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2637" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2638" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2639" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2640" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2641" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2642" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2643" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2644" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2645" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2646" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2647" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2648" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus enters the bounds of this element.</source>
        </trans-unit>
        <trans-unit id="2649" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
        </trans-unit>
        <trans-unit id="2650" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
        </trans-unit>
        <trans-unit id="2651" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
        </trans-unit>
        <trans-unit id="2652" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> tracks when the stylus enters the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id="ph3">`false`</ph> to <ph id="ph4">`true`</ph> on this element.</source>
        </trans-unit>
        <trans-unit id="2653" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2654" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2655" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2656" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2657" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2658" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2659" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2660" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="2661" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2662" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2663" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusEnter"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2664" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2665" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2666" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2667" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2668" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2669" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
        </trans-unit>
        <trans-unit id="2670" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2671" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2672" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2673" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2674" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2675" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2676" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2677" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2678" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2679" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2680" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2681" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusInAirMove"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2682" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2683" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2684" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2685" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2686" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2687" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
        </trans-unit>
        <trans-unit id="2688" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2689" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2690" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2691" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2692" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2693" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2694" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2695" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2696" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2697" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2698" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2699" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusInRange"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2700" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2701" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2702" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2703" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2704" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2705" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus leaves the bounds of the element.</source>
        </trans-unit>
        <trans-unit id="2706" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.</source>
        </trans-unit>
        <trans-unit id="2707" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
        </trans-unit>
        <trans-unit id="2708" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
        </trans-unit>
        <trans-unit id="2709" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id="ph3">`true`</ph> to <ph id="ph4">`false`</ph> on this element.</source>
        </trans-unit>
        <trans-unit id="2710" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2711" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2712" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2713" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2714" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2715" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2716" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2717" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="2718" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2719" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2720" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusLeave"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2721" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2722" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2723" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2724" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2725" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2726" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves over this element.</source>
        </trans-unit>
        <trans-unit id="2727" translate="yes" xml:space="preserve">
          <source>The stylus must move while on the digitizer to raise this event.</source>
        </trans-unit>
        <trans-unit id="2728" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusInAirMove"&gt;&lt;/xref&gt;</ph> is raised instead.</source>
        </trans-unit>
        <trans-unit id="2729" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2730" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2731" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2732" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2733" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2734" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2735" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2736" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2737" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2738" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2739" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2740" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusMove"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2741" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2742" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2743" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2744" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2745" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2746" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is too far from the digitizer to be detected, while over this element.</source>
        </trans-unit>
        <trans-unit id="2747" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2748" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2749" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2750" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2751" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2752" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2753" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2754" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2755" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2756" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2757" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2758" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusOutOfRange"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2759" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2760" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2761" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2762" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2763" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2764" translate="yes" xml:space="preserve">
          <source>Occurs when a user performs one of several stylus gestures.</source>
        </trans-unit>
        <trans-unit id="2765" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about stylus gestures, see <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2766" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2767" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2768" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2769" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2770" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2771" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2772" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2773" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2774" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2775" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2776" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2777" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusSystemGesture"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2778" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2779" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2780" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2781" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2782" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2783" translate="yes" xml:space="preserve">
          <source>Occurs when the user raises the stylus off the digitizer while it is over this element.</source>
        </trans-unit>
        <trans-unit id="2784" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2785" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2786" translate="yes" xml:space="preserve" extradata="MT">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
        </trans-unit>
        <trans-unit id="2787" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="2788" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2789" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2790" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2791" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2792" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2793" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewStylusUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2794" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2795" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.StylusUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2796" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2797" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2798" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2799" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2800" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2801" translate="yes" xml:space="preserve">
          <source>Occurs when this element gets text in a device-independent manner.</source>
        </trans-unit>
        <trans-unit id="2802" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event might already be marked as handled by the internal implementations of composited controls.</source>
        </trans-unit>
        <trans-unit id="2803" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remark below.</source>
        </trans-unit>
        <trans-unit id="2804" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event may already be marked as handled by the internal implementations of composited controls.</source>
        </trans-unit>
        <trans-unit id="2805" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is a composited control where the <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event is already marked as handled; within its compositing.</source>
        </trans-unit>
        <trans-unit id="2806" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</source>
        </trans-unit>
        <trans-unit id="2807" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> as the event where you attach handlers for text input, you may receive better results.</source>
        </trans-unit>
        <trans-unit id="2808" translate="yes" xml:space="preserve" extradata="MT">
          <source>This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</source>
        </trans-unit>
        <trans-unit id="2809" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.</source>
        </trans-unit>
        <trans-unit id="2810" translate="yes" xml:space="preserve" extradata="MT">
          <source>The keyboard is the primary means of <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>, but speech, handwriting, and other input devices can also raise <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2811" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.</source>
        </trans-unit>
        <trans-unit id="2812" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="2813" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="2814" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2815" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2816" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2817" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2818" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2819" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2820" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2821" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.TextInput"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2822" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed event identifiers are created when routed events are registered.</source>
        </trans-unit>
        <trans-unit id="2823" translate="yes" xml:space="preserve" extradata="MT">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
        </trans-unit>
        <trans-unit id="2824" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use these identifiers to add class handlers.</source>
        </trans-unit>
        <trans-unit id="2825" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2826" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2827" translate="yes" xml:space="preserve">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
        </trans-unit>
        <trans-unit id="2828" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.</source>
        </trans-unit>
        <trans-unit id="2829" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2830" translate="yes" xml:space="preserve" extradata="MT">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
        </trans-unit>
        <trans-unit id="2831" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cause the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;</ph> attached property to <ph id="ph4">`false`</ph> for this element.</source>
        </trans-unit>
        <trans-unit id="2832" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2833" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2834" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2835" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2836" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2837" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2838" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2839" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2840" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.TouchDown"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2841" translate="yes" xml:space="preserve">
          <source>Occurs when a touch moves from outside to inside the bounds of this element.</source>
        </trans-unit>
        <trans-unit id="2842" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is always raised, whether or not the touch device is captured to this UI element.</source>
        </trans-unit>
        <trans-unit id="2843" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2844" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2845" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2846" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="2847" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2848" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2849" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2850" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.TouchEnter"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2851" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are captured to this element.</source>
        </trans-unit>
        <trans-unit id="2852" translate="yes" xml:space="preserve">
          <source>An enumeration of <ph id="ph1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;&lt;/xref&gt;</ph> objects that are captured to this element.</source>
        </trans-unit>
        <trans-unit id="2853" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are captured to this element or any child elements in its visual tree.</source>
        </trans-unit>
        <trans-unit id="2854" translate="yes" xml:space="preserve">
          <source>An enumeration of <ph id="ph1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;&lt;/xref&gt;</ph> objects that are captured to this element or any child elements in its visual tree.</source>
        </trans-unit>
        <trans-unit id="2855" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are over this element.</source>
        </trans-unit>
        <trans-unit id="2856" translate="yes" xml:space="preserve">
          <source>An enumeration of <ph id="ph1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;&lt;/xref&gt;</ph> objects that are over this element.</source>
        </trans-unit>
        <trans-unit id="2857" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are over this element or any child elements in its visual tree.</source>
        </trans-unit>
        <trans-unit id="2858" translate="yes" xml:space="preserve">
          <source>An enumeration of <ph id="ph1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;&lt;/xref&gt;</ph> objects that are over this element or any child elements in its visual tree.</source>
        </trans-unit>
        <trans-unit id="2859" translate="yes" xml:space="preserve">
          <source>Occurs when a touch moves from inside to outside the bounds of this element.</source>
        </trans-unit>
        <trans-unit id="2860" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2861" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2862" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2863" translate="yes" xml:space="preserve" extradata="MT">
          <source>Direct</source>
        </trans-unit>
        <trans-unit id="2864" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2865" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2866" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2867" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.TouchLeave"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2868" translate="yes" xml:space="preserve">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
        </trans-unit>
        <trans-unit id="2869" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2870" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2871" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2872" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2873" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2874" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2875" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2876" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2877" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.TouchMove"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="2878" translate="yes" xml:space="preserve">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
        </trans-unit>
        <trans-unit id="2879" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="2880" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="2881" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="2882" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="2883" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="2884" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2885" translate="yes" xml:space="preserve" extradata="MT">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="2886" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
        </trans-unit>
        <trans-unit id="2887" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.TouchUp"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>