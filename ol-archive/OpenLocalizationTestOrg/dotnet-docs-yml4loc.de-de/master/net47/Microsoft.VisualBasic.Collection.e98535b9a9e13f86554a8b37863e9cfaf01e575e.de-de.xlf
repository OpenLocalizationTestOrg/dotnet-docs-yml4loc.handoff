<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88a64bd934fd5924f5dd4b259857b151e6cbbaf3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Microsoft.VisualBasic.Collection.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec85ea14040c8441933148838dbb37247c114f5e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd2e34e4d6a2777dda0d93c26b7959f1cfdeb9fb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>A Visual Basic <ph id="ph1">`Collection`</ph> is an ordered set of items that can be referred to as a unit.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whenever possible, you should use the generic collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> namespace or the <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace instead of a Visual Basic <ph id="ph3">`Collection`</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Visual Basic <ph id="ph1">`Collection`</ph> object provides a convenient way to refer to a related group of items as a single object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The items, or <bpt id="p1">*</bpt>elements<ept id="p1">*</ept>, in a collection need only be related by the fact that they exist in the collection.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements of a collection do not have to share the same data type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create a collection the same way you create other objects, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you have created a collection, you can do any of the following:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add an element with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remove an element with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Remove%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remove all elements with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Clear%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Find out how many elements the collection contains with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Check whether a specific element is present with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Contains%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Return a specific element from the collection with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Iterate through the entire collection with the <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the Visual Basic <ph id="ph1">`Collection`</ph> object has functionality identical to the <ph id="ph2">`Collection`</ph> object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Iterating through a Visual Basic <ph id="ph1">`Collection`</ph> is not a thread-safe procedure.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on locking a programming element, see <bpt id="p1">[</bpt>SyncLock Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Creates and returns a new <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> collection returned by this constructor is empty and does not have any initial capacity allocated.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> collections are not compatible with the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> collections available in the <ph id="ph3">&lt;xref:System.Collections?displayProperty=fullName&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.Specialized?displayProperty=fullName&gt;</ph> namespaces.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Adds an element to a <ph id="ph1">`Collection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Before`</ph> or <ph id="ph2">`After`</ph> argument must refer to an existing element of the collection; otherwise, an error occurs.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If both the <ph id="ph1">`Before`</ph> and <ph id="ph2">`After`</ph> arguments are omitted, the new object is added to the end of the collection.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>An error also occurs if a specified <ph id="ph1">`Key`</ph> value matches the key for an existing element of the collection.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An object of any type that specifies the element to add to the collection.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A unique <ph id="ph1">`String`</ph> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An expression that specifies a relative position in the collection.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The element to be added is placed in the collection before the element identified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Before</ph><ept id="p1">&lt;/code&gt;</ept> argument.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Before</ph><ept id="p1">&lt;/code&gt;</ept> is a numeric expression, it must be a number from 1 through the value of the collection's <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection.Count"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Before</ph><ept id="p1">&lt;/code&gt;</ept> is a <ph id="ph2">`String`</ph> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You cannot specify both <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Before</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">After</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An expression that specifies a relative position in the collection.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The element to be added is placed in the collection after the element identified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">After</ph><ept id="p1">&lt;/code&gt;</ept> argument.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">After</ph><ept id="p1">&lt;/code&gt;</ept> is a numeric expression, it must be a number from 1 through the value of the collection's <ph id="ph2">`Count`</ph> property.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">After</ph><ept id="p1">&lt;/code&gt;</ept> is a <ph id="ph2">`String`</ph> expression, it must correspond to the key string specified when the element referred to was added to the collection.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You cannot specify both <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Before</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">After</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Deletes all elements of a Visual Basic <ph id="ph1">`Collection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Clear`</ph> method empties the collection and resets its <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property to 0.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`Boolean`</ph> value indicating whether a Visual Basic <ph id="ph2">`Collection`</ph> object contains an element with a specific key.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Contains`</ph> returns <ph id="ph2">`True`</ph> if the collection contains an element with a key exactly matching <ph id="ph3">`Key`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, <ph id="ph1">`Contains`</ph> returns <ph id="ph2">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Case is ignored when matching key values.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>A Visual Basic <ph id="ph1">`Collection`</ph> can hold some elements that have keys and other elements without keys.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This depends on whether the call to the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> method supplies an argument to the optional <ph id="ph2">`Key`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`String`</ph> expression that specifies the key for which to search the elements of the collection.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`Boolean`</ph> value indicating whether a Visual Basic <ph id="ph2">`Collection`</ph> object contains an element with a specific key.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">`Integer`</ph> containing the number of elements in a collection.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`Count`</ph> property to determine the number of elements in a <ph id="ph2">`Collection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">`Integer`</ph> containing the number of elements in a collection.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Returns a reference to an enumerator object, which is used to iterate over a <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> calls <ph id="ph1">`GetEnumerator`</ph> to obtain an enumerator object to support iteration over a collection's elements.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, you use a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop to traverse a collection or array, and you do not need to call <ph id="ph3">`GetEnumerator`</ph> explicitly.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need closer control over the iteration than the <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> statements provide, you can use the <ph id="ph3">`GetEnumerator`</ph> method to perform a customized traversal.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are some cases in which you might need to do this.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might want to return to the beginning of the collection and start the iteration again before it is finished.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might want to skip over one or more elements for a variety of reasons.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might need to change the elements of the collection in the middle of a traversal.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case you must obtain a new enumerator object because the previous one is invalidated.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns a reference to an enumerator object, which is used to iterate over a <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Returns a specific element of a <ph id="ph1">`Collection`</ph> object either by position or by key.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the following lines of code are equivalent.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>(A) A numeric expression that specifies the position of an element of the collection.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Index</ph><ept id="p1">&lt;/code&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection.Count"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Or (B) An <ph id="ph1">`Object`</ph> expression that specifies the position or key string of an element of the collection.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns a specific element of a <ph id="ph1">`Collection`</ph> object either by position or by key.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Returns a specific element of a <ph id="ph1">`Collection`</ph> object either by position or by key.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the following lines of code are equivalent.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>(A) A numeric expression that specifies the position of an element of the collection.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Index</ph><ept id="p1">&lt;/code&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection.Count"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Or (B) An <ph id="ph1">`Object`</ph> expression that specifies the position or key string of an element of the collection.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Returns a specific element of a <ph id="ph1">`Collection`</ph> object either by position or by key.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Returns a specific element of a <ph id="ph1">`Collection`</ph> object either by position or by key.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the following lines of code are equivalent.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A unique <ph id="ph1">`String`</ph> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Key</ph><ept id="p1">&lt;/code&gt;</ept> must correspond to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Key</ph><ept id="p2">&lt;/code&gt;</ept> argument specified when the element was added to the collection.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Returns a specific element of a <ph id="ph1">`Collection`</ph> object either by position or by key.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Read-only.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Removes an element from a <ph id="ph1">`Collection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`Remove`</ph> deletes an element from a collection, it decrements the collection's <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property by one.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also decrements the <ph id="ph1">`Index`</ph> value of every element that formerly followed the deleted element in the collection.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an element was added to the collection without a <ph id="ph1">`Key`</ph>, you must use its <ph id="ph2">`Index`</ph> to remove it.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A numeric expression that specifies the position of an element of the collection.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Index</ph><ept id="p1">&lt;/code&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection.Count"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Removes an element from a <ph id="ph1">`Collection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`Remove`</ph> deletes an element from a collection, it decrements the collection's <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property by one.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also decrements the <ph id="ph1">`Index`</ph> value of every element that formerly followed the deleted element in the collection.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an element was added to the collection without a <ph id="ph1">`Key`</ph>, you must use its <ph id="ph2">`Index`</ph> to remove it.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A unique <ph id="ph1">`String`</ph> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">Key</ph><ept id="p1">&lt;/code&gt;</ept> must correspond to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Key</ph><ept id="p2">&lt;/code&gt;</ept> argument specified when the element was added to the collection.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Copies the elements of the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> to an <ph id="ph2">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph>, starting at a particular <ph id="ph3">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> index.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Collections.ICollection"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is obtained from the <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount*&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The one-dimensional <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The zero-based index in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> at which copying begins.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The number of elements in the source <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object is greater than the available space from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">index</ph><ept id="p1">&lt;/code&gt;</ept> to the end of the destination <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">array</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The type of the source <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object cannot be cast automatically to the type of the destination <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">array</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Returns an enumerator that iterates through the collection.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Collections.ICollection"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>[Visual Basic, C#]</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method also brings the enumerator back to this position.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IEnumerator"&gt;&lt;/xref&gt;</ph> object that can be used to iterate through the collection.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Adds an item to the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Collections.IList"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> to add to the <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The position into which the new element was inserted.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object is read-only.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object has a fixed size.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Removes all items from the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Collections.IList"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method removes all items from the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.IList"&gt;&lt;/xref&gt;</ph> is read-only.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object contains a specific value.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Collections.IList"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines whether the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object contains a specific value.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> to locate in the <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`True`</ph> if the <ph id="ph2">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> is found in the <ph id="ph3">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object; otherwise, <ph id="ph4">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Determines the index of a specific item in the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Collections.IList"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method determines the index of a specific item in the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> to locate in the <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The index of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> if found in the collection; otherwise, -1.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Inserts an item to the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object at the specified index.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Collections.IList"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`index`</ph> equals the number of items in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object, then <ph id="ph3">`value`</ph> is appended to the end.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The zero-based index at which <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> should be inserted.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> to insert into the <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is not a valid index in the <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object is read-only.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object has a fixed size.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is null reference in the <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Collections.IList"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> is not found in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object, the <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object remains unchanged and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> to remove from the <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object is read-only.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object has a fixed size.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Removes the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object item at the specified index.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Collections.IList"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The zero-based index of the item to remove.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is not a valid index in the <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object is read-only.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object has a fixed size.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Runs after the entire <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object graph has been deserialized.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.IDeserializationCallback"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called after the entire <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object graph has been deserialized.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The object that initiated the callback.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Returns the data needed to serialize the <ph id="ph1">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.ISerializable"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the data needed to serialize the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> object containing the information required to serialize the <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Runtime.Serialization.StreamingContext"&gt;&lt;/xref&gt;</ph> object containing the source and destination of the serialized stream associated with the <ph id="ph2">&lt;xref href="Microsoft.VisualBasic.Collection"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>