<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9dc1fd566d9d0f05304c0543714236aabd8e59b2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.OperationContractAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c45d066d29ba7de5e4f8f01759fa4858dd9726ba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7f1fb1e8891690c047a0c41086132840ea22b5f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Indicates that a method defines an operation that is part of a service contract in a Windows Communication Foundation (WCF) application.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Apply the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> to a method to indicate that the method implements a service operation as part of a service contract (specified by a <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> attribute).</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> properties to control the structure of the operation and the values expressed in metadata:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Action%2A&gt;</ph> property specifies the action that uniquely identifies this operation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> dispatches request messages to methods based on their action.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property indicates that the operation is implemented or can be called asynchronously using a Begin/End method pair.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A&gt;</ph> property indicates whether the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A&gt;</ph> property has been explicitly set.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> property indicates that the operation only consists of a single input message.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation has no associated output message.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> property specifies whether this operation can be the initial operation in a session.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A&gt;</ph> property specifies whether <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> attempts to terminate the current session after the operation completes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A&gt;</ph> property specifies the message-level security that an operation requires at run time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A&gt;</ph> property specifies the action of the reply message for the operation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute declares that a method is an operation in a service contract.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only methods attributed with the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> are exposed as service operations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>A service contract without any methods marked with the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> exposes no operations.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property indicates that a pair of <ph id="ph2">`Begin`</ph><ph id="ph3">\&lt;</ph><bpt id="p1">*</bpt>methodName<ept id="p1">*</ept>&gt; and <ph id="ph4">`End`</ph><ph id="ph5">\&lt;</ph><bpt id="p2">*</bpt>methodName<ept id="p2">*</ept>&gt; methods form a single operation implemented asynchronously (whether on the client or the service).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ability of a service to implement operations asynchronously is a service implementation detail and is not exposed in metadata (such as Web Services Description Language (WSDL)).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, clients can choose to invoke operations asynchronously independent of how the service method is implemented.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling service operations asynchronously in the client is recommended when a service method takes some time but must return information directly to the client.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> property indicates that a method does not return any value at all, including an empty underlying response message.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type of method is useful for notifications or event-style communication.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods of this kind cannot return a reply message so the method's declaration must return <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>When programmatically retrieving the information store in this attribute, use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ContractDescription&gt;</ph> class instead of reflection.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, (the default), even methods that return <ph id="ph3">`void`</ph> are two-way methods at the underlying message level.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the infrastructure creates and sends an empty message to indicate to the caller that the method has returned.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using this approach enables the application and the infrastructure to send error information (such as a SOAP fault) back to the client.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> to <ph id="ph2">`true`</ph> is the only way to prevent the creation and dispatch of a reply message.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>One-Way Services<ept id="p1">](~/docs/framework/wcf/feature-details/one-way-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Action%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A&gt;</ph> properties can be used not only to modify the default action of SOAP messages but also to create handlers for unrecognized messages or to disable adding actions for direct message programming.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> property to prevent clients from calling a particular service operation prior to other operations.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A&gt;</ph> property to have <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> close the channel after clients call a particular service operation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Using Sessions<ept id="p1">](~/docs/framework/wcf/using-sessions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A&gt;</ph> property enables you to specify on the operation contract whether the operation messages are signed, encrypted, or signed and encrypted.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a binding cannot provide the security level required by the contract, an exception is thrown at run time.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A&gt;</ph> and <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceModel.OperationContractAttribute"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets or sets the WS-Addressing action of the request message.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Action%2A&gt;</ph>property to control the action of the method's input message.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> uses this action to dispatch an incoming message to the appropriate method, messages used within a contract operation must have unique actions.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default action value is a combination of the contract namespace (the default value is "http://tempuri.org/"), the contract name (interface name or the class name, if no explicit service interface is used), the operation name, and an additional string ("Response") if the message is a correlated response.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override this default with the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Action%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>To indicate that a service operation handles all messages that the service receives but cannot be directed to a service operation, specify the value "*" (an asterisk).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type of operation, called an unmatched message handler, must have one of following method signatures, or a <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The service operation can take only a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> object and return a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The service operation can take only a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> object and return nothing (that is, return <ph id="ph2">`void`</ph>).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>A service contract can have only one service operation with the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Action%2A&gt;</ph> property set to "*".</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any group of service contracts hosted at the same listenUri that a service class implements can have many service operations with the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Action%2A&gt;</ph> property set to "<ph id="ph2">\*</ph>" when the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> property is set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, only one of those service operations can have the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Action%2A&gt;</ph> property set to "<ph id="ph2">\*</ph>" and the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> property set to true.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more details, see <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The action to use in generating the WS-Addressing Action header.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The value is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is implemented asynchronously using a <ph id="ph1">`Begin`</ph><ph id="ph2">&lt;</ph><bpt id="p1">*</bpt>methodName<ept id="p1">*</ept>&gt; and <ph id="ph3">`End`</ph><ph id="ph4">&lt;</ph><bpt id="p2">*</bpt>methodName<ept id="p2">*</ept>&gt; method pair in a service contract.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property to build service operations that can be called asynchronously on the server, the client, or both.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property informs the runtime that a <ph id="ph2">`Begin`</ph> method has a matched <ph id="ph3">`End`</ph> method that conforms to the .NET Framework asynchronous method design pattern.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Building server asynchronous methods that implement a service operation increases server scalability and performance without affecting the clients of the service, and is recommended when a service operation must return something to the client after performing a lengthy operation that can be performed asynchronously.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clients remain unaffected because the asynchronous method pair on the server is an implementation detail that does not affect the underlying Web Services Description Language (WSDL) description of the operation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such methods appear to clients as a single operation with <ph id="ph1">`&lt;input&gt;`</ph> and correlated <ph id="ph2">`&lt;output&gt;`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> automatically routes inbound messages to the <ph id="ph2">`Begin`</ph><ph id="ph3">\&lt;</ph><bpt id="p1">*</bpt>methodName<ept id="p1">*</ept>&gt; method and routes the results of the <ph id="ph4">`End`</ph><ph id="ph5">\&lt;</ph><bpt id="p2">*</bpt>methodName<ept id="p2">*</ept>&gt; call to the outbound message.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Client channels, therefore, can represent the method pair as either a single synchronous operation or as an asynchronous operation pair.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>In no case does the client representation affect the asynchronous implementation on the server in any way.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Client contracts can use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property to indicate an asynchronous method pair that the client can use to invoke the operation asynchronously.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, client applications use the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> tool and the <ph id="ph1">`/async`</ph> option to generate a <ph id="ph2">`Begin`</ph><ph id="ph3">\&lt;</ph><bpt id="p2">*</bpt>methodName<ept id="p2">*</ept>&gt; and <ph id="ph4">`End`</ph><ph id="ph5">\&lt;</ph><bpt id="p3">*</bpt>methodName<ept id="p3">*</ept>&gt; method pair that the client can use to invoke the operation asynchronously.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a service operation has both an asynchronous and a synchronous version, the default behavior on the service is to invoke the synchronous version.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">`Begin`</ph><ph id="ph3">&lt;</ph><bpt id="p1">*</bpt>methodName<ept id="p1">*</ept>&gt;method is matched by an <ph id="ph4">`End`</ph><ph id="ph5">&lt;</ph><bpt id="p2">*</bpt>methodName<ept id="p2">*</ept>&gt; method and can be treated by the infrastructure as an operation that is implemented as an asynchronous method pair on the service interface; otherwise, <ph id="ph6">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the messages for this operation must be encrypted, signed, or both.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A&gt;</ph> property to determine whether a specific protection level is required by the messages of this operation.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.ServiceModel.OperationContractAttribute.ProtectionLevel"&gt;&lt;/xref&gt;</ph> property is set to a value other than <ph id="ph3">&lt;xref href="System.Net.Security.ProtectionLevel.None"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the method implements an operation that can initiate a session on the server (if such a session exists).</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> property controls whether an operation can be the first operation called when a session is created.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=fullName&gt;</ph> must be either <ph id="ph2">&lt;xref:System.ServiceModel.SessionMode.Allowed&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.SessionMode.Required&gt;</ph> and the binding used must require or allow sessions for the <ph id="ph4">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> property to work properly.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is <ph id="ph1">`true`</ph>, which means that an operation can be the first one called on a channel.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subsequent calls to the initiating method have no effect, other than to call the method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>No other sessions are created.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the contract does not make use of a session, setting <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> to <ph id="ph2">`false`</ph> is ignored.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you set <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> to <ph id="ph2">`false`</ph> to force clients to call another method on the service before they can invoke this one.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if your service has a series of operations that depend on an order ID number, you can set <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> to <ph id="ph2">`true`</ph> for a <ph id="ph3">`GetOrderId`</ph> service operation and set all remaining service operations to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>This ensures that each new client obtains an order ID prior to using the other methods exposed by the service.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is an interaction between <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute.Action%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>A service contract can have only one service operation with the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Action%2A&gt;</ph> property set to "*".</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any group of service contracts hosted at the same listen URI that a service class implements can have many service operations with the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Action%2A&gt;</ph> property set to "<ph id="ph2">\*</ph>" when the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> property is set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, only one of those service methods can have the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Action%2A&gt;</ph> property set to "<ph id="ph2">\*</ph>" and the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A&gt;</ph> property set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a service receives a message for a non-initiating operation, the service returns an ActionNotSupported SOAP fault.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client experiences this as an <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a client calls a non-initiating operation first, the client runtime throws an <ph id="ph1">&lt;xref:System.InvalidOperationException?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Using Sessions<ept id="p1">](~/docs/framework/wcf/using-sessions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the operation is permitted to initiate a session on the server, otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether an operation returns a reply message.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> property to indicate that an operation does not return a reply message.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type of operation is useful for notifications or event-style communication, especially in two-way communication.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without waiting for an underlying response message, callers of one-way operations have no direct way to detect a failure in processing the request message.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Service applications that use reliable channels and one-way operations can detect a message delivery failure at the channel level.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Reliable Sessions Overview<ept id="p1">](~/docs/framework/wcf/feature-details/reliable-sessions-overview.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>In duplex (or two-way) service-oriented applications in which the client and server communicate with each other independently, a client channel can use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> property on its methods to indicate that the service can make one-way calls to the client that the client can treat as events.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>No return call or message is generated because the service does not expect any response message.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph> (the default), even methods that return <ph id="ph3">`void`</ph> result in a reply message.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the infrastructure creates and sends an empty message to indicate to the caller that the method has returned.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Using this approach enables the infrastructure to send SOAP faults back to the client.) Setting <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> to <ph id="ph2">`true`</ph> is the only way to cancel the creation and dispatch of a response message.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>One-way methods must not return a value or have <ph id="ph1">`ref`</ph> or <ph id="ph2">`out`</ph> parameters; otherwise a <ph id="ph3">&lt;xref:System.InvalidOperationException?displayProperty=fullName&gt;</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying that an operation is a one-way operation means only that there is no response message.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is possible to block if a connection cannot be made, or the outbound message is very large, or if the service cannot read inbound information fast enough.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a client requires a non-blocking call, generate <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> operations.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>One-Way Services<ept id="p1">](~/docs/framework/wcf/feature-details/one-way-services.md)</ept> and <bpt id="p2">[</bpt>Accessing Services Using a WCF Client<ept id="p2">](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this method receives a request message and returns no reply message; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the service operation causes the server to close the session after the reply message, if any, is sent.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A&gt;</ph> property to indicate that calling a service operation terminates the communication session.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a client application, a value of <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A&gt;</ph> set to <ph id="ph2">`true`</ph> instructs <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> to close the channel after the reply arrives.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a service, a timer is set and the channel aborts if the client does not close the channel within that period.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using this property with sessions, see <bpt id="p1">[</bpt>Using Sessions<ept id="p1">](~/docs/framework/wcf/using-sessions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a caller is listening for the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.OperationCompleted?displayProperty=fullName&gt;</ph> event for an <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A?displayProperty=fullName&gt;</ph> operation, it is possible to block when the response is received.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The proper way to handle this is to schedule work on another thread when <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.OperationCompleted&gt;</ph> is raised and then immediately return from that event handler.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the operation causes the server to close the session, otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the operation.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Name%2A&gt;</ph> property to override the &lt;<ph id="ph2">`operation`</ph>&gt; element name in WSDL.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default operation name is the name of the implementing method.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The name of the operation.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.ServiceModel.OperationContractAttribute.Name"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The value is an empty string.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies whether the messages of an operation must be encrypted, signed, or both.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A&gt;</ph> property to control whether the messages of an operation must be encrypted, signed, or both.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value set here is the default value for all messages specified for this operation unless a narrower scope overrides this value.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is important to remember that the protection behavior at runtime is the combination of the protection-level values set on the following properties.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>These properties have a hierarchical structure.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the outermost value establishes the default setting for all narrower scopes unless a different value for a narrower scope is explicitly set.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the outer value remains the default for all narrower scopes with the exception of that specifically set.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=fullName&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph> and no other narrower scopes have protection level settings, all messages in an operation contract are encrypted and signed.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>If, however, one of those operations has the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A&gt;</ph> set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph>, then the messages for that operation are signed but all other messages in the contract are encrypted and signed.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about protection levels and their assumptions and scopes, see <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scopes at which these values are set are:</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=fullName&gt;</ph> property on <ph id="ph2">&lt;xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=fullName&gt;</ph> property on <ph id="ph2">&lt;xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>When there is no protection level explicitly specified on the contract and the underlying binding supports security (whether at the transport or message level), the effective protection level for the whole contract is <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the binding does not support security (such as <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph>), the effective <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph> is <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph> for the whole contract.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result is that depending upon the endpoint binding, clients can require different message or transport level security protection even when the contract specifies <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Net.Security.ProtectionLevel"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Net.Security.ProtectionLevel.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The value is not one of the <ph id="ph1">&lt;xref href="System.Net.Security.ProtectionLevel"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Gets or sets the value of the SOAP action for the reply message of the operation.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition to specifying a particular value for the action header of the reply message, you can also specify the string "*" (an asterisk).</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying an asterisk in the service instructs <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> not to add a reply action to the message, which is useful if you are programming against messages directly.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying an asterisk in a client application instructs <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> not to validate the reply action.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The value of the SOAP action for the reply message.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.ServiceModel.OperationContractAttribute.ReplyAction"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>