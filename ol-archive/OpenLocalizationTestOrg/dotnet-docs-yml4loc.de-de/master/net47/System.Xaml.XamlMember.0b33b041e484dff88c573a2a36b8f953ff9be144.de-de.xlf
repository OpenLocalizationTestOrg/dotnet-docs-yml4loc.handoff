<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d82d8c351071eb97d0b9268c1f8f39b015c3c7ec</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xaml.XamlMember.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">376e0694b95ff13c0a616fc01641efb333a6b55c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d37585847716040517f0aeee87bc82f12b4ffda0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the XAML type system identifier for members of XAML types.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <ph id="ph1">&lt;xref href="System.Xaml.XamlNodeType.StartMember"&gt;&lt;/xref&gt;</ph>) and also for general XAML type system logic.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> can use three methodologies for returning information about a XAML member: standard common language runtime (CLR) reflection; a reference-only reflection technique calling internal APIs that use optimized bit flags; or calling into virtual overrides of the <ph id="ph2">`Lookup*`</ph> API that is provided by possible <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> subclasses.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For most uses of .NET Framework XAML Services APIs and the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, you use the default XAML schema context.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default XAML schema context for .NET Framework XAML Services uses CLR backing for the type system.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables the XAML readers and XAML writers to work with any type or member that is defined in, or otherwise available to, the CLR and its reflection techniques.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Lookup* APIs and XamlMember Derived Classes</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> defines several virtual members that derived classes might override.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>These members have names that always start with the string <ph id="ph1">`Lookup`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The remainder of the API name then references the property that the virtual method influences.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class might override <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> to influence what the base-defined property <ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> returns in a derived class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can predict return values for such properties in <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> or existing derived classes by reading the documentation for the relevant <ph id="ph2">`Lookup*`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of the <ph id="ph1">`Lookup*`</ph> methods is to provide a XAML type system extension technique that incorporates the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> base class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>By deriving from <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> and overriding the <ph id="ph2">`Lookup`</ph> virtual members, you can define the concept of a XAML member for a XAML schema in a XAML type system without being tied to the specifics of a backing type system or technology.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use a provided XAML schema context under this scheme and still return the results you want.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>As an example, consider the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> property <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property informs callers that operations such as using a <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> for serialization can write a value for this member on a target object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the default implementation, the determination of whether the member is writable is made by using reflection techniques against the backing CLR <ph id="ph1">&lt;xref:System.Type&gt;</ph> and its members (the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, by default, the XAML type system depends on the CLR type system.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can remove this dependency for your XAML type system reporting of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> by overriding the API <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within your override, you can use other determinations, such as metadata that is specific to your technology, a master lookup table that is optimized for a fixed XAML vocabulary, or a variety of other strategies for determining whether a XAML member is writable in your XAML vocabulary.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Constructing XamlMember Without XAML Schema Context</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most constructors of <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> require a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> as part of their initialization.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> is also necessary for many internal <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> operations, such as obtaining information that is being forwarded from the backing type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are working with the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, you typically have a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> that is available from a surrounding construct such as a <ph id="ph3">&lt;xref:System.Xaml.XamlWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, you can pass the <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> reference through to all XAML type system calls that require a XAML schema context.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>One specific constructor, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>, does not require a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, such a member cannot be written into an object graph.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the .NET Framework XAML services implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that has a value of <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, one or more of the  following might be true of your implementation:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XAML schema context is available later.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use a member invoker pattern.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>You deliberately override <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;</ph> in a custom XAML writer.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> class using CLR type system <ph id="ph2">&lt;xref href="System.Reflection.EventInfo"&gt;&lt;/xref&gt;</ph> and a <ph id="ph3">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor if the member represents an event (event handler connection-point property).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The CLR type system <ph id="ph1">&lt;xref href="System.Reflection.EventInfo"&gt;&lt;/xref&gt;</ph> that represents the event member.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph> context that qualifies the member.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> class using CLR type system <ph id="ph2">&lt;xref href="System.Reflection.PropertyInfo"&gt;&lt;/xref&gt;</ph> and a <ph id="ph3">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor if the member represents a property (and specifically is not an event handler connection).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The CLR type system <ph id="ph1">&lt;xref href="System.Reflection.PropertyInfo"&gt;&lt;/xref&gt;</ph> that represents the property member.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph> context that qualifies the member.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> class using CLR type system <ph id="ph2">&lt;xref href="System.Reflection.EventInfo"&gt;&lt;/xref&gt;</ph> and a <ph id="ph3">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph>, including <ph id="ph4">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> information.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor if the member represents an event (or an event handler connection-point property).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The CLR type system <ph id="ph1">&lt;xref href="System.Reflection.EventInfo"&gt;&lt;/xref&gt;</ph> that represents the event member.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph> context that qualifies the member.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> implementation that handles run-time reflection calls against the <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> class using reflection <ph id="ph2">&lt;xref href="System.Reflection.PropertyInfo"&gt;&lt;/xref&gt;</ph> and a <ph id="ph3">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph>, including <ph id="ph4">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> information.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor only if the member represents a property and if it is not an event handler connection.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The CLR type system <ph id="ph1">&lt;xref href="System.Reflection.PropertyInfo"&gt;&lt;/xref&gt;</ph> that represents the property member.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph> context that qualifies the member.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> class for a <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> that represents an attachable event.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor if the member represents an attachable event member.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The string name of the attachable event.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The CLR type system <ph id="ph1">&lt;xref href="System.Reflection.MethodInfo"&gt;&lt;/xref&gt;</ph> for the handler <ph id="ph2">`Add`</ph> method of the attachable member's backing implementation.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph> context that qualifies the member.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> class using a string name and declaring <ph id="ph2">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> information.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> that is constructed with this signature has significant limitations.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, such a member cannot be written into an object graph.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the .NET Framework XAML Services implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> with <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph><ph id="ph3">`true`</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, one or more of the following might be true of your implementation:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XAML schema context is available later.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use a member invoker pattern.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>You deliberately override <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;</ph> in a custom XAML writer.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The string name of the member.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> information for the declaring type.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to indicate that the member is attachable; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;declaringType&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> class for a <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> that represents an attachable property.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor if the member represents an attachable property.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The string name of the attachable property.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The CLR type system <ph id="ph1">&lt;xref href="System.Reflection.MethodInfo"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">`get`</ph> accessor of the attachable member's backing implementation.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The CLR type system <ph id="ph1">&lt;xref href="System.Reflection.MethodInfo"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">`set`</ph> accessor of the attachable member's backing implementation.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph> context that qualifies the member.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> class for a <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> that represents an attachable event, including <ph id="ph3">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> information.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor if the member represents an attachable event member.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The string name of the attachable event.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The CLR type system <ph id="ph1">&lt;xref href="System.Reflection.MethodInfo"&gt;&lt;/xref&gt;</ph> for the handler <ph id="ph2">`Add`</ph> method of the attachable member's backing implementation.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph> context that qualifies the member.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> class for a <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> that represents an attachable property, including <ph id="ph3">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> information.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this constructor if the member represents an attachable property member.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The string name of the attachable property.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The CLR type system <ph id="ph1">&lt;xref href="System.Reflection.MethodInfo"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">`get`</ph> accessor of the attachable member's backing implementation.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The CLR type system <ph id="ph1">&lt;xref href="System.Reflection.MethodInfo"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">`set`</ph> accessor of the attachable member's backing implementation.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;&lt;/xref&gt;</ph> context that qualifies the member.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> for the type that declares the member that is associated with this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is typically set during initialization and is usually not <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> information can be passed in by constructors for initialization.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>By calling directly into base constructors, initialization for <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived classes can omit some of the value-checks that are made in the base class.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the derived initialization can change the reported type-member relationship information of a XAML member so that it no longer aligns in an expected way with the type system information of its underlying CLR declaration.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of declaring type information, use the underlying CLR type instead.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> for the type that declares the member that is associated with this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> with <ph id="ph2">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;&lt;/xref&gt;</ph> constraint on the generic.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Gets a list of <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>These report the members where dependency relationships for initialization order exist relative to this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern can be applied to object model cases that deliberately contradict a general XAML rule.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The general XAML rule is that members of a type that are not passed as initialization text (or by a factory method in XAML 2009) must be able to be assigned in any order.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>By applying a <ph id="ph1">`DependsOn`</ph> pattern to a member, you can instruct XAML writers to always process the referenced member before this member.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this pattern in situations where the value of the current member requires context or other information that is only available after the other member is set.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern should be applied judiciously and reserved for property scenarios where it serves an architectural purpose.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Large numbers of dependencies have the potential to slow down XAML processing.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, it is possible to produce circular dependencies, in which case the XAML processing behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example <ph id="ph1">`DependsOn`</ph> scenarios from WPF include certain properties on <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>, on <ph id="ph4">&lt;xref:System.Windows.Trigger&gt;</ph>, and on <ph id="ph5">&lt;xref:System.Windows.Setter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A list of <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>An object to compare with this object.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current object is equal to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">other</ph><ept id="p1">&lt;/code&gt;</ept> parameter; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Indicates whether the current object is equal to another object.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The object to compare with this object.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current object is equal to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>An integer hash code.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Returns a list of XAML namespaces where this XAML member can exist.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns the <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName&gt;</ph> call result from the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> that is associated with this <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A list of XAML namespace identifiers as strings.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Invoker`</ph> pattern is an advanced XAML type system extension technique.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Invoker`</ph> pattern provides a way to inject different schema type mapping behavior, while still using XAML type system definitions from .NET Framework XAML Services.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> override returns <ph id="ph2">`null`</ph>, or if the default implementation returns <ph id="ph3">`null`</ph> because it lacks the <ph id="ph4">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> for this <ph id="ph5">&lt;xref:System.Xaml.XamlMember&gt;</ph>, the <ph id="ph6">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> property returns <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;</ph> is the default.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is true for most operations that use .NET Framework XAML Services and the default XAML schema context, and where no specific override <ph id="ph1">`Invoker`</ph> patterns are passed for construction of XAML type system entities.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> is reported as an ambient property.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior occurs in implementations where the initial internal reflection logic has not already set the information.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Checking for ambient properties is are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework XAML Services APIs and the default XAML schema context populates this value based on attribution with <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> uses this existing <ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> technique, and it returns <ph id="ph3">`true`</ph> if <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> exists on a member declaration.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> is found on members of several WPF types, which include <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Setter&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also found on the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> type, which connotes that any member that uses <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> as its type should be considered ambient even if the member is not specifically attributed.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> is reported as an ambient property; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> is an attachable member.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph> value is initialized based on which constructor was used to construct a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> is an attachable member; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> is a XAML directive.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> value is initialized based on which constructor was used to construct a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> constructors initialize so that <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> is <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> class (a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class) initializes so that <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> is <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to report <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> as <ph id="ph2">`true`</ph> to callers of a custom XAML schema class for XAML members, make sure you derive from <ph id="ph3">&lt;xref:System.Xaml.XamlDirective&gt;</ph> because that is the only way to enable that behavior.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> is a XAML directive; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents an event member.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents an event; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> is initialized with a valid <ph id="ph2">`xamlName`</ph> string as its <ph id="ph3">&lt;xref href="System.Xaml.XamlMember.Name"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> is initialized with a valid <ph id="ph3">`xamlName`</ph> string; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a read-only member.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a read-only member; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a member with a callable public <ph id="ph2">`get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> value checks whether the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is public.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is nonpublic, the <ph id="ph2">`get`</ph> accessor is not callable in a practical way, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> returns <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a callable public <ph id="ph3">`get`</ph> accessor; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> with <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> cannot be written into an object graph.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Under the default implementations in .NET Framework XAML Services APIs, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that has a value of <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the member is not resolvable; <ph id="ph2">`false`</ph> if the member is resolvable.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a write-only member.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a write-only member; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a member that has a callable public <ph id="ph2">`set`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> value considers whether the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is public as part of the determination.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is nonpublic, the <ph id="ph2">`set`</ph> accessor is not callable in a practical way, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> returns <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a callable public <ph id="ph3">`set`</ph> accessor; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, returns an <ph id="ph1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;&lt;/xref&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the absence of an override, the internal reflector uses typical CLR reflection logic such as calls to <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;&lt;/xref&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns an object either by reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph> or using a <ph id="ph2">&lt;xref:System.Xaml.XamlDeferringLoader&gt;</ph> from the declaring type.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>If neither object is available, this method might return <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> that has a <ph id="ph2">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;&lt;/xref&gt;</ph> constraint on the generic.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Returns a list of <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Items in the list report the members where dependency relationships for initialization order exist relative to this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>The WPF XAML reader and writer implementations attribute this case with <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses this existing <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> technique.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you are not using <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> for this purpose and intend to replace that technique for indicating property processing order with your own technique.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not intend to support a property processing order, you can use the default implementation because it returns no results, which is appropriate.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>The list is read-only.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>A list of <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> that is associated with this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation does not require that a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> be constructed by using one of the constructors that pass an initial <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, an <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> value must exist for the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>; otherwise, the default implementation returns <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you also derive from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> and intend to return the derived class.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you return <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> returns <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;</ph> to callers.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlMemberInvoker"&gt;&lt;/xref&gt;</ph> information for this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>; or <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Returns whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> is reported as an ambient property.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked by internal calls that check for ambient XAML property information.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ambient property behavior is accounted for in the public API behavior of XAML readers and XAML writers.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>The internal calls that reference <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default .NET Framework XAML Services implementation uses CLR attributing to obtain this information from reflection over backing types.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, the default implementation checks for <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> and returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> if <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> exists on a member definition.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you are not using <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> for this purpose and intend to replace that technique for indicating ambient XAML properties with your own technique.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example APIs from WPF that attribute with <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> are <ph id="ph2">&lt;xref:System.Windows.Trigger.Property%2A?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to report this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> as an ambient property; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Returns whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents an event.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation checks whether <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> is of type <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph>, and if it is, returns <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to report that this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents an event; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Returns whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents an intended read-only property.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> exists, but a public <ph id="ph3">`set`</ph> accessor does not exist for it, as determined by internal reflection.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to report this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> as an intended read-only property; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Returns whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a property that has a public <ph id="ph2">`get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns results based either on internal reflection or the negation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>, processing in that order.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> returns whether the member itself is public; it returns <ph id="ph2">`true`</ph> for a public member on a nonpublic declaring type.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> instead, if you also want to consider the visibility of the declaring type.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a property that has a public <ph id="ph3">`get`</ph> accessor; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Returns whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a member that is not resolvable by the backing system that is used for type and member resolution.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method may be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns results that are based on either internal reflection or checking for a <ph id="ph1">`null`</ph> value of <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>, processing in that order.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a non-resolvable member; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Returns whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a member that has a public <ph id="ph2">`set`</ph> accessor but not a public <ph id="ph3">`get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if an <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> exists that has a public <ph id="ph3">`set`</ph> accessor and a nonpublic <ph id="ph4">`get`</ph> accessor, as determined by internal reflection.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a write-only member; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Returns whether this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a member that has a public <ph id="ph2">`set`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns results based  either internal reflection or the negation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>, processing in that order.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> represents a writable member; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Returns the opening and closing bracket characters for a markup extension.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>A collection containing the opening and closing bracket characters.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> of the type where the <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> can exist.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation distinguishes between attachable and non-attachable members.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>For non-attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> always returns <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>For attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> returns a result based on examining the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> accessor parameter type and interprets that type based on XAML schema context.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The type where the <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> can exist.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> of the type that is used by the member.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses different code paths and conceptual meanings for the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that is based on whether this <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> represents a property, method, or event.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a property, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type that sets the property or is returned by the property.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an event, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the required event handler type (a delegate in a CLR implementation).</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a method, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the return type.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>In each case, XAML schema context is used to evaluate the XAML type from the underlying system type.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> of the type that is used by the member.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Returns a type converter implementation that is associated with this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses the following logic and processing order:</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>If attributing exists at the member level (<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>), the attribute information is used for a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> against the XAML schema context.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> is valid, a type converter that is associated with the type is returned.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the member is an event, an event-specific type converter is returned.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> instance with <ph id="ph2">&lt;xref href="System.ComponentModel.TypeConverter"&gt;&lt;/xref&gt;</ph> constraint; or <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`get`</ph> accessor that is associated with this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation interprets the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> property as <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> and returns the value of <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName&gt;</ph> (with the parameter set to <ph id="ph4">`true`</ph>), which means that the returned method can be nonpublic.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior can result in <ph id="ph1">`null`</ph> for certain cases.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>including cases where no associated accessor exists or the member is not a property.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;</ph> property on an associated <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Reflection.MethodInfo"&gt;&lt;/xref&gt;</ph> for the associated <ph id="ph2">`get`</ph> accessor; or <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Returns a CLR type system <ph id="ph1">&lt;xref href="System.Reflection.MemberInfo"&gt;&lt;/xref&gt;</ph> that is associated with this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns the underlying member information, which is based on construction.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object is constructed with a signature that does not provide enough information to set the underlying member, this method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an underlying member was set during construction, you should not need to call this method.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>A CLR type system <ph id="ph1">&lt;xref href="System.Reflection.MemberInfo"&gt;&lt;/xref&gt;</ph> object that is associated with this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>; or <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`set`</ph> accessor that is associated with this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation interprets <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> as <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> and returns the value of <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName&gt;</ph> (with the parameter set to <ph id="ph4">`true`</ph>), which means that the returned method can be nonpublic.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can result in <ph id="ph1">`null`</ph> for certain cases, including cases where there is no such accessor, or the member is not a property.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;</ph> on an associated <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.Override this method if you want to report uniform results for an entire <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Reflection.MethodInfo"&gt;&lt;/xref&gt;</ph> for the associated <ph id="ph2">`set`</ph> accessor; or <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Returns a value serializer implementation that is associated with this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation uses the following logic and processing order:</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>If attributing exists at the member level (<ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>), the attribute information is used for a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> against the XAML schema context.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> is valid, a value converter that is associated with the type is returned.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the previous conditions do not apply, <ph id="ph1">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> instance with <ph id="ph2">&lt;xref href="System.Windows.Markup.ValueSerializer"&gt;&lt;/xref&gt;</ph> constraint, or <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Defines the opening and closing bracket characters for a markup extension.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>A collection containing the opening and closing bracket characters.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">`xamlName`</ph> name string that declares this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is always set during construction.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructors that are implemented by <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> typically throw an exception if an initial name is not specified; therefore, do not expect this property to be <ph id="ph2">`null`</ph> or an empty string, if you are using default .NET Framework XAML Services implementations.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept> and naming rules for CLR type and members are not an exact intersect.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is possible to declare a member name that is legal under CLR but not valid under XAML naming.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should avoid this situation if possible.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xamlName`</ph> name string that declares this <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> objects have the same value.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">xamlMember1</ph><ept id="p1">&lt;/code&gt;</ept> is the same as the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">xamlMember2</ph><ept id="p2">&lt;/code&gt;</ept>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> objects have different values.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">xamlMember1</ph><ept id="p1">&lt;/code&gt;</ept> differs from the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">xamlMember2</ph><ept id="p2">&lt;/code&gt;</ept>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Gets the single XAML namespace URI that identifies the primary XAML namespace for this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;</ph> property provides the same value as calling <ph id="ph2">&lt;xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt;</ph> and then getting the first value string from the returned list.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>The preferred XAML namespace should be used when writing the member back to text or other representations that preserve XAML namespace information.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The identifier for the primary XAML namespace for this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>, as a string.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.ComponentModel.DesignerSerializationVisibility"&gt;&lt;/xref&gt;</ph> value, which indicates how a visual designer should process the member.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>A value of the <ph id="ph1">&lt;xref href="System.ComponentModel.DesignerSerializationVisibility"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.ComponentModel.DesignerSerializationVisibility.Visible"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> of the type where the <ph id="ph2">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> can exist.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned value is different for attachable and non-attachable members.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>For non-attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> returns <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>For attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> returns a result that is based on this logic:</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>If reflection cannot resolve a backing (<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> <ph id="ph2">`true`</ph>), this method returns an internal constant that represents a generic object type.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the previous condition does not apply, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation returns a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that is based on examining the methods that implement the <ph id="ph2">`get`</ph> and <ph id="ph3">`set`</ph> accessors.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>A class might override <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> to use a different behavior such as other metadata forms that might report target types for attachable members.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The type where the <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> can exist.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation returns <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>A string representation of this <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> of the type that is used by the member.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurs when the initial internal reflection logic has not already set the information.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the default behavior (no <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> override), the returned <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> can have different conceptual meanings.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>Which meaning applies depends on whether this <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> represents a property, method, or event, as the following list shows:</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a property, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type that sets the property or is returned by the property.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an event, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the required event handler type (a delegate in a CLR implementation).</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a method, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the return type of that method, which may be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>In each case, the XAML schema context is used to evaluate the XAML type from the backing type.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> of the type that is used by the member.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> object, which can be used for type conversion construction of XAML declared objects.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations that return a non-null property value for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> are not necessarily a working <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following is a list of possible non-null return values for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> and what these values represent:</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value reports a type converter that is attributed specifically to that member or more generally to the target type of the converter.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior is typically what most XAML type systems and XAML processors look for in order to instantiate a type converter and invoke its methods.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value reports a built-in value converter.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>These converters exist for certain internal operations that are performed by a XAML writer.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>In particular, these built-in value converters convert the raw attribute string values to the XAML language-level primitives.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the .NET Framework XAML Services implementation, these built-in type conversions often forward to a type converter that is defined in the System assembly.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a conversion for an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> value has built-in forwarded conversion, and therefore, the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt;</ph> value references <ph id="ph3">&lt;xref:System.ComponentModel.Int32Converter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value reports the special case of an unconstrained object model; that is, the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> has a <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> value of <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> reports that the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName&gt;</ph> is {<ph id="ph3">`Object}`</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> is <ph id="ph2">`null`</ph> because no actual type or instance is available to perform this conversion.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the object model behavior cannot be determined until run time, when the runtime of the specific technology determines the handling of its object graph.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you can access a working <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> from <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>, you can invoke its conversion methods.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, many conversion methods rely on service context.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not have the same service context available that the type converter expects for its typical role of writing objects for object graphs, the converter methods can throw exceptions.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> value, with a <ph id="ph2">&lt;xref href="System.ComponentModel.TypeConverter"&gt;&lt;/xref&gt;</ph> constraint on the generic.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Gets the CLR type system <ph id="ph1">&lt;xref href="System.Reflection.MemberInfo"&gt;&lt;/xref&gt;</ph> that is available for a member that is constructed by <ph id="ph2">&lt;xref href="System.Reflection.PropertyInfo"&gt;&lt;/xref&gt;</ph>, <ph id="ph3">&lt;xref href="System.Reflection.MethodInfo"&gt;&lt;/xref&gt;</ph>, or <ph id="ph4">&lt;xref href="System.Reflection.EventInfo"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>CLR type system <ph id="ph1">&lt;xref href="System.Reflection.MemberInfo"&gt;&lt;/xref&gt;</ph> information, as cast from the initial constructor parameters.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.XamlMember"&gt;&lt;/xref&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref href="System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)"&gt;&lt;/xref&gt;</ph> signature returns <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> object, which is used for value serialization of XAML declared objects.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt;</ph> or a specific override of that method.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not all cases that return a non-null property value for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> are necessarily a working <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>; the same considerations apply to <ph id="ph2">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Xaml.Schema.XamlValueConverter`1"&gt;&lt;/xref&gt;</ph> with <ph id="ph2">&lt;xref href="System.Windows.Markup.ValueSerializer"&gt;&lt;/xref&gt;</ph> constraint on the generic.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>