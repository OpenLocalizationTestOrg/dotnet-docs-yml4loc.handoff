<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45e0b139bd035a0968857b017b184c20a238fab8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Channels.SupportedAddressingMode.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cada122272a5f2a2e44f525db8371701ee059459</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61b619ff7a0e3ecf6d84283245b3e492b0b48176</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies whether a service supports sending responses to anonymous addresses only, to non-anonymous addresses only, or to both.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enumeration is used to specify the capability of a server, which, in turn, imposes a requirement on its clients.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> has a variety of addressing controls for specifying where messages should be sent.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, there is the logical <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.To%2A&gt;</ph> address for the message destination, the physical ("Via") address, used by the transport, at which a service listens, and the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageHeaders.ReplyTo%2A&gt;</ph> address of the endpoint that provides the address of the client endpoint.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the most basic case, when two parties exchange messages between themselves only, it is not necessary to specify these addresses separately.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>But because exchanges can involve other message destinations, you must be able to specify when addresses must be explicitly provided.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even between just two parties this ability is sometimes required, as with dual HTTP where the server must create its own HTTP request.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following kinds of relationships are defined by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.SupportedAddressingMode&gt;</ph> enumeration to capture these messaging patterns:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Anonymous addresses are the most basic form of addressing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Anonymous addressing is used when there is a default path for a response.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>TCP is a bi-directional communication transport and the response to a TCP message can be sent back to the other side of the socket that sent the original message.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, the request-reply model of HTTP sends responses through the HTTP reply channel.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Neither of these responses requires specifying where the response messages are going.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a server requires anonymous responses from the client, it uses the Anonymous value of the enumeration.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> system-provided <ph id="ph2">&lt;xref:System.ServiceModel.NetTcpBinding&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph> bindings always use Anonymous addresses.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>NonAnonymous addresses are used when sending the response requires creating a new channel for communication.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> system-provided <ph id="ph2">&lt;xref:System.ServiceModel.WSDualHttpBinding&gt;</ph> binding uses a NonAnonymous address.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>With dual HTTP, the client creates an HTTP request to send a message and then the server must create its own HTTP request to send a response.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the server is initiating the send, it must have a specific endpoint to establish the connection.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must provide the server the address of an endpoint for its response.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, if a service must respond to a one-way message that it received, it also requires a NonAnonymous address because there is no back channel available for communication.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the server sends a message back, a completely separate operation from that used to send the first message is required.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Mixed is a third form of addressing which combines Anonymous and NonAnonymous addresses depending on the message that is being sent.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>A typical example of mixed-mode addressing is the use of a dedicated machine for processing fault or acknowledgment messages.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the standard exchange sequence for replies is HTTP or TCP, the responses use Anonymous addressing but the faults use non-anonymous addressing.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>While <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> does not provide Mixed addressing functionality in one of its standard bindings, it is possible to write a channel that allows the service to send responses directly on the back-channel (when the response address is Anonymous) or on a separate channel (when the response address is NonAnonymous).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>In such a case, the binding element of the channel is used to set<ph id="ph1">&lt;xref:System.ServiceModel.Channels.SupportedAddressingMode&gt;</ph> to Mixed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The server only supports anonymous addresses and clients must provide an anonymous response address.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The server supports both anonymous and non-anonymous addresses and clients may choose to use either or both.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The server only supports non-anonymous addresses and clients must provide a non-anonymous response address.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>