<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4698c46911196401729de250ade08ad6d652f022</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Threading.ThreadLocal-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4524779bfe94253f93792ce92fb4adaf140bec8c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d1306c5a378f2a2da5b300471bbcb7802a8bc6c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides thread-local storage of data.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Specifies the type of data stored per-thread.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value of <ph id="ph1">`T`</ph> is used to initialize the instance when <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> is accessed for the first time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is equivalent to calling the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.%23ctor%28System.Boolean%29&gt;</ph> constructor with a value of <ph id="ph2">`false`</ph> for the <ph id="ph3">`trackAllValues`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1"&gt;&lt;/xref&gt;</ph> instance and specifies whether all values are accessible from any thread.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`trackAllValues`</ph> is <ph id="ph2">`false`</ph>, only the value of this instance for the current thread is accessible.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to use the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Values%2A&gt;</ph> property to retrieve all values throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to track all values set on the instance and expose them through the <ph id="ph2">&lt;xref href="System.Threading.ThreadLocal`1.Values"&gt;&lt;/xref&gt;</ph> property; <ph id="ph3">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1"&gt;&lt;/xref&gt;</ph> instance with the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">valueFactory</ph><ept id="p1">&lt;/code&gt;</ept> function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The  <ph id="ph1">&lt;xref href="System.Func`1"&gt;&lt;/xref&gt;</ph> invoked to produce a lazily-initialized value when an attempt is made to retrieve <ph id="ph2">&lt;xref href="System.Threading.ThreadLocal`1.Value"&gt;&lt;/xref&gt;</ph> without it having been previously initialized.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;valueFactory&lt;/code&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes the <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1"&gt;&lt;/xref&gt;</ph> instance with the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">valueFactory</ph><ept id="p1">&lt;/code&gt;</ept> function and a flag that indicates whether all values are accessible from any thread.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`trackAllValues`</ph> is <ph id="ph2">`false`</ph>, only the value of this instance for the current thread is accessible.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to use the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Values%2A&gt;</ph> property to retrieve all values throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Func`1"&gt;&lt;/xref&gt;</ph> invoked to produce a lazily-initialized value when an attempt is made to retrieve <ph id="ph2">&lt;xref href="System.Threading.ThreadLocal`1.Value"&gt;&lt;/xref&gt;</ph> without it having been previously initialized.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to track all values set on the instance and expose them through the <ph id="ph2">&lt;xref href="System.Threading.ThreadLocal`1.Values"&gt;&lt;/xref&gt;</ph> property; <ph id="ph3">`false`</ph> otherwise.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;valueFactory&lt;/code&gt;</ph> is a <ph id="ph2">`null`</ph> reference (<ph id="ph3">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> in an unusable state.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> was occupying.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Releases the resources used by this <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>, this method is not thread-safe.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A Boolean value that indicates whether this method is being called due to a call to <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1.Dispose"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Releases the resources used by this <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets whether <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1.Value"&gt;&lt;/xref&gt;</ph> is initialized on the current thread.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>true if <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1.Value"&gt;&lt;/xref&gt;</ph> is initialized on the current thread; otherwise false.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1"&gt;&lt;/xref&gt;</ph> instance has been disposed.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Creates and returns a string representation of this instance for the current thread.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method forces initialization for the current thread, as is the case with accessing <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> directly.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The result of calling <ph id="ph1">&lt;xref href="System.Object.ToString"&gt;&lt;/xref&gt;</ph> on the <ph id="ph2">&lt;xref href="System.Threading.ThreadLocal`1.Value"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1"&gt;&lt;/xref&gt;</ph> instance has been disposed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1.Value"&gt;&lt;/xref&gt;</ph> for the current thread is a null reference (Nothing in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The initialization function attempted to reference <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1.Value"&gt;&lt;/xref&gt;</ph> recursively.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>No default constructor is provided and no value factory is supplied.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets or sets the value of this instance for the current thread.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this instance was not previously initialized for the current thread, accessing <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> will attempt to initialize it.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an initialization function was supplied during the construction, that initialization will happen by invoking the function to retrieve the initial value for <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the default value of will be used.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception is thrown, that exception is cached and thrown on each subsequent access of the property.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns an instance of the object that this ThreadLocal is responsible for initializing.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1"&gt;&lt;/xref&gt;</ph> instance has been disposed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The initialization function attempted to reference <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1.Value"&gt;&lt;/xref&gt;</ph> recursively.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>No default constructor is provided and no value factory is supplied.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets a list for all of the values currently stored by all of the threads that have accessed this instance.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A list for all of the values currently stored by all of the threads that have accessed this instance.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Values stored by all threads are not available because this instance was initialized with the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">trackAllValues</ph><ept id="p1">&lt;/code&gt;</ept> argument set to <ph id="ph2">`false`</ph> in the call to a class constructor.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.ThreadLocal`1"&gt;&lt;/xref&gt;</ph> instance has been disposed.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>