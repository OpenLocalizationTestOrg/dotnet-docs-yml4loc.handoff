<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5da0c83b5e5176d4f4fe8aab645a5ca670e7649f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.TypeInitializationException.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8912555f8b673828526e2e2d1038a5050c212301</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2fe61bdeced2bb5f25a6c9741098353b1aa69b3e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The exception that is thrown as a wrapper around the exception thrown by the class initializer.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a class initializer fails to initialize a type, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> is created and passed a reference to the exception thrown by the type's class initializer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> holds the underlying exception.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most commonly, the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> is thrown in response to some change in the executing environment of the application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the cause of the exception should be investigated and eliminated.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.TypeInitializationException.%23ctor%2A&gt;</ph> constructors.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following sections describe some of the situations in which a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Static constructors and the TypeInitializationException exception<ept id="p1">](#Static)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1"> [</bpt>Regular expression match timeout values<ept id="p1">](#Timeout)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1"> [</bpt>Calendars and cultural data<ept id="p1">](#Calendars)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Static constructors and the TypeInitializationException exception</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Static constructors can be explicitly defined by a developer.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a static  constructor is not explicitly defined, compilers automatically create one to initialize any <ph id="ph1">`static`</ph> (in C#) or <ph id="ph2">`Shared`</ph> (in Visual Basic) members of the type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on static constructors, see <bpt id="p1">[</bpt>Static Constructors<ept id="p1">](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most commonly, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is thrown when a static constructor is unable to instantiate a type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property indicates why the static constructor was unable to instantiate the type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some of the more common causes of a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception are:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>An unhandled exception in a static constructor</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception is thrown in a static constructor, that exception is wrapped in a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception, and the type cannot be instantiated.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>A static constructor exists in a type if:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>It has been explicitly defined as a member of a type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type has  <ph id="ph1">`static`</ph> (in C#) or <ph id="ph2">`Shared`</ph> (in Visual Basic) variables that are declared and initialized in a single statement.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the language compiler generates a static constructor for the type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can inspect it by using a utility such as <bpt id="p1">[</bpt>IL Disassembler<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception thrown by a compiler-generated static constructor.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Example`</ph> class includes a <ph id="ph2">`static`</ph> (in C#) or <ph id="ph3">`Shared`</ph> (in Visual Basic) field of type <ph id="ph4">`TestClass`</ph> that is instantiated by passing a value of 3 to its class constructor.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>That value, however, is illegal; only values of 0 or 1 are permitted.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the <ph id="ph1">`TestClass`</ph> class constructor throws an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since this exception is not handled, it is wrapped in a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.TypeInitializationException#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.TypeInitializationException#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the exception message displays information about the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>A missing assembly or data file</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>A common cause of a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can compile the following example to an assembly named Missing1a.dll by using the this command-line syntax:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.TypeInitializationException#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.TypeInitializationException#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception and displays the output shown in the example.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the exception message includes information about the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case,  the inner exception is a <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> that is thrown because the runtime cannot find the dependent assembly.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.TypeInitializationException#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.TypeInitializationException#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this example, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception was thrown because an assembly could not be loaded.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Regular expression match timeout values</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The timeout is defined by a specifying a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property to the  <ph id="ph2">&lt;xref:System.AppDomain.SetData%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The time interval must be a valid <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> object that is greater than zero and less than approximately 24 days.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If these requirements are not met, the attempt to set the default timeout value throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, which in turn is wrapped in a <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> that is thrown when the value assigned to the "REGEX_DEFAULT_MATCH_TIMEOUT" property is invalid.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>To eliminate the exception, set the"REGEX_DEFAULT_MATCH_TIMEOUT" property to a  <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> value that is greater than zero and less than approximately 24 days.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.TypeInitializationException#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.TypeInitializationException#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calendars and cultural data</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that corresponds to that calendar, it throws a <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception can be thrown by the following calendar class constructors:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.KoreanCalendar&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.TypeInitializationException"&gt;&lt;/xref&gt;</ph> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The inner exception reference.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The localized error message string.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of the type.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the type that fails to initialize.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The exception that is the cause of the current exception.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">innerException</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic), the current exception is raised in a <ph id="ph3">`catch`</ph> block that handles the inner exception.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> object with the type name and additional exception information.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> that holds the serialized object data about the exception being thrown.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Serialization.StreamingContext"&gt;&lt;/xref&gt;</ph> that contains contextual information about the source or destination.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Gets the fully qualified name of the type that fails to initialize.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the type that fails to initialize.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>