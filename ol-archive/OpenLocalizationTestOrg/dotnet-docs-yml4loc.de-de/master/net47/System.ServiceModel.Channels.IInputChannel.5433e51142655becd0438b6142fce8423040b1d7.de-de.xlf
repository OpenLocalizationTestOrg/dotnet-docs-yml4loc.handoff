<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f1aa06374716b8b91baf1dc970b41ec9cab7fbf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Channels.IInputChannel.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">438718d405635112720f9c067a0de1972a702b24</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b67dca6914bf004624006bf7d63e87cd0e658c13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the interface that a channel must implement to receive a message.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The pull model is used typically with an <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> to receive messages: you call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> (to "pull" a message out of the channel) and then wait for a message to arrive.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>An alternative usage pattern is to call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph>, and then call <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This approach is common for transactional usages where you start the transaction between the calls to <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> is not necessarily bound to a single sender.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other channels and channel interfaces can provide a correlation between particular senders and an <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph>, but the base contract makes no such restriction.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>An implementation can create a new <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> for each message or reuse the same <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> for multiple messages and senders.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous operation to receive a message that has a state object associated with it.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the <ph id="ph2">`timeout`</ph> has been exceeded.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous operation is available with or without an explicit timeout.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is not complete until a message becomes available in the channel.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that references the asynchronous message reception.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the <ph id="ph2">`timeout`</ph> has been exceeded.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous operation is available with or without an explicit timeout.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is not complete until either a message becomes available in the channel or the time out occurs.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies the interval of time to wait for a message to become available.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that references the asynchronous receive operation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> is exceeded before the operation is completed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The timeout specified is less than zero.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method when you want the application processing to continue without waiting.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29&gt;</ph> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is not complete until either a message becomes available in the channel or the timeout occurs.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are going to handle timeouts and not just re-throw or wrap the <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>, then you should call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> instead of <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are not going to treat timeouts specially then just call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>, otherwise you lose error information.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies the interval of time to wait for a message to become available.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that references the asynchronous receive operation.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> is exceeded before the operation is completed.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The timeout specified is less than zero.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method if you need the application processing to continue without waiting for the message to arrive.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is not complete until either a message becomes available in the channel or the time out occurs.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies the interval of time to wait for a message to become available.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that references the asynchronous operation to wait for a message to arrive.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> is exceeded before the operation is completed.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The timeout specified is less than zero.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Completes an asynchronous operation to receive a message.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> returned by a call to one of the <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.IInputChannel.BeginReceive*"&gt;&lt;/xref&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> received.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Completes the specified asynchronous operation to receive a message.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> returned by a call to the <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> received.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a message is received before the specified interval of time elapses; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Completes the specified asynchronous wait-for-a-message operation.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that identifies the <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)"&gt;&lt;/xref&gt;</ph> operation to finish, and from which to retrieve an end result.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a message has arrived before the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">timeout</ph><ept id="p1">&lt;/code&gt;</ept> has been exceeded; otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets the address on which the input channel receives messages.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be used by higher-level channels for correlation purposes.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a higher-level channel implements request-reply on top of a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IDuplexChannel&gt;</ph>, it can use the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A&gt;</ph> property in the WS-Addressing ReplyTo header.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.EndpointAddress"&gt;&lt;/xref&gt;</ph> on which the input channel receives messages.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns the message received, if one is available.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If a message is not available, blocks for a default interval of time.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by <ph id="ph2">`timeout`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> operation is available with or without an explicit timeout.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a message is not available, it blocks until one is available or until the timeout is exceeded.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> can be called multiple times or concurrently.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> call can complete for each message received.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> received.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Returns the message received, if one is available.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If a message is not available, blocks for a specified interval of time.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by <ph id="ph2">`timeout`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> operation is available with or without an explicit timeout.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a message is not available, it blocks until one is available or until the timeout is exceeded.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> can be called multiple times or concurrently.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> call can complete for each message received.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the receive operation has to complete before timing out and throwing a <ph id="ph2">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> received.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> is exceeded before the operation is completed.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The timeout specified is less than zero.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Tries to receive a message within a specified interval of time.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are going to handle timeouts and not just re-throw or wrap the <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>, then you should call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29&gt;</ph> instead of <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are not going to treat timeouts specially then just call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>, otherwise you will lose error information.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> returned by a call to one of the <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.IInputChannel.BeginReceive*"&gt;&lt;/xref&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> received.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a message is received before the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">timeout</ph><ept id="p1">&lt;/code&gt;</ept> has been exceeded; otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> is exceeded before the operation is completed.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The timeout specified is less than zero.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether a message has arrived within a specified interval of time.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> does not result in a message being received or processed in any other way.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using just <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> normally for this, the user must create the transaction and then call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> and hope the message arrives before the transaction times out, which may not be possible.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the user can call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> and be confident that they can get the message back before the transaction expires.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is synchronous, so it blocks the current thread until a message is available or the time out occurs.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need the application processing to continue without waiting, use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> specifies the maximum interval of time to wait for a message to arrive before timing out.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a message has arrived before the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">timeout</ph><ept id="p1">&lt;/code&gt;</ept> has been exceeded; otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> is exceeded before the operation is completed.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The timeout specified is less than zero.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>