<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbb82c47657d3e582c50a8fce0af536117c3e48a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Input.InputBinding.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a30873c066d67c57288a2f819fd606d536a90bbb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c15a177676df9269a37cb4c2b651c64a30f6d5b1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a binding between an <ph id="ph1">&lt;xref href="System.Windows.Input.InputGesture"&gt;&lt;/xref&gt;</ph> and a command.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The command is potentially a <ph id="ph1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify that user input invokes a command by creating a <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the user performs the specified input, the <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is set to the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> property is executed.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify that the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> invokes a command that is defined on an object by creating a binding on the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you to define a custom command and associate it with user input.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the second example in the Examples section.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> can be defined on a specific object or at the class level by registering a <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> with the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>-derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The typical property in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> programming that is set in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and takes one or more <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objects as values is the <ph id="ph4">&lt;xref:System.Windows.UIElement.InputBindings%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Object Element Usage</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>inputBindingDerivedClassâ€¦/<ept id="p1">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Provides base initialization for classes derived from <ph id="ph1">&lt;xref href="System.Windows.Input.InputBinding"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> is not technically an abstract class, but the default constructor is deliberately protected access.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This has the effect of making <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> an "abstract" class for <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are existing properties in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> that have <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usages that expect objects of type <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>, but you cannot specify an <ph id="ph4">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> instance in <ph id="ph5">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you can specify one of the device-specific <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes as values, for instance <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Input.InputBinding"&gt;&lt;/xref&gt;</ph> class with the specified command and input gesture.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you will either use constructors of derived classes (<ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>), or you will use this constructor as the base instantiation of a custom class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>You only can set only one <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> value on the input binding, and gestures are device-specific.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The command to associate with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">gesture</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The input gesture to associate with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">command</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;command&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;gesture&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Copies the base (non-animated) values of the properties of the specified object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Copies the current values of the properties of the specified object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Input.ICommand"&gt;&lt;/xref&gt;</ph> associated with this input binding.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties with <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usages are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> references a type converter that enables certain preexisting <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> implementations to specify values in the form of a string.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type conversion behavior sets the attribute value form of this property.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also bind the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties to an <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is defined on an object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you to define a custom command and associate it with user input.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the second example in <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Command`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>"/&gt;</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Property Element Usage</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>An object implementation of <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that supports object element syntax (has a public default constructor).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The associated command.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Input.InputBinding.Command"&gt;&lt;/xref&gt;</ph> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets or sets the command-specific data for a particular command.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> property is used to pass specific information to the command when it is executed.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the data is defined by the command.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the command that an input binding is associated with is a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> of the input binding is passed to the <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> handlers through the <ph id="ph4">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;</ph> and the <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;</ph> event data when the command is processed.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data type and purpose of the command parameter are defined differently for each command and can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can bind the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties to an <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is defined on an object.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you to define a custom command and associate it with user input.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the second example in <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Property Element Usage</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string that is processed by a particular command.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strings are the common type used for command parameters because they can be easily set in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many commands do not expect parameters.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>An object that is processed by a particular command.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>All existing <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> commands use strings.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, this property element syntax is only relevant for custom command scenarios.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order to support this syntax, the <ph id="ph1">`commandParameterObject`</ph> object must also support object element syntax (must have a public default constructor).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The command-specific data.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Input.InputBinding.CommandParameter"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Input.InputBinding.Command"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Gets or sets the target element of the command.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> commanding system, the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property on an <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> object is applicable only when the <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> is a <ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> is set on an <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> and the corresponding command is not a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is ignored.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>When used with a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is the object on which the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events are raised.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property is not set, the element with keyboard focus is used as the target.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, derived classes can expose a public constructor and therefore can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string that uses a type of binding syntax that can return an object reference to an existing named element.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The target of the command.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Input.InputBinding.CommandTarget"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Creates an instance of an <ph id="ph1">&lt;xref href="System.Windows.Input.InputBinding"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The new object.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Input.InputGesture"&gt;&lt;/xref&gt;</ph> associated with this input binding.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The input gesture is the action that invokes the command.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of input gestures in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> are <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> is a combination of a <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> and a set of <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph> is a combination of a <ph id="ph2">&lt;xref:System.Windows.Input.MouseAction&gt;</ph> and a set of <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, derived classes can expose a public constructor and thus can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>"/&gt;</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\-</ph> or -</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>"/&gt;</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\-</ph> or -</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.InputGesture&gt;</ph>"/&gt;</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Property Element Usage</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>A custom derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> that supports object element syntax.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The associated gesture.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Makes the instance a frozen clone of the specified <ph id="ph1">&lt;xref href="System.Windows.Freezable"&gt;&lt;/xref&gt;</ph> by using base (non-animated) property values.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Makes the current instance a frozen clone of the specified <ph id="ph1">&lt;xref href="System.Windows.Freezable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If the object has animated dependency properties, their current animated values are copied.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>