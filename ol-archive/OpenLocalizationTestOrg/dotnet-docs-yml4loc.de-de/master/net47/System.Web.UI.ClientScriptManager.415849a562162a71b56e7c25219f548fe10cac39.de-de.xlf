<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4f4d31caa51138143bba2cb2470167f17d6eb47</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Web.UI.ClientScriptManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a16384597ce463bd2056c552ea83fd98814d1c3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">658fe0f5eb7ff531ac93b3d190c7a1d47ee86711</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines methods for managing client scripts in Web applications.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph> class is used to manage client scripts and add them to Web applications.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can get a reference to the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph> class from the <ph id="ph2">&lt;xref:System.Web.UI.Page.ClientScript%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Web.UI.Page&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can add a client script to a Web page declaratively by including the script in the HTML markup of the page.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, there are situations when adding client script dynamically is needed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>To add a script dynamically, use the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method, or the <ph id="ph4">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> method, depending on when and how you want to add the script.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add Client Script Dynamically to ASP.NET Web Pages<ept id="p1">](http://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph> class uniquely identifies scripts by a key <ph id="ph2">&lt;xref:System.String&gt;</ph> and a <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the script type helps to avoid confusing similar scripts from different user controls that might be in use on the page.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph> class can be used to invoke client callbacks in situations when it is desirable to run server code from the client without performing a postback.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is referred to as performing an out-of-band callback to the server.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a client callback, a client script function sends an asynchronous request to an ASP.NET Web page.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Web page runs a modified version of its normal life cycle to process the callback.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing Client Callbacks Without Postbacks<ept id="p1">](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To check if the browser supports callbacks, use the <ph id="ph1">&lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A&gt;</ph> property, which is accessible through the <ph id="ph2">&lt;xref:System.Web.HttpRequest.Browser%2A&gt;</ph> property of the ASP.NET intrinsic <ph id="ph3">&lt;xref:System.Web.HttpContext.Request%2A&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A&gt;</ph> method to define a client postback event.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>These methods enable client script functions, when invoked, to cause the server to post back to the page.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client postback event is different from a client callback in that the Web page completes a normal life cycle to process the client postback event.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are using a <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control and the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph> property is set to <ph id="ph3">`false`</ph>, then you can use the <ph id="ph4">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method to return the client postback event for the <ph id="ph5">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.OnClientClick%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control, <ph id="ph3">&lt;xref:System.Web.UI.WebControls.ImageButton&gt;</ph> control, and <ph id="ph4">&lt;xref:System.Web.UI.WebControls.LinkButton&gt;</ph> control can be used to run client script.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The client function for this overloaded method includes a specified control, argument, client script, and context.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29&gt;</ph> method performs an out-of-band callback to the server that is a modified version of a page's normal life cycle.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing Client Callbacks Without Postbacks<ept id="p1">](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>For other browsers, an XMLHttpRequest using the browser's local Document Object Model (DOM) is used.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>To check whether a browser supports client callbacks, use the <ph id="ph1">&lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>To check whether a browser supports XML over HTTP, use the <ph id="ph1">&lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both properties are accessible through the <ph id="ph1">&lt;xref:System.Web.HttpRequest.Browser%2A&gt;</ph> property of the intrinsic ASP.NET <ph id="ph2">&lt;xref:System.Web.HttpContext.Request%2A&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> overload of the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method performs a callback synchronously using XML over HTTP.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>When sending data synchronously in a callback scenario, synchronous callbacks return immediately and do not block the browser.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>No two synchronous callbacks callback can execute at the same time in the browser.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a second synchronous callback is fired while one is currently pending, the second synchronous callback cancels the first and only the second callback will return.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>To send data asynchronously, use one of the overloads that takes the <ph id="ph1">`useAsync`</ph> parameter, which is a Boolean value controlling this behavior.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the asynchronous scenario you can have multiple pending callbacks; however, the order in which they return is not guaranteed to match the order in which they were initiated.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method specifies no client function to handle the case of an error condition generated by the <ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a client error callback handler, use one of the overloads that takes the <ph id="ph1">`clientErrorCallback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29&gt;</ph> method takes an optional string <ph id="ph2">`argument`</ph> parameter and returns a string.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>To pass in or to receive multiple values, concatenate values in the input or return string, respectively.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the properties are to survive page requests, you can use session state.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The server <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> that handles the client callback.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The control must implement the <ph id="ph1">&lt;xref href="System.Web.UI.ICallbackEventHandler"&gt;&lt;/xref&gt;</ph> interface and provide a <ph id="ph2">&lt;xref href="System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An argument passed from the client script to the server</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The name of the client event handler that receives the result of the successful server event.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The client script that is evaluated on the client prior to initiating the callback.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The result of the script is passed back to the client event handler.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The name of a client function that invokes the client callback.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> specified is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> specified does not implement the <ph id="ph2">&lt;xref href="System.Web.UI.ICallbackEventHandler"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method requires a <ph id="ph2">`useAsync`</ph> parameter, which allows you to perform the client callback asynchronously by setting the value to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overload versions of this method that do not require the <ph id="ph1">`useAsync`</ph> parameter set the value to <ph id="ph2">`false`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on this method, see the remarks for the overload <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The server <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> that handles the client callback.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The control must implement the <ph id="ph1">&lt;xref href="System.Web.UI.ICallbackEventHandler"&gt;&lt;/xref&gt;</ph> interface and provide a <ph id="ph2">&lt;xref href="System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An argument passed from the client script to the server</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The name of the client event handler that receives the result of the successful server event.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The client script that is evaluated on the client prior to initiating the callback.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The result of the script is passed back to the client event handler.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to perform the callback asynchronously; <ph id="ph2">`false`</ph> to perform the callback synchronously.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The name of a client function that invokes the client callback.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> specified is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> specified does not implement the <ph id="ph2">&lt;xref href="System.Web.UI.ICallbackEventHandler"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method takes a <ph id="ph2">`target`</ph> string parameter instead of a <ph id="ph3">&lt;xref:System.Web.UI.Control&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this overload when you want the callback to go back to something other than a string containing the <ph id="ph1">&lt;xref:System.Web.UI.Control.UniqueID%2A&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method requires a <ph id="ph2">`useAsync`</ph> and a <ph id="ph3">`clientErrorCallback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`useAsync`</ph> parameter allows you to perform the client callback asynchronously by setting the value to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overload versions of this method that do not require the <ph id="ph1">`useAsync`</ph> parameter set the value to <ph id="ph2">`false`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`clientErrorCallback`</ph> parameter allows you to define the name of the client function that is called if the server handler, the <ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> method, returns an error.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overload versions of this method that do not require the <ph id="ph1">`clientErrorCallback`</ph> parameter set the value to null.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on this method, see the remarks for the overload <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The name of a server <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> that handles the client callback.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The control must implement the <ph id="ph1">&lt;xref href="System.Web.UI.ICallbackEventHandler"&gt;&lt;/xref&gt;</ph> interface and provide a <ph id="ph2">&lt;xref href="System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An argument passed from the client script to the server</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The name of the client event handler that receives the result of the successful server event.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The client script that is evaluated on the client prior to initiating the callback.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The result of the script is passed back to the client event handler.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The name of the client event handler that receives the result when an error occurs in the server event handler.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to perform the callback asynchronously; <ph id="ph2">`false`</ph> to perform the callback synchronously.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The name of a client function that invokes the client callback.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method requires a <ph id="ph2">`useAsync`</ph> and a <ph id="ph3">`clientErrorCallback`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`useAsync`</ph> parameter allows you to perform the client callback asynchronously by setting the value to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overload versions of this method that do not require the <ph id="ph1">`useAsync`</ph> parameter set the value to <ph id="ph2">`false`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`clientErrorCallback`</ph> parameter allows you to define the name of the client function that is called if the server handler (the <ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> method) returns an error.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overload versions of this method that do not require the <ph id="ph1">`clientErrorCallback`</ph> parameter set the value to null.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on this method, see the remarks for the overload <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The server <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> that handles the client callback.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The control must implement the <ph id="ph1">&lt;xref href="System.Web.UI.ICallbackEventHandler"&gt;&lt;/xref&gt;</ph> interface and provide a <ph id="ph2">&lt;xref href="System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>An argument passed from the client script to the server <ph id="ph1">&lt;xref href="System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The name of the client event handler that receives the result of the successful server event.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The client script that is evaluated on the client prior to initiating the callback.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The result of the script is passed back to the client event handler.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The name of the client event handler that receives the result when an error occurs in the server event handler.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to perform the callback asynchronously; <ph id="ph2">`false`</ph> to perform the callback synchronously.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The name of a client function that invokes the client callback.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> specified is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> specified does not implement the <ph id="ph2">&lt;xref href="System.Web.UI.ICallbackEventHandler"&gt;&lt;/xref&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Gets a reference, with <ph id="ph1">`javascript:`</ph> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method requires the control that handles the postback to implement the <ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>,  use the  directive.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The server control to process the postback.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The parameter passed to the server control.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Gets a reference, with <ph id="ph1">`javascript:`</ph> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method requires the control that handles the postback to implement the <ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>, use the  directive.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The server control to process the postback.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The parameter passed to the server control.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to register the postback event for validation; <ph id="ph2">`false`</ph> to not register the post back event for validation.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Returns a string to use in a client event to cause postback to the server.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Optionally, registers the event reference for validation.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>, use the  directive.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method can be used with the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control when the <ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph> property is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method returns the client postback event for the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`registerForEventValidation`</ph> is true, the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29&gt;</ph> method calls the <ph id="ph3">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29&gt;</ph> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The server <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> that processes the postback on the server.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A string of optional arguments to pass to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">control</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to register the event reference for validation; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>A string that, when treated as script on the client, initiates the postback.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The specified <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Returns a string that can be used in a client event to cause postback to the server.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The reference string is defined by the specified <ph id="ph1">&lt;xref href="System.Web.UI.PostBackOptions"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Optionally, registers the event reference for validation.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph> object, use the  directive.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method can be used with the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control when the <ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph> property is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method returns the client postback event for the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`registerForEventValidation`</ph> is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29&gt;</ph> method calls the <ph id="ph4">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29&gt;</ph> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Web.UI.PostBackOptions"&gt;&lt;/xref&gt;</ph> that defines the postback.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to register the event reference for validation; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A string that, when treated as script on the client, initiates the client postback.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Web.UI.PostBackOptions"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Returns a string that can be used in a client event to cause postback to the server.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The reference string is defined by the specified <ph id="ph1">&lt;xref href="System.Web.UI.PostBackOptions"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>,  use the  directive.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method can be used with the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control when the <ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph> property is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method returns the client postback event for the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Web.UI.PostBackOptions"&gt;&lt;/xref&gt;</ph> that defines the postback.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A string that, when treated as script on the client, initiates the client postback.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Web.UI.PostBackOptions"&gt;&lt;/xref&gt;</ph> parameter is <ph id="ph2">`null`</ph></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Returns a string that can be used in a client event to cause postback to the server.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>,  use the  directive.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method can be used with the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control when the <ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph> property is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method returns the client postback event for the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The server <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> that processes the postback on the server.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A string of optional arguments to pass to the control that processes the postback.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A string that, when treated as script on the client, initiates the postback.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The specified <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Gets a URL reference to a resource in an assembly.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A&gt;</ph> method returns a URL reference to a resource embedded in an assembly.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned reference is not URL encoded.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resources can be script files, images, or any static file.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>You specify the type based on the object that will be accessing the resource.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>A Web resource registered with the page is uniquely identified by its type and name.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one resource with a given type and name pair can be registered with the page.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to register a resource that is already registered does not create a duplicate of the registered resource.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A&gt;</ph> method is used in conjunction with the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt;</ph> method for accessing resources embedded in assemblies.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on using resources in applications, see <bpt id="p1">[</bpt>ASP.NET Web Page Resources Overview<ept id="p1">](http://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd)</ept>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The type of the resource.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the resource in the assembly.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The URL reference to the resource.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The web resource name is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\-</ph> or -</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The web resource name has a length of zero.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Determines whether the client script block is registered with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using the specified key.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method to avoid registering duplicate scripts.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client script is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt;</ph> method calls the overload that takes both a <ph id="ph2">`key`</ph> and a <ph id="ph3">`type`</ph> parameter with the type set as a <ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph> object</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The key of the client script block to search for.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the client script block is registered; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Determines whether the client script block is registered with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using a key and type.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method to avoid registering duplicate scripts.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client script is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>You specify the type based on the object that will be accessing the resource.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, when using a <ph id="ph1">`Page`</ph> instance to access the resource, you specify the <ph id="ph2">`Page`</ph> type.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The type of the client script block to search for.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The key of the client script block to search for.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the client script block is registered; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The client script type is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Determines whether the client script include is registered with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using the specified key.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method to avoid registering duplicate scripts.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client script include is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph> method calls the overload that takes both a <ph id="ph2">`key`</ph> and a <ph id="ph3">`type`</ph> parameter with the type set as a <ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The key of the client script include to search for.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the client script include is registered; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Determines whether the client script include is registered with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using a key and type.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method to avoid registering duplicate client script includes.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client script include is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>You specify the type based on the object that will be accessing the resource.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, when using a Page instance to access the resource, you specify the <ph id="ph1">`Page`</ph> type.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The type of the client script include to search for.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The key of the client script include to search for.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the client script include is registered; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The client script include type is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Determines whether the OnSubmit statement is registered with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using the specified key and type.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> method to avoid registering duplicate statements.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is particularly important if the statement requires a large amount of server resources to create.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>A statement is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>Statements with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>You specify the type based on the object that will be accessing the resource.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, when using a <ph id="ph1">`Page`</ph> instance to access the resource, you specify the <ph id="ph2">`Page`</ph> type.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The type of the OnSubmit statement to search for.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The key of the OnSubmit statement to search for.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the OnSubmit statement is registered; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The OnSubmit statement type is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Determines whether the OnSubmit statement is registered with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using the specified key.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> method to avoid registering duplicate OnSubmit statements.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is particularly important if the statement requires a large amount of server resources to create.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>A statement is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>Statements with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A&gt;</ph> method calls the overload that takes both a <ph id="ph2">`key`</ph> and a <ph id="ph3">`type`</ph> parameter with the type set as a <ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph> object</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The key of the OnSubmit statement to search for.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the OnSubmit statement is registered; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Determines whether the startup script is registered with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using the specified key and type.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method to avoid registering duplicate scripts.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client startup script is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The type of the startup script to search for.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The key of the startup script to search for.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the startup script is registered; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The startup script type is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Determines whether the startup script is registered with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using the specified key.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method to avoid registering duplicate scripts.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>A startup script is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph> method calls the overload that takes both a string <ph id="ph2">`key`</ph> and a <ph id="ph3">`type`</ph> parameter with the type set as a <ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph> object</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The key of the startup script to search for.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the startup script is registered; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Registers a JavaScript array declaration with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using an array name and array value.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A&gt;</ph> checks to see whether a registered array exists with the same name as the name specified in the <ph id="ph2">`arrayName`</ph> parameter and, if so, adds the values specified in the <ph id="ph3">`arrayValue`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the underlying storage mechanism is based on an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, duplicates are allowed.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a registered array with the same name as the <ph id="ph1">`arrayName`</ph> parameter does not exist, it is created and the values in the <ph id="ph2">`arrayValue`</ph> parameter added to it.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (<ph id="ph1">\\</ph>") in the <ph id="ph2">`arrayValue`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">`arrayValue`</ph> parameter should be a single element.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>If more than one value needs to be added to the array, make multiple calls using the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The array name to register.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The array value or values to register.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;arrayName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Registers the client script with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using a type, key, and script literal.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client script is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one script with a given type and key pair can be registered with the page.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to register a script that is already registered does not create a duplicate of the script.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt;</ph> method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method, you must make sure that the script provided in the <ph id="ph2">`script`</ph> parameter is wrapped in a <ph id="ph3">`&lt;script&gt;`</ph> element block.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method adds a script block to the top of the rendered page.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>The script blocks are not guaranteed to be output in the order they are registered.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the order of the script blocks is important, use a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to gather the scripts together in a single string, and then register them all in a single client script block.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The type of the client script to register.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The key of the client script to register.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The client script literal to register.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Registers the client script with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using a type, key, script literal, and Boolean value indicating whether to add script tags.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client script is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one script with a given type and key pair can be registered with the page.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to register a script that is already registered does not create a duplicate of the script.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt;</ph> method to determine whether a client script with a given key and type pair is already registered.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>This lets you avoid unnecessarily attempting to add the script.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method, you can indicate whether the script provided in the <ph id="ph2">`script`</ph> parameter is wrapped with a <ph id="ph3">`&lt;script&gt;`</ph> element block by using the <ph id="ph4">`addScriptTags`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">`addScriptTags`</ph> to <ph id="ph2">`true`</ph> indicates that script tags will be added automatically.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method adds a script block to the top of the rendered page.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>The script blocks are not guaranteed to be output in the order they are registered.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the order of the script blocks is important, use a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to gather the scripts together in a single string, and then register them all in a single client script block.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The type of the client script to register.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The key of the client script to register.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The client script literal to register.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>A Boolean value indicating whether to add script tags.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The client script block type is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Registers the client script with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using a key and a URL, which enables the script to be called from the client.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client script include is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one script with a given type and key pair can be registered with the page.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to register a script that is already registered does not create a duplicate of the script.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A&gt;</ph> method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>To resolve the client URL, use the <ph id="ph1">&lt;xref:System.Web.UI.Control.ResolveClientUrl%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the context of the URL on which it is called to resolve the path.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method calls the overload that takes a <ph id="ph2">`key`</ph>, a <ph id="ph3">`URL`</ph>, and a <ph id="ph4">`type`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method adds a script block at the top of the rendered page.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The key of the client script include to register.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The URL of the client script include to register.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Registers the client script include with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using a type, a key, and a URL.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method takes <bpt id="p1">*</bpt>key<ept id="p1">*</ept> and <bpt id="p2">*</bpt>url<ept id="p2">*</ept> parameters to identify the script, as well as a <ph id="ph2">`type`</ph> parameter to specify the identification of the client script include.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>You specify the type based on the object that will be accessing the resource.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, when using a <ph id="ph1">`Page`</ph> instance to access the resource, you specify the <ph id="ph2">`Page`</ph> type.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>To resolve the client URL, use the <ph id="ph1">&lt;xref:System.Web.UI.Control.ResolveClientUrl%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the context of the URL on which it is called to resolve the path.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method adds a script block at the top of the rendered page.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The type of the client script include to register.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The key of the client script include to register.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The URL of the client script include to register.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The client script include type is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The URL is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\-</ph> or -</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The URL is empty.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Registers the client script resource with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using a type and a resource name.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt;</ph> method is used when accessing compiled-in resources from assemblies through the WebResource.axd HTTP handler.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt;</ph> method registers the script with the <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph> object and prevents duplicate scripts.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method wraps the contents of the resource URL with a <ph id="ph1">`&lt;script&gt;`</ph> element block.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The type of the client script resource to register.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The name of the client script resource to register.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The client resource name is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\-</ph> or -</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The client resource name has a length of zero.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt;</ph> method registers a name/value pair as a custom (expando) attribute on the specified <ph id="ph2">&lt;xref:System.Web.UI.Control&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>Quotes and backslashes in the custom (expando) attribute's values are escaped.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not want to escape quotes and backslashes, call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt;</ph> overload method and set the <ph id="ph2">`encode`</ph> parameter to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> on the page that contains the custom attribute.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The name of the custom attribute to register.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The value of the custom attribute.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt;</ph> method registers a name/value pair as a custom (expando) attribute on the specified <ph id="ph2">&lt;xref:System.Web.UI.Control&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the <ph id="ph1">`encode`</ph> parameter to <ph id="ph2">`true`</ph> if you need to escape quotes and backslashes in your expando attribute's value.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Web.UI.Control"&gt;&lt;/xref&gt;</ph> on the page that contains the custom attribute.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The name of the custom attribute to register.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The value of the custom attribute.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>A Boolean value indicating whether to encode the custom attribute to register.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>A unique ID representing the client control generating the event.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Event arguments passed with the client event.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The method is called prior to the <ph id="ph1">&lt;xref href="System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Registers an event reference for validation with a unique control ID representing the client control generating the event.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information and examples, see the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>A unique ID representing the client control generating the event.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Registers an event reference for validation with <ph id="ph1">&lt;xref href="System.Web.UI.PostBackOptions"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information and examples, see the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Web.UI.PostBackOptions"&gt;&lt;/xref&gt;</ph> object that specifies how client JavaScript is generated to initiate a postback event.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Registers a hidden value with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A&gt;</ph> method creates a hidden <ph id="ph2">`&lt;input&gt;`</ph> element on the rendered HTML page.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The name of the hidden field to register.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The initial value of the field to register.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hiddenFieldName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Registers an OnSubmit statement with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using a type, a key, and a script literal.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The statement executes when the <ph id="ph1">&lt;xref href="System.Web.UI.HtmlControls.HtmlForm"&gt;&lt;/xref&gt;</ph> is submitted.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>An OnSubmit statement is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>Statements with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one statement with a given type and key pair can be registered with the page.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to register a statement that is already registered will not create a duplicate of the statement.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A&gt;</ph> method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`script`</ph> parameter of the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> method can contain multiple script commands as long as they are properly delimited with a semicolon (;).</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> adds a script that is executed before the page is submitted and gives you an opportunity to cancel the submission.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on HTML forms and the <ph id="ph1">`OnSubmit`</ph> attribute, see the <bpt id="p1">[</bpt>World Wide Web Consortium (W3C) Web site<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37125)</ept>.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The type of the OnSubmit statement to register.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The key of the OnSubmit statement to register.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The script literal of the OnSubmit statement to register.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Registers the startup script with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using a type, a key, and a script literal.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client script is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one script with a given type and key pair can be registered with the page.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to register a script that is already registered does not create a duplicate of the script.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method, you must make sure that the script provided in the <ph id="ph2">`script`</ph> parameter is wrapped with a <ph id="ph3">`&lt;script&gt;`</ph> element block.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>The script block added by the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method executes when the page finishes loading but before the page's <ph id="ph2">&lt;xref:System.Web.UI.Control.OnLoad%2A&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>The script blocks are not guaranteed to be output in the order they are registered.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the order of the script blocks is important, use a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to gather the scripts together in a single string, and then register them all in a single client script block.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The type of the startup script to register.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The key of the startup script to register.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The startup script literal to register.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Registers the startup script with the <ph id="ph1">&lt;xref href="System.Web.UI.Page"&gt;&lt;/xref&gt;</ph> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>A startup script is uniquely identified by its key and its type.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scripts with the same key and type are considered duplicates.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one script with a given type and key pair can be registered with the page.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to register a script that is already registered does not create a duplicate of the script.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method, you can indicate whether the script provided in the <ph id="ph2">`script`</ph> parameter is wrapped with a <ph id="ph3">`&lt;script&gt;`</ph> element block by using the <ph id="ph4">`addScriptTags`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">`addScriptTags`</ph> to <ph id="ph2">`true`</ph> indicates that script tags will be added automatically.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>The script block added by the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method executes when the page finishes loading but before the page's <ph id="ph2">&lt;xref:System.Web.UI.Control.OnLoad%2A&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>The script blocks are not guaranteed to be output in the order they are registered.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the order of the script blocks is important, use a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to gather the scripts together in a single string, and then register them all in a single client script block.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The type of the startup script to register.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The key of the startup script to register.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The startup script literal to register.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>A Boolean value indicating whether to add script tags.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Validates a client event that was registered for event validation using the <ph id="ph1">&lt;xref href="System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>A unique ID representing the client control generating the event.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Validates a client event that was registered for event validation using the <ph id="ph1">&lt;xref href="System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>A unique ID representing the client control generating the event.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The event arguments passed with the client event.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;uniqueId&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or an empty string ("").</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>