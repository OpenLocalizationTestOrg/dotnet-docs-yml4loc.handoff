<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8c9e7e37aa193b4eca87f3d22c74a4bcb0a1e69</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Security.SecurityContext.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37b63b2cd32c83a7a4a46802080c054e1bb8b82b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75c87c2cd559401b43096e9bf4564477569fd2f3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates and propagates all security-related data for execution contexts transferred across threads.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityContext&gt;</ph> object captures all security-related information for a logical thread, including the information contained in the <ph id="ph2">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.CompressedStack&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This configuration allows the Windows identity and the security elements on the stack to be propagated automatically when the <ph id="ph1">&lt;xref:System.Security.SecurityContext&gt;</ph> is copied and transferred across asynchronous threads.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime (CLR) is aware of impersonation operations performed using only managed code, not of impersonation performed outside of managed code, such as through platform invoke to unmanaged code or through direct calls to Win32 functions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only managed <ph id="ph1">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> objects can flow across asynchronous points, unless the <ph id="ph2">`alwaysFlowImpersonationPolicy`</ph> element has been set to <ph id="ph3">`true`</ph> (<ph id="ph4">`&lt;alwaysFlowImpersonationPolicy enabled="true"/&gt;`</ph>).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">`alwaysFlowImpersonationPolicy`</ph> element to <ph id="ph2">`true`</ph> specifies that the Windows identity always flows across asynchronous points, regardless of how impersonation was performed.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about flowing unmanaged impersonation across asynchronous points, see <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;alwaysFlowImpersonationPolicy<ph id="ph2">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/alwaysflowimpersonationpolicy-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecurityContext&gt;</ph> is part of the larger <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph> and flows or migrates when the <ph id="ph3">&lt;xref:System.Threading.ExecutionContext&gt;</ph> flows or migrates.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Captures the security context for the current thread.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The captured security context can be applied to another thread.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecurityContext&gt;</ph> consists of the <ph id="ph2">&lt;xref:System.Threading.CompressedStack&gt;</ph> and the <ph id="ph3">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> for the executing thread.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The security context for the current thread.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creates a copy of the current security context.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current context must have been acquired through a capture or a copy operation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is useful for applying a captured <ph id="ph1">&lt;xref:System.Security.SecurityContext&gt;</ph> to multiple threads.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The security context for the current thread.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The current security context has been previously used, was marshaled across application domains, or was not acquired through the <ph id="ph1">&lt;xref href="System.Security.SecurityContext.Capture"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;xref href="System.Security.SecurityContext"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Security.SecurityContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Security.SecurityContext&gt;</ph> in an unusable state.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Security.SecurityContext&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Security.SecurityContext&gt;</ph> was occupying.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Security.SecurityContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Security.SecurityContext&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Determines whether the flow of the security context has been suppressed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecurityContext.IsFlowSuppressed%2A&gt;</ph> method is used by infrastructure components to determine whether to transfer the <ph id="ph2">&lt;xref:System.Security.SecurityContext&gt;</ph> information during asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the flow has been suppressed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Determines whether the flow of the Windows identity portion of the current security context has been suppressed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed%2A&gt;</ph> method is used by infrastructure components to determine whether to transfer the Windows identity information when the <ph id="ph2">&lt;xref:System.Security.SecurityContext&gt;</ph> migrates during asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the flow has been suppressed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Restores the flow of the security context across asynchronous threads.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecurityContext.RestoreFlow%2A&gt;</ph> method is called by the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName&gt;</ph> method to reverse the effect of a prior <ph id="ph3">&lt;xref:System.Security.SecurityContext.SuppressFlow%2A&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The security context is <ph id="ph1">`null`</ph> or an empty string.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Runs the specified method in the specified security context on the current thread.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The security context for the current thread is returned to its previous state when the method call is complete.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The security context to set.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The delegate that represents the method to run in the specified security context.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The object to pass to the callback method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;securityContext&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;securityContext&lt;/code&gt;</ph> was not acquired through a capture operation.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;securityContext&lt;/code&gt;</ph> has already been used as the argument to a <ph id="ph2">&lt;xref href="System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)"&gt;&lt;/xref&gt;</ph> method call.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Suppresses the flow of the security context across asynchronous threads.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to suppress the flow of <ph id="ph1">&lt;xref:System.Security.SecurityContext&gt;</ph> information on the current thread for asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime (CLR) is only aware of the impersonation operations performed using managed code.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The CLR has no knowledge of impersonation performed outside of managed code, such as platform invokes to unmanaged code that does the impersonation, or through calls to Win32 functions.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>To flow identity across asynchronous points you must use the managed <ph id="ph1">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.Principal.WindowsImpersonationContext&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method on the returned <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure to return the <ph id="ph3">&lt;xref:System.Security.SecurityContext&gt;</ph> object to its previous state.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is protected with a <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction?displayProperty=fullName&gt;</ph> for <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</ph> permission.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>A fully trusted component can call this method to suppress the flow of the <ph id="ph1">&lt;xref:System.Security.SecurityContext&gt;</ph> information during asynchronous calls.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the flow is suppressed, the <ph id="ph1">&lt;xref:System.Security.SecurityContext.Capture%2A&gt;</ph> method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Threading.AsyncFlowControl"&gt;&lt;/xref&gt;</ph> structure for restoring the flow.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Suppresses the flow of the Windows identity portion of the current security context across asynchronous threads.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to suppress the flow of the Windows identity when the <ph id="ph1">&lt;xref:System.Security.SecurityContext&gt;</ph> migrates across asynchronous threads.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method on the returned <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure to return the <ph id="ph3">&lt;xref:System.Security.SecurityContext&gt;</ph> object to its previous state.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime (CLR) is aware of impersonation operations performed using only managed code, not of impersonation performed outside of managed code, such as through platform invoke to unmanaged code or through direct calls to Win32 functions.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only managed <ph id="ph1">&lt;xref:System.Security.Principal.WindowsIdentity&gt;</ph> objects can flow across asynchronous points, unless the <ph id="ph2">`alwaysFlowImpersonationPolicy`</ph> element has been set to <ph id="ph3">`true`</ph> (<ph id="ph4">`&lt;alwaysFlowImpersonationPolicy enabled="true"/&gt;`</ph>).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">`alwaysFlowImpersonationPolicy`</ph> element to <ph id="ph2">`true`</ph> specifies that the Windows identity always flows across asynchronous points, regardless of how impersonation was performed.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about flowing unmanaged impersonation across asynchronous points, see <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>alwaysFlowImpersonationPolicy&gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/alwaysflowimpersonationpolicy-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A structure for restoring the flow.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>