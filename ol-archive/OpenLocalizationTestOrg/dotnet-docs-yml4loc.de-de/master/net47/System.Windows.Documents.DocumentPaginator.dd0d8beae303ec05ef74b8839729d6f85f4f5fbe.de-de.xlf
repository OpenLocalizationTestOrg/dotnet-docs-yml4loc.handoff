<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf90a4f141ef185da819bb9ee13a1dff3674a485</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Documents.DocumentPaginator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39d148507629952170bc9176cb846afe8c5291ca</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38c575f0d9b4244749f57bb2eb4ca76c9357e0a5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides an abstract base class that supports creation of multiple-page elements from a single document.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need automatic background repagination in response to events such as changing the page size of a <ph id="ph1">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph>, then use <ph id="ph2">&lt;xref:System.Windows.Documents.DynamicDocumentPaginator&gt;</ph> as your base class.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Cancels a previous <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.GetPageAsync*"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync*"&gt;&lt;/xref&gt;</ph> operation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`userState`</ph> is <ph id="ph2">`null`</ph>, then all asynchronous tasks are cancelled.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The original <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">userState</ph><ept id="p1">&lt;/code&gt;</ept> passed to <ph id="ph2">&lt;xref href="System.Windows.Documents.DocumentPaginator.GetPageAsync*"&gt;&lt;/xref&gt;</ph>, <ph id="ph3">&lt;xref href="System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync*"&gt;&lt;/xref&gt;</ph>, or <ph id="ph4">&lt;xref href="System.Windows.Documents.DocumentPaginator.ComputePageCountAsync*"&gt;&lt;/xref&gt;</ph> that identifies the asynchronous task to cancel.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Forces a pagination of the content, updates <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.PageCount"&gt;&lt;/xref&gt;</ph> with the new total, and sets <ph id="ph2">&lt;xref href="System.Windows.Documents.DocumentPaginator.IsPageCountValid"&gt;&lt;/xref&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.IsPageCountValid%2A&gt;</ph> will be <ph id="ph2">`true`</ph> immediately after this is called.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If content is modified or <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.PageSize%2A&gt;</ph> is changed after this method is called, <ph id="ph2">&lt;xref:System.Windows.Documents.DocumentPaginator.IsPageCountValid%2A&gt;</ph> will likely revert to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Asynchronously, forces a pagination of the content, updates <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.PageCount"&gt;&lt;/xref&gt;</ph> with the new total, and sets <ph id="ph2">&lt;xref href="System.Windows.Documents.DocumentPaginator.IsPageCountValid"&gt;&lt;/xref&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The only way to cancel the asynchronous operation of this method is to cancel all asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Contrast this with the other overload of this method: <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync%28System.Object%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Asynchronously, forces a pagination of the content, updates <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.PageCount"&gt;&lt;/xref&gt;</ph> with the new total, sets <ph id="ph2">&lt;xref href="System.Windows.Documents.DocumentPaginator.IsPageCountValid"&gt;&lt;/xref&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The specified ID is assigned to the asynchronous task.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the method makes it possible to cancel this asynchronous operation without cancelling all asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A unique identifier for the asynchronous task.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Occurs when a <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.ComputePageCountAsync*"&gt;&lt;/xref&gt;</ph> operation has finished.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPage"&gt;&lt;/xref&gt;</ph> for the specified page number.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If pages prior to <ph id="ph1">`pageNumber`</ph> have not been formatted, they will be paginated synchronously prior to returning the requested page.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPageAsync%2A&gt;</ph> provides similar functionality as <ph id="ph2">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPage%2A&gt;</ph>, but for asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The zero-based page number of the document page that is needed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPage"&gt;&lt;/xref&gt;</ph> for the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">pageNumber</ph><ept id="p1">&lt;/code&gt;</ept>, or <ph id="ph3">&lt;xref href="System.Windows.Documents.DocumentPage.Missing"&gt;&lt;/xref&gt;</ph> if the page does not exist.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pageNumber&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Asynchronously returns (through the <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.GetPageCompleted"&gt;&lt;/xref&gt;</ph> event) the <ph id="ph2">&lt;xref href="System.Windows.Documents.DocumentPage"&gt;&lt;/xref&gt;</ph> for the specified page number and assigns the specified ID to the asynchronous task.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload of the method makes it possible to cancel this asynchronous operation without cancelling all asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPageCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPage&gt;</ph> is passed to the event as one of the event arguments.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following steps illustrate how to retrieve a <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPage&gt;</ph> asynchronously:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create a <ph id="ph1">&lt;xref:System.Windows.Documents.GetPageCompletedEventHandler&gt;</ph> delegate and add it to be notified of <ph id="ph2">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPageCompleted&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPageAsync%28System.Int32%2CSystem.Object%29&gt;</ph> specifying the <ph id="ph2">`pageNumber`</ph> desired and a unique <ph id="ph3">`userState`</ph>, which will be used to identify the completion of the asynchronous event.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the event occurs and the delegate is called, compare the event's <ph id="ph1">&lt;xref:System.Windows.Documents.GetPageCompletedEventArgs&gt;</ph>.<ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property with the original <ph id="ph3">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPageAsync%28System.Int32%2CSystem.Object%29&gt;</ph> <ph id="ph4">`userState`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>(The <ph id="ph1">&lt;xref:System.Windows.Documents.GetPageCompletedEventArgs&gt;</ph>.<ph id="ph2">&lt;xref:System.Windows.Documents.GetPageCompletedEventArgs.PageNumber%2A&gt;</ph> property will also match the <ph id="ph3">`pageNumber`</ph> specified in the <ph id="ph4">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPageAsync%28System.Int32%2CSystem.Object%29&gt;</ph> call.)</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Documents.GetPageCompletedEventArgs&gt;</ph>.<ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property matches the original <ph id="ph3">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPageAsync%28System.Int32%2CSystem.Object%29&gt;</ph> <ph id="ph4">`userState`</ph>, the operation is complete and the page is ready.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPage%2A&gt;</ph> to retrieve the formatted <ph id="ph2">&lt;xref:System.Windows.Documents.DocumentPage&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The zero-based page number of the <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPage"&gt;&lt;/xref&gt;</ph> to get.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A unique identifier for the asynchronous task.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pageNumber&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Asynchronously returns (through the <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.GetPageCompleted"&gt;&lt;/xref&gt;</ph> event) the <ph id="ph2">&lt;xref href="System.Windows.Documents.DocumentPage"&gt;&lt;/xref&gt;</ph> for the specified page number.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The only way to cancel the asynchronous operation of this method is to cancel all asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Contrast this with the other overload of this method: <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPageAsync%28System.Int32%2CSystem.Object%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPageCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPage&gt;</ph> is passed to the event as one of the event arguments.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.GetPageAsync%28System.Int32%2CSystem.Object%29&gt;</ph> for how to use this method to get the page.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The zero-based page number of the document page that is needed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;pageNumber&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Occurs when <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.GetPageAsync*"&gt;&lt;/xref&gt;</ph> has completed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets a value indicating whether <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.PageCount"&gt;&lt;/xref&gt;</ph> is the total number of pages.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if pagination is complete and <ph id="ph2">&lt;xref href="System.Windows.Documents.DocumentPaginator.PageCount"&gt;&lt;/xref&gt;</ph> is the total number of pages; otherwise, <ph id="ph3">`false`</ph>, if pagination is in process and <ph id="ph4">&lt;xref href="System.Windows.Documents.DocumentPaginator.PageCount"&gt;&lt;/xref&gt;</ph> is the number of pages currently formatted (not the total).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This value may revert to <ph id="ph1">`false`</ph>, after being <ph id="ph2">`true`</ph>, if <ph id="ph3">&lt;xref href="System.Windows.Documents.DocumentPaginator.PageSize"&gt;&lt;/xref&gt;</ph> or content changes; because those events would force a repagination.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.ComputePageCountCompleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ComponentModel.AsyncCompletedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.GetPageCompleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Documents.GetPageCompletedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Documents.DocumentPaginator.PagesChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Documents.PagesChangedEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets a count of the number of pages currently formatted</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.IsPageCountValid%2A&gt;</ph> is <ph id="ph2">`true`</ph>, pagination is complete and <ph id="ph3">&lt;xref:System.Windows.Documents.DocumentPaginator.PageCount%2A&gt;</ph> is the total number of pages in the document.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.IsPageCountValid%2A&gt;</ph> is <ph id="ph2">`false`</ph>, pagination is in process and <ph id="ph3">&lt;xref:System.Windows.Documents.DocumentPaginator.PageCount%2A&gt;</ph> is the number of pages currently formatted (not the total).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value may change if <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator.PageSize%2A&gt;</ph> or content changes, because those events would force a repagination.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A count of the number of pages that have been formatted.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Occurs when the document content is changed.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets or sets the suggested width and height of each page.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator&gt;</ph> may override the value of this property.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Users should check <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPage.Size%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Size"&gt;&lt;/xref&gt;</ph> representing the width and height of each page.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns the element being paginated.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The object returned has this <ph id="ph1">&lt;xref:System.Windows.Documents.DocumentPaginator&gt;</ph> as the value of its <ph id="ph2">&lt;xref:System.Windows.Documents.IDocumentPaginatorSource.DocumentPaginator%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is guaranteed to have such a property because it implements <ph id="ph1">&lt;xref:System.Windows.Documents.IDocumentPaginatorSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Documents.IDocumentPaginatorSource"&gt;&lt;/xref&gt;</ph> representing the element being paginated.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>