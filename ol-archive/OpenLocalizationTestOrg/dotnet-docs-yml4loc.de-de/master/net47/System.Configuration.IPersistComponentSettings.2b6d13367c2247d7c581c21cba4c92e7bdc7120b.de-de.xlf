<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc7f124ecdb4b5e152c1ec3417255524c48f21ac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Configuration.IPersistComponentSettings.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0dfc45a82a0f74b35890cf6a5c3fb042793c69d2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13c33e51976a7581accb0dfe4cd2f72dda5782a7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines standard functionality for controls or libraries that store and retrieve application settings.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>, and then add special properties to this class.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings&gt;</ph> interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Design-time tools also depend on this interface to properly manage controls and components.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Reads the control's application settings into their corresponding properties and updates the control's state.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A&gt;</ph> method performs two essential operations:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>As required, it updates those general properties that depend on these reloaded settings properties.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the settings class contained a <ph id="ph1">`location`</ph> settings property, <ph id="ph2">&lt;xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A&gt;</ph> should ensure that the control's <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property is updated to reflect this reloaded setting.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Resets the control's application settings properties to their default values.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A&gt;</ph> method typically calls the <ph id="ph2">&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</ph> method on each instance of an application settings class it contains.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Persists the control's application settings properties.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</ph> method writes the values of the control's application settings properties to the associated data store.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the <ph id="ph1">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the choice of the settings provider by using the <ph id="ph1">&lt;xref:System.Configuration.ISettingsProviderService&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the control should call <ph id="ph3">&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</ph> in its own <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;</ph> method so that the control's configuration data is stored automatically before the application ends.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the control should automatically persist its application settings properties.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a control contains configuration data, it will typically persist this data in response to an explicit call to the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;</ph> method or sometimes implicitly when the control's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;</ph> method is invoked.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> property determines whether a control automatically persists its configuration data when it is disposed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value of <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> depends on the implementation of the control.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;</ph> property is.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control should automatically persist its state; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets or sets the value of the application settings key for the current instance of the control.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph> property to disambiguate groups of application settings properties when there are multiple instances of the same wrapper class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a control contains an associated wrapper class, then placing multiple instances of the same control in the same application will typically result in multiple instances of the wrapper class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>A settings key is required only when the configuration data differs on a per-instance basis; for example, the location of dynamically positioned controls.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following general rules apply to the use of <ph id="ph1">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>A control, like any class, may contain zero or more application settings classes, derived from <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each settings class contains its own <ph id="ph1">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;</ph> property, which helps disambiguate multiple instances of that class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>A control should separate its per-instance data and its shared data into different settings classes.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a control with any per-instance configuration data, the <ph id="ph1">`get`</ph> accessor of the <ph id="ph2">&lt;xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A&gt;</ph> property should default to the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> of the control.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases the name of the control will be unique within an application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the control contains only shared configuration data, <ph id="ph1">`get`</ph> should default to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`set`</ph> accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each settings class containing per-instance data, <ph id="ph1">`set`</ph> should just pass-through to the <ph id="ph2">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;</ph> property of the settings class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>For settings classes containing shared data, <ph id="ph1">`set`</ph> should perform no action for that settings class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> containing the settings key for the current instance of the control.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>