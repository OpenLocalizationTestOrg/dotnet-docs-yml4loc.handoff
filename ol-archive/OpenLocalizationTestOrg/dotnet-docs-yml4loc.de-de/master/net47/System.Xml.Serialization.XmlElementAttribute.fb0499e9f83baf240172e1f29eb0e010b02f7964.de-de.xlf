<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49aa1045b7ba82f377f5e6713c1b93f0b7206538</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.Serialization.XmlElementAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05bee9b275aa7ba51474b63381b90d0f2863738e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">668f222df858797b10d96a0c2e246b298f63aa05</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Indicates that a public field or property represents an XML element when the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlSerializer"&gt;&lt;/xref&gt;</ph> serializes or deserializes the object that contains it.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> belongs to a family of attributes that controls how the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> serializes or deserializes an object.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a complete list of similar attributes, see <bpt id="p1">[</bpt>Attributes That Control XML Serialization<ept id="p1">](~/docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>An XML document usually contains XML elements, each of which consists of three parts: an opening tag with possible attributes, a closing tag, and the data between the tags.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML tags can be nested--that is, the data between tags can also be XML elements.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This capacity of one element to enclose another allows the document to contain hierarchies of data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>An XML element can also include attributes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> to public fields or public read/write properties to control characteristics of the XML elements such as the element name and namespace.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> can be applied multiple times to a field that returns an array of objects.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this is to specify (through the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.Type%2A&gt;</ph> property) different types that can be inserted into the array.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the array in the following C# code accepts both strings and integers.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This results in XML that might resemble the following.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that when you apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> multiple times without specifying an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A&gt;</ph> property value, the elements are named after the type of the acceptable objects.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> to a field or property that returns an array, the items in the array are encoded as a sequence of XML elements.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast if an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> is not applied to such a field or property, the items in the array are encoded as a sequence of elements, nested under an element named after the field or property.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> attributes to control how an array is serialized.)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.Type%2A&gt;</ph> property to specify a type that is derived from the type of the original field or property--that is, the field or property to which you have applied the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a field or property returns an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, you can apply multiple instances of the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> to the member.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each instance, set the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.Type%2A&gt;</ph> property to a type of object that can be inserted into the array.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using attributes, see <bpt id="p1">[</bpt>Attributes<ept id="p1">](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the word <ph id="ph1">`XmlElement`</ph> in your code instead of the longer <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlElementAttribute"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlElementAttribute"&gt;&lt;/xref&gt;</ph> class and specifies the name of the XML element.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> uses the member name as the XML element name when serializing a class instance.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a field named <ph id="ph1">`Vehicle`</ph> generates an XML element named <ph id="ph2">`Vehicle`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>However if you need a different element, such as <ph id="ph1">`Cars`</ph>, pass it in the <ph id="ph2">`elementName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The XML element name of the serialized member.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlElementAttribute"&gt;&lt;/xref&gt;</ph> class and specifies a type for the member to which the <ph id="ph2">&lt;xref href="System.Xml.Serialization.XmlElementAttribute"&gt;&lt;/xref&gt;</ph> is applied.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This type is used by the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlSerializer"&gt;&lt;/xref&gt;</ph> when serializing or deserializing object that contains it.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`type`</ph> parameter to specify a type that is derived from a base class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose a property named <ph id="ph1">`MyAnimal`</ph> returns an <ph id="ph2">`Animal`</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You want to enhance the object, so you create a new class named <ph id="ph1">`Mammal`</ph> that inherits from the <ph id="ph2">`Animal`</ph> class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>To instruct the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to accept the <ph id="ph2">`Mammal`</ph> class when it serializes the <ph id="ph3">`MyAnimal`</ph> property, pass the <ph id="ph4">&lt;xref:System.Type&gt;</ph> of the <ph id="ph5">`Mammal`</ph> class to the constructor.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of an object derived from the member's type.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlElementAttribute"&gt;&lt;/xref&gt;</ph> and specifies the name of the XML element and a derived type for the member to which the <ph id="ph2">&lt;xref href="System.Xml.Serialization.XmlElementAttribute"&gt;&lt;/xref&gt;</ph> is applied.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This member type is used when the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlSerializer"&gt;&lt;/xref&gt;</ph> serializes the object that contains it.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> uses the member name as the XML element name when serializing a class instance.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a field named <ph id="ph1">`Vehicle`</ph> generates an XML element named <ph id="ph2">`Vehicle`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if you need a different element, such as <ph id="ph1">`Cars`</ph>, pass it in the <ph id="ph2">`elementName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`type`</ph> parameter to specify a type that is derived from a base class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose a property named <ph id="ph1">`MyAnimal`</ph> returns an <ph id="ph2">`Animal`</ph> object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>You want to enhance the object, so you create a new class named <ph id="ph1">`Mammal`</ph> that inherits from the <ph id="ph2">`Animal`</ph> class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>To instruct the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to accept the <ph id="ph2">`Mammal`</ph> class when it serializes the <ph id="ph3">`MyAnimal`</ph> property, pass the <ph id="ph4">&lt;xref:System.Type&gt;</ph> of the <ph id="ph5">`Mammal`</ph> class to the constructor.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The XML element name of the serialized member.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of an object derived from the member's type.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets or sets the XML Schema definition (XSD) data type of the XML element generated by the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlSerializer"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists the XML Schema simple data types with their.NET equivalents.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the XML Schema <ph id="ph1">`base64Binary`</ph> and <ph id="ph2">`hexBinary`</ph> data types, use an array of <ph id="ph3">&lt;xref:System.Byte&gt;</ph> structures, and apply a <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> with the <ph id="ph5">&lt;xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A&gt;</ph> set to "base64Binary" or "hexBinary", as appropriate.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the XML Schema <ph id="ph1">`time`</ph> and <ph id="ph2">`date`</ph> data types, use the <ph id="ph3">&lt;xref:System.DateTime&gt;</ph> type and apply the <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> with the <ph id="ph5">&lt;xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A&gt;</ph> set to "date" or "time".</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>For every XML Schema type that is mapped to a string, apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> with its <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A&gt;</ph> property set to the XML Schema type.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is possible that this can change the serialization format, not only the schema for the member.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property is case-sensitive, so you must set it exactly to one of the XML Schema data types.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Passing binary data as an XML element is more efficient than passing it as an XML Schema attribute.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about XML data types, see the World Wide Web Consortium (www.w3.org) document named "XML Schema Part 2: Datatypes".</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>XSD data type</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>.NET data type</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>anyURI</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>base64Binary</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Array of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> objects</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>boolean</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>byte</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>date</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>dateTime</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>decimal</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>double</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>ENTITY</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>ENTITIES</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>float</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>gDay</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>gMonth</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>gMonthDay</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>gYear</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>gYearMonth</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>hexBinary</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Array of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> objects</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>ID</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>IDREF</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>IDREFS</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>int</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>integer</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>language</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>long</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>NCName</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>negativeInteger</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>NMTOKEN</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>NMTOKENS</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>normalizedString</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>nonNegativeInteger</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>nonPositiveInteger</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>NOTATION</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>positiveInteger</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>QName</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>duration</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>string</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>short</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>time</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>token</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>unsignedByte</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>unsignedInt</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>unsignedLong</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>unsignedShort</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>An XML Schema data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema Part 2: Datatypes".</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The XML Schema data type you have specified cannot be mapped to the.NET data type.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the generated XML element.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A&gt;</ph> if you want the name of the generated XML element to differ from the member's identifier.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the same <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A&gt;</ph> value to more than one class member if the generated XML document uses XML namespaces to distinguish between the identically named members.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details on how to use namespaces and prefixed names in the XML document, see the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The name of the generated XML element.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The default is the member identifier.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the element is qualified.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A&gt;</ph> property determines whether an XML element is qualified or unqualified.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A&gt;</ph> property conforms to the World Wide Web Consortium (www.w3.org) 1999 specification, "Namespaces in XML".</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A&gt;</ph> property is set to any value, attempting to set the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute.Form%2A&gt;</ph> property to <ph id="ph3">`XmlSchemaForm.Unqualified`</ph> throws an exception.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default setting, <ph id="ph1">`XmlSchemaForm.None`</ph>, instructs the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to check the schema for the XML document to determine whether the namespace is qualified.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the schema does not specify a value for an individual element or attribute, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> uses the <ph id="ph2">`elementFormDefault`</ph> and <ph id="ph3">`attributeFormDefault`</ph> values to determine whether an element or attribute is qualified.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following XML code shows a schema:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> reads the schema, the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A&gt;</ph> value for both the <ph id="ph3">`Name`</ph> and <ph id="ph4">`Number`</ph> is <ph id="ph5">`XmlSchemaForm.None`</ph>, but the <ph id="ph6">`Name`</ph> element is qualified, while the <ph id="ph7">`Number`</ph> element is unqualified.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaForm"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaForm.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the <ph id="ph1">&lt;xref href="System.Xml.Serialization.XmlSerializer"&gt;&lt;/xref&gt;</ph> must serialize a member that is set to <ph id="ph2">`null`</ph> as an empty tag with the <ph id="ph3">`xsi:nil`</ph> attribute set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML schema specification for structures allows an XML document to explicitly signal that an element's content is missing.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Such an element contains the attribute <ph id="ph1">`xsi:nil`</ph> set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the World Wide Web Consortium (www.w3.org) specification, "XML Schema Part 1: Structures".</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the <ph id="ph3">`xsi:nil`</ph> attribute is generated for class members that have been set to <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example if you set a field named <ph id="ph1">`MyStringArray`</ph> to <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> generates the following XML code.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A&gt;</ph> property is <ph id="ph2">`false`</ph>, no XML element is generated for class members that have been set to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot apply the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A&gt;</ph> property to a member typed as a value type because a value type cannot contain <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, you cannot set this property to <ph id="ph1">`false`</ph> for nullable value types.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>When such types are <ph id="ph1">`null`</ph>, they will be serialized by setting <ph id="ph2">`xsi:nil`</ph> to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Xml.Serialization.XmlSerializer"&gt;&lt;/xref&gt;</ph> generates the <ph id="ph3">`xsi:nil`</ph> attribute; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Gets or sets the namespace assigned to the XML element that results when the class is serialized.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A&gt;</ph> property conforms to the World Wide Web Consortium (www.w3.org) specification, "Namespaces in XML".</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create namespaces that are associated with a prefix, you must create an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph> that contains the namespaces and prefixes used in the XML document.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>As you set the namespace for each <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph>, it must match one of the namespaces in the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the XML is generated, each array is correctly prefixed with the prefix associated with the specified namespace.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The namespace of the XML element.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Gets or sets the explicit order in which the elements are serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder&gt;</ph> enumeration to instruct the <ph id="ph2">&lt;xref:System.Web.Services.Description.ServiceDescriptionImporter&gt;</ph> to generate code that sets the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlElementAttribute.Order%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.Order%2A&gt;</ph> property has been used on one public property or field in a type, it must be applied to all public properties and fields for that type and all inherited types.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The order of the code generation.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Gets or sets the object type used to represent the XML element.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.Type%2A&gt;</ph> property to specify a derived type for a field or property.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a field or property returns an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, you can apply multiple instances of the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> to the member.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each instance, set the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute.Type%2A&gt;</ph> property to a type of object that can be inserted into the array.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the member.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>