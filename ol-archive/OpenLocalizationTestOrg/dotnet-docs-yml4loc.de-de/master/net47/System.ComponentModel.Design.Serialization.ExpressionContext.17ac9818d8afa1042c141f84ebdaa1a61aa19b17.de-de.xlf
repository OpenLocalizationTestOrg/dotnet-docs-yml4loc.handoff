<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0d89f1cded164107fa6953d890c289a80cc8d94</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ComponentModel.Design.Serialization.ExpressionContext.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a24cb692f830ef5fe25fe0bfb88af1e7cdfa1382</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c72ffcb8743e4255068da75588a8485bc751d86c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a means of passing context state among serializers.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt;</ph> is placed on the context stack and contains the most relevant expression during serialization.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code demonstrates an assignment.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>During serialization, several serializers are responsible for creating this single statement.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>One of those serializers is responsible for creating "Hello".</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are times when that serializer may need to know the context in which it is creating its expression.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the previous example, this context is not needed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code shows a situation in which knowledge of the context is necessary.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the serializer responsible for creating the resource expression needs to be informed of the names of the target objects.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt;</ph> class can be used for this.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>As each serializer creates an expression and invokes a serializer to handle a smaller part of the statement as a whole, the serializer pushes an expression context on the context stack.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each expression context has a parent property that locates the next expression context on the stack.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This provides a convenient traversal capability.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ComponentModel.Design.Serialization.ExpressionContext"&gt;&lt;/xref&gt;</ph> class with the given expression and owner.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The given code expression.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The given code expression type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The given code expression owner.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;expression&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;expressionType&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;owner&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ComponentModel.Design.Serialization.ExpressionContext"&gt;&lt;/xref&gt;</ph> class with a current value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The given code expression.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The given code expression type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The given code expression owner.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The given code expression preset value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;expression&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;expressionType&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;owner&lt;/code&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the expression this context represents.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The expression this context represents.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the expression.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt;</ph> to determine if a cast is needed when assigning to the expression.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the expression.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the object owning this expression.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the expression is a property reference to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of an instance of <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> called <ph id="ph3">`button1`</ph>, <ph id="ph4">&lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext.Owner%2A&gt;</ph> returns <ph id="ph5">`button1`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The object owning this expression.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets the preset value of an expression.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Contains the preset value of an expression, should one exist.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the expression is a property reference expression referring to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph>, the <ph id="ph3">&lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A&gt;</ph> property contains the instance of the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because the property is read-only and preset by the object to contain a value.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>On the other hand, a property such as <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> does not have a preset value and therefore the <ph id="ph3">&lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A&gt;</ph> property returns <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code shows how serializers can use this information to guide serialization.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The serializer of the <ph id="ph1">&lt;xref:System.Windows.Forms.Padding&gt;</ph> structure needs to be informed if it should generate the first or second form.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first form is generated by default.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second form is only generated if there is an <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt;</ph> on the context stack that contains a <ph id="ph2">&lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A&gt;</ph> equal to the value of the <ph id="ph3">&lt;xref:System.Windows.Forms.Padding&gt;</ph> currently being serialized.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The preset value of this expression, or <ph id="ph1">`null`</ph> if not assigned.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>