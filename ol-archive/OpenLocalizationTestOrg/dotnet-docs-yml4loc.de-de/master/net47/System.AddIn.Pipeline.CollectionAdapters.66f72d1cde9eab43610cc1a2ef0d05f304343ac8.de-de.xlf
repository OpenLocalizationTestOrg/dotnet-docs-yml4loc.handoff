<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4adf9e85c6e6ca13db171bf409e4cd1f68a9208a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.AddIn.Pipeline.CollectionAdapters.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97c392c10aad75560c1e7ee4b643a3637faba41a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a961636dfa4ca91f7ac7b2da00f000f0fbcc070</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enables collections to be passed between an add-in and its host application.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class provides methods that enable an <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection to be converted to a <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection is passed across the isolation boundary and converted back to an <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection that the add-in or the host application can use.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects in collections must be remotable.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the object types that you can pass, see <bpt id="p1">[</bpt>Contracts, Views, and Adapters<ept id="p1">](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Converts the specified <ph id="ph1">&lt;xref href="System.AddIn.Contract.IListContract`1"&gt;&lt;/xref&gt;</ph> collection to an <ph id="ph2">&lt;xref href="System.Collections.Generic.IList`1"&gt;&lt;/xref&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host application or add-in can use the returned <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection will have a lifetime token for the remote <ph id="ph2">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use this method overload only when the contents of the <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> are serializable types that can be passed directly to the add-in and host (rather than types that must be adapted into views).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The collection from the other side of the pipeline.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The type of objects that are contained in the list.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">T</ph><ept id="p1">&lt;/code&gt;</ept> must be serializable.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The converted collection.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Converts a specified <ph id="ph1">&lt;xref href="System.AddIn.Contract.IListContract`1"&gt;&lt;/xref&gt;</ph> collection to an <ph id="ph2">&lt;xref href="System.Collections.Generic.IList`1"&gt;&lt;/xref&gt;</ph> collection by using converter adapters.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method overload for <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collections that contain types that must be adapted before they can be passed to the add-in or host (rather than simple serializable types that can be passed directly).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host application or add-in can use the returned <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>It will have a lifetime token for the remote <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The collection to pass to the other side of the pipeline.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A converter that adapts the data from the type defined in the contract to the type expected in the view.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A converter that adapts the data from the type defined in the view to the type expected by the contract.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The type that defines the contract for passing objects of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TView</ph><ept id="p1">&lt;/code&gt;</ept> across the isolation boundary.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The type that defines the view of the objects in the list.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The converted collection.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Converts a specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IList`1"&gt;&lt;/xref&gt;</ph> collection to an <ph id="ph2">&lt;xref href="System.AddIn.Contract.IListContract`1"&gt;&lt;/xref&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection can be marshaled across the isolation boundary between the add-in and its host application.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use this method overload only when the contents of the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection are serializable types that can be passed directly to the contract (rather than types that must be adapted into contracts).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The collection to convert.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The type of objects that are contained in the list.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">T</ph><ept id="p1">&lt;/code&gt;</ept> must be serializable.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The converted collection.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Converts a specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IList`1"&gt;&lt;/xref&gt;</ph> collection to an <ph id="ph2">&lt;xref href="System.AddIn.Contract.IListContract`1"&gt;&lt;/xref&gt;</ph> collection by using converter adapters.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method overload for <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collections that contain types that must be adapted into contracts before they can be passed to the contract (rather than simple serializable types that can be passed directly).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Contract.IListContract%601&gt;</ph> collection can be marshaled across the isolation boundary between an add-in and its host application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The collection to convert.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A converter that adapts the data from the type defined in the view to the type expected by the contract.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A converter that adapts the data from the type defined in the contract to the type expected in the view.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The type that defines the view of the objects in the list.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The type that defines the contract for passing objects of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TView</ph><ept id="p1">&lt;/code&gt;</ept> across the isolation boundary.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The converted collection.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>