<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13b4c46b1e8078bda50b692f453821fa9e5cc02d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Linq.Expressions.ExpressionType.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">abb66e12fdeb3b04341583b5633efd718ec1cff9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e6ed85f3f1adf8b44c5abaf9ac8411ddc622eb0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Describes the node types for the nodes of an expression tree.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about each enumeration value of this type, see section 4.4 of expr-tree-spec.doc or expr-tree-spec.pdf on the <bpt id="p1">[</bpt>Microsoft Dynamic Language Runtime<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=230775)</ept> page of the Codeplex website.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An addition operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a + b</ph><ept id="p1">&lt;/code&gt;</ept>, without overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An addition compound assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a += b)</ph><ept id="p1">&lt;/code&gt;</ept>, without overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An addition compound assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a += b)</ph><ept id="p1">&lt;/code&gt;</ept>, with overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An addition operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a + b)</ph><ept id="p1">&lt;/code&gt;</ept>, with overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A bitwise or logical <ph id="ph1">`AND`</ph> operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">(a &amp; b)</ph><ept id="p1">&lt;/code&gt;</ept> in C# and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">(a And b)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A conditional <ph id="ph1">`AND`</ph> operation that evaluates the second operand only if the first operand evaluates to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It corresponds to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a &amp;&amp; b)</ph><ept id="p1">&lt;/code&gt;</ept> in C# and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">(a AndAlso b)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A bitwise or logical <ph id="ph1">`AND`</ph> compound assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">(a &amp;= b)</ph><ept id="p1">&lt;/code&gt;</ept> in C#.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An indexing operation in a one-dimensional array, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array[index]</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">array(index)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An operation that obtains the length of a one-dimensional array, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array.Length</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a = b)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A block of expressions.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A method call, such as in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj.sampleMethod()</ph><ept id="p1">&lt;/code&gt;</ept> expression.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A node that represents a null coalescing operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a ?? b)</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">If(a, b)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A conditional operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a &gt; b ? a : b</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">If(a &gt; b, a, b)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A constant value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A cast or conversion operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(SampleType)obj</ph><ept id="p1">&lt;/code&gt;</ept> in C#or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">CType(obj, SampleType)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A cast or conversion operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(SampleType)obj</ph><ept id="p1">&lt;/code&gt;</ept> in C#or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">CType(obj, SampleType)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Debugging information.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A unary decrement operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a - 1)</ph><ept id="p1">&lt;/code&gt;</ept> in C# and Visual Basic.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a</ph><ept id="p1">&lt;/code&gt;</ept> should not be modified in place.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A default value.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A division operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a / b)</ph><ept id="p1">&lt;/code&gt;</ept>, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An division compound assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a /= b)</ph><ept id="p1">&lt;/code&gt;</ept>, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A dynamic operation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A node that represents an equality comparison, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a == b)</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">(a = b)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A bitwise or logical <ph id="ph1">`XOR`</ph> operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">(a ^ b)</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">(a Xor b)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A bitwise or logical <ph id="ph1">`XOR`</ph> compound assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">(a ^= b)</ph><ept id="p1">&lt;/code&gt;</ept> in C#.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An extension expression.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A "go to" expression, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">goto Label</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">GoTo Label</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A "greater than" comparison, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a &gt; b)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A "greater than or equal to" comparison, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a &gt;= b)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A unary increment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a + 1)</ph><ept id="p1">&lt;/code&gt;</ept> in C# and Visual Basic.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a</ph><ept id="p1">&lt;/code&gt;</ept> should not be modified in place.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An index operation or an operation that accesses a property that takes arguments.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An operation that invokes a delegate or lambda expression, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">sampleDelegate.Invoke()</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`false`</ph> condition value.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`true`</ph> condition value.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A label.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A lambda expression, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a =&gt; a + a</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">Function(a) a + a</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A bitwise left-shift operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a &lt;&lt; b)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A bitwise left-shift compound assignment, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a &lt;&lt;= b)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A "less than" comparison, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a &lt; b)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A "less than or equal to" comparison, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a &lt;= b)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An operation that creates a new <ph id="ph1">&lt;xref href="System.Collections.IEnumerable"&gt;&lt;/xref&gt;</ph> object and initializes it from a list of elements, such as <ph id="ph2">&lt;code&gt;</ph><ph id="ph3">new List</ph><ph id="ph4">&lt;SampleType&gt;</ph><ph id="ph5">(){ a, b, c }</ph><ph id="ph6">&lt;/code&gt;</ph> in C# or <bpt id="p1">&lt;code&gt;</bpt><ph id="ph7">Dim sampleList = { a, b, c }</ph><ept id="p1">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A loop, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">for</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">while</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An operation that reads from a field or property, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj.SampleProperty</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An operation that creates a new object and initializes one or more of its members, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">new Point { X = 1, Y = 2 }</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">New Point With {.X = 1, .Y = 2}</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An arithmetic remainder operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a % b)</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">(a Mod b)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An arithmetic remainder compound assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a %= b)</ph><ept id="p1">&lt;/code&gt;</ept> in C#.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A multiplication operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a * b)</ph><ept id="p1">&lt;/code&gt;</ept>, without overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A multiplication compound assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a *= b)</ph><ept id="p1">&lt;/code&gt;</ept>, without overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A multiplication compound assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a *= b)</ph><ept id="p1">&lt;/code&gt;</ept>, that has overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An multiplication operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a * b)</ph><ept id="p1">&lt;/code&gt;</ept>, that has overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An arithmetic negation operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(-a)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a</ph><ept id="p1">&lt;/code&gt;</ept> should not be modified in place.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An arithmetic negation operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(-a)</ph><ept id="p1">&lt;/code&gt;</ept>, that has overflow checking.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a</ph><ept id="p1">&lt;/code&gt;</ept> should not be modified in place.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An operation that calls a constructor to create a new object, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">new SampleType()</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An operation that creates a new array, in which the bounds for each dimension are specified, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">new SampleType[dim1, dim2]</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">New SampleType(dim1, dim2)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An operation that creates a new one-dimensional array and initializes it from a list of elements, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">new SampleType[]{a, b, c}</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">New SampleType(){a, b, c}</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A bitwise complement or logical negation operation.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In C#, it is equivalent to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(~a)</ph><ept id="p1">&lt;/code&gt;</ept> for integral types and to <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">(!a)</ph><ept id="p2">&lt;/code&gt;</ept> for Boolean values.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In Visual Basic, it is equivalent to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(Not a)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a</ph><ept id="p1">&lt;/code&gt;</ept> should not be modified in place.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>An inequality comparison, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a != b)</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">(a &lt;&gt; b)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A ones complement operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(~a)</ph><ept id="p1">&lt;/code&gt;</ept> in C#.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A bitwise or logical <ph id="ph1">`OR`</ph> operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">(a | b)</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">(a Or b)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A bitwise or logical <ph id="ph1">`OR`</ph> compound assignment, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">(a |= b)</ph><ept id="p1">&lt;/code&gt;</ept> in C#.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A short-circuiting conditional <ph id="ph1">`OR`</ph> operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">(a || b)</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">(a OrElse b)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A reference to a parameter or variable that is defined in the context of the expression.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref href="System.Linq.Expressions.ParameterExpression"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A unary postfix decrement, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a--)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a</ph><ept id="p1">&lt;/code&gt;</ept> should be modified in place.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A unary postfix increment, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a++)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a</ph><ept id="p1">&lt;/code&gt;</ept> should be modified in place.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A mathematical operation that raises a number to a power, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a ^ b)</ph><ept id="p1">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A compound assignment operation that raises a number to a power, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a ^= b)</ph><ept id="p1">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A unary prefix decrement, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(--a)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a</ph><ept id="p1">&lt;/code&gt;</ept> should be modified in place.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A unary prefix increment, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(++a)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">a</ph><ept id="p1">&lt;/code&gt;</ept> should be modified in place.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>An expression that has a constant value of type <ph id="ph1">&lt;xref href="System.Linq.Expressions.Expression"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Linq.Expressions.ExpressionType.Quote"&gt;&lt;/xref&gt;</ph> node can contain references to parameters that are defined in the context of the expression it represents.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A bitwise right-shift operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a &gt;&gt; b)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A bitwise right-shift compound assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a &gt;&gt;= b)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A list of run-time variables.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref href="System.Linq.Expressions.RuntimeVariablesExpression"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A subtraction operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a - b)</ph><ept id="p1">&lt;/code&gt;</ept>, without overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A subtraction compound assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a -= b)</ph><ept id="p1">&lt;/code&gt;</ept>, without overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A subtraction compound assignment operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a -= b)</ph><ept id="p1">&lt;/code&gt;</ept>, that has overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An arithmetic subtraction operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(a - b)</ph><ept id="p1">&lt;/code&gt;</ept>, that has overflow checking, for numeric operands.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A switch operation, such as <ph id="ph1">`switch`</ph> in C# or <ph id="ph2">`Select Case`</ph> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>An operation that throws an exception, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">throw new Exception()</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`try-catch`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>An explicit reference or boxing conversion in which <ph id="ph1">`null`</ph> is supplied if the conversion fails, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">(obj as SampleType)</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">TryCast(obj, SampleType)</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>An exact type test.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A type test, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj is SampleType</ph><ept id="p1">&lt;/code&gt;</ept> in C# or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">TypeOf obj is SampleType</ph><ept id="p2">&lt;/code&gt;</ept> in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A unary plus operation, such as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">(+a)</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>An unbox value type operation, such as <ph id="ph1">`unbox`</ph> and <ph id="ph2">`unbox.any`</ph> instructions in MSIL.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>