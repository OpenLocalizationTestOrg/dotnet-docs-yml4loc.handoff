<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbebe1d38ee75b67524ca49463d749f7e6018e90</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Controls.Primitives.ButtonBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f01f4a3115aaa8819d61c7cfdfd42855401a131</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3dfc14814cbceacb6b5dce8f0fe942b1bd6d997</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the base class for all <ph id="ph1">&lt;xref href="System.Windows.Controls.Button"&gt;&lt;/xref&gt;</ph> controls.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Handle the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event to respond when the user clicks a <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can raise the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event by using an <ph id="ph2">&lt;xref:System.Windows.Controls.AccessText&gt;</ph> or by pressing ENTER or the SPACEBAR when the control has focus.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the user presses the SPACEBAR, the control sets <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> to <ph id="ph2">`true`</ph> and captures the mouse.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the control will raise mouse events such as <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that using the <ph id="ph1">&lt;xref:System.Windows.Controls.AccessText&gt;</ph> or ENTER does not change <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> or capture the mouse, but it does raise the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph> sets the <ph id="ph2">&lt;xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A&gt;</ph> attached property to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph> sets the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsInputMethodEnabled%2A&gt;</ph> property to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph> is a <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Occurs when a <ph id="ph1">&lt;xref href="System.Windows.Controls.Button"&gt;&lt;/xref&gt;</ph> is clicked.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can raise the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event by using an <ph id="ph2">&lt;xref:System.Windows.Controls.AccessText&gt;</ph> or by pressing ENTER or the SPACEBAR when the control has focus.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the user presses the SPACEBAR, the control sets <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> to <ph id="ph2">`true`</ph> and captures the mouse.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the control will raise mouse events such as <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that using the <ph id="ph1">&lt;xref:System.Windows.Controls.AccessText&gt;</ph> or ENTER does not change <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> or capture the mouse, but it does raise the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph> marks the <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event as handled in the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A&gt;</ph> method and raises the <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hence, the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A&gt;</ph> event will never occur for a control that inherits from <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, attach an event handler to the <ph id="ph1">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> event, or call <ph id="ph2">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph3">`handledEventsToo`</ph> set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.Click"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event corresponds to a left mouse button click.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets or sets when the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.Click"&gt;&lt;/xref&gt;</ph> event occurs.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.Click"&gt;&lt;/xref&gt;</ph> event occurs.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.Windows.Controls.ClickMode.Release"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.ClickMode"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets or sets the command to invoke when this button is pressed.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is used to associate a command with a particular button instance.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>, this property is most often set to be a static command value from one of the existing command libraries, such as <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.NavigationCommands&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept> or <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>commandName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The command to invoke when this button is pressed.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A command to invoke when this button is pressed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets or sets the parameter to pass to the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.Command"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most existing commands from the command libraries do not use a command parameter.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Of the commands that do use a command parameter, most of these take a parameter with some primitive type value, such as an integer or a string.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it is possible to create a custom command where that command expects a nonprimitive type as its command parameter.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a custom command case like this, setting <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A&gt;</ph> in code might require a new or existing object instance.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A&gt;</ph> in markup might require property element syntax, where the object element filling the property element syntax is a new element of the type expected by that command.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, setting in markup might require a reference through a markup extension to an existing object (typically these references are made with <bpt id="p1">[</bpt>Binding Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/binding-markup-extension.md)</ept> or <bpt id="p2">[</bpt>StaticResource Markup Extension<ept id="p2">](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>commandParameter<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of the same type as the particular command specified in the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Command%2A&gt;</ph> property expects.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use an existing command library command, see that command library's documentation for <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage information, including which type of <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A&gt;</ph> the command expects.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use a custom command, see Remarks.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Parameter to pass to the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.Command"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.CommandParameter"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Identifies the routed <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.Command"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Gets or sets the element on which to raise the specified command.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A&gt;</ph> property cannot be used to define a <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A&gt;</ph> property provides a reference to an element that is already defined somewhere in your application.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>elementName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> that receives the command.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Element on which to raise a command.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.CommandTarget"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Gets the value of the <ph id="ph1">&lt;xref href="System.Windows.ContentElement.IsEnabled"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you choose to override this implementation, make certain that you call the base method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the control is enabled; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether a <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase"&gt;&lt;/xref&gt;</ph> is currently activated.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> is the state of a button that indicates the left mouse button or SPACEBAR is pressed over the button.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the control captures the mouse.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the control will raise mouse events such as <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that using the <ph id="ph1">&lt;xref:System.Windows.Controls.AccessText&gt;</ph> or ENTER does not change <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> or capture the mouse, but is does raise the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework version 3.0 Service Pack 1, <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> has a protected setter.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this functionality, your application should target the .NET Framework version 3.5.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Versions and Dependencies<ept id="p1">](~/docs/framework/migration-guide/versions-and-dependencies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase"&gt;&lt;/xref&gt;</ph> is activated; otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.IsPressed"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Responds when the <ph id="ph1">&lt;xref href="System.Windows.Controls.AccessText.AccessKey"&gt;&lt;/xref&gt;</ph> for this control is called.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Input.AccessKeyEventArgs.IsMultiple%2A&gt;</ph> is <ph id="ph2">`true`</ph>, this method calls the base implementation, which gives this control focus.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, this method raises the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The event data for the <ph id="ph1">&lt;xref href="System.Windows.Input.AccessKeyManager.AccessKeyPressed"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.Click"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The control raises the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event by calling <ph id="ph2">&lt;xref:System.Windows.UIElement.RaiseEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Called when the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.IsPressed"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The data for <ph id="ph1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.KeyDown"&gt;&lt;/xref&gt;</ph> routed event that occurs when the user presses a key while this control has focus.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation marks the <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event as handled by setting the <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property of the event data to <ph id="ph3">`true`</ph> when <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A&gt;</ph> is not set to <ph id="ph5">&lt;xref:System.Windows.Controls.ClickMode.Hover&gt;</ph> and one of the following cases are true:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user presses the SPACEBAR.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user presses ENTER and <ph id="ph1">&lt;xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A&gt;</ph> is <ph id="ph2">`true`</ph> for this control.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>In all other cases, this implementation does not change the handled state (the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property) of the <ph id="ph2">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event data.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.KeyUp"&gt;&lt;/xref&gt;</ph> routed event that occurs when the user releases a key while this control has focus.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation marks the <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> event as handled by setting the <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property of the event data to <ph id="ph3">`true`</ph> when the user releases the SPACEBAR.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, this implementation does not change the handled state (the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property) of the <ph id="ph2">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> event data.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The event data for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.KeyUp"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Called when an element loses keyboard focus.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The event data for the <ph id="ph1">&lt;xref href="System.Windows.IInputElement.LostKeyboardFocus"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.LostMouseCapture"&gt;&lt;/xref&gt;</ph> routed event that occurs when this control is no longer receiving mouse event messages.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation does not change the handled state (the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property) of the <ph id="ph2">&lt;xref:System.Windows.UIElement.LostMouseCapture&gt;</ph> event data.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The event data for the <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.LostMouseCapture"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.ButtonBase.ClickMode"&gt;&lt;/xref&gt;</ph> routed event that occurs when the mouse enters this control.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.Controls.ClickMode.Hover&gt;</ph>, this implementation marks the <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> event as handled by setting the <ph id="ph4">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property of the event data to <ph id="ph5">`true`</ph> and raises the <ph id="ph6">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The event data for the <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.MouseEnter"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.MouseLeave"&gt;&lt;/xref&gt;</ph> routed event that occurs when the mouse leaves an element.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation marks the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> event as handled by setting the <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property of the event data to <ph id="ph3">`true`</ph> when <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A&gt;</ph> is set to <ph id="ph5">&lt;xref:System.Windows.Controls.ClickMode.Hover&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The event data for the <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.MouseLeave"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.MouseLeftButtonDown"&gt;&lt;/xref&gt;</ph> routed event that occurs when the left mouse button is pressed while the mouse pointer is over this control.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation marks the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event as handled by setting the <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property of the event data to <ph id="ph3">`true`</ph> when <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A&gt;</ph> is not set to <ph id="ph5">&lt;xref:System.Windows.Controls.ClickMode.Hover&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>To respond to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event, attach an event handler to the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> event, or call <ph id="ph3">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph4">`handledEventsToo`</ph> set to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.Controls.ClickMode.Press&gt;</ph>, this method raises the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.MouseLeftButtonUp"&gt;&lt;/xref&gt;</ph> routed event that occurs when the left mouse button is released while the mouse pointer is over this control.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation marks the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> event as handled by setting the <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property of the event data to <ph id="ph3">`true`</ph> when <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A&gt;</ph> is not set to <ph id="ph5">&lt;xref:System.Windows.Controls.ClickMode.Hover&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>To respond to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> event, attach an event handler to the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> event, or call <ph id="ph3">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph4">`handledEventsToo`</ph> set to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.Controls.ClickMode.Release&gt;</ph> is <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> is <ph id="ph4">`true`</ph>, this method raises the <ph id="ph5">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <ph id="ph1">&lt;xref href="System.Windows.UIElement.MouseMove"&gt;&lt;/xref&gt;</ph> routed event that occurs when the mouse pointer moves while over this element.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation marks the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> event as handled by setting the <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property of the event data to <ph id="ph3">`true`</ph> when <ph id="ph4">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A&gt;</ph> is not set to <ph id="ph5">&lt;xref:System.Windows.Controls.ClickMode.Hover&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A&gt;</ph> is <ph id="ph7">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>To respond to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> event, attach an event handler to the <ph id="ph2">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> event, or call <ph id="ph3">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph4">`handledEventsToo`</ph> set to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Called when the rendered size of a control changes.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overrides the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Specifies the size changes.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>