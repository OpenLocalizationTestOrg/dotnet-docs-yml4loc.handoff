<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">826bdc8548c37fd7faf18f50eecf0265336efd0a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Text.RegularExpressions.Group.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">415f2e1fc1157d8e4108a69d234cd42bd2ce84cd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc671b55fd9bae11597c4c1970d5812a46b73c5d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the results from a single capturing group.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A capturing group can capture zero, one, or more strings in a single match because of quantifiers.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For more information, see <bpt id="p1">[</bpt>Quantifiers<ept id="p1">](~/docs/standard/base-types/quantifiers-in-regular-expressions.md)</ept>.) All the substrings matched by a single capturing group are available from the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Information about the last substring captured can be accessed directly from the <ph id="ph1">`Value`</ph> and <ph id="ph2">`Index`</ph> properties.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>(That is, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> instance is equivalent to the last item of the collection returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property, which reflects the last capture made by the capturing group.)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example helps to clarify this relationship between a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object and the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.CaptureCollection?displayProperty=fullName&gt;</ph> that is returned by the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The regular expression pattern <ph id="ph1">`(\b(\w+?)[,:;]?\s?)+[?.!]`</ph> matches entire sentences.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The regular expression is defined as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Begin the match at a word boundary.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Match one or more word characters, but as few characters as possible.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the second (inner) capturing group.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>(The first capturing group includes the <ph id="ph1">`\b`</ph> language element.)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Match zero or one occurrence of a comma, colon, or semicolon.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Match zero or one occurrence of a white-space character.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Match the pattern consisting of a word boundary, one or more word characters, a punctuation symbol, and a white-space character one or more times.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the first capturing group.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Match any occurrence of a period, question mark, or exclamation point.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this regular expression pattern, the subpattern <ph id="ph1">`(\w+?)`</ph> is designed to match multiple words within a sentence.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the value of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object represents only the last match that <ph id="ph2">`(\w+?)`</ph> captures, whereas the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property returns a <ph id="ph4">&lt;xref:System.Text.RegularExpressions.CaptureCollection&gt;</ph> that represents all captured text.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>As the output shows, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.CaptureCollection&gt;</ph> for the second capturing group contains four objects.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The last of these corresponds to the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.RegularExpressions.Group.Class#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/cs/groupandcaptures1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.RegularExpressions.Group.Class#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/vb/groupandcaptures1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <ph id="ph1">&lt;xref href="System.Text.RegularExpressions.RegexOptions.RightToLeft"&gt;&lt;/xref&gt;</ph> option).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The collection may have zero or more items.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a quantifier is not applied to a capturing group, the collection returned by the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property contains a single <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Capture&gt;</ph> object that provides information about the same substring as the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>It defines a regular expression, <ph id="ph1">`\b(\w+)\b`</ph>, that extracts a single word from a sentence.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object captures the word "This", and the single object in the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.CaptureCollection&gt;</ph> contains information about the same capture.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.RegularExpressions.Group.Captures#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.RegularExpressions.Group.Captures#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The real utility of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property occurs when a quantifier is applied to a capturing group so that the group captures multiple substrings in a single regular expression.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object contains information about the last captured substring, whereas the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property contains information about all the substrings captured by the group.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, the regular expression <ph id="ph1">`\b(\w+\s*)+\.`</ph> matches an entire sentence that ends in a period.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The group <ph id="ph1">`(\w+\s*)+`</ph> captures the individual words in the collection.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> collection contains information only about the last captured substring, it captures the last word in the sentence, "sentence".</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, each word captured by the group is available from the collection returned by the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Text.RegularExpressions.Group.Captures#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures2.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Text.RegularExpressions.Group.Captures#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures2.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The collection of substrings matched by the group.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Returns the name of the capturing group representing by the current instance.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The name of the capturing group represented by the current instance.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the match is successful.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Success`</ph> property is true if at least one substring was captured by this group.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is equivalent to the Boolean expression (Group.Captures.Count &gt; 0).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the match is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`Group`</ph> object equivalent to the one supplied that is safe to share between multiple threads.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The input <ph id="ph1">&lt;xref href="System.Text.RegularExpressions.Group"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A regular expression <ph id="ph1">`Group`</ph> object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;inner&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>