<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb5e23e2eb4113f537e697a3ab723b10a6eddbdc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Net.NetworkInformation.Ping.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21830df161514ece2b1d365364484f349d71be3d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbe8e435e6f58ec56e985f37c477b57153451ca5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Allows an application to determine whether a remote computer is accessible over the network.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping&gt;</ph> class to detect whether a remote computer is reachable.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Network topology can determine whether <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping&gt;</ph> can successfully contact a remote host.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The presence and configuration of proxies, network address translation (NAT) equipment, or firewalls can prevent <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping&gt;</ph> from succeeding.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A successful <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping&gt;</ph> indicates only that the remote host can be reached on the network; the presence of higher level services (such as a Web server) on the remote host is not guaranteed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class provides functionality similar to the Ping.exe command line tool.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> methods send an Internet Control Message Protocol (ICMP) echo request message to a remote computer and waits for an ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description of ICMP messages, see RFC 792, available at <bpt id="p1">[</bpt>http://www.ietf.org<ept id="p1">](http://www.ietf.org/)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following types are used with the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping&gt;</ph> class and are described in detail below.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Type name<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Description<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defines status codes that describe the outcome of an ICMP echo request message.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Allows you to configure or retrieve the settings that control how many times the request packet can be forwarded (<ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph>), and whether it can be fragmented (<ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> ).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Contains the results of an ICMP echo request.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thrown if an unrecoverable error occurs.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Contains the data associated with <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> events, which are raised when a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call completes or is canceled.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate that provides the callback method invoked when a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call completes or is canceled.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> methods return the reply in a <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingReply&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=fullName&gt;</ph> property returns an <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus&gt;</ph> value to indicate the outcome of the request.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>When sending the request, you must specify the remote computer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can do this by providing a host name string, an IP address in string format, or an <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also specify any of the following types of information:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data to accompany the request.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying <ph id="ph1">`buffer`</ph> allows you to learn the amount of time required for a packet of a particular size to travel to and from the remote host and the maximum transmission unit of the network path.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>(See the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> overloads that take a <ph id="ph3">`buffer`</ph> parameter.)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether the ICMP Echo packet can be fragmented in transit.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>(See the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> overloads that take an <ph id="ph4">`options`</ph> parameter.)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>How many times routing nodes, such as routers or gateways, can forward the packet before it either reaches the destination computer or is discarded.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>(See <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> overloads that take an <ph id="ph4">`options`</ph> parameter.)</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The time limit within which the reply must be received.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>(See the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> overloads that take a <ph id="ph3">`timeout`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping&gt;</ph> class offers both synchronous and asynchronous methods for sending the request.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application should block while waiting for a reply, use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods; these methods are synchronous.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application should not block, use the asynchronous <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>A call to <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> executes in its own thread that is automatically allocated from the thread pool.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the asynchronous operation completes, it raises the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to specify the method that is called for <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must add a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to the event before calling <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate's method receives a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object that contains a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply&gt;</ph> object that describes the result of the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot use the same instance of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping&gt;</ph> class to generate multiple simultaneous ICMP Echo requests.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> while a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call is in progress or calling <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> multiple times before all previous calls have completed causes an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping"&gt;&lt;/xref&gt;</ph> object, and optionally disposes of the managed resources.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.ComponentModel.Component.Finalize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The public <ph id="ph1">`Dispose()`</ph> method invokes the protected <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping&gt;</ph> object references.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to releases only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.PingCompleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Classes that inherit from the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping&gt;</ph> class can override this method to perform additional tasks, such as logging the data contained in the <ph id="ph2">`e`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Raising an event invokes the event handler through a delegate.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the preferred technique for handling the event in a derived class.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingCompletedEventArgs"&gt;&lt;/xref&gt;</ph> object that contains event data.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Occurs when an asynchronous operation to send an Internet Control Message Protocol (ICMP) echo message and receive the corresponding ICMP echo reply message completes or is canceled.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> event to get information about the completion status and data collected by a call to one of the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate provides the call back method invoked when <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> raises this event.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified by the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingOptions"&gt;&lt;/xref&gt;</ph> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingReply"&gt;&lt;/xref&gt;</ph> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The size of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> exceeds 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or is a zero length string.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>, or the <ph id="ph3">&lt;code&gt;buffer&lt;/code&gt;</ph> size is greater than 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified by the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingOptions"&gt;&lt;/xref&gt;</ph> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingReply"&gt;&lt;/xref&gt;</ph> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The method will return <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.IPStatus.PacketTooBig"&gt;&lt;/xref&gt;</ph> if the packet exceeds the Maximum Transmission Unit (MTU).</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The size of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> exceeds 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>, or the <ph id="ph3">&lt;code&gt;buffer&lt;/code&gt;</ph> size is greater than 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified in the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingReply"&gt;&lt;/xref&gt;</ph> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The size of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> exceeds 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>, or the <ph id="ph3">&lt;code&gt;buffer&lt;/code&gt;</ph> size is greater than 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified in the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingReply"&gt;&lt;/xref&gt;</ph> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The method will return <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.IPStatus.PacketTooBig"&gt;&lt;/xref&gt;</ph> if the packet exceeds the Maximum Transmission Unit (MTU).</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The size of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> exceeds 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>, or the <ph id="ph3">&lt;code&gt;buffer&lt;/code&gt;</ph> size is greater than 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>This method allows you to specify a time-out value for the operation.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified in the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingReply"&gt;&lt;/xref&gt;</ph> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This method allows you to specify a time-out value for the operation.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified in the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingReply"&gt;&lt;/xref&gt;</ph> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sends a 32 <ph id="ph1">&lt;xref:System.Byte&gt;</ph> data buffer with the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method waits five seconds for an ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it does not receive a reply in that time, the method returns and the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingReply"&gt;&lt;/xref&gt;</ph> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sends to the host that is specified by <ph id="ph1">`address`</ph> a 32 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> data buffer with the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method waits five seconds for an ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it does not receive a reply in that time, the method returns and the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingReply"&gt;&lt;/xref&gt;</ph> object that provides information about the ICMP echo reply message, if one was received, or describes the reason for the failure if no message was received.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method when your application must not block.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each call executes in a separate thread that is automatically allocated from the thread pool.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the asynchronous operation completes, it raises the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to specify the method that is called when <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> raises the event.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must add a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to the event before calling <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate's method receives a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object that contains a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply&gt;</ph> object that describes the result of the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object inherits the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains the <ph id="ph1">`userToken`</ph> object passed into the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application should block while waiting for a reply, use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods; these methods are synchronous.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified by the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingOptions"&gt;&lt;/xref&gt;</ph> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>An object that is passed to the method invoked when the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> could not be resolved to a valid IP address.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The size of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> exceeds 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method when your application must not block.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each call executes in a separate thread that is automatically allocated from the thread pool.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the asynchronous operation completes, it raises the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to specify the method that is called when <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> raises the event.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must add a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to the event before calling <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate's method receives a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object that contains a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply&gt;</ph> object that describes the result of the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object inherits the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains the <ph id="ph1">`userToken`</ph> object passed into the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application blocks while waiting for a reply, use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods; these methods are synchronous.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified by the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to specify the maximum number of times the ICMP echo message can be forwarded before reaching its destination.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingOptions"&gt;&lt;/xref&gt;</ph> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>An object that is passed to the method invoked when the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>is not a valid IP address.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The size of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> exceeds 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method when your application should not block.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each call executes in a separate thread that is automatically allocated from the thread pool.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the asynchronous operation completes, it raises the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to specify the method that is called when <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> raises the event.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must add a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to the event before calling <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate's method receives a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object containing a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply&gt;</ph> object that describes the result of the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object inherits the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains the <ph id="ph1">`userToken`</ph> object passed into the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application should block while waiting for a reply, use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods; these methods are synchronous.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified by the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>An object that is passed to the method invoked when the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> could not be resolved to a valid IP address.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The size of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> exceeds 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method when your application should not block.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each call executes in a separate thread that is automatically allocated from the thread pool.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the asynchronous operation completes, it raises the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify the method that is called when <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> raises the event, you must add a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to the event before calling <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate's method receives a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object that contains a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply&gt;</ph> object that describes the result of the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object inherits the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains the <ph id="ph1">`userToken`</ph> object passed into the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application blocks while waiting for a reply, use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods; these methods are synchronous.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified by the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>An object that is passed to the method invoked when the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>is not a valid IP address.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The size of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> exceeds 65500 bytes.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method when your application should not block.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each call executes in a separate thread that is automatically allocated from the thread pool.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the asynchronous operation completes, it raises the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to specify the method that is called when <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> raises the event.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must add a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to the event before calling <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate's method receives a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object that contains a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply&gt;</ph> object that describes the result of the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object inherits the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains the <ph id="ph1">`userToken`</ph> object passed into the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application should block while waiting for a reply, use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods; these methods are synchronous.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified by the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>An object that is passed to the method invoked when the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)"&gt;&lt;/xref&gt;</ph> method is in progress.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>is not a valid IP address.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method when your application should not block.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each call to this method executes in a separate thread that is automatically allocated from the thread pool.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the asynchronous operation completes, it raises the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify the method that is called when <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> raises the event, you must add a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to the event before calling <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate's method receives a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object that contains a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply&gt;</ph> object that describes the result of the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object inherits the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains the <ph id="ph1">`userToken`</ph> object passed into the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application should block while waiting for a reply, use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods; these methods are synchronous.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sends a 32 <ph id="ph1">&lt;xref:System.Byte&gt;</ph> data buffer with the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method waits five seconds for an ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it does not receive a reply in that time the method returns and the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>An object that is passed to the method invoked when the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)"&gt;&lt;/xref&gt;</ph> method is in progress.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> could not be resolved to a valid IP address.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method sends the echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method when your application should not block.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each call to this method executes in a separate thread that is automatically allocated from the thread pool.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the asynchronous operation completes, it raises the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify the method that is called when <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> raises the event, you must add a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to the event before calling <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate's method receives a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object that contains a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply&gt;</ph> object that describes the result of the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object inherits the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains the <ph id="ph1">`userToken`</ph> object passed into the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application should block while waiting for a reply, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods; these methods are synchronous.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method sends a 32 <ph id="ph1">&lt;xref:System.Byte&gt;</ph> data buffer with the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method waits five seconds for an ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it does not receive a reply in that time, the method returns and the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>An object that is passed to the method invoked when the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>A call to the <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> method is in progress.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>is not a valid IP address.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method sends the Echo message asynchronously and, when the operation completes (successfully or unsuccessfully), returns the status to your application.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> method when your application should not block.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each call executes in a separate thread that is automatically allocated from the thread pool.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the asynchronous operation completes, it raises the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.PingCompleted&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to specify the method that is called when <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> raises the event.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must add a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventHandler&gt;</ph> delegate to the event before calling <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate's method receives a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object that contains a <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply&gt;</ph> object that describes the result of the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingCompletedEventArgs&gt;</ph> object inherits the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains the <ph id="ph1">`userToken`</ph> object passed into the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application should block while waiting for a reply, use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.Send%2A&gt;</ph> methods; these methods are synchronous.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the ICMP echo reply message is not received within the time specified by the <ph id="ph1">`timeout`</ph> parameter, the ICMP echo fails, and the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Net.NetworkInformation.IPStatus.TimedOut&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT">
          <source>When specifying very small numbers for <ph id="ph1">`timeout`</ph>, the Ping reply can be received even if <ph id="ph2">`timeout`</ph> milliseconds have elapsed.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload uses default settings for packet fragmentation and packet forwarding.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet that contains the ICMP echo message can be fragmented in transit if the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent fragmentation, use one of the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> methods that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the total packet size exceeds the maximum packet size that can be transmitted by one of the routing nodes between the local and remote computers, the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.PacketTooBig&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>The packet or packet fragments (if fragmented) can be forwarded by routing nodes 128 times before being discarded.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change this setting, use a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> overload that takes an <ph id="ph2">`options`</ph> parameter, and set the <ph id="ph3">&lt;xref:System.Net.NetworkInformation.PingOptions.Ttl%2A&gt;</ph> property to the desired value.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the packet does not reach its destination after being forwarded the specified number of times, the packet is discarded and the ICMP echo request fails.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this happens, the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PingReply.Status%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.NetworkInformation.IPStatus.TtlExpired&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>An object that is passed to the method invoked when the asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> could not be resolved to a valid IP address.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Cancels all pending asynchronous requests to send an Internet Control Message Protocol (ICMP) echo message and receives a corresponding ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method to terminate any calls to <ph id="ph1">&lt;xref:System.Net.NetworkInformation.Ping.SendAsync%2A&gt;</ph> that have not completed.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>&gt; object will complete after the ICMP packet has been sent and the response has been received.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>The computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingOptions"&gt;&lt;/xref&gt;</ph> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>&gt; object will complete after the ICMP packet has been sent and the response has been received.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>An IP address that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendPingAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>is not a valid IP address.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>&gt; object will complete after the ICMP packet has been sent and the response has been received.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>The computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>&gt; object will complete after the ICMP packet has been sent and the response has been received.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>An IP address that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>&gt; object will complete after the ICMP packet has been sent and the response has been received.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>The computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>&gt; object will complete after the ICMP packet has been sent and the response has been received.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>An IP address that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendPingAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>is not a valid IP address.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>The size of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> exceeds 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>&gt; object will complete after the ICMP packet has been sent and the response has been received.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>The computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>The value specified for this parameter can be a host name or a string representation of an IP address.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <ph id="ph1">&lt;xref href="System.Net.IPAddress"&gt;&lt;/xref&gt;</ph>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT">
          <source>This operation will not block.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>&gt; object will complete after the ICMP packet has been sent and the response has been received.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>An IP address that identifies the computer that is the destination for the ICMP echo message.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>The array cannot contain more than 65,500 bytes.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.PingOptions"&gt;&lt;/xref&gt;</ph> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">&lt;xref href="System.Threading.Tasks.Task`1"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>The task object representing the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">&lt;xref href="System.Net.NetworkInformation.Ping.SendPingAsync*"&gt;&lt;/xref&gt;</ph> is in progress.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>An exception was thrown while sending or receiving the ICMP messages.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>See the inner exception for the exact exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>is not a valid IP address.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>This object has been disposed.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>The size of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> exceeds 65,500 bytes.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>