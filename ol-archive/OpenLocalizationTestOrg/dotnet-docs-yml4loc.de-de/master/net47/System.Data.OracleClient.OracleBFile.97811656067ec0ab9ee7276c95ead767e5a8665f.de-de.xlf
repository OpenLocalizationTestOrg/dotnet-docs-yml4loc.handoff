<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b4c75493d214839a21af57c82c50222e684ce1e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Data.OracleClient.OracleBFile.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">476ca8eea0d8ba8c66d313c3cf1c01bbc9f2c470</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e24f8490ffedc5f892f4eb2897cab1e63ee0641a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a managed <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> object designed to work with the Oracle <ph id="ph2">`BFILE`</ph> data type.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Oracle <ph id="ph1">`BFILE`</ph> data type is an Oracle <ph id="ph2">`LOB`</ph> data type that contains a reference to binary data with a maximum size of 4 gigabytes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>An Oracle <ph id="ph1">`BFILE`</ph> differs from other Oracle <ph id="ph2">`LOB`</ph> data types in that its data is stored in a physical file in the operating system instead of on the server.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the <ph id="ph1">`BFILE`</ph> data type provides read-only access to data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, write-oriented methods inherited from the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class are not supported.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other characteristics of a <ph id="ph1">`BFILE`</ph> data type that distinguish it from a <ph id="ph2">`LOB`</ph> data type are that it:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Contains unstructured data.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Supports server-side chunking.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Uses reference copy semantics.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you perform a copy operation on a <ph id="ph1">`BFILE`</ph>, only the <ph id="ph2">`BFILE`</ph> locator (which is a reference to the file) is copied.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data in the file is not copied.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`BFILE`</ph> data type should be used for referencing <ph id="ph2">`LOB`</ph>s that are large in size, and therefore, not practical to store in the database.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is client, server, and communication overhead for using a <ph id="ph1">`BFILE`</ph> data type compared to the <ph id="ph2">`LOB`</ph> data type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is more efficient to access a <ph id="ph1">`BFILE`</ph> if you only need to obtain a small amount of data.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is more efficient to access database-resident <ph id="ph1">`LOB`</ph>s if you need to obtain the entire object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each non-NULL <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object is associated with two entities that define the location of the underlying physical file:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>An Oracle DIRECTORY object, which is a database alias for a directory in the file system, and</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The file name of the underlying physical file, which is located in the directory associated with the DIRECTORY object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a <ph id="ph1">`BFILE`</ph> is created, you can retrieve its locator in the form of an <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object using the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleDataReader.GetOracleBFile%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The physical file that an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object is associated with does not need to exist until you attempt to access it.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application can bind an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> to a nonexistent file, create the physical file in the expected location, and then call <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any attempt to access a closed <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> using the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleBFile.Seek%2A&gt;</ph> methods reopens an <ph id="ph4">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> stream automatically.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# example demonstrates how you can create a <ph id="ph1">`BFILE`</ph> in an Oracle table, and then retrieve it in the form of an <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example demonstrates the use of the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph> object and the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph><ph id="ph3">&lt;xref:System.Data.OracleClient.OracleBFile.Seek%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks OracleClient.BFile#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks OracleClient.BFile/CS/source.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating and using an Oracle <ph id="ph1">`BFILE`</ph>, see the appropriate topic in your Oracle documentation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`BeginWrite`</ph>, <ph id="ph2">`EndWrite`</ph>, and <ph id="ph3">`WriteByte`</ph> methods, which are inherited from the <ph id="ph4">`System.IO.Stream`</ph> class, are not supported because the <ph id="ph5">`BFILE`</ph> data type is read-only.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">`BFILE`</ph> stream can be read.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> if a <ph id="ph2">`BFILE`</ph> is closed or disposed; otherwise <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Always <ph id="ph1">`true`</ph> for <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleBFile.Null"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether forward-seek and backward-seek operations can be performed.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> if a <ph id="ph2">`BFILE`</ph> is closed or disposed; otherwise <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Always <ph id="ph1">`true`</ph> for <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleBFile.Null"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the object supports writing.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Always returns <ph id="ph1">`false`</ph> because the Oracle <ph id="ph2">`BFILE`</ph> data type is read-only.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Creates a copy of this <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> object associated with the same physical file as the original.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The properties of the new <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object initially have the same values as those of the original object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, after the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Clone%2A&gt;</ph> is complete, each <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object is independent from the other.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, changing the value of the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Position%2A&gt;</ph> property on the original <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> does not change the value of <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleBFile.Position%2A&gt;</ph> on the copy.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> object associated with the same physical file as the original <ph id="ph2">`OracleBFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleConnection"&gt;&lt;/xref&gt;</ph> used by this instance of the <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The connection to a data source.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The default is a null value.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Copies the entire contents of this <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> to the beginning of a destination <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleLob"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The underlying data types of the source <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> and the destination <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleLob&gt;</ph> must be compatible.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you cannot copy binary data to a destination <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleLob&gt;</ph> that has a character data type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must have write access to the destination <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleLob&gt;</ph> for the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.CopyTo%2A&gt;</ph> operation to execute correctly.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The destination <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleLob"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The number of bytes copied.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The destination <ph id="ph1">`OracleLob`</ph> is a null object reference.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The destination is a null <ph id="ph1">`OracleLob`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The connection with which this <ph id="ph1">`OracleBFile`</ph> is associated is closed.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OracleBFile`</ph> object is closed or disposed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Copies the entire contents of this <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> to a destination <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleLob"&gt;&lt;/xref&gt;</ph> at the specified offset.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The underlying data types of the source <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> and the destination <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleLob&gt;</ph> must be compatible.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you cannot copy binary data to a destination <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleLob&gt;</ph> that has a character data type.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must have write access to the destination <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleLob&gt;</ph> for the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.CopyTo%2A&gt;</ph> operation to execute correctly.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The destination <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleLob"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The offset to which to copy.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The number of bytes copied.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The destination <ph id="ph1">`OracleLob`</ph> is a null object reference.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The destination is a null <ph id="ph1">`OracleLob`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The connection with which this <ph id="ph1">`OracleBFile`</ph> is associated is closed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OracleBFile`</ph> object is closed or disposed.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Copies from this <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> to a destination <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleLob"&gt;&lt;/xref&gt;</ph> with the specified amount of data, the source offset, and the destination offset.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The underlying data types of the source <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> and the destination <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleLob&gt;</ph> must be compatible.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you cannot copy binary data to a destination <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleLob&gt;</ph> that has a character data type.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must have write access to the destination <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleLob&gt;</ph> for the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.CopyTo%2A&gt;</ph> operation to execute correctly.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The offset from which to copy.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The destination <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleLob"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The offset to which to copy.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The quantity of data, in bytes, to copy.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The number of bytes copied.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The value of the amount parameter is less than zero or greater than 4 gigabytes.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The destination <ph id="ph1">`OracleLob`</ph> is a null object reference.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The destination is a null <ph id="ph1">`OracleLob`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The connection with which this <ph id="ph1">`OracleBFile`</ph> is associated is closed.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OracleBFile`</ph> object is closed or disposed.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Gets the name of the DIRECTORY object, with which an <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> object is associated.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each non-NULL <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object is associated with two entities that define the location of underlying physical file:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>An Oracle DIRECTORY object, which is a database alias for a directory in the file system, and</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The file name of the underlying physical file, which is located in the directory associated with the DIRECTORY object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.DirectoryName%2A&gt;</ph> property returns the name of the DIRECTORY object from the Oracle database.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating and using an Oracle <ph id="ph1">`BFILE`</ph>, see the appropriate topic in your Oracle documentation.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The name of the DIRECTORY object.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Attempted to call <ph id="ph1">`DirectoryName`</ph> on a closed or disposed <ph id="ph2">`OracleBFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether a physical file containing <ph id="ph1">`BFILE`</ph> data exists in the operating system.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a physical file containing <ph id="ph2">`BFILE`</ph> data exists; otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> object is closed or disposed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The connection with which a <ph id="ph1">`BFILE`</ph> is associated is closed.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Gets the name of the <ph id="ph1">`BFILE`</ph> without the path.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Null&gt;</ph>, an empty string is returned.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The name of the BFILE.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> object is closed or disposed.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Not currently supported.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> is a <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleBFile.Null"&gt;&lt;/xref&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> is a <ph id="ph3">&lt;xref href="System.Data.OracleClient.OracleBFile.Null"&gt;&lt;/xref&gt;</ph> stream; otherwise <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Gets a value that returns the length in bytes of the physical file with which the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> object is associated.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A long value representing the length of the physical file in bytes.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed or disposed.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Represents a null <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> object that is not bound to a physical file.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Null&gt;</ph> can be useful when you want to perform a comparison operation on an <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> to determine nullability.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any attempt to perform a read operation on a <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Null&gt;</ph> object succeeds, but does not return any data.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any attempt to perform a write operation on a <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Null&gt;</ph> object generates an exception.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Selecting a <ph id="ph1">`BFILE`</ph> column that contains a null value returns <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.Null&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Gets the current read position in the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Seeking to any location beyond the length of the stream is not supported.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Position`</ph> property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The current position within the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Attempted to set a position with a negative value or greater than the length of the stream.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed or disposed.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Reads a sequence of bytes from the current <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> stream and advances the position within the stream by the number of bytes read.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> method read a maximum of <ph id="ph2">`count`</ph> bytes from the current stream and store them in <ph id="ph3">`buffer`</ph> beginning at <ph id="ph4">`offset`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> returns the number of bytes read.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is zero only if the position is currently at the end of the stream.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> will block until at least one byte of data can be read, in the event that no data is available.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> returns 0 only when the end of the file has been reached.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any attempt to access a closed <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> using the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleBFile.Seek%2A&gt;</ph> methods reopens an <ph id="ph4">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> stream automatically.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# example assumes this schema in an Oracle table:</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example demonstrates using the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.Seek%2A&gt;</ph> methods to access an <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>An array of bytes.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>When this method returns, the buffer contains the specified byte array with the values between <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> and (<bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">offset</ph><ept id="p2">&lt;/code&gt;</ept><ph id="ph3"> + </ph><bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">count</ph><ept id="p3">&lt;/code&gt;</ept>) replaced by the bytes read from the current source.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> at which to begin storing the data read from the current stream.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to be read from the current stream.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The total number of bytes read into the buffer.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This may be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the file has been reached.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The sum of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept> is larger than the buffer length.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is negative.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The connection with which a <ph id="ph1">`BFILE`</ph> is associated is closed.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>An I/O error occurred.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed or disposed.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Sets the position on the current <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`offset`</ph> is negative, the new position is required to precede the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`offset`</ph> is zero, the new position is required to be the position specified by <ph id="ph2">`origin`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`offset`</ph> is positive, the new position is required to follow the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Seeking to any location beyond the length of the stream is not supported.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any attempt to access a closed <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> using the <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleBFile.Seek%2A&gt;</ph> methods reopens an <ph id="ph4">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> stream automatically.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# example assumes this schema in an Oracle table:</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example demonstrates using the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.Seek%2A&gt;</ph> methods to access an <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A byte offset relative to origin.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> is negative, the new position will precede the position specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">origin</ph><ept id="p2">&lt;/code&gt;</ept> by the number of bytes specified by <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">offset</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> is zero, the new position will be the position specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">origin</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> is positive, the new position will follow the position specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">origin</ph><ept id="p2">&lt;/code&gt;</ept> by the number of bytes specified by <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">offset</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">`System.IO.SeekOrigin`</ph> indicating the reference point used to obtain the new position.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The new position within the current stream.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Attempted to set a position with a negative value or greater than the length of the stream.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Methods were called after the stream was closed or disposed.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Binds the <ph id="ph1">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> object to a different file in the operating system.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.SetFileName%2A&gt;</ph> operation must be within a transaction to succeed.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>Simply calling <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.SetFileName%2A&gt;</ph> on a <ph id="ph2">`BFILE`</ph> associates the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object with a different file, but does not update the Oracle table.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>To update the Oracle table after calling <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.SetFileName%2A&gt;</ph>, you must call the <ph id="ph2">`Update`</ph> method of the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> and then commit the transaction.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once you retrieve the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.DirectoryName%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.FileName%2A&gt;</ph> property, they are cached in the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object and are unaffected by any cloned <ph id="ph4">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> objects' calls to <ph id="ph5">&lt;xref:System.Data.OracleClient.OracleBFile.SetFileName%2A&gt;</ph>, or by any changes to the <ph id="ph6">`BFILE`</ph> in the database.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other words, they might not represent the actual values of the <ph id="ph1">`BFILE`</ph> object in the server.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Furthermore, retrieving either property (<ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.DirectoryName%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.FileName%2A&gt;</ph>) causes both property values to be retrieved from the server and cached in the <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# example assumes this schema in an Oracle table:</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The example demonstrates using the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.SetFileName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleBFile.Read%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleBFile.Seek%2A&gt;</ph> methods to access an <ph id="ph4">&lt;xref:System.Data.OracleClient.OracleBFile&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The alias of the directory object that contains a physical file.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The name of the file in the operating system.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The operation must be within a transaction.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Not currently supported.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Not currently supported.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Gets an <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> of type <ph id="ph2">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> that contains the <ph id="ph3">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> data.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Value%2A&gt;</ph> property reads the entire <ph id="ph2">`BFILE`</ph> at one time.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>A benefit of using <ph id="ph1">`BFILE`</ph>s is the ability to retrieve large amounts of data in chunks at the client.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when you use <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleBFile.Value%2A&gt;</ph>, you obtain all the data for the BFILE column as one contiguous chunk, which can significantly increase application overhead.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Array"&gt;&lt;/xref&gt;</ph> of type <ph id="ph2">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> that contains the <ph id="ph3">&lt;xref href="System.Data.OracleClient.OracleBFile"&gt;&lt;/xref&gt;</ph> data.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Not currently supported.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Not currently supported.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Not currently supported.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Not currently supported.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>