<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec1ef401dbf213635ff8d13418d32c12cb29dbdb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Activities.Hosting.WorkflowInstance.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b69e3529c86a3c8b768e6cb2b26e73b1aaa7ddac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c637343e5207291a20894b5843dbc5401c915bc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Activities.Hosting.WorkflowInstance"&gt;&lt;/xref&gt;</ph> is a lightweight, per-instance runtime for executing a workflow program.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>It can be constructed to create a new workflow instance or from existing instance state.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The APIs that <ph id="ph1">&lt;xref href="System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl"&gt;&lt;/xref&gt;</ph> exposes are the minimal set of runtime controls from which higher level operations can be implemented.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This API set represents the entire breadth of functionality of the runtime.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Activities.Hosting.WorkflowInstance"&gt;&lt;/xref&gt;</ph> is an abstract class and relies on a host’s implementation of its abstract methods in order to provide host functionality such as synchronization, persistence, tracking, and extensions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance&gt;</ph> is single threaded and assumes that the host synchronizes all access to it.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attempt to call multiple APIs simultaneously will result in an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> being thrown.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Internally, a <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance&gt;</ph> has two states: Running and Paused.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The only way to cause the runtime to transition from paused to running is to call <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>All actions (except Pause) can only be taken while the runtime is Paused.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime will become spontaneously Paused in the following situations:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>An error fatal to the runtime has occurred.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host will be signaled through <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A&gt;</ph> (which does not signal a transition to Paused) and then notified through <ph id="ph2">&lt;xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception in the workflow was uncaught and escaped the root.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host will be notified through the <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.OnNotifyUnhandledException%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scheduler has run out of work items and is now <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstanceState.Idle&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host will be notified through the <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the scheduler could have run out of work items because the instance is idle or because the instance is complete.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A&gt;</ph> value of the <ph id="ph2">&lt;xref:System.Activities.Hosting.WorkflowInstance.Controller%2A&gt;</ph> property can be used to differentiate between the two.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The host can request a change from Running to Paused by calling the <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.PauseWhenPersistable%2A&gt;</ph> methods of the <ph id="ph3">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl&gt;</ph> instance returned by the <ph id="ph4">&lt;xref:System.Activities.Hosting.WorkflowInstance.Controller%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This request should not be considered to have a specific response meaning that the host should not attempt to correlate an OnNotify* or <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A&gt;</ph> with a specific call to pause.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>In response to a pause request, the runtime may transition to Paused and call <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.OnNotifyPaused%2A&gt;</ph> while the scheduler still has pending work items.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.State%2A&gt;</ph> value of the <ph id="ph2">&lt;xref:System.Activities.Hosting.WorkflowInstance.Controller%2A&gt;</ph> property can be used to determine whether the scheduler has no more work or was interrupted by a request to pause.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.RequestPause%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl&gt;</ph> instance returned by the <ph id="ph3">&lt;xref:System.Activities.Hosting.WorkflowInstance.Controller%2A&gt;</ph> property is the only method which can be called while the <ph id="ph4">&lt;xref:System.Activities.Hosting.WorkflowInstance&gt;</ph> is in the Running state.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>All other methods will throw an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> if called.Given the rules for how <ph id="ph2">&lt;xref:System.Activities.Hosting.WorkflowInstance&gt;</ph> transitions from one state to another, the public notion of Running and Paused can be defined as follows:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Running – The state between a call to <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A&gt;</ph> and the next WorkflowInstance.OnNotify*.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Paused – The state between the last WorkflowInstance.OnNotify* and the next call to <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Run%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Activities.Hosting.WorkflowInstance"&gt;&lt;/xref&gt;</ph> class with the specified workflow definition.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The activity that defines the workflow.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Activities.Hosting.WorkflowInstance"&gt;&lt;/xref&gt;</ph> class with the specified workflow definition and definition identity.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The activity that defines the workflow.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The definition identity.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to begin sending pending tracking records to tracking participants asynchronously.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The time period after which to abort the attempt.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The method to be called when the track operation has completed.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The information about the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The status of the current track operation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl"&gt;&lt;/xref&gt;</ph> instance for this <ph id="ph2">&lt;xref href="System.Activities.Hosting.WorkflowInstance"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The controller instance for this workflow instance.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets or sets the definition identity of <ph id="ph1">&lt;xref href="System.Activities.Hosting.WorkflowInstance"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The definition identity of <ph id="ph1">&lt;xref href="System.Activities.Hosting.WorkflowInstance"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Calls <ph id="ph1">&lt;xref href="System.Disposable.Dispose"&gt;&lt;/xref&gt;</ph> on all extensions that implement <ph id="ph2">&lt;xref href="System.IDisposable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to end the track operation.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The status of the asynchronous track operation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to send pending tracking records to tracking participants.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The time period after which to abort the attempt.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Retrieves the list of activity that is blocking the update of the workflow.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The deserialized runtime state.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The update map.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The list of activity that is blocking the update.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns an extension of the specified type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The type of the extension to find.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An extension of the specified type.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Returns all extensions found for the specified type.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The type of the extension to find.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>All extensions found for the specified type.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets or sets the root environment for the workflow instance’s arguments and variables.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is set after the workflow instance is initialized and <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The root environment for the workflow instance’s arguments and variables.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets the unique identifier for the workflow instance.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The unique identifier for the workflow instance.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Called by the host to initialize the workflow instance with the workflow run-time state.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The run-time state used to execute the workflow.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Called by the host to initialize the workflow instance with the argument values and execution properties.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The list of workflow execution properties.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Called by the host to initialize the workflow instance with the workflow run-time state and update map.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The run-time state used to execute the workflow.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The update map.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the workflow instance has been initialized.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the workflow instance has been initialized; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to notify the host that new instance keys should be associated with this instance.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The instance keys to associate with this workflow instance.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The method to be called when the operation completes.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A reference to the asynchronous associate keys operation.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Asynchronous call to ask host to flush pending tracking records to tracking participants.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The method to be called when the track operation has completed.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The information about the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The status of the current track operation.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Asynchronous call to ask the host to persist the workflow.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The method to be called when the persist operation has completed.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A reference to the current persist operation.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to notify the host that a resume bookmark operation is beginning.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The bookmark to resume.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The data to be passed to the activity that created the <ph id="ph1">&lt;xref href="System.Activities.Bookmark"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The interval in which the resume operation must complete before the operation is canceled and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The method to be called when the resume operation has completed.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A reference to the asynchronous resume operation.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to notify the host that a certain set of instance keys should no longer be associated with this instance.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The list of keys to disassociate.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to notify the host that an associate keys operation is complete.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The reference to the asynchronous associate keys operation.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to notify the host when the flush tracking records operation is complete.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The status of the asynchronous flush tracking records operation.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to notify the host that a persist operation is complete.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The reference to the asynchronous persist operation.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to notify the host that a resume bookmark operation is complete.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The reference to the asynchronous resume bookmark operation.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that indicates the result of a <ph id="ph1">&lt;xref href="System.Activities.Bookmark"&gt;&lt;/xref&gt;</ph> resume operation.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to notify the host that the workflow instance has transitioned from the running state to the paused state.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to notify the host an unhandled exception has occurred in the workflow instance.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The unhandled exception.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The activity that threw the exception.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The unique identifier of the <ph id="ph1">&lt;xref href="System.Activities.ActivityInstance"&gt;&lt;/xref&gt;</ph> representing the activity that threw the exception.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Called by the workflow runtime to notify the host that an abort operation has been requested for the workflow instance.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A&gt;</ph> is called, most <ph id="ph2">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl&gt;</ph> APIs except <ph id="ph3">&lt;xref:System.Activities.Hosting.WorkflowInstance.WorkflowInstanceControl.Abort%2A&gt;</ph> will throw an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is expected that after <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.OnRequestAbort%2A&gt;</ph> is called a host will trend toward a state in which it can satisfy the abort.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The reason for aborting the workflow instance.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Called by the host to register the specified extension manager, validate that all required extensions are present, and to initialize the collection of extensions to be used.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extensions are keyed by type, and a host provided extension will always be used if provided.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extensions added through <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A&gt;</ph> use the runtime type of the object as the type key.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extensions providers added through <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstanceExtensionManager.Add%2A&gt;</ph> use the decared type T of the Func<ph id="ph2">\&lt;</ph>T&gt; as the type key.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extension providers contributed by activities through the various *ActivityMetadata.AddDefaultExtensionProvider methods are dropped if a host extension exists for the declared type or if there is a broader type provided through AddDefaultExtensionProvider (ex.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>if Func<ph id="ph1">\&lt;</ph>StreamWriter&gt; is provided and Func<ph id="ph2">\&lt;</ph>TextWriter&gt; is provided, only Func<ph id="ph3">\&lt;</ph>StreamWriter&gt; will be kept).</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an extension does not exist in the collection that is required by an activity (expressed by calling *ActivityMetadata.RequireExtension) a <ph id="ph1">&lt;xref:System.Activities.ValidationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The extension manager to register.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the host supports the association of <ph id="ph1">&lt;xref href="System.Runtime.Persistence.InstanceView.InstanceKeys"&gt;&lt;/xref&gt;</ph> with a run-time instance.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the host supports the association of <ph id="ph2">&lt;xref href="System.Runtime.Persistence.InstanceView.InstanceKeys"&gt;&lt;/xref&gt;</ph> with a workflow instance; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Threading.SynchronizationContext"&gt;&lt;/xref&gt;</ph> used for scheduling the workflow instance.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is set after the workflow instance is initialized and <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The synchronization context used for scheduling the workflow instance.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Throws an <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> if the workflow instance has been initialized, as determined by <ph id="ph2">&lt;xref href="System.Activities.Hosting.WorkflowInstance.IsReadOnly"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Activities.Hosting.WorkflowInstance.IsReadOnly%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Gets the workflow definition of the workflow instance.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The workflow definition of the workflow instance.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>