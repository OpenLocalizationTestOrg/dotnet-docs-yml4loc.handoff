<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf0bbd89dbb9bb4d87bc9e35242b5968c878dbef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.ServiceContractAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbb782cb24d401f890f5a5b431ce1b6a8e9b6964</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85306d45eeca588638c520237826862a66072054</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Indicates that an interface or a class defines a service contract in a Windows Communication Foundation (WCF) application.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> attribute on an interface (or class) to define a service contract.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute on one or more of the class (or interface) methods to define the contract's service operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the service contract is implemented and combined with a <bpt id="p1">[</bpt>Bindings<ept id="p1">](~/docs/framework/wcf/bindings.md)</ept> and an <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> object, the service contract is exposed for use by clients.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an overview of the process using simple examples, see <bpt id="p1">[</bpt>Getting Started Tutorial<ept id="p1">](~/docs/framework/wcf/getting-started-tutorial.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating service contracts, see <bpt id="p1">[</bpt>Designing and Implementing Services<ept id="p1">](~/docs/framework/wcf/designing-and-implementing-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information expressed by a <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> and its interface is loosely related to the Web Services Description Language (WSDL) <ph id="ph2">`&lt;portType&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>A service contract is used on the service side to specify what the serviceâ€™s endpoint exposes to callers.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also used on the client side to specify the contract of the endpoint with which the client communicates and, in the case of duplex contracts, to specify the callback contract (using the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph> property) that the client must implement in order to participate in a duplex conversation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>An interface or class that is decorated with <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> must also have at least one method marked with the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute to expose any functionality.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the Examples section for a code example of the simplest use of the two attributes to define and implement a service.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> properties to modify the service contract.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ConfigurationName%2A&gt;</ph> property specifies the name of the service element in the configuration file to use.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> properties control the name and namespace of the contract in the WSDL <ph id="ph3">`&lt;portType&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> property specifies whether the contract requires a binding that supports sessions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph> property specifies the return contract in a two-way (duplex) conversation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> properties indicate whether all messages supporting the contract have a explicit <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> value, and if so, what that level is.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Services implement service contracts, which represent the data exchange that a service type supports.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>A service class can implement a service contract (by implementing an interface marked with <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> that has methods marked with <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph>) or it can be marked with the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> and apply the <ph id="ph4">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute to its own methods.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>(If a class implements an interface marked with <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>, it cannot be itself marked with <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>.) Methods on service types that are marked with the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> are treated as part of a default service contract specified by the service type itself.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about service operations, see <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> properties are the name of the contract type and <ph id="ph3">`http://tempuri.org`</ph>, respectively, and <ph id="ph4">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> is <ph id="ph5">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended that service contracts explicitly set their names, namespaces, and protection levels using these properties.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so accomplishes two goals.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>First, it builds a contract that is not directly connected to the managed type information, enabling you to refactor your managed code and namespaces without breaking the contract as it is expressed in WSDL.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Second, explicitly requiring a certain level of protection on the contract itself enables the runtime to validate whether the binding configuration supports that level of security, preventing poor configuration from exposing sensitive information.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about protection levels, see <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>To expose a service for use by client applications, create a host application to register your service endpoint with <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can host <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> services using Windows Activation Services (WAS), in console applications, Windows Service applications, ASP.NET applications, Windows Forms applications, or any other kind of application domain.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hosting in the WAS is very similar to creating an ASP.NET application.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <bpt id="p1">[</bpt>How to: Host a WCF Service in IIS<ept id="p1">](~/docs/framework/wcf/feature-details/how-to-host-a-wcf-service-in-iis.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clients either use the service contract interface (the interface marked with <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>) to create a channel to the service or they use the client objects (which combine the type information of the service contract interface with the <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> class) to communicate with your service.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details on client channels to services, see the <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> class and <bpt id="p1">[</bpt>WCF Client Overview<ept id="p1">](~/docs/framework/wcf/wcf-client-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> class or interface to inherit from another <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> class or interface extends the parent contract.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an <ph id="ph1">`IChildContract`</ph> interface is marked with <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> and inherited from another service contract interface, <ph id="ph3">`IParentContract`</ph>, the <ph id="ph4">`IChildContract`</ph> service contract contains the methods of both <ph id="ph5">`IParentContract`</ph> and <ph id="ph6">`IChildContract`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extending contracts (whether on classes or interfaces) is very similar to extending managed classes and interfaces.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most flexible approach to creating services is to define service contract interfaces first and then have your service class implement that interface.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>(This is also the simplest way to build your services if you must implement service contracts that have been defined by others.) Building services directly by marking a class with <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> and its methods with <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> works when the service exposes only one contract (but that contract can be exposed by more than one endpoint).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph>property to indicate another service contract that, when bound together with the original service contract, define a message exchange that can flow in two ways independently.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceModel.ServiceContractAttribute"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor creates an instance of the attribute with no session requirements, no callback contract, and the default name and namespace.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets or sets the type of callback contract when the contract is a duplex contract.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify an interface in the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph> property that represents the required opposite contract in a two-way (or duplex) message exchange.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables client applications to listen for inbound operation calls that the server-side service application can send independently of client activity.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Callback contracts that have one-way operations represent calls from the service that the client can handle.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> attribute is ignored on callback contracts.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure runtime behavior of callback objects, use the <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that indicates the callback contract.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets or sets the name used to locate the service in an application configuration file.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the value by which the configuration system locates a contract value in the configuration file, see <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The name used to locate the service element in an application configuration file.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The default is the name of the service implementation class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The value is null.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The value is an empty string.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the member has a protection level assigned.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A&gt;</ph> property indicates whether a protection level value other than <ph id="ph2">`false`</ph> has been set for the contract.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.ServiceModel.ServiceContractAttribute.ProtectionLevel"&gt;&lt;/xref&gt;</ph> property is not <ph id="ph3">&lt;xref href="System.Net.Security.ProtectionLevel.None"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Gets or sets the name for the <ph id="ph1">`&lt;portType&gt;`</ph> element in Web Services Description Language (WSDL).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Name%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> properties to control the name and namespace of the <ph id="ph3">`&lt;portType&gt;`</ph> element in WSDL.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The default value is the name of the class or interface to which the <ph id="ph1">&lt;xref href="System.ServiceModel.ServiceContractAttribute"&gt;&lt;/xref&gt;</ph> is applied.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The value is null.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The value is an empty string.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets or sets the namespace of the <ph id="ph1">`&lt;portType&gt;`</ph> element in Web Services Description Language (WSDL).</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The WSDL namespace of the <ph id="ph1">`&lt;portType&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The default value is "http://tempuri.org".</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Specifies whether the binding for the contract must support the value of the <ph id="ph1">&lt;xref href="System.ServiceModel.ServiceContractAttribute.ProtectionLevel"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> property to specify the degree to which the contract binding requires encryption, digital signatures, or both for endpoints that expose the contract.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value set here is the default value for all operation messages including faults.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is important to remember that the protection behavior at runtime is the combination of the protection-level values set on the following properties.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>These properties have a hierarchical structure.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the outermost value establishes the default setting for all narrower scopes unless a different value for a narrower scope is explicitly set.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the outer value remains the default for all narrower scopes with the exception of that specifically set.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=fullName&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph> and no other narrower scopes have protection level settings, all messages in an operation contract are encrypted and signed.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>If, however, one of those operations has the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> set to <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph>, then the messages for that operation are signed but all other messages in the contract are encrypted and signed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about protection levels and their assumptions and scopes, see <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](~/docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scopes at which these values are set are:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=fullName&gt;</ph> property on <ph id="ph2">&lt;xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=fullName&gt;</ph> property on <ph id="ph2">&lt;xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>When there is no protection level explicitly specified on the contract and the underlying binding supports security (whether at the transport or message level), the effective protection level for the whole contract is <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the binding does not support security (such as <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph>), the effective <ph id="ph2">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph> is <ph id="ph3">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph> for the whole contract.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result is that depending upon the endpoint binding, clients can require different message or transport level security protection even when the contract specifies <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Net.Security.ProtectionLevel"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Net.Security.ProtectionLevel.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The value is not one of the <ph id="ph1">&lt;xref href="System.Net.Security.ProtectionLevel"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Gets or sets whether sessions are allowed, not allowed or required.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> property to require bindings that support sessions between endpoints.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>A session is a way of correlating a set of messages exchanged between two or more endpoints.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your service supports channel sessions, you can then use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A&gt;</ph> property to specify the relationship between instances your service contract implementation and the channel session.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a binding does not support sessions, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.ServiceModel.SessionMode?displayProperty=fullName&gt;</ph> and the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A&gt;</ph> property is set to <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContextMode.PerSession&gt;</ph>, clients can use the same connection to make repeated calls to the same service object.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about sessions and service instances, see <bpt id="p1">[</bpt>Using Sessions<ept id="p1">](~/docs/framework/wcf/using-sessions.md)</ept> and <bpt id="p2">[</bpt>Sessions, Instancing, and Concurrency<ept id="p2">](~/docs/framework/wcf/feature-details/sessions-instancing-and-concurrency.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>A channel that supports sessions supports the default association of a service instance with a particular session.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, different session implementations support different features in addition to session-based instancing control.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> provides four types of sessions that you can use to provide sessionful application behavior; each type of session provides additional behavior specific to the type of session it is.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement?displayProperty=fullName&gt;</ph> supports security sessions, in which both ends of communication have agreed upon an encryption and/or digital signature process; all messages are correlated with that specific secure conversation.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Securing Services<ept id="p1">](~/docs/framework/wcf/securing-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">&lt;xref:System.ServiceModel.WSHttpBinding?displayProperty=fullName&gt;</ph>, which contains support for both security sessions and reliable sessions, by default uses only a secure session which encrypts and digitally signs messages.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.NetTcpBinding?displayProperty=fullName&gt;</ph> supports the sessions exposed by the TCP/IP connections to ensure that all messages are correlated by the connection session at the socket level.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ReliableSessionBindingElement?displayProperty=fullName&gt;</ph>, which implements the WS-ReliableMessaging specification, provides support for reliable sessions in which messages are delivered in order and exactly once, enabling confidence even when messages travel across multiple nodes during the conversation.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Reliable Sessions<ept id="p1">](~/docs/framework/wcf/feature-details/reliable-sessions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding?displayProperty=fullName&gt;</ph> provides MSMQ datagram sessions.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Queues in WCF<ept id="p1">](~/docs/framework/wcf/feature-details/queues-in-wcf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remember that setting the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> property does not specify the type of session the contract requires, only that it requires one.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ServiceModel.SessionMode"&gt;&lt;/xref&gt;</ph> that indicates whether sessions are allowed, not allowed, or required.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The value is not one of the <ph id="ph1">&lt;xref href="System.ServiceModel.SessionMode"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>