<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f043993a264408abc0370fe92c4110731720298</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c62c75267c9e795cb1070cc59a19a632168d3af2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e74d65b06f5401df62ff29ddbd9013bfd82e1f2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides an iterator that supports the following operations: moving forward one position by calling <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">operator--</ph><ept id="p1">&lt;/code&gt;</ept>, moving backward one position by calling <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">operator++</ph><ept id="p2">&lt;/code&gt;</ept>, accessing an element by using <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">operator[]</ph><ept id="p3">&lt;/code&gt;</ept>, and accessing an element by using pointer arithmetic.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Allocates and initializes a new <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allocates and initializes a new <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object from an existing <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An existing <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object to be copied to the current container.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Gets the underlying base iterator for the <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The underlying base iterator for the <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creates a copy of the current <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A copy of the current <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Gets the container that the iterator is traversing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The container that the iterator is traversing.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A valid iterator that points to the same container as the current iterator.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">_Right</ph><ept id="p1">&lt;/code&gt;</ept> is pointing to.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This number is negative if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">_Right</ph><ept id="p1">&lt;/code&gt;</ept> points to an element that is before the element that the current iterator points to.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Determines whether the given <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object is the same as the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IInputIterator`1"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two iterators are the same object; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Accesses the element at the given position in the container.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The position of the element to access.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The element at the given position in the container.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A valid iterator that points to the same container as the current iterator.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current iterator is pointing to an element that comes before the element that <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">_Right</ph><ept id="p1">&lt;/code&gt;</ept> is pointing to; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Moves the iterator by the given number of elements.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The number of elements to traverse.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To move the iterator forward, specify a negative number.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To move the iterator backward, use a positive number.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The actual number of elements traversed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This number will differ from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">_Offset</ph><ept id="p1">&lt;/code&gt;</ept> if the beginning or end of the container is reached before iterating the desired number of elements.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Increments the reverse iterator to the next position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Increments the reverse iterator by the given number of elements.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The integer parameter is specified on the right side of the addition operator.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.%2A&gt;</ph> Gene ric.ReverseRandomAccessIterator<ph id="ph2">`1.Add(Microsoft.VisualC.StlClr. Gene ric.ReverseRandomAccessIterator{`</ph>0}@,System.Int32)?qualifyHint=True&amp;autoUpgrade=False</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The number of elements to increment.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Decrements the reverse iterator by one element.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is the prefix version of the decrement operator.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Decrements the reverse iterator by one element.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is the postfix version of the decrement operator.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Increments the reverse iterator by one element.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is the prefix version of the increment operator.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Increments the reverse iterator by one element.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This is the postfix version of the increment operator.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Determines the difference between two iterators.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.%2A&gt;</ph> Gene ric.ReverseRandomAccessIterator<ph id="ph2">`1.Subtract(Microsoft.VisualC.StlClr. Gene ric.IRandomAccessIterator{`</ph>0})?qualifyHint=True&amp;autoUpgrade=False</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> to be subtracted from the current <ph id="ph2">&lt;xref href="Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The difference, in number of elements, between the two iterators.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Decrements the iterator by the given number of elements.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The integer parameter is specified on the right side of the subtraction operator.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.%2A&gt;</ph> Gene ric.ReverseRandomAccessIterator<ph id="ph2">`1.Subtract(Microsoft.VisualC.StlClr. Gene ric.ReverseRandomAccessIterator{`</ph>0}@,System.Int32)?qualifyHint=True&amp;autoUpgrade=False</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The number of elements to decrement.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An iterator.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Positions the iterator to the element immediately after the current element.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Determines whether the iterator is valid and can be safely used to traverse the underlying container.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the iterator is valid and safe to use; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>