<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d514c8fc0958e8799a2d6d28e73c7d1191695aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Forms.Application.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe2beb37994aa1e2b283867bd8be1db7a56da0f7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6420bb901399ee41dca2d3161ab4cedd9a7b489</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides <ph id="ph1">`static`</ph> methods and properties to manage an application, such as methods to start and stop an application, to process Windows messages, and properties to get information about an application.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Application&gt;</ph> class has methods to start and stop applications and threads, and to process Windows messages, as follows:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Application.Run%2A&gt;</ph> starts an application message loop on the current thread and, optionally, makes a form visible.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Application.ExitThread%2A&gt;</ph> stops a message loop.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Application.DoEvents%2A&gt;</ph> processes messages while your program is in a loop.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Application.AddMessageFilter%2A&gt;</ph> adds a message filter to the application message pump to monitor Windows messages.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.IMessageFilter&gt;</ph> lets you stop an event from being raised or perform special operations before invoking an event handler.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class has <ph id="ph1">&lt;xref:System.Windows.Forms.Application.CurrentCulture%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Application.CurrentInputLanguage%2A&gt;</ph> properties to get or set culture information for the current thread.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot create an instance of this class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Adds a message filter to monitor Windows messages as they are routed to their destinations.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use a message filter to prevent specific events from being raised or to perform special operations for an event before it is passed to an event handler.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Message filters are unique to a specific thread.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent a message from being dispatched, the <ph id="ph1">`value`</ph> parameter instance that you pass to this method must override the <ph id="ph2">&lt;xref:System.Windows.Forms.IMessageFilter.PreFilterMessage%2A&gt;</ph> method with the code to handle the message.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method must return <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Adding message filters to the message pump for an application can degrade performance.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The implementation of the <ph id="ph1">&lt;xref href="System.Windows.Forms.IMessageFilter"&gt;&lt;/xref&gt;</ph> interface you want to install.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the caller can quit this application.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property returns <ph id="ph1">`false`</ph> if it is called from a <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> being hosted within a Web browser.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> cannot quit the <ph id="ph2">&lt;xref:System.Windows.Forms.Application&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the caller can quit this application; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Occurs when the application is about to shut down.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must attach the event handlers to the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> event to perform unhandled, required tasks before the application stops running.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can close files opened by this application, or dispose of objects that garbage collection did not reclaim.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this is a static event, you must detach any event handlers attached to this event in the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ApplicationExit&gt;</ph> event handler itself.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not detach these handlers, they will remain attached to the event and continue to consume memory.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets the path for the application data that is shared among all users.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a path does not exist, one is created in the following format:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>Base Path<ept id="p1">*</ept><ph id="ph1">\\</ph><ph id="ph2">&lt;xref:System.Windows.Forms.Application.CompanyName%2A&gt;</ph><ph id="ph3">\\</ph><ph id="ph4">&lt;xref:System.Windows.Forms.Application.ProductName%2A&gt;</ph><ph id="ph5">\\</ph><ph id="ph6">&lt;xref:System.Windows.Forms.Application.ProductVersion%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Application.ProductVersion%2A&gt;</ph> first looks to see if the assembly containing the main executable has the <ph id="ph2">`AssemblyInformationalVersion`</ph> attribute on it.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this attribute exists, it is used for both <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ProductVersion%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Application.CommonAppDataPath%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this attribute does not exist, both properties use the version of the executable file instead.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The path will be different depending on whether the Windows Forms application is deployed using <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> applications are stored in a per-user application cache in the C:\Documents and Settings<ph id="ph2">\\</ph><bpt id="p1">*</bpt>username<ept id="p1">*</ept> directory.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id="p1">](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The path for the application data that is shared among all users.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gets the registry key for the application data that is shared among all users.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the key does not exist, it is created in the following format:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>LocalMachine\Software<ph id="ph1">\\</ph><ph id="ph2">&lt;xref:System.Windows.Forms.Application.CompanyName%2A&gt;</ph><ph id="ph3">\\</ph><ph id="ph4">&lt;xref:System.Windows.Forms.Application.ProductName%2A&gt;</ph><ph id="ph5">\\</ph><ph id="ph6">&lt;xref:System.Windows.Forms.Application.ProductVersion%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="Microsoft.Win32.RegistryKey"&gt;&lt;/xref&gt;</ph> representing the registry key of the application data that is shared among all users.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the company name associated with the application.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The company name.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets or sets the culture information for the current thread.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Globalization.CultureInfo"&gt;&lt;/xref&gt;</ph> representing the culture information for the current thread.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets or sets the current input language for the current thread.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.InputLanguage"&gt;&lt;/xref&gt;</ph> representing the current input language for the current thread.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Processes all Windows messages currently in the message queue.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you run a Windows Form, it creates the new form, which then waits for events to handle.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each time the form handles an event, it processes all the code associated with that event.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>All other events wait in the queue.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>While your code handles the event, your application does not respond.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the window does not repaint if another window is dragged on top.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Windows.Forms.Application.DoEvents%2A&gt;</ph> in your code, your application can handle the other events.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you have a form that adds data to a <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> and add <ph id="ph2">&lt;xref:System.Windows.Forms.Application.DoEvents%2A&gt;</ph> to your code, your form repaints when another window is dragged over it.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you remove <ph id="ph1">&lt;xref:System.Windows.Forms.Application.DoEvents%2A&gt;</ph> from your code, your form will not repaint until the click event handler of the button is finished executing.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on messaging, see <bpt id="p1">[</bpt>User Input in Windows Forms<ept id="p1">](~/docs/framework/winforms/user-input-in-windows-forms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike Visual Basic 6.0, the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.DoEvents%2A&gt;</ph> method does not call the <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, you use this method in a loop to process messages.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method causes the current thread to be suspended while all waiting window messages are processed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a message causes an event to be triggered, then other areas of your application code may execute.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can cause your application to exhibit unexpected behaviors that are difficult to debug.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you perform operations or computations that take a long time, it is often preferable to perform those operations on a new thread.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about asynchronous programming, see <bpt id="p1">[</bpt>Asynchronous Programming Model (APM)<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Enables visual styles for the application.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables visual styles for the application.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual styles are the colors, fonts, and other visual elements that form an operating system theme.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Controls will draw with visual styles if the control and the operating system support it.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>To have an effect, <ph id="ph1">&lt;xref:System.Windows.Forms.Application.EnableVisualStyles&gt;</ph> must be called before creating any controls in the application; typically, <ph id="ph2">&lt;xref:System.Windows.Forms.Application.EnableVisualStyles&gt;</ph> is the first line in the <ph id="ph3">`Main`</ph> function.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>A separate manifest is not required to enable visual styles when calling <ph id="ph1">&lt;xref:System.Windows.Forms.Application.EnableVisualStyles&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Prior to the .NET Framework 2.0, the <ph id="ph1">`FlatStyle`</ph> property of some controls, such as controls that derive from <ph id="ph2">&lt;xref:System.Windows.Forms.ButtonBase&gt;</ph>, had to be set to <ph id="ph3">&lt;xref:System.Windows.Forms.FlatStyle?displayProperty=fullName&gt;</ph> in order for the controls to be drawn with visual styles.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>In applications written with the .NET Framework 2.0, this is no longer necessary.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will have no effect for controls hosted in Internet Explorer.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Occurs when the application is about to enter a modal state.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Gets the path for the executable file that started the application, including the executable name.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The path and executable name for the executable file that started the application.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This path will be different depending on whether the Windows Forms application is deployed using <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> applications are stored in a per-user application cache in the C:\Documents and Settings<ph id="ph2">\\</ph><bpt id="p1">*</bpt>username<ept id="p1">*</ept> directory.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id="p1">](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> method stops all running message loops on all threads and closes all windows of the application.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not necessarily force the application to exit.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> method is typically called from within a message loop, and forces <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A&gt;</ph> to return.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>To exit a message loop for the current thread only, call <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ExitThread%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> raises the following events and performs the associated conditional actions:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosing&gt;</ph> event is raised for every form represented by the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.OpenForms%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event can be canceled by setting the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of their <ph id="ph2">&lt;xref:System.Windows.Forms.FormClosingEventArgs&gt;</ph> parameter to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If one of more of the handlers cancels the event, then <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> returns without further action.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Windows.Forms.Form.FormClosed&gt;</ph> event is raised for every open form, then all running message loops and forms are closed.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> method does not raise the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closed&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> events, which are obsolete as of <ph id="ph4">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Returns whether any <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> within the application cancelled the exit.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Exits the message loop on the current thread and closes all windows on the thread.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to exit the message loop of the current thread.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method causes the call to <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Run%2A&gt;</ph> for the current thread to return.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>To exit the entire application, call <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Runs any filters against a window message, and returns a copy of the modified message.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The Windows event message to filter.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`True`</ph> if the filters were processed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Occurs when the application finishes processing and is about to enter the idle state.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have tasks that you must perform before the thread becomes idle, attach them to this event.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Occurs when the application is about to leave a modal state.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Gets the path for the application data of a local, non-roaming user.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>A local user is one whose user profile is stored on the system on which the user logged on.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a path does not exist, one is created in the following format:</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>Base Path<ept id="p1">*</ept><ph id="ph1">\\</ph><ph id="ph2">&lt;xref:System.Windows.Forms.Application.CompanyName%2A&gt;</ph><ph id="ph3">\\</ph><ph id="ph4">&lt;xref:System.Windows.Forms.Application.ProductName%2A&gt;</ph><ph id="ph5">\\</ph><ph id="ph6">&lt;xref:System.Windows.Forms.Application.ProductVersion%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>A typical base path is C:\Documents and Settings<ph id="ph1">\\</ph><bpt id="p1">*</bpt>username<ept id="p1">*</ept>\Local Settings\Application Data.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>This path will be different, however, if the Windows Forms application is deployed by using <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> creates its own application data directory that is isolated from all other applications.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id="p1">](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The path for the application data of a local, non-roaming user.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether a message loop exists on this thread.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>When hosting Windows Forms in other environments, such as unmanaged applications, this property will always return <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.Application.RegisterMessageLoop%2A&gt;</ph> to instruct Windows Forms if the hosting environment still has an active message loop.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a message loop exists; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Initializes OLE on the current thread.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method before calling any <ph id="ph1">`Microsoft.Win32`</ph> method that requires OLE.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Application.OleRequired%2A&gt;</ph> first checks to see if OLE has been initialized on the current thread.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>If not, it initializes the thread for OLE.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unless a thread calls OLE methods directly, you do not need to call this method.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Threading.ApartmentState"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Application.ThreadException"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.Windows.Forms.Application.OnThreadException%2A&gt;</ph> to raise an exception that will halt processing of the application.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Application&gt;</ph> class has a <ph id="ph2">&lt;xref:System.Windows.Forms.Application.ThreadException&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can attach an event handler to this event to do whatever custom processing you need for unhandled exceptions.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not attach an event handler, <ph id="ph1">&lt;xref:System.Windows.Forms.Application.OnThreadException%2A&gt;</ph> will execute the default behavior, which involves displaying a dialog box to inform the user that there has been an error.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Application.OnThreadException%2A&gt;</ph> only implements default exception behavior for unhandled exceptions that occur on threads owned by Windows Forms.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unhandled exceptions on other threads are handled by the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Exception"&gt;&lt;/xref&gt;</ph> that represents the exception that was thrown.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Gets a collection of open forms owned by the application.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Application.OpenForms%2A&gt;</ph> property represents a read-only collection of forms owned by the application.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>This collection can be searched by index position or by the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.FormCollection"&gt;&lt;/xref&gt;</ph> containing all the currently open forms owned by this application.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Gets the product name associated with this application.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ProductName`</ph> is taken from the metadata of the assembly containing the main form of the current application.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set it by setting <ph id="ph1">&lt;xref:System.Reflection.AssemblyProductAttribute&gt;</ph> inside of your assembly manifest.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Assembly Manifest<ept id="p1">](~/docs/framework/app-domains/assembly-manifest.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The product name.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Gets the product version associated with this application.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, a version number displays as <bpt id="p1">*</bpt>major number<ept id="p1">*</ept>.<bpt id="p2">*</bpt>minor number<ept id="p2">*</ept>.<bpt id="p3">*</bpt>build number<ept id="p3">*</ept>.<bpt id="p4">*</bpt>private part number<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set it explicitly by setting the assembly version within your assembly manifest.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Assembly Manifest<ept id="p1">](~/docs/framework/app-domains/assembly-manifest.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Application.ProductVersion%2A&gt;</ph> first looks to see if the assembly containing the main executable has the <ph id="ph2">`AssemblyInformationalVersion`</ph> attribute on it.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this attribute exists, it is used for both <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ProductVersion%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Application.CommonAppDataPath%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this attribute does not exist, both properties use the version of the executable file instead.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The product version.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Forms.Application.Idle"&gt;&lt;/xref&gt;</ph> event in hosted scenarios.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used when hosting Windows Forms in another environment, such as an unmanaged application.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should call <ph id="ph1">&lt;xref:System.Windows.Forms.Application.RaiseIdle%2A&gt;</ph> when the hosting application enters an idle state.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables some Windows Forms controls and components to do important background work while the user is not interacting with the application.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> objects to pass to the <ph id="ph2">&lt;xref href="System.Windows.Forms.Application.Idle"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Registers a callback for checking whether the message loop is running in hosted environments.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used when hosting Windows Forms in another environment, such as an unmanaged application.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>In hosted environments, the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.MessageLoop%2A&gt;</ph> property will always return false if Windows Forms is not processing messages.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this callback to tell Windows Forms if the hosting environment is still processing messages.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The method to call when Windows Forms needs to check if the hosting environment is still sending messages.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Removes a message filter from the message pump of the application.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can remove a message filter when you no longer want to capture Windows messages before they are dispatched.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The implementation of the <ph id="ph1">&lt;xref href="System.Windows.Forms.IMessageFilter"&gt;&lt;/xref&gt;</ph> to remove from the application.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Gets a value specifying whether the current application is drawing controls with visual styles.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are drawing a custom control, use this property to decide whether to draw the control with or without visual styles, so that its appearance is consistent with other controls in the application.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the four conditions that must exist for <ph id="ph1">&lt;xref:System.Windows.Forms.Application.RenderWithVisualStyles%2A&gt;</ph> to return <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operating system supports visual styles</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>To verify this condition separately, use the <ph id="ph1">&lt;xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsSupportedByOS%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.VisualStyles.VisualStyleInformation&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user has enabled visual styles in the operating system</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>To verify this condition separately, use the <ph id="ph1">&lt;xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsEnabledByUser%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.VisualStyles.VisualStyleInformation&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual styles are enabled in the application</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual styles can be enabled in an application by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.EnableVisualStyles&gt;</ph> method or by using an application manifest that specifies that ComCtl32.dll version 6 or later will be used to draw controls.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual styles are being used to draw the client area of application windows</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>To verify this condition separately, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.VisualStyleState%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.Application&gt;</ph> class and verify that it has the value <ph id="ph3">&lt;xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=fullName&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if visual styles are enabled for controls in the client area of application windows; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Shuts down the application and starts a new instance immediately.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>The most common reason for calling <ph id="ph1">`Restart`</ph> is to start a new version of the application that you have downloaded through <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> using the <ph id="ph3">`Update`</ph> or <ph id="ph4">`UpdateAsync`</ph> method.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applications are restarted in the context in which they were initially run.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application was started using a URL pointing directly to the application's main executable file, it will be restarted using the same URL.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application is a <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> application, it will be restarted using <ph id="ph2">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application was originally supplied command-line options when it first executed, <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Restart%2A&gt;</ph> will launch the application again with the same options.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Your code is not a Windows Forms application.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You cannot call this method in this context.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Begins running a standard application message loop on the current thread, without a form.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a Win32-based or Windows Forms application, a message loop is a routine in code that processes user events, such as mouse clicks and keyboard strokes.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Every running Windows-based application requires an active message loop, called the main message loop.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the main message loop is closed, the application exits.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Windows Forms, this loop is closed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> method is called, or when the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.ExitThread%2A&gt;</ph> method is called on the thread that is running the main message loop.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most Windows Forms developers will not need to use this version of the method.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.Form%29&gt;</ph> overload to start an application with a main form, so that the application terminates when the main form is closed.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all other situations, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.ApplicationContext%29&gt;</ph> overload, which supports supplying an <ph id="ph2">&lt;xref:System.Windows.Forms.ApplicationContext&gt;</ph> object for better control over the lifetime of the application.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>A main message loop is already running on this thread.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Begins running a standard application message loop on the current thread, with an <ph id="ph1">&lt;xref href="System.Windows.Forms.ApplicationContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The message loop runs until <ph id="ph1">&lt;xref:System.Windows.Forms.Application.Exit%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Application.ExitThread%2A&gt;</ph> is called or the <ph id="ph3">&lt;xref:System.Windows.Forms.Application.ThreadExit&gt;</ph> event is raised on the context object.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.ApplicationContext"&gt;&lt;/xref&gt;</ph> in which the application is run.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A main message loop is already running on this thread.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Begins running a standard application message loop on the current thread, and makes the specified form visible.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the main function of an application calls this method and passes to it the main window of the application.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method adds an event handler to the <ph id="ph1">`mainForm`</ph> parameter for the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Closed&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event handler calls <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ExitThread%2A&gt;</ph> to clean up the application.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> class will be called prior to the return of this method.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.Form"&gt;&lt;/xref&gt;</ph> that represents the form to make visible.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A main message loop is already running on the current thread.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Gets or sets the format string to apply to top-level window captions when they are displayed with a warning banner.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The format string to apply to top-level window captions.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Sets the application-wide default for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">UseCompatibleTextRendering</ph><ept id="p1">&lt;/code&gt;</ept> property defined on certain controls.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Certain Windows Forms controls can render their text using either the <ph id="ph1">&lt;xref:System.Windows.Forms.TextRenderer&gt;</ph> class, which is based on the <ph id="ph2">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]</ph> graphics library, or the <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> class, which is based on the <ph id="ph4">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> graphics library.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>This change was made in the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> because of performance and localization issues with <ph id="ph2">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A&gt;</ph> to set the default value of the <ph id="ph2">`UseCompatibleTextRendering`</ph> property for controls that support it.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`UseCompatibleTextRendering`</ph> property is intended to provide visual compatibility between Windows Forms controls that render text using the <ph id="ph2">&lt;xref:System.Windows.Forms.TextRenderer&gt;</ph> class and <ph id="ph3">[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]</ph> and <ph id="ph4">[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]</ph> applications that perform custom text rendering using the <ph id="ph5">&lt;xref:System.Drawing.Graphics&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, if your application is not being upgraded from <ph id="ph1">[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]</ph> or <ph id="ph2">[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]</ph>, it is recommended that you leave <ph id="ph3">`UseCompatibleTextRendering`</ph> set to the default value of <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]</ph> based <ph id="ph2">&lt;xref:System.Windows.Forms.TextRenderer&gt;</ph> class was introduced in the <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> to improve performance, make text look better, and improve support for international fonts.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, the <ph id="ph2">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> based <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> class was used to perform all text rendering.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]</ph> calculates character spacing and word wrapping differently from <ph id="ph2">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a Windows Forms application that uses the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> class to render text, this could cause the text for controls that use <ph id="ph2">&lt;xref:System.Windows.Forms.TextRenderer&gt;</ph> to appear different from the other text in the application.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>To resolve this incompatibility, you can set the <ph id="ph1">`UseCompatibleTextRendering`</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set <ph id="ph1">`UseCompatibleTextRendering`</ph> to <ph id="ph2">`true`</ph> for all supported controls in the application, call the <ph id="ph3">&lt;xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A&gt;</ph> method with a parameter of <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should never call this method if your Windows Forms code is hosted in another application, such as Internet Explorer.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only call this method in stand-alone Windows Forms applications.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The default value to use for new controls.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, new controls that support <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">UseCompatibleTextRendering</ph><ept id="p1">&lt;/code&gt;</ept> use the <ph id="ph3">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> based <ph id="ph4">&lt;xref href="System.Drawing.Graphics"&gt;&lt;/xref&gt;</ph> class for text rendering; if <ph id="ph5">`false`</ph>, new controls use the <ph id="ph6">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]</ph> based <ph id="ph7">&lt;xref href="System.Windows.Forms.TextRenderer"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>You can only call this method before the first window is created by your Windows Forms application.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Suspends or hibernates the system, or requests that the system be suspended or hibernated.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application does not respond to a suspend request within 20 seconds, Windows determines that it is in a non-responsive state, and that the application can either be put to sleep or terminated.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once an application responds to a suspend request, however, it can take whatever time it needs to clean up resources and shut down active processes.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Forms.PowerState"&gt;&lt;/xref&gt;</ph> indicating the power activity mode to which to transition.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to force the suspended mode immediately; <ph id="ph2">`false`</ph> to cause Windows to send a suspend request to every application.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to disable restoring the system's power status to active on a wake event, <ph id="ph2">`false`</ph> to enable restoring the system's power status to active on a wake event.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the system is being suspended, otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Instructs the application how to respond to unhandled exceptions.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is often not feasible to catch all of the exceptions thrown by Windows Forms.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using this method, you can instruct your application whether it should catch all unhandled exceptions thrown by Windows Forms components and continue operating, or whether it should expose them to the user and halt execution.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A&gt;</ph> before you instantiate the main form of your application using the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>To catch exceptions that occur in threads not created and owned by Windows Forms, use the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.UnhandledExceptionMode"&gt;&lt;/xref&gt;</ph> value describing how the application should behave if an exception is thrown without being caught.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>You cannot set the exception mode after the application has created its first window.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Instructs the application how to respond to unhandled exceptions, optionally applying thread-specific behavior.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is often not feasible to catch all of the exceptions thrown by Windows Forms.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using this method, you can instruct your application whether it should catch all unhandled exceptions thrown by Windows Forms components and continue operating, or whether it should expose them to the user and halt execution.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A&gt;</ph> before you instantiate the main form of your application using the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`threadScope`</ph> is <ph id="ph2">`true`</ph>, the thread exception mode is set.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread exception mode overrides the application exception mode if <ph id="ph1">`mode`</ph> is not set to <ph id="ph2">&lt;xref:System.Windows.Forms.UnhandledExceptionMode.Automatic&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`threadScope`</ph> is <ph id="ph2">`false`</ph>, the application exception mode is set.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application exception mode is used for all threads that have the <ph id="ph1">&lt;xref:System.Windows.Forms.UnhandledExceptionMode.Automatic&gt;</ph> mode.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the application exception mode does not affect the setting of the current thread.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>To catch exceptions that occur in threads not created and owned by Windows Forms, use the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.UnhandledExceptionMode"&gt;&lt;/xref&gt;</ph> value describing how the application should behave if an exception is thrown without being caught.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to set the thread exception mode; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>You cannot set the exception mode after the application has created its first window.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Gets the path for the executable file that started the application, not including the executable name.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The path for the executable file that started the application.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>This path will be different depending on whether the Windows Forms application is deployed using <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> applications are stored in a per-user application cache in the C:\Documents and Settings<ph id="ph2">\\</ph><bpt id="p1">*</bpt>username<ept id="p1">*</ept> directory.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id="p1">](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)</ept>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Occurs when an untrapped thread exception is thrown.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event allows your Windows Forms application to handle otherwise unhandled exceptions that occur in Windows Forms threads.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attach your event handlers to the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ThreadException&gt;</ph> event to deal with these exceptions, which will leave your application in an unknown state.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Where possible, exceptions should be handled by a structured exception handling block.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can change whether this callback is used for unhandled Windows Forms thread exceptions by setting <ph id="ph1">&lt;xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>To catch exceptions that occur in threads not created and owned by Windows Forms, use the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee that no activations of this event are missed, you must attach a handler before you call <ph id="ph1">&lt;xref:System.Windows.Application.Run%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Occurs when a thread is about to shut down.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>When the main thread for an application is about to be shut down, this event is raised first, followed by an <ph id="ph1">&lt;xref href="System.Windows.Forms.Application.ApplicationExit"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must attach the event handlers to the <ph id="ph1">&lt;xref:System.Windows.Forms.Application.ThreadExit&gt;</ph> event to perform any unhandled, required tasks before the thread stops running.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Close files opened by this thread, or dispose of objects that the garbage collector did not reclaim.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Unregisters the message loop callback made with <ph id="ph1">&lt;xref href="System.Windows.Forms.Application.RegisterMessageLoop(System.Windows.Forms.Application.MessageLoopCallback)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Gets the path for the application data of a user.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a path does not exist, one is created in the following format:</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>Base Path<ept id="p1">*</ept><ph id="ph1">\\</ph><ph id="ph2">&lt;xref:System.Windows.Forms.Application.CompanyName%2A&gt;</ph><ph id="ph3">\\</ph><ph id="ph4">&lt;xref:System.Windows.Forms.Application.ProductName%2A&gt;</ph><ph id="ph5">\\</ph><ph id="ph6">&lt;xref:System.Windows.Forms.Application.ProductVersion%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data stored in this path is part of user profile that is enabled for roaming.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>A roaming user works on more than one computer in a network.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user profile for a roaming user is kept on a server on the network and is loaded onto a system when the user logs on.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a user profile to be considered for roaming, the operating system must support roaming profiles and it must be enabled.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>A typical base path is C:\Documents and Settings<ph id="ph1">\\</ph><bpt id="p1">*</bpt>username<ept id="p1">*</ept>\Application Data.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>This path will be different, however, if the Windows Forms application is deployed by using <ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]</ph> creates its own application data directory that is isolated from all other applications.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Accessing Local and Remote Data in ClickOnce Applications<ept id="p1">](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)</ept>.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The path for the application data of a user.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Gets the registry key for the application data of a user.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the key does not exist, it is created in the following format:</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>CurrentUser\Software<ph id="ph1">\\</ph><ph id="ph2">&lt;xref:System.Windows.Forms.Application.CompanyName%2A&gt;</ph><ph id="ph3">\\</ph><ph id="ph4">&lt;xref:System.Windows.Forms.Application.ProductName%2A&gt;</ph><ph id="ph5">\\</ph><ph id="ph6">&lt;xref:System.Windows.Forms.Application.ProductVersion%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data stored in this key is part of user profile that is enabled for roaming.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>A roaming user works on more than one computer in a network.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user profile for a roaming user is kept on a server on the network and is loaded onto a system when the user logs on.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a user profile to be considered for roaming, the operating system must support roaming profiles and it must be enabled.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="Microsoft.Win32.RegistryKey"&gt;&lt;/xref&gt;</ph> representing the registry key for the application data specific to the user.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Gets or sets whether the wait cursor is used for all open forms of the application.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this property is set to <ph id="ph1">`true`</ph>, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.UseWaitCursor%2A&gt;</ph> property of all open forms in the application will be set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>This call will not return until this property has been set on all forms.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property when you have a long-running operation, and want to indicate in all application forms that the operation is still processing.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> is the wait cursor is used for all open forms; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Gets a value that specifies how visual styles are applied to application windows.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">&lt;xref:System.Windows.Forms.Application.VisualStyleState%2A&gt;</ph> property determines whether visual styles are enabled in client areas or nonclient areas of application windows.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally, this property should be set within the main form's constructor or <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <ph id="ph1">&lt;xref href="System.Windows.Forms.VisualStyles.VisualStyleState"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>