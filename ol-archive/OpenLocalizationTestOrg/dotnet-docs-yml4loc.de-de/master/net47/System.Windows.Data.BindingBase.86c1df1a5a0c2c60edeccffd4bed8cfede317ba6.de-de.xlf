<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95ce0e23484bff68f26933e3b7d626d3d36cc8f7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Data.BindingBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c86171d45b8491775bab27d9d6c4fb87489c01ea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">870f982f81030b910760ea242f3355eebf22d13e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the common characteristics of the <ph id="ph1">&lt;xref href="System.Windows.Data.Binding"&gt;&lt;/xref&gt;</ph>, <ph id="ph2">&lt;xref href="System.Windows.Data.PriorityBinding"&gt;&lt;/xref&gt;</ph>, and <ph id="ph3">&lt;xref href="System.Windows.Data.MultiBinding"&gt;&lt;/xref&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=fullName&gt;</ph> method is sealed, a custom binding class that derives from <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph> will not function correctly as a <ph id="ph3">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> markup extension.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the <ph id="ph1">&lt;xref href="System.Windows.Data.BindingGroup"&gt;&lt;/xref&gt;</ph> to which this binding belongs.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.BindingGroupName%2A&gt;</ph> is not set, the binding belongs to a <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> only if the binding's source and the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> of the parent element that has the <ph id="ph4">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> are the same object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.BindingGroupName%2A&gt;</ph> is set to a value, the binding belongs to a <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> if the following conditions are true:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup.Name%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Data.BindingBase.BindingGroupName%2A&gt;</ph> are equal.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> belongs to a parent element of the binding's target element.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.BindingGroupName%2A&gt;</ph> is set to <ph id="ph2">`null`</ph>, the binding is never a part of a <ph id="ph3">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can include bindings that have a source that is different from the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> of the parent element that has the <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> by setting <ph id="ph3">&lt;xref:System.Windows.Data.BindingGroup.Name%2A&gt;</ph> of the <ph id="ph4">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> and the <ph id="ph5">&lt;xref:System.Windows.Data.BindingBase.BindingGroupName%2A&gt;</ph> property of a binding to the same value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can exclude bindings that have the same source as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> of the parent element that has the <ph id="ph2">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> by setting <ph id="ph3">&lt;xref:System.Windows.Data.BindingGroup.Name%2A&gt;</ph> of the <ph id="ph4">&lt;xref:System.Windows.Data.BindingGroup&gt;</ph> and the <ph id="ph5">&lt;xref:System.Windows.Data.BindingBase.BindingGroupName%2A&gt;</ph> property of a binding to different values.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The name of the <ph id="ph1">&lt;xref href="System.Windows.Data.BindingGroup"&gt;&lt;/xref&gt;</ph> to which this binding belongs.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Gets or sets the amount of time, in milliseconds, to wait before updating the binding source after the value on the target changes.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use a binding to update the binding source whenever the value of the property changes on the target, you set the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.Data.BindingMode.TwoWay&gt;</ph> and the <ph id="ph3">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> to <ph id="ph4">&lt;xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this situation, you can use the <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.Delay%2A&gt;</ph> property to specify whether there should be a time delay between when the target is changed and when the source is updated.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful when you want to enable users to change a property on a source object but you don't want each change to be immediately committed to the source.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose that you have a text box that is data two-way bound to a property of a data object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the user changes the value in the text box, the source gets updated.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable this scenario, you set the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;</ph> property on the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> to <ph id="ph3">&lt;xref:System.Windows.Data.BindingMode.TwoWay&gt;</ph> and the <ph id="ph4">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph> to <ph id="ph5">&lt;xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid updating the source object with every keystroke, set the <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.Delay%2A&gt;</ph> property to a reasonable value to cause the binding to update only after that amount of time has elapsed since the user stopped typing.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The amount of time, in milliseconds, to wait before updating the binding source.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets or sets the value to use when the binding is unable to return a value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>A binding returns a value successfully if:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The path to the binding source resolves successfully.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value converter, if any, is able to convert the resulting value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resulting value is valid for the binding target (target) property.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>If 1 and 2 return <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName&gt;</ph>, the target property is set to the value of the <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase.FallbackValue%2A&gt;</ph>, if one is available.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.FallbackValue%2A&gt;</ph>, the default value of the target property is used.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName&gt;</ph> is not considered a successful return value.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>- or –<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>fallbackValue<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attribute or object element value of the same type as the target property.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>See that type's documentation for XAML usage information.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>That type may or may not support attribute syntax for its values, or may or may not support object element syntax (which requires a default constructor on that type).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The target property type will therefore influence which syntax you use for the value of the <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.FallbackValue%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.Windows.DependencyProperty.UnsetValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Returns an object that should be set on the property where this binding and extension are applied.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation provides the base syntax support for binding through <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> for all provided practical derived classes (<ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase&gt;</ph> class implementation of this method is expected to return an expression object that is the result of a binding.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Binding a property works by targeting a given <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> on a given <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>These two pieces of information are transmitted by querying for an <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> implementation on the <ph id="ph2">`serviceProvider`</ph>, which the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph4">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> reader makes available during parsing of a binding.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>This base class implementation is responsible for checking for a valid <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If these are found, the actual implementation of returning a binding expression falls to various derived classes, as implemented by having the base class call an internal abstract method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the extension returns the binding object itself.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Returning the binding itself results in a type mismatch error, but this should not occur under normal circumstances.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the syntax for binding through <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> as implemented in this method relies on implementing an internal override, and because <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=fullName&gt;</ph> itself is sealed, a custom binding class that derives from <ph id="ph3">&lt;xref:System.Windows.Data.BindingBase&gt;</ph> will not function correctly as a <ph id="ph4">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> markup extension.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The object that can provide services for the markup extension.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>May be <ph id="ph1">`null`</ph>;</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The value to set on the binding target property.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether serialization processes should serialize the effective value of the <ph id="ph1">&lt;xref href="System.Windows.Data.BindingBase.FallbackValue"&gt;&lt;/xref&gt;</ph> property on instances of this class.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Data.BindingBase.FallbackValue"&gt;&lt;/xref&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;xref href="System.Windows.Data.BindingBase.TargetNullValue"&gt;&lt;/xref&gt;</ph> property should be serialized.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Data.BindingBase.TargetNullValue"&gt;&lt;/xref&gt;</ph> property should be serialized; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Gets or sets a string that specifies how to format the binding if it displays the bound value as a string.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph> can be a predefined, composite, or custom string format.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about string formats, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set the <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Converter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph> properties, the converter is applied to the data value first, and then the <ph id="ph3">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph> is applied.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you set the <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> to a composite string format, you can specify only one parameter.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use a <ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph> property applies only when it is set on the <ph id="ph3">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph> that is set on any child <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> objects is ignored.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The number of parameters in a composite string format cannot exceed the number of child <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> objects in the <ph id="ph2">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use a <ph id="ph1">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph>, you can set the <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph> on the <ph id="ph3">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph>, on child binding objects, or both.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph> is set on the child binding that is applied, that value is used.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph> is not set on the child binding that is applied, the <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph> of the <ph id="ph3">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph> is applied if it is set.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A string that specifies how to format the binding if it displays the bound value as a string.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets or sets the value that is used in the target when the value of the source is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>- or –<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>nullValue<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attribute or object element value of the same type as the target property.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>See that type's documentation for XAML usage information.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>That type may or may not support attribute syntax for its values, or may or may not support object element syntax (which requires a default constructor on that type).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The value that is used in the target when the value of the source is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>