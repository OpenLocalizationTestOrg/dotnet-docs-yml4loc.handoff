<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">feb82b61698d78fa76a87079de9b5dfa037ec0b5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Security.CodeAccessPermission.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23750a34437238e87bb6852e98830133f00eac88</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23436bf8d875218f1fe688b4d44887419b7c2de7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the underlying structure of all code access permissions.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a permission object is <ph id="ph1">`null`</ph>, it is handled the same as a permission object with the state <ph id="ph2">&lt;xref:System.Security.Permissions.PermissionState?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Inheritors of the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class must be granted full trust to function correctly as permissions extending the security infrastructure.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine that the inheritors are fully trusted, <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> issues an <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityAction.InheritanceDemand&gt;</ph> for <ph id="ph3">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence&gt;</ph><ph id="ph4"> = </ph><ph id="ph5">`true`</ph> and <ph id="ph6">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy&gt;</ph><ph id="ph7"> = </ph><ph id="ph8">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is called to initialize state in the type whenever an instance of the derived class is created.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.Assert"&gt;&lt;/xref&gt;</ph> can create security issues.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>An assertion is effective only if the code that calls <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> passes the security check for the permission that it is asserting.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call to <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> is effective until the calling code returns to its caller.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> can be active on a frame.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attempt to call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> when an active <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> exists on the frame results in a <ph id="ph3">&lt;xref:System.Security.SecurityException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertAssert%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> to remove an active <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if code lower on the call stack calls <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for that permission, a <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the stack walk reaches the code that tried to call <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>This happens because the code that called <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> has not been granted the permission, even though it tried to <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> it.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because calling <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, it should be used with great caution.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The calling code does not have <ph id="ph1">&lt;xref href="System.Security.Permissions.SecurityPermissionFlag.Assertion"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>There is already an active <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.Assert"&gt;&lt;/xref&gt;</ph> for the current frame.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When implemented by a derived class, creates and returns an identical copy of the current permission object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>A copy of a permission object represents the same access to resources as the original permission object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A copy of the current permission object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Forces a <ph id="ph1">&lt;xref href="System.Security.SecurityException"&gt;&lt;/xref&gt;</ph> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is typically used by secure libraries to ensure that callers have permission to access a resource.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a file class in a secure class library calls <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for the necessary <ph id="ph2">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> before performing a file operation requested by the caller.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> succeeds only if no <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is raised.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A caller higher in the call stack does not have the permission specified by the current instance.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A caller higher in the call stack has called <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.Deny"&gt;&lt;/xref&gt;</ph> on the current permission object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> method should be used only to protect resources from accidental access by fully trusted code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not be used to protect resources from intentional misuse by untrusted code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if method <ph id="ph1">`A`</ph> issues a <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> for a permission and then calls method <ph id="ph3">`B`</ph>, method <ph id="ph4">`B`</ph> can overtly override the <ph id="ph5">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> by issuing an <ph id="ph6">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The called method is always higher in the stack.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if method <ph id="ph1">`B`</ph> tries to access a protected resource, the security system begins checking for permissions with it because method <ph id="ph2">`B`</ph> is the immediate caller, and then walks down the stack to confirm that there is no <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> lower in the stack.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Method <ph id="ph1">`B`</ph>, which is trying to access the resource, can stop the stack walk immediately by using the <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> placed on the stack by method <ph id="ph2">`A`</ph> (the calling method) is never discovered.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> from being used to access the resource protected by the denied permission.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a method calls <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> on a permission, and if a <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call to <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> is effective until the calling code returns to its caller.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> can be active on a frame.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attempt to call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> when an active <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> exists on the frame results in a <ph id="ph3">&lt;xref:System.Security.SecurityException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertDeny%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> to remove an active <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>There is already an active <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.Deny"&gt;&lt;/xref&gt;</ph> for the current frame.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Determines whether the specified <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission"&gt;&lt;/xref&gt;</ph> object is equal to the current <ph id="ph2">&lt;xref href="System.Security.CodeAccessPermission"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id="ph2">&lt;xref href="System.Security.CodeAccessPermission"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified <ph id="ph2">&lt;xref href="System.Security.CodeAccessPermission"&gt;&lt;/xref&gt;</ph> object is equal to the current <ph id="ph3">&lt;xref href="System.Security.CodeAccessPermission"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom code that extends security objects needs to implement the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.ToXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.FromXml%2A&gt;</ph> methods to make the objects security-encodable.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The XML encoding to use to reconstruct the security object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">elem</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">elem</ph><ept id="p1">&lt;/code&gt;</ept> parameter does not contain the XML encoding for an instance of the same type as the current instance.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The version number of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">elem</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not supported.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Gets a hash code for the <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission"&gt;&lt;/xref&gt;</ph> object that is suitable for use in hashing algorithms and data structures such as a hash table.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A hash code for the current <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The intersection of two permissions is a permission that describes the set of operations they both describe in common.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only a demand that passes both original permissions will pass the intersection.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A permission to intersect with the current permission.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>It must be of the same type as the current permission.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A new permission that represents the intersection of the current permission and the specified permission.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This new permission is <ph id="ph1">`null`</ph> if the intersection is empty.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">target</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not <ph id="ph2">`null`</ph> and is not an instance of the same class as the current permission.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a permission that represents access to C:\example.txt is a subset of a permission that represents access to C:<ph id="ph1">\\</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method returns <ph id="ph1">`true`</ph>, the current permission represents no more access to the protected resource than does the specified permission.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following statements are required to be <ph id="ph1">`true`</ph> for all overrides of the <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.IsSubsetOf%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>X<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Y<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>Z<ept id="p3">*</ept> represent custom code access permission objects that are not null references, <bpt id="p4">*</bpt>U<ept id="p4">*</ept> represents an unrestricted code access permission, and <bpt id="p5">*</bpt>N<ept id="p5">*</ept> represents an empty permission with a <ph id="ph1">&lt;xref:System.Security.Permissions.PermissionState&gt;</ph> of <ph id="ph2">&lt;xref:System.Security.Permissions.PermissionState.None&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>X<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>X<ept id="p2">*</ept>) returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>X<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>Y<ept id="p2">*</ept>) returns the same value as <bpt id="p3">*</bpt>Y<ept id="p3">*</ept>.IsSubsetOf(<bpt id="p4">*</bpt>X<ept id="p4">*</ept>) if and only if <bpt id="p5">*</bpt>X<ept id="p5">*</ept> and <bpt id="p6">*</bpt>Y<ept id="p6">*</ept> represent the same set of permissions.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <bpt id="p1">*</bpt>X<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>Y<ept id="p2">*</ept>) and <bpt id="p3">*</bpt>Y<ept id="p3">*</ept>.IsSubsetOf(<bpt id="p4">*</bpt>Z<ept id="p4">*</ept>) both return <ph id="ph1">`true`</ph>, <bpt id="p5">*</bpt>X<ept id="p5">*</ept>.IsSubsetOf(<bpt id="p6">*</bpt>Z<ept id="p6">*</ept>) returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>X<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>U<ept id="p2">*</ept>) returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>X<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>N<ept id="p2">*</ept>) returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">*</bpt>N<ept id="p1">*</ept>.IsSubsetOf(<bpt id="p2">*</bpt>X<ept id="p2">*</ept>) returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <bpt id="p1">*</bpt>X<ept id="p1">*</ept> and <bpt id="p2">*</bpt>Y<ept id="p2">*</ept> represent custom code access permission objects that are null references, <bpt id="p3">*</bpt>X<ept id="p3">*</ept>.IsSubsetOf(<bpt id="p4">*</bpt>Y<ept id="p4">*</ept>) returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <bpt id="p1">*</bpt>Z<ept id="p1">*</ept> is also null, the compound set operation <bpt id="p2">*</bpt>X<ept id="p2">*</ept>.Union(<bpt id="p3">*</bpt>Y<ept id="p3">*</ept>).IsSubsetOf(<bpt id="p4">*</bpt>Z<ept id="p4">*</ept>) also returns <ph id="ph1">`true`</ph> because the union of two null permissions is a null permission.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A permission that is to be tested for the subset relationship.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This permission must be of the same type as the current permission.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current permission is a subset of the specified permission; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">target</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not <ph id="ph2">`null`</ph> and is not of the same type as the current permission.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> method should be used only to protect resources from accidental access by fully trusted code.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>It should not be used to protect resources from intentional misuse by untrusted code.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if method <ph id="ph1">`A`</ph> issues a <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> for a permission and then calls method <ph id="ph3">`B`</ph>, method <ph id="ph4">`B`</ph> can overtly override the <ph id="ph5">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> by issuing an <ph id="ph6">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The called method is always higher in the stack.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if method <ph id="ph1">`B`</ph> tries to access a protected resource, the security system begins checking for permissions with it because method <ph id="ph2">`B`</ph> is the immediate caller, and then walks down the stack to confirm that there is no <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> lower in the stack.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Method <ph id="ph1">`B`</ph>, which is trying to access the resource, can stop the stack walk immediately by using the <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> placed on the stack by method <ph id="ph2">`A`</ph> (the calling method) is never discovered.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> is similar to <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>, in that both cause stack walks to fail when they would otherwise succeed.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference is that <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> specifies permissions that will cause the stack walk to fail, but <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> specifies the only permissions that do not cause the stack walk to fail.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method to ensure that your code can be used to access only the specified resources.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call to <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> is effective until the calling code returns to its caller.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> can be active on a frame.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attempt to call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> when an active <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> exists on the frame results in a <ph id="ph3">&lt;xref:System.Security.SecurityException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> to remove an active <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if code lower on the call stack later calls <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for that permission, a <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the stack walk reaches the code that tried to call <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is because the code that called <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> has not been granted the permission, even though it called <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> for that permission.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>There is already an active <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.PermitOnly"&gt;&lt;/xref&gt;</ph> for the current frame.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Causes all previous overrides for the current frame to be removed and no longer in effect.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no overrides (<ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>) for the current frame, an <ph id="ph4">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>There is no previous <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.Assert"&gt;&lt;/xref&gt;</ph>, <ph id="ph2">&lt;xref href="System.Security.CodeAccessPermission.Deny"&gt;&lt;/xref&gt;</ph>, or <ph id="ph3">&lt;xref href="System.Security.CodeAccessPermission.PermitOnly"&gt;&lt;/xref&gt;</ph> for the current frame.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Causes any previous <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.Assert"&gt;&lt;/xref&gt;</ph> for the current frame to be removed and no longer in effect.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> for the current frame, an <ph id="ph2">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>There is no previous <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.Assert"&gt;&lt;/xref&gt;</ph> for the current frame.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Causes any previous <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.Deny"&gt;&lt;/xref&gt;</ph> for the current frame to be removed and no longer in effect.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> for the current frame, an <ph id="ph2">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>There is no previous <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.Deny"&gt;&lt;/xref&gt;</ph> for the current frame.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Causes any previous <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.PermitOnly"&gt;&lt;/xref&gt;</ph> for the current frame to be removed and no longer in effect.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> for the current frame, an <ph id="ph2">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>There is no previous <ph id="ph1">&lt;xref href="System.Security.CodeAccessPermission.PermitOnly"&gt;&lt;/xref&gt;</ph> for the current frame.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Creates and returns a string representation of the current permission object.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is useful in debugging when you need to display the permission as a string.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A string representation of the current permission object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates an XML encoding of the security object and its current state.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom code that extends security objects needs to implement the <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.ToXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.FromXml%2A&gt;</ph> methods to make the objects security-encodable.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>An XML encoding of the security object, including any state information.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result of a call to <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Union%2A&gt;</ph> is a permission that represents all the operations represented by both the current permission and the specified permission.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any demand that passes either permission passes their union.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A permission to combine with the current permission.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>It must be of the same type as the current permission.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A new permission that represents the union of the current permission and the specified permission.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">other</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This method is only supported at this level when passed <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>