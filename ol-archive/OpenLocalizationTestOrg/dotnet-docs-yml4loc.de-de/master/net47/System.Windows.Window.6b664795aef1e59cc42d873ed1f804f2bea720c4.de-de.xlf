<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d7dc8de6263593aa5d2086b5d9e3fbb55024d4f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Window.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f0bd08e85f659b22a28caa49159b79b07ab4d08</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f774673c1ae68e32aec49ca600383c489d583df7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The point of interaction between a user and a standalone application is a window.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window consists of two distinct areas:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A client area, which hosts application-specific content.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>A standard window is shown in the following figure:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Window elements<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>Window elements<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Lifetime Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Closed&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Closing&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Window Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.GetWindow%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Appearance and Behavior<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.ResizeMode%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>, <ph id="ph13">&lt;xref:System.Windows.Window.Title%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;</ph>, <ph id="ph17">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>, <ph id="ph18">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Dialog Boxes<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> exposes special support for managing all of the windows in an application:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Application maintains a list of all the windows that are currently instantiated in the application.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This list is exposed by the <ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> is automatically set with a reference to the first <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> that is instantiated in an application.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>This thereby making the window the main application window.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can be implemented using markup, markup and code-behind, or code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is primarily used to display windows and dialog boxes for standalone applications.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, for applications that require navigation at the window level, such as wizards, you can use <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> instead; <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> derives from <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> and extends it with browser-style navigation support.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Islands of navigable content can be incorporated into other content and content containers using <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> needs <ph id="ph2">`UnmanagedCode`</ph> security permission to be instantiated.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This has the following consequences:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph>-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about standalone application deployment and security considerations, see <bpt id="p1">[</bpt>WPF Security Strategy - Platform Security<ept id="p1">](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is a <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is a root element and, therefore, cannot be part of another element's content.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties set on a <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> through a style will not be applied at run time.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Customizing the Window Control</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>To apply the same property settings to multiple <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> controls, use the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can modify the default <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to give the control a unique appearance.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about creating a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, see <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>To see the parts and states that are specific to the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, see <bpt id="p1">[</bpt>Window Styles and Templates<ept id="p1">](~/docs/framework/wpf/controls/window-styles-and-templates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency properties for this control might be set by the control’s default style.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a property is set by a default style, the property might change from its default value when the control appears in the application.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default style is determined by which desktop theme is used when the application is running.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Default WPF Themes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting a visual property will only have an effect if that property is both present in <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> control's default template and is set by using a .</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor initializes the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties to their default <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a window is created within an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> that has an <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object, the constructor adds the <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object to the set of <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>-managed windows via the <ph id="ph5">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property of the <ph id="ph6">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Attempts to bring the window to the foreground and activates it.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The rules that determine whether the window is activated are the same as those used by the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph2">`SetForegroundWindow`</ph> function (User32.dll).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the window is activated in a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application that is not the user's foreground application, <ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method cannot be called when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph> was successfully activated; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Occurs when a window becomes the foreground window.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window is activated (becomes the foreground window) when:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The window is first opened.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>A user clicks the window's taskbar button.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows that need to detect when they become activate can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application's behavior or state depends on its activation state, it can inspect <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application can also be <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window's client area supports transparency.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property of a window is set to a transparent color, using <ph id="ph2">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph> for example, the window remains opaque.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the desktop and any running applications "beneath" the window cannot be seen.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable this type of transparency, <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> must be set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> exists to facilitate the creation of non-rectangular windows, and, consequently, when <ph id="ph2">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> is set to <ph id="ph3">`true`</ph>, a window's <ph id="ph4">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> property must be set to <ph id="ph5">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the window supports transparency; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A window that has a <ph id="ph1">&lt;xref href="System.Windows.Window.WindowStyle"&gt;&lt;/xref&gt;</ph> value of anything other than <ph id="ph2">&lt;xref href="System.Windows.WindowStyle.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.AllowsTransparency"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Override this method to arrange and size a window and its child elements.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is not called when the <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>When either <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Size"&gt;&lt;/xref&gt;</ph> that reflects the final size that the window should use to arrange itself and its children.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Size"&gt;&lt;/xref&gt;</ph> that reflects the actual size that was used.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Manually closes a <ph id="ph1">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>ALT+F4.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>System menu &amp;#124; <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> on a main window.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> or a <bpt id="p3">**</bpt>Close<ept id="p3">**</ept> button on a child window.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1"> **</bpt>OK<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> buttons on a dialog box are also developer-provided, although will likely set <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, which automatically closes a window that was opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>These mechanisms require you to explicitly call <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> to close a window.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a window, opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, and with a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> with its <ph id="ph3">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the window was opened using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> must be explicitly called, such as from <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Closing a window causes the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event to be raised.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event isn't canceled, the following occurs:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is removed from <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A?displayProperty=fullName&gt;</ph> (if an <ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph> object exists).</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is removed from the owner <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> if the owner/owned relationship was established before the owned <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> was shown and after the owner <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> was opened.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unmanaged resources created by the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> are disposed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> was called to show the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Closing a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> causes any windows that it owns to be closed.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Furthermore, closing a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may cause an application to stop running depending on how the <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName&gt;</ph> property is set.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method cannot be called when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Occurs when the window is about to close.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once this event is raised, a window cannot be prevented from closing.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.UIElement.Visibility"&gt;&lt;/xref&gt;</ph> is set, or <ph id="ph2">&lt;xref href="System.Windows.Window.Show"&gt;&lt;/xref&gt;</ph>, <ph id="ph3">&lt;xref href="System.Windows.Window.ShowDialog"&gt;&lt;/xref&gt;</ph>, or <ph id="ph4">&lt;xref href="System.Windows.Window.Hide"&gt;&lt;/xref&gt;</ph> is called while a window is closing.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Occurs directly after <ph id="ph1">&lt;xref href="System.Windows.Window.Close"&gt;&lt;/xref&gt;</ph> is called, and can be handled to cancel window closure.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be handled to detect when a window is being closed (for example, when <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called).</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Furthermore, <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be used to prevent a window from closing.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent a window from closing, you can set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> argument to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is raised when <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an owned window was opened by its owner window using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the owner of a window is closed (see <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised on the owned window.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event for each window is raised.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is canceled, cancellation is ignored.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a session ends because a user logs off or shuts down, <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised; handle <ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> to implement code that cancels application closure.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then, you can call <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to reopen it.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.UIElement.Visibility"&gt;&lt;/xref&gt;</ph> is set, or <ph id="ph2">&lt;xref href="System.Windows.Window.Show"&gt;&lt;/xref&gt;</ph>, <ph id="ph3">&lt;xref href="System.Windows.Window.ShowDialog"&gt;&lt;/xref&gt;</ph>, or <ph id="ph4">&lt;xref href="System.Windows.Window.Close"&gt;&lt;/xref&gt;</ph> is called while a window is closing.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Occurs after a window's content has been rendered.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the window has no content, this event is not raised.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Occurs when a window becomes a background window.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window is deactivated (becomes a background window) when:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>A user switches to another window in the current application.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>A user switches to the window in another application by using ALT+TAB or by using Task Manager.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>A user clicks the taskbar button for a window in another application.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Windows that need to detect when they become deactivated by handling the <ph id="ph1">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application's behavior or state depends on its activation state, it can inspect <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application can also be <ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Gets or sets the dialog result value, which is the value that is returned from the <ph id="ph1">&lt;xref href="System.Windows.Window.ShowDialog"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can be used from the code that showed a dialog box to determine whether a user accepted (<ph id="ph2">`true`</ph>) or canceled (<ph id="ph3">`false`</ph>) the dialog box.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, a dialog box is canceled when a user does one of the following:</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>PressesALT+F4.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Selects <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> from the System menu.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>In all of these cases, <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id="ph2">`false`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dialog box typically provides a special button to cancel a dialog, which is the button whose <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>In either of these cases, <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> remains <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dialog box also typically provides an accept button, which is the button whose <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>A button configured this way will raise its <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event when either it or the ENTER key is pressed.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it won't automatically close the dialog box, nor will it set <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>You need to manually write this code, usually from the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the default button.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id="ph2">`null`</ph> when the dialog box is shown but neither accepted nor canceled.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a dialog box closes, you can get the dialog result from the value returned by <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method, or by inspecting the <ph id="ph2">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can only be set when a <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> is opened by calling its <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> value of type <ph id="ph2">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Window.DialogResult"&gt;&lt;/xref&gt;</ph> is set before a window is opened by calling <ph id="ph2">&lt;xref href="System.Windows.Window.ShowDialog"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Window.DialogResult"&gt;&lt;/xref&gt;</ph> is set on a window that is opened by calling <ph id="ph2">&lt;xref href="System.Windows.Window.Show"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Occurs after the DPI of the screen on which the Window is displayed changes.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.RoutedEvent"&gt;&lt;/xref&gt;</ph> for when the DPI of the screen the Window is on changes.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The left mouse button must be down when <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>One way to detect when the left mouse button is pressed is to handle the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called, the left mouse button must be depressed over an exposed area of the window's client area.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method cannot be called when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The left mouse button is not down.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Returns a reference to the <ph id="ph1">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph> object that hosts the content tree within which the dependency object is located.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The dependency object.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph> reference to the host window.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;dependencyObject&lt;/code&gt;</ph> is null.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Makes a window invisible.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window is not closed when it is hidden, and neither the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> nor <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the window's <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Windows.Visibility?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a window is the application's <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> and the application's <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is <ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>, the application does not shut down.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <ph id="ph1">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then, you can call <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to re-open it.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Window.Hide"&gt;&lt;/xref&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;xref href="System.Windows.Window.Closing"&gt;&lt;/xref&gt;</ph>) or has been closed (<ph id="ph3">&lt;xref href="System.Windows.Window.Closed"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's icon.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> standalone applications have two types of icons:</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>One assembly icon, which is specified by using the <ph id="ph1">`&lt;ApplicationIcon&gt;`</ph> property in the application's project build file.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>This icon is used as the desktop icon for an assembly.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>When debugging in Visual Studio, your icon may not appear due to the hosting process.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you run the executable, the icon will appear.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Hosting Process (vshost.exe)<ept id="p1">](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)</ept>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>One icon per window that is specified by setting <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window always displays an icon.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>When one is not provided by setting <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> chooses an icon to display based on the following rules:</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the assembly icon, if specified.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the assembly icon is not specified, use the default <ph id="ph1">[!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)]</ph> icon.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to specify a custom window icon, you can restore the default application icon by setting <ph id="ph2">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>A single icon can be used in a variety of ways in <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph>, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some applications, like <ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]</ph>, provide a <bpt id="p1">**</bpt>View<ept id="p1">**</ept> menu that allows you to choose the size of the icon you'd like to view.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>If icons for all possible sizes and color depths exist within an icon file, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> will use the appropriate icon.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an icon file contains only a subset of all the possible icons, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> uses the next most appropriate icon in order of decreasing sizes and color depth.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>The result is that an icon will always be used by <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, although the icon used may not target the required size and color depth.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Media.ImageSource"&gt;&lt;/xref&gt;</ph> object that represents the icon.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.Icon"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the window is active.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>An active window will also be the top-most of all top-level windows that don't explicitly set the <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the window is active; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.IsActive"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window's left edge, in relation to the desktop.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the left edge of the restore point for the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property cannot be set through a style.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not specify a value, <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> is set to the system default value.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also specify the system default value by setting <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Neither <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The position of the window's left edge, in logical units (1/96th of an inch).</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.Left"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Occurs when the window's location changes.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window's location changes when:</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>A user moves a window by dragging it with the window's title bar.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window is moved after <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>Either the <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property is set programmatically.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> menu item of a window's System menu is chosen.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Gets an enumerator for a window's logical child elements.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IEnumerator"&gt;&lt;/xref&gt;</ph> a window's logical child elements.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Override this method to measure the size of a window.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is not called when the <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>When either <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Size"&gt;&lt;/xref&gt;</ph> that reflects the available size that this window can give to the child.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Infinity can be given as a value to indicate that the window will size to whatever content is available.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Size"&gt;&lt;/xref&gt;</ph> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Window.Activated"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Window.Closed"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Window.Closing"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.CancelEventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Called when the <ph id="ph1">&lt;xref href="System.Windows.Controls.ContentControl.Content"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A reference to the root of the old content tree.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A reference to the root of the new content tree.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Window.ContentRendered"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Creates and returns a <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;&lt;/xref&gt;</ph> object for this <ph id="ph2">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Automation.Peers.WindowAutomationPeer"&gt;&lt;/xref&gt;</ph> object for this <ph id="ph2">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Window.Deactivated"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Called when the DPI at which this window is rendered changes.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The previous DPI scale setting.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The new DPI scale setting.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Window.LocationChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Called when the <ph id="ph1">&lt;xref href="System.Windows.UIElement.ManipulationBoundaryFeedback"&gt;&lt;/xref&gt;</ph> event occurs.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation does not change the handled state (the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property) of the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event data.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The data for the event.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Window.SourceInitialized"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.Window.StateChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> needs to be raised.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.EventArgs"&gt;&lt;/xref&gt;</ph> that contains the event data.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Called when the parent of the window is changed.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The previous parent.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Set to null if the <ph id="ph1">&lt;xref href="System.Windows.DependencyObject"&gt;&lt;/xref&gt;</ph> did not have a previous parent.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Gets a collection of windows for which this window is the owner.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>An owned window is one whose <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property is set with a reference to another window, which is known as the owner window.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>To find all the windows that an owner window owns, you can enumerate <ph id="ph1">&lt;xref:System.Windows.WindowCollection&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.WindowCollection"&gt;&lt;/xref&gt;</ph> that contains references to the windows for which this window is the owner.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph> that owns this <ph id="ph2">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a child window is opened by a parent window by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, an implicit relationship is established between both parent and child window.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a child window is created by a parent window by calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, the child window does not have a relationship with the parent window.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that:</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child window does not have a reference to the parent window.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>To allow you to create a relationship between a child window and a parent window, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> supports the notion of ownership.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ownership is established when the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of a window (the owned window) is set with a reference to another window (the owner window).</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once this relationship is established, the following behaviors are exhibited:</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an owner window is minimized, all its owned windows are minimized as well.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an owned window is minimized, its owner is not minimized.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an owner window is maximized, both the owner window and its owned windows are restored.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>An owner window can never cover an owned window.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>Owned windows that were not opened using <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are not modal.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can still interact with the owner window.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you close an owner window, its owned windows are also closed.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an owned window was opened by its owner window using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you open a child window by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, you should also set the <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of the child window.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should also set the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property on a window that that is opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> to ensure correct behavior with .</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph> object that represents the owner of this <ph id="ph2">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>A window tries to own itself</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Two windows try to own each other.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Window.Owner"&gt;&lt;/xref&gt;</ph> property is set on a visible window shown using <ph id="ph2">&lt;xref href="System.Windows.Window.ShowDialog"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Window.Owner"&gt;&lt;/xref&gt;</ph> property is set with a window that has not been previously shown.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Gets or sets the resize mode.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are four options:</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user cannot resize the window.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Maximize and Minimize boxes are not shown.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can only minimize the window and restore it from the taskbar.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Minimize and Maximize boxes are shown and enabled.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Default).</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT">
          <source>This option has the same functionality as <ph id="ph1">&lt;xref:System.Windows.ResizeMode.CanResize&gt;</ph>, but adds a "resize grip" to the lower right corner of the window.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.ResizeMode"&gt;&lt;/xref&gt;</ph> value specifying the resize mode.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.ResizeMode"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Gets the size and location of a window before being either minimized or maximized.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>The restore rectangle is the region occupied by the window before it was minimized or maximized.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you query <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> before the window has been shown or after it has been closed, <ph id="ph2">&lt;xref:System.Windows.Rect.Empty%2A&gt;</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Rect"&gt;&lt;/xref&gt;</ph> that specifies the size and location of a window before being either minimized or maximized.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Opens a window and returns without waiting for the newly opened window to close.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> shows a window and returns immediately, without waiting for the window to be closed.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, the opened window does not prevent users from interacting with other windows in the application.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type of window is called a <bpt id="p1">*</bpt>modeless<ept id="p1">*</ept> window.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common examples of modeless windows are properties windows, toolboxes, and palettes.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>To restrict a user to interacting with a specific window, the window must be opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window that is opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>This relationship can be established using the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> achieves the same end result as setting <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object to <ph id="ph4">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, there is a difference between the two from a timing perspective.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> is a synchronous operation that returns only after the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event on the child window has been raised:</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WindowShowTimingSnippets#ShowSync<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WindowShowTimingSnippets#ShowSync<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, however, is an asynchronous operation that returns immediately:</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WindowShowTimingSnippets#ShowASync<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WindowShowTimingSnippets#ShowASync<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>When setting <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, any window events you register before you set <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> may not be raised until after the method in which you set <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> has completed execution.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Window.Show"&gt;&lt;/xref&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;xref href="System.Windows.Window.Closing"&gt;&lt;/xref&gt;</ph>) or has been closed (<ph id="ph3">&lt;xref href="System.Windows.Window.Closed"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window is activated when first shown.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a window with its <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property set to <ph id="ph2">`false`</ph> is opened, the window is not activated and its <ph id="ph3">&lt;xref:System.Windows.Window.Activated&gt;</ph> event is not raised until a user manually activates the window by selecting it.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the window is selected, it activates and deactivates normally.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent a window from being activated when it opens, the <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property must be set to <ph id="ph2">`false`</ph> before the window is shown (by calling <ph id="ph3">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>); setting <ph id="ph4">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id="ph5">`false`</ph> after a window is shown has no effect.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id="ph2">`false`</ph> on a window that is opened modally, by calling <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, has no real impact.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a window is activated when first shown; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.ShowActivated"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Opens a window and returns only when the newly opened window is closed.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> shows the window, disables all other windows in the application, and returns only when the window is closed.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type of window is known as a <bpt id="p1">*</bpt>modal<ept id="p1">*</ept> window.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modal windows are primarily used as dialog boxes.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns a <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph><ph id="ph3">&lt;xref:System.Boolean&gt;</ph> value that specifies whether the activity was accepted or canceled.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>The return value is the value of the <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property before a window closes.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window that is opened by calling the <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source>This relationship can be established using the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>To support <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> automation (see <bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](~/docs/framework/ui-automation/ui-automation-overview.md)</ept>), <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> must be set for a window opened by calling <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window (a window opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>) is closed, the previously activated window is reactivated.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window has an owner window (see <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), the owner window is not reactivated when the modal <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window is closed unless it was the previously activated window.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method cannot be called when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> value of type <ph id="ph2">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> that specifies whether the activity was accepted (<ph id="ph3">`true`</ph>) or canceled (<ph id="ph4">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The return value is the value of the <ph id="ph1">&lt;xref href="System.Windows.Window.DialogResult"&gt;&lt;/xref&gt;</ph> property before a window closes.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Window.ShowDialog"&gt;&lt;/xref&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;xref href="System.Windows.Window.Closing"&gt;&lt;/xref&gt;</ph>) or has been closed (<ph id="ph3">&lt;xref href="System.Windows.Window.Closed"&gt;&lt;/xref&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the window has a task bar button.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, the window will also appear in the ALT+TAB application selection list.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the window has a task bar button; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Does not apply when the window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.ShowInTaskbar"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>, setting either <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> has no effect; both properties can be set, but the values they are set with are not applied to the window.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Height&gt;</ph>, setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> does not change the height of the window.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Width&gt;</ph>, setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> does not change the width of the window.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> has a value other than <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is automatically set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph> if a user resizes the window by using the resize grip or dragging the border.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the size of the content changes in a way that causes the window to resize itself, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph> is raised.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a window is transparent (see <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>), you should consider setting <ph id="ph2">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph> to ensure the window is no larger than its visible content.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.SizeToContent"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.SizeToContent.Manual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.SizeToContent"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>This event is raised to support interoperation with <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Occurs when the window's <ph id="ph1">&lt;xref href="System.Windows.Window.WindowState"&gt;&lt;/xref&gt;</ph> property changes.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id="ph2">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how to use the <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail, see the <ph id="ph2">&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id="ph2">&lt;xref href="System.Windows.Window"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.TaskbarItemInfo"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's title.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>The title of a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, or <ph id="ph3">[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]</ph>, can also be set by using <ph id="ph4">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> that contains the window's title.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.Title"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window's top edge, in relation to the desktop.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the top edge of the restore point for the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property cannot be set through a style.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not specify a value, <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> is set to the system default value.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also specify the system default value by setting <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source>Neither <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The position of the window's top, in logical units (1/96").</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window appears in the topmost z-order.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>A window whose <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> appears above all windows whose <ph id="ph3">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> properties are set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the group of windows that have <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the window that is currently activated is the topmost window.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>Likewise for the group of windows that have <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the window is topmost; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.Topmost"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.Top"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Gets or sets the position of the window when first shown.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph> causes a window to be positioned according to its <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property values.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>If either the <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> properties aren't specified, their values are determined by <ph id="ph3">[!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation.CenterScreen&gt;</ph> causes a window to be positioned in the center of the screen that contains the mouse cursor.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.CenterOwner&gt;</ph> causes a window to be positioned in the center of its owner window (see <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), if specified.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>The owner window can be either another WPF window or a non-WPF window.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about WPF windows with non-WPF windows, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept> and <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an owner window is not specified, the position of the window is determined in the same way as if <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get the value of this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.WindowStartupLocation"&gt;&lt;/xref&gt;</ph> value that specifies the top/left position of a window when first shown.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.WindowStartupLocation.Manual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before a window is minimized or maximized, its size and location are stored in <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a window is subsequently restored, its size and location values are restored with the values from <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed, <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> is raised.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.WindowState"&gt;&lt;/xref&gt;</ph> that determines whether a window is restored, minimized, or maximized.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.WindowState.Normal"&gt;&lt;/xref&gt;</ph> (restored).</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.WindowState"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Gets or sets a window's border style.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> can be one of the <ph id="ph2">&lt;xref:System.Windows.WindowStyle&gt;</ph> enumeration values, including <ph id="ph3">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.WindowStyle.ToolWindow&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.WindowStyle.SingleBorderWindow&gt;</ph> (default), and <ph id="ph6">&lt;xref:System.Windows.WindowStyle.ThreeDBorderWindow&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following figure shows the window styles on <ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]</ph> (Windows Vista Aero theme, with transparent glass enabled):</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Window styles<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>Window styles<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.WindowStyle"&gt;&lt;/xref&gt;</ph> that specifies a window's border style.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.WindowStyle.SingleBorderWindow"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Window.WindowStyle"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>