<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">780806e4d9d2191127faaf6ad8a6778980052b40</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Channels.RequestContext.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d76b603f18a034cc48b45cf3a4e60ebc8764b2c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b276215b25ab16948dc84e627dd0b74786853bc9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a reply that is correlated to an incoming request.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>You get a request context from an <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> encapsulates the information required to reply to the request, so that you do not have to block on the channel when waiting for each request message to receive a reply.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the request/reply model, the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> object is the link between the request that comes in and the reply that goes out.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the server receives a request, it provides a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> instance that represents the request to the channel.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The request context contains the original request message among other useful properties.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This request context is then stashed inside the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> for retrieval by your service.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.Current%2A&gt;</ph> property to access the request of the current operation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> can be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the role of the request context is to link requests to replies, it does not make sense to have a request context when you do not have a reply, and so in this case the context is set to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a one-way operation on top of the request/reply model, the server receives requests but does not send back a response to the client.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>So if the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext&gt;</ph> is <ph id="ph2">`null`</ph> unexpectedly, check first whether the operation contract is IsOneWay.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Special note for Managed C++ users deriving from this class:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Put your cleanup code in (On)(Begin)Close (and/or OnAbort), not in a destructor.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avoid destructors: they cause the compiler to auto-generate <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avoid non-reference members: they can cause the compiler to auto-generate <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Avoid finalizers; but if you include one, you should suppress the build warning and call <ph id="ph1">&lt;xref:System.GC.SuppressFinalize%28System.Object%29&gt;</ph> and the finalizer itself from (On)(Begin)Close (and/or OnAbort) to emulate what would have been the auto-generated <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> behavior.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.RequestContext"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, aborts processing the request associated with the context.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, begins an asynchronous operation to reply to the request associated with the current context.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext.BeginReply%2A&gt;</ph> method when the application processing must continue without waiting.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use one of the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext.Reply%2A&gt;</ph> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the time-out interval is exceeded.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is not complete until either the reply is sent or the time-out occurs.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The incoming <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> that contains the request.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that receives the notification of the asynchronous reply operation completion.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An object, specified by the application, that contains state information associated with the asynchronous reply operation.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that references the asynchronous reply operation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, begins an asynchronous operation to reply to the request associated with the current context within a specified interval of time.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext.BeginReply%2A&gt;</ph> method to allow the application processing to continue without waiting for the request to complete.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use one of the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext.Reply%2A&gt;</ph> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the time-out interval is exceeded.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is not complete until either the reply is sent or the time-out occurs.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The incoming <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> that contains the request.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies the interval of time to wait for the reply to an available request.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> delegate that receives the notification of the asynchronous reply operation completion.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An object, specified by the application, that contains state information associated with the asynchronous reply operation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that references the asynchronous reply operation.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, closes the operation that is replying to the request context associated with the current context.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, closes the operation that is replying to the request context associated with the current context within a specified interval of time.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies the interval of time within which the reply operation associated with the current context must close.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Releases resources associated with the context.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, completes an asynchronous operation to reply to a request message.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> returned by a call to one of the <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.RequestContext.BeginReply*"&gt;&lt;/xref&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, replies to a request message.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext.Reply%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it replies to the request message.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application processing must continue without waiting for the reply to complete, use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext.BeginReply%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is not complete until either a message becomes available in the channel or the time-out occurs.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The incoming <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> that contains the request.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, replies to a request message within a specified interval of time.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext.Reply%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it replies to the request message.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application processing must continue without waiting for the reply to complete, use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.RequestContext.BeginReply%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is not complete until either a message becomes available in the channel or the time-out occurs.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The incoming <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> that contains the request.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies the interval of time to wait for the reply to a request.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the message that contains the request.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> that contains the request.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Releases both managed and unmanaged resources associated with the context.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>