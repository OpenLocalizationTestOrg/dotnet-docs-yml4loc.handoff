<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7577ccd01b9ea0a12b34e50a6b597c1e401a5caa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Activities.WorkflowInvoker.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bd9d6fff1173685001d5696d4733d31d38a61ce</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a63ee940578c8af1dc19d3b70625527cac748f6c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a means for invoking a workflow as if it were a method call.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> does not allow instance control such as persisting, unloading, or resuming bookmarks.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If instance control is desired, use <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>To execute workflows synchronously with no instance control, call the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>To execute a workflow asynchronously with no instance control, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> method pairs, or the <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Activities.WorkflowInvoker"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The workflow definition of the workflow to be invoked by this instance of the <ph id="ph1">&lt;xref href="System.Activities.WorkflowInvoker"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph> and user-provided state.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The method to be called when the workflow has completed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A reference to the asynchronous invoke operation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters, <ph id="ph2">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph>, and user-provided state.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The method to be called when the workflow has completed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A reference to the asynchronous invoke operation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously using the specified time-out interval, <ph id="ph1">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph>, and user-provided state.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The method to be called when the workflow has completed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A reference to the asynchronous invoke operation.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters, time-out interval, <ph id="ph2">&lt;xref href="System.AsyncCallback"&gt;&lt;/xref&gt;</ph>, and user-provided state.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown when <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The method to be called when the workflow has completed.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A reference to the asynchronous invoke operation.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Attempts to cancel the workflow that was invoked with the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">userState</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only a workflow invoked by one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that takes a <ph id="ph2">`userState`</ph> parameter can be canceled.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the cancellation succeeds, the <ph id="ph1">&lt;xref:System.ComponentModel.Cancelled%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Activities.InvokeCompletedEventArgs&gt;</ph> passed to the <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler is set to <ph id="ph4">`true`</ph>; otherwise, it is set to <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The token for the workflow to cancel.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns the results of a workflow that was invoked using one of the <ph id="ph1">&lt;xref href="System.Activities.WorkflowInvoker.BeginInvoke*"&gt;&lt;/xref&gt;</ph> overloads.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method specified by <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the result of a workflow invoked asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> that references the <ph id="ph2">&lt;xref href="System.Activities.WorkflowInvoker.BeginInvoke*"&gt;&lt;/xref&gt;</ph> operation that started the workflow.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;xref href="System.Activities.OutArgument"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Activities.InOutArgument"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Collections.ObjectModel.Collection`1"&gt;&lt;/xref&gt;</ph> of extensions that are available to workflows invoked by a <ph id="ph2">&lt;xref href="System.Activities.WorkflowInvoker"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is used by workflow host authors to add extensions to the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> instance so they will be available to workflows invoked by it.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.ObjectModel.Collection`1"&gt;&lt;/xref&gt;</ph> of extensions that are available to workflows invoked by a <ph id="ph2">&lt;xref href="System.Activities.WorkflowInvoker"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Invokes a workflow synchronously using the specified workflow definition, <ph id="ph1">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters, and time-out interval.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The workflow definition of the workflow to invoke.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;xref href="System.Activities.OutArgument"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Activities.InOutArgument"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Invokes a workflow synchronously using the specified workflow definition and time-out interval.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The workflow definition of the workflow to invoke.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;xref href="System.Activities.OutArgument"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Activities.InOutArgument"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Invokes a workflow synchronously using the specified workflow definition and <ph id="ph1">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The workflow definition of the workflow to invoke.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;xref href="System.Activities.OutArgument"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Activities.InOutArgument"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Invokes the activity passed to the <ph id="ph1">&lt;xref href="System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)"&gt;&lt;/xref&gt;</ph> constructor synchronously with the specified <ph id="ph2">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters and the specified time-out interval.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;xref href="System.Activities.OutArgument"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Activities.InOutArgument"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Invokes the activity passed to the <ph id="ph1">&lt;xref href="System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)"&gt;&lt;/xref&gt;</ph> constructor synchronously with the specified <ph id="ph2">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;xref href="System.Activities.OutArgument"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Activities.InOutArgument"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Invokes a workflow synchronously using the specified workflow definition.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The workflow definition of the workflow to invoke.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;xref href="System.Activities.OutArgument"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Activities.InOutArgument"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Invokes a workflow synchronously using the workflow definition passed to the <ph id="ph1">&lt;xref href="System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)"&gt;&lt;/xref&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;xref href="System.Activities.OutArgument"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Activities.InOutArgument"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Invokes a workflow synchronously with the specified time-out interval.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;xref href="System.Activities.OutArgument"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Activities.InOutArgument"&gt;&lt;/xref&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Invokes a workflow synchronously using the workflow definition passed to the <ph id="ph1">&lt;xref href="System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)"&gt;&lt;/xref&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The workflow definition of the workflow to invoke.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The workflow definition needs to derive from <ph id="ph1">&lt;xref href="System.Activities.ActivityWithResult"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The type of the workflow.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A value of type TResult with the result of the execution of the activity.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Invokes a workflow synchronously using the specified workflow definition and <ph id="ph1">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The workflow definition of the workflow to invoke.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The type of the workflow.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A value of type TResult with the result of the execution of the activity.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Invokes a workflow synchronously using the specified workflow definition, <ph id="ph1">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters, and time-out interval.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The workflow definition of the workflow to invoke.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The type of the workflow.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A value of type TResult with the result of the execution of the activity.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Invokes a workflow synchronously using the specified workflow definition, <ph id="ph1">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters, <ph id="ph2">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of additional output parameters, and time-out interval.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks until the workflow has completed, including idle time.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The workflow definition of the workflow to invoke.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The dictionary of additional output parameters of the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The type of the workflow.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A value of type TResult with the result of the execution of the activity.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`userState`</ph> is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously with the specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters and the specified time-out interval.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters and a unique identifier.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`userState`</ph> is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously using the specified unique identifier.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`userState`</ph> parameter is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously with the specified <ph id="ph1">&lt;xref href="System.Collections.Generic.IDictionary`2"&gt;&lt;/xref&gt;</ph> of input parameters, the specified time-out interval, and a unique identifier.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`userState`</ph> is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Invokes a workflow asynchronously with the specified time-out interval.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;xref href="System.TimeoutException"&gt;&lt;/xref&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Occurs when the workflow invoked by one of the <ph id="ph1">&lt;xref href="System.Activities.WorkflowInvoker.InvokeAsync*"&gt;&lt;/xref&gt;</ph> overloads is completed or canceled.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>Handle this to determine whether a workflow invoked with one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads completed successfully and to retrieve the output arguments of the completed workflow.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>