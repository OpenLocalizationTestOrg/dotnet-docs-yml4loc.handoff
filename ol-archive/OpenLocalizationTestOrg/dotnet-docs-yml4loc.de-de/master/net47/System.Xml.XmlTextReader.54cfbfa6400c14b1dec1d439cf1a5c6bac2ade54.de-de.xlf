<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75276a889b8814fa698ab243852bdab66f097d29</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.XmlTextReader.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd072458d0d832cd2a1b5d78b1d52b2d89ad2405</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7d669b5f09982820334b6933d8ccf1d19adf7ef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a reader that provides fast, non-cached, forward-only access to XML data.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 2.0, we recommend that you use the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> class instead.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> provides forward-only, read-only access to a stream of XML data.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current node refers to the node on which the reader is positioned.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader is advanced using any of the read methods and properties reflect the value of the current node.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class implements <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> and conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`XmlTextReader`</ph> provides the following functionality:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Enforces the rules of well-formed XML.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`XmlTextReader`</ph> does not provide data validation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Checks that <ph id="ph1">`DocumentType`</ph> nodes are well-formed.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`XmlTextReader`</ph> checks the DTD for well-formedness, but does not validate using the DTD.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For nodes where <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.NodeType%2A&gt;</ph> is <ph id="ph2">`XmlNodeType.EntityReference`</ph>, a single empty <ph id="ph3">`EntityReference`</ph> node is returned (that is, the <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Value%2A&gt;</ph> property is <ph id="ph5">`String.Empty`</ph>).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The actual declarations of entities in the DTD are called <ph id="ph1">`Entity`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you refer to these nodes in your data, they are called <ph id="ph1">`EntityReference`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Does not expand default attributes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">`XmlTextReader`</ph> does not perform the extra checks required for data validation, it provides a fast well-formedness parser.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To perform data validation, use a validating <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>To read XML data from an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph>, use <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`XmlTextReader`</ph> throws an <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> on XML parse errors.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>After an exception is thrown the state of the reader is not predictable.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the reported node type may be different than the actual node type of the current node.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadState%2A&gt;</ph> property to check whether a reader is in error state.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Security Considerations</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are things to consider when using the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions thrown the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> can disclose path information that you do not want bubbled up to the application.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your applications must catch exceptions and process them appropriately.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>DTD processing is enabled by default.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Disable DTD processing if you are concerned about Denial of Service issues or if you are dealing with untrusted sources.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.DtdProcessing%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Xml.DtdProcessing.Prohibit&gt;</ph> to disable DTD processing.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have DTD processing enabled, you can use the <ph id="ph1">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> to restrict the resources that the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> can access.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also design your application so that the XML processing is memory and time constrained.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, configure time-out limits in your ASP.NET application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML data can include references to external resources such as a DTD file.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default external resources are resolved using an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> object with no user credentials.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can secure this further by doing one of the following:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.XmlResolver%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not allow the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to open any external resources by setting the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.XmlResolver%2A&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>To limit the size of the input that is sent to the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph>, create a custom IStream implementation and supply it the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> method can be used to handle large streams of data.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads a small number of characters at a time instead of allocating a single string for the whole value.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default general entities are not expanded.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>General entities are expanded when you call the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ResolveEntity%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">`XmlTextReader`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified string, <ph id="ph2">&lt;xref href="System.Xml.XmlNodeType"&gt;&lt;/xref&gt;</ph>, and <ph id="ph3">&lt;xref href="System.Xml.XmlParserContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor parses the given string as a fragment of XML.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor can handle strings returned from <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadInnerXml%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists valid values for <ph id="ph1">`fragType`</ph> and how the reader parses each of the different node types.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fragment May Contain</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>An XML declaration can also be supplied.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows you to specify the encoding for the XML fragment, rather than having to set it on the <ph id="ph1">&lt;xref:System.Xml.XmlParserContext&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of an attribute (the part inside the quotes).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Document</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The contents of an entire XML document.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enforces document level rules.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The string containing the XML fragment to parse.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlNodeType"&gt;&lt;/xref&gt;</ph> of the XML fragment.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This also determines what the fragment string can contain.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>(See table below.)</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlParserContext"&gt;&lt;/xref&gt;</ph> in which the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">xmlFragment</ph><ept id="p1">&lt;/code&gt;</ept> is to be parsed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This includes the <ph id="ph1">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph> to use, encoding, namespace scope, the current <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">xml:lang</ph><ept id="p1">&lt;/code&gt;</ept>, and the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">xml:space</ph><ept id="p2">&lt;/code&gt;</ept> scope.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;fragType&lt;/code&gt;</ph> is not an <ph id="ph2">`Element`</ph>, <ph id="ph3">`Attribute`</ph>, or <ph id="ph4">`Document``XmlNodeType`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xmlFragment&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified URL, <ph id="ph2">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is assumed that the <ph id="ph1">`TextReader`</ph> is already set to the correct encoding.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The URL to use for resolving external resources.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.BaseURI"&gt;&lt;/xref&gt;</ph> is set to this value.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">url</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, <ph id="ph3">`BaseURI`</ph> is set to <ph id="ph4">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TextReader`</ph> containing the XML data to read.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlNameTable`</ph> to use.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">nt</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified URL, stream and <ph id="ph2">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The URL to use for resolving external resources.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.BaseURI"&gt;&lt;/xref&gt;</ph> is set to this value.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">url</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, <ph id="ph3">`BaseURI`</ph> is set to <ph id="ph4">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The stream containing the XML data to read.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlNameTable`</ph> to use.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">input</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">nt</ph><ept id="p2">&lt;/code&gt;</ept> value is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified stream, <ph id="ph2">&lt;xref href="System.Xml.XmlNodeType"&gt;&lt;/xref&gt;</ph>, and <ph id="ph3">&lt;xref href="System.Xml.XmlParserContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor parses the given string as a fragment of XML.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists valid values for <ph id="ph1">`fragType`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNodeType</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fragment May Contain</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>An XML declaration can also be supplied.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows you to specify the encoding for the XML fragment, rather than having to set it on the <ph id="ph1">&lt;xref:System.Xml.XmlParserContext&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of an attribute (the part inside the quotes).</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The contents of an entire XML document.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enforces document level rules.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader uses the following to determine the encoding of the stream.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Checks the <ph id="ph1">&lt;xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=fullName&gt;</ph> property to determine the encoding.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`Encoding`</ph> property is <ph id="ph2">`null`</ph>, the reader checks for a byte-order mark at the beginning of the stream.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`Encoding`</ph> property is <ph id="ph2">`null`</ph>, and no byte-order mark is found, the reader assumes the stream is encoded in UTF-8.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The stream containing the XML fragment to parse.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlNodeType"&gt;&lt;/xref&gt;</ph> of the XML fragment.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This also determines what the fragment can contain.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>(See table below.)</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlParserContext"&gt;&lt;/xref&gt;</ph> in which the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">xmlFragment</ph><ept id="p1">&lt;/code&gt;</ept> is to be parsed.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This includes the <ph id="ph1">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph> to use, encoding, namespace scope, the current <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">xml:lang</ph><ept id="p1">&lt;/code&gt;</ept>, and the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">xml:space</ph><ept id="p2">&lt;/code&gt;</ept> scope.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;fragType&lt;/code&gt;</ph> is not an Element, Attribute, or Document <ph id="ph2">`XmlNodeType`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xmlFragment&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified file and <ph id="ph2">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The URL for the file containing the XML data to read.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlNameTable`</ph> to use.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">nt</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The specified file cannot be found.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Part of the filename or directory cannot be found.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;url&lt;/code&gt;</ph> is an empty string.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The remote filename cannot be resolved.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>An error occurred while processing the request.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;url&lt;/code&gt;</ph> is not a valid URI.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified URL and stream.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The URL to use for resolving external resources.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.BaseURI"&gt;&lt;/xref&gt;</ph> is set to this value.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The stream containing the XML data to read.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified URL and <ph id="ph2">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is assumed that the <ph id="ph1">`TextReader`</ph> is already set to the correct encoding.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The URL to use for resolving external resources.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.BaseURI"&gt;&lt;/xref&gt;</ph> is set to this value.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TextReader`</ph> containing the XML data to read.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified stream and <ph id="ph2">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> decodes the stream using <ph id="ph2">&lt;xref:System.Text.Encoding?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a name table, this constructor uses the names defined already in that table.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The stream containing the XML data to read.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlNameTable`</ph> to use.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">input</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">nt</ph><ept id="p2">&lt;/code&gt;</ept> value is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified <ph id="ph2">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlNameTable`</ph> to use.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified file.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the file is located on a resource that requires access credentials, use the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.XmlResolver%2A&gt;</ph> property to specify the necessary credentials.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 1.1 of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, partially trusted code cannot set the <ph id="ph2">`XmlResolver`</ph> property.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workaround is to create an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with the necessary credentials, pass the URI to the <ph id="ph2">&lt;xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName&gt;</ph> method, and then construct the <ph id="ph3">`XmlTextReader`</ph> using the resulting <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The workaround is described in the following C# code.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The URL for the file containing the XML data.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.BaseURI"&gt;&lt;/xref&gt;</ph> is set to this value.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The specified file cannot be found.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Part of the filename or directory cannot be found.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;url&lt;/code&gt;</ph> is an empty string.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The remote filename cannot be resolved.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>An error occurred while processing the request.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;url&lt;/code&gt;</ph> is not a valid URI.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified <ph id="ph2">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is assumed that the <ph id="ph1">`TextReader`</ph> is already set to the correct encoding.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TextReader`</ph> containing the XML data to read.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified stream.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> decodes the stream using <ph id="ph2">&lt;xref:System.Text.Encoding?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The stream containing the XML data to read.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;input&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class with the specified <ph id="ph2">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is assumed that the <ph id="ph1">`TextReader`</ph> is already set to the correct encoding.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TextReader`</ph> containing the XML data to read.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlNameTable`</ph> to use.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">nt</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Gets the number of attributes on the current node.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is relevant to <ph id="ph1">`Element`</ph>, <ph id="ph2">`DocumentType`</ph> and <ph id="ph3">`XmlDeclaration`</ph> nodes only.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Other node types do not have attributes.)</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The number of attributes on the current node.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Gets the base URI of the current node.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>DTD entities are an example of this, but this is not limited to DTDs.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base URI tells you where these nodes came from.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), <ph id="ph1">`String.Empty`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The base URI of the current node.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> implements the binary content read methods.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>The binary content read methods include the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the binary content read methods are implemented; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class always returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> implements the <ph id="ph2">&lt;xref href="System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> throws a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph> if the <ph id="ph3">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> implements the <ph id="ph3">&lt;xref href="System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> method; otherwise <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> class always returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether this reader can parse and resolve entities.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a change in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> release.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>In previous versions, the <ph id="ph1">`XmlTextReader`</ph> class could not resolve entities and <ph id="ph2">`CanResolveEntity`</ph> always returned <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the reader can parse and resolve entities; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlTextReader`</ph> class always returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Changes the <ph id="ph1">&lt;xref href="System.Xml.XmlReader.ReadState"&gt;&lt;/xref&gt;</ph> to <ph id="ph2">`Closed`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method also releases any resources held while reading.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this reader was constructed using a stream, this method also calls <ph id="ph1">`Close`</ph> on the underlying stream.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Close`</ph> has already been called, no action is performed.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Gets the depth of the current node in the XML document.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The depth of the current node in the XML document.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Xml.DtdProcessing"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.DtdProcessing&gt;</ph> enumeration contains the <ph id="ph2">&lt;xref:System.Xml.DtdProcessing.Prohibit&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.DtdProcessing.Ignore&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.DtdProcessing.Parse&gt;</ph> enumerators.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.DtdProcessing.Parse&gt;</ph> is the default behavior.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.DtdProcessing%2A&gt;</ph> property replaces the <ph id="ph2">`ProhibitDTD`</ph> property and adds the ability to ignore the DOCTYPE element.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.DtdProcessing%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Xml.DtdProcessing?displayProperty=fullName&gt;</ph>, the <ph id="ph3">&lt;xref:System.Xml.XmlTextReader&gt;</ph> will not report the DTDs.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the DTD/DOCTYPE will be lost on output.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.DtdProcessing"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Gets the encoding of the document.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> uses the <ph id="ph2">&lt;xref:System.Text.Encoding?displayProperty=fullName&gt;</ph> class, <ph id="ph3">`XmlTextReader`</ph> also supports all encodings supported by that class.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>The exception to this is any encoding, such as UTF-7 or EBCDIC, that maps the <ph id="ph1">`&lt;?xml`</ph> sequence to different byte values than UTF-8.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The encoding value.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies how the reader handles entities.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be changed on the fly and takes effect after the next <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`EntityHandling`</ph> is set to <ph id="ph2">`ExpandCharEntities`</ph>, attribute values are only partially normalized.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>To illustrate the difference between the entity handling modes consider the following XML:</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`EntityHandling`</ph> is set to <ph id="ph2">`ExpandEntities`</ph> the "doc" element node contains one text node with the expanded entity text:</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depth</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>Node type</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>1</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>A 123</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`EntityHandling`</ph> is set to <ph id="ph2">`ExpandCharEntites`</ph>, and <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.WhitespaceHandling%2A&gt;</ph> is set to <ph id="ph4">`Significant`</ph> or <ph id="ph5">`All`</ph>, the "doc" element expands the character entity and returns the general entity as a node:</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>Depth</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>Node type</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>1</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>A</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>1</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>num</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>1</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Xml.EntityHandling"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`EntityHandling`</ph> is specified, it defaults to <ph id="ph2">`EntityHandling.ExpandCharEntities`</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the reader is positioned at the end of the stream.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the reader is positioned at the end of the stream; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Gets the value of the attribute with the specified name.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not move the reader.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on a <ph id="ph1">`DocumentType`</ph> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <ph id="ph2">`reader.GetAttribute("PUBLIC")`</ph></source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The qualified name of the attribute.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The value of the specified attribute.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>If the attribute is not found, <ph id="ph1">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Gets the value of the attribute with the specified local name and namespace URI.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following XML contains an attribute in a specific namespace:</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can lookup the <ph id="ph1">`dt:type`</ph> attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>To lookup the <ph id="ph1">`xmlns:dt`</ph> attribute, use one of the following arguments:</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also get this information using the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Prefix%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The namespace URI of the attribute.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The value of the specified attribute.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>If the attribute is not found, <ph id="ph1">`null`</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>This method does not move the reader.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Gets the value of the attribute with the specified index.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not move the reader.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The index of the attribute.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The index is zero-based.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>(The first attribute has index 0.)</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The value of the specified attribute.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">i</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than 0 or greater than or equal to <ph id="ph2">&lt;xref href="System.Xml.XmlTextReader.AttributeCount"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Gets a collection that contains all namespaces currently in-scope.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dictionary consists of a collection of namespace names keyed by prefix.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used to enumerate the in-scope namespaces.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>The dictionary is a disconnected copy of the namespace list of the reader.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>It remains unchanged as the reader position, current in-scope namespace list, changes.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table describes how the <ph id="ph1">&lt;xref:System.Xml.XmlNamespaceScope&gt;</ph> enumeration value affects the whether or not the default and built-in namespaces are returned by <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlNamespaceScope Value</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>xmlns:xml</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>xmlns:xmlns</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>xmlns=""</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>yes</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>no</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>no</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>no</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source>no</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>no</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>no</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>no</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>yes</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlNamespaceScope"&gt;&lt;/xref&gt;</ph> value that specifies the type of namespace nodes to return.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> object that contains all the current in-scope namespaces.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Gets the remainder of the buffered XML.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> does a buffered <ph id="ph2">`Read`</ph>, it must be able to return the remainder of the unused buffer so that no data is lost.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows protocols (such as multi-part MIME) to package XML in the same stream as other things.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling this method, <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.EOF%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph> containing the remainder of the buffered XML.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the class can return line information.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the class can return line information; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current node can have a <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.Value"&gt;&lt;/xref&gt;</ph> other than <ph id="ph2">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table lists node types that have a value to return.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>Node type</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the attribute.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the CDATA section.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the comment.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>The internal subset.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>The entire content, excluding the target.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>The white space between markup in a mixed content model.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the text node.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>The white space between markup.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the declaration.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the node on which the reader is currently positioned can have a <ph id="ph2">`Value`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property applies only to attribute nodes.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>This property always returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> does not expand default attributes.)</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current node is an empty element (for example, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">&lt;MyElement/&gt;</ph><ept id="p1">&lt;/code&gt;</ept>).</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property enables you to determine the difference between the following:</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&lt;item num="123"/&gt;`</ph> (<ph id="ph2">`IsEmptyElement`</ph> is <ph id="ph3">`true`</ph>).</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`&lt;item num="123"&gt;`</ph> (<ph id="ph2">`IsEmptyElement`</ph> is <ph id="ph3">`false`</ph>, although element content is empty).</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>A corresponding <ph id="ph1">`EndElement`</ph> node is not generated for empty elements.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`IsEmptyElement`</ph> simply reports whether or not the element in the source document had an end element tag.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current node is an element (<ph id="ph2">&lt;xref href="System.Xml.XmlTextReader.NodeType"&gt;&lt;/xref&gt;</ph> equals <ph id="ph3">`XmlNodeType.Element`</ph>) that ends with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph4">/&gt;</ph><ept id="p1">&lt;/code&gt;</ept>; otherwise, <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Gets the current line number.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is most commonly used for error reporting, but can be called at any time.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT">
          <source>The starting value for this property is <ph id="ph1">`1`</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>Combined with <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.LinePosition%2A&gt;</ph>, a value of <ph id="ph2">`1,1`</ph> indicates the start of the document.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The current line number.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Gets the current line position.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is most commonly used for error reporting, but can be called at any time.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property's starting value is <ph id="ph1">`1`</ph>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>The position indicated is the first character of text in the markup.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>On the first line of the preceding XML text, a <ph id="ph1">`LinePosition`</ph> of <ph id="ph2">`2`</ph> corresponds to the character <ph id="ph3">`r`</ph>; on the second line, a <ph id="ph4">`LinePosition`</ph> of <ph id="ph5">`5`</ph> corresponds to the character <ph id="ph6">`t`</ph>; and on the third line, a <ph id="ph7">`LinePosition`</ph> of <ph id="ph8">`3`</ph> corresponds to the character <ph id="ph9">`r`</ph>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>Combined with <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.LineNumber%2A&gt;</ph>, a value of <ph id="ph2">`1,1`</ph> indicates the start of the document.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The current line position.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Gets the local name of the current node.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The name of the current node with the prefix removed.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`LocalName`</ph> is <ph id="ph2">`book`</ph> for the element <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">&lt;bk:book&gt;</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>For node types that do not have a name (like <ph id="ph1">`Text`</ph>, <ph id="ph2">`Comment`</ph>, and so on), this property returns <ph id="ph3">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Resolves a namespace prefix in the current element's scope.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following XML, if the reader is positioned on the <ph id="ph1">`href`</ph> attribute, the prefix <ph id="ph2">`a`</ph> is resolved by calling <ph id="ph3">`reader.LookupNamespace("a")`</ph>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned string is <ph id="ph1">`urn:456`</ph>.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The prefix whose namespace URI you want to resolve.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>To match the default namespace, pass an empty string.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>This string does not have to be atomized.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The namespace URI to which the prefix maps or <ph id="ph1">`null`</ph> if no matching prefix is found.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.Namespaces"&gt;&lt;/xref&gt;</ph> property is set to <ph id="ph2">`true`</ph> and the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">prefix</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Moves to the attribute with the specified index.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The index of the attribute.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">i</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than 0 or greater than or equal to <ph id="ph2">&lt;xref href="System.Xml.XmlReader.AttributeCount"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Moves to the attribute with the specified name.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">`MoveToAttribute`</ph>, the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Name%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.NamespaceURI%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Prefix%2A&gt;</ph> properties reflects the properties of that attribute.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The qualified name of the attribute.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the attribute is found; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, the reader's position does not change.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Moves to the attribute with the specified local name and namespace URI.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">`MoveToAttribute`</ph>, the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Name%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.NamespaceURI%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Prefix%2A&gt;</ph> properties reflects the properties of that attribute.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The namespace URI of the attribute.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the attribute is found; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, the reader's position does not change.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Moves to the element that contains the current attribute node.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method to return to an element after navigating through its attributes.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method moves the reader to one of the following node types: <ph id="ph1">`Element`</ph>, <ph id="ph2">`DocumentType`</ph>, or <ph id="ph3">`XmlDeclaration`</ph>.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <ph id="ph2">`false`</ph> if the reader is not positioned on an attribute (the position of the reader does not change).</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Moves to the first attribute.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if an attribute exists (the reader moves to the first attribute); otherwise, <ph id="ph2">`false`</ph> (the position of the reader does not change).</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Moves to the next attribute.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the current node is an element node, this method is equivalent to <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`MoveToNextAttribute`</ph> returns <ph id="ph2">`true`</ph>, the reader moves to the next attribute; otherwise, the position of the reader does not change.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if there is a next attribute; <ph id="ph2">`false`</ph> if there are no more attributes.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Gets the qualified name of the current node.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The qualified name of the current node.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`Name`</ph> is <ph id="ph2">`bk:book`</ph> for the element <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">&lt;bk:book&gt;</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The name returned is dependent on the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.NodeType"&gt;&lt;/xref&gt;</ph> of the node.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The following node types return the listed values.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>All other node types return an empty string.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Node Type</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The name of the attribute.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The document type name.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The tag name.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>The name of the entity referenced.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The target of the processing instruction.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The literal string <ph id="ph1">`xml`</ph>.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether to do namespace support.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property determines whether the reader supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Namespaces`</ph> property cannot be set after a read operation has occurred.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to do namespace support; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Setting this property after a read operation has occurred (<ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.ReadState"&gt;&lt;/xref&gt;</ph> is not <ph id="ph2">`ReadState.Initial`</ph>).</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is relevant to <ph id="ph1">`Element`</ph> and <ph id="ph2">`Attribute`</ph> nodes only.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>The namespace URI of the current node; otherwise an empty string.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Xml.XmlNameTable"&gt;&lt;/xref&gt;</ph> associated with this implementation.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>All node and attribute names returned from <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> are atomized using the <ph id="ph2">`NameTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the same name is returned multiple times (for example, <ph id="ph1">`Customer`</ph>), then the same <ph id="ph2">`String`</ph> object is returned for that name.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source>This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlNameTable`</ph> enabling you to get the atomized version of a string within the node.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Gets the type of the current node.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property never returns the following <ph id="ph1">`XmlNodeType`</ph> types: <ph id="ph2">`Document`</ph>, <ph id="ph3">`DocumentFragment`</ph>, <ph id="ph4">`Entity`</ph>, <ph id="ph5">`EndEntity`</ph>, or <ph id="ph6">`Notation`</ph>.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Xml.XmlNodeType"&gt;&lt;/xref&gt;</ph> values representing the type of the current node.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether to normalize white space and attribute values.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be changed at any time and takes effect on the next read operation.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> is used to construct an <ph id="ph2">&lt;xref:System.Xml.XmlValidatingReader&gt;</ph>, to normalize attribute values, <ph id="ph3">`Normalization`</ph> must be set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`Normalization`</ph> is set to <ph id="ph2">`false`</ph>, this also disables character range checking for numeric entities.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, character entities, such as <ph id="ph1">`&amp;#0;`</ph>, are allowed.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following describes attribute value normalization:</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a character reference, append the referenced character to the attribute value.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an entity reference, recursively process the replacement text of the entity.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a white space character (#x20, #xD, #xA, #x9), append #x20 to the normalized value.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Only a single #x20 is appended for a "#xD#xA" sequence that is part of an external parsed entity or the literal entity value of an internal parsed entity.)</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>Process other characters by appending them to the normalized value.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the declared value is not CDATA, discard any leading and trailing space (#x20) characters and replace sequences of space (#x20) characters with a single space (#x20) character.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`XmlTextReader`</ph> only performs attribute or CDATA normalization.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source>It does not do DTD-specific normalization unless wrapped within an <ph id="ph1">`XmlValidatingReader`</ph>.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT">
          <source>Refer to the W3C XML 1.0 recommendation for further discussion on normalization.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to normalize; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Setting this property when the reader is closed (<ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.ReadState"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`ReadState.Closed`</ph>).</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Gets the namespace prefix associated with the current node.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>The namespace prefix associated with the current node.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether to allow DTD processing.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>This property is obsolete.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.DtdProcessing"&gt;&lt;/xref&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>DTD processing is enabled by default for backwards compatibility.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, unless your application requires DTD processing, you should disable this setting.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT">
          <source>Disabling DTD processing can be useful in preventing certain denial of service attacks.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT">
          <source>If set to <ph id="ph1">`true`</ph>, the reader throws an <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> when any DTD content is encountered.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have DTD processing enabled, you need to be aware of including DTDs from untrusted sources and possible denial of service attacks.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> to restrict the resources that the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> can access.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also design your application so that the XML processing is memory and time constrained.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, configure time-out limits in your ASP.NET application</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to disallow DTD processing; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Gets the quotation mark character used to enclose the value of an attribute node.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property applies only to an attribute node.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>The quotation mark character (" or ') used to enclose the value of an attribute node.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Reads the next node from the stream.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a reader is first created and initialized, there is no information available.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">`Read`</ph> to read the first node.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method requires at least four bytes from the data stream in order to begin parsing.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>If fewer than four bytes are returned and there is no more data in the stream, the method will fail.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there is more data in the stream, the method will block parsing until receipt of the fourth byte.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the next node was read successfully; <ph id="ph2">`false`</ph> if there are no more nodes to read.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>An error occurred while parsing the XML.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Parses the attribute value into one or more <ph id="ph1">`Text`</ph>, <ph id="ph2">`EntityReference`</ph>, or <ph id="ph3">`EndEntity`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method after calling <ph id="ph1">`MoveToAttribute`</ph> to read through the text or entity reference nodes that make up the attribute value.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader.Depth%2A&gt;</ph> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if there are nodes to return.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>An empty attribute, such as, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">misc=""</ph><ept id="p1">&lt;/code&gt;</ept>, returns <ph id="ph2">`true`</ph> with a single node with a value of <ph id="ph3">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Decodes Base64 and returns the decoded binary bytes.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>Like <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadChars%2A&gt;</ph>, this method can be called successively to read large streams of embedded text.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>It decodes Base64 content and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>See RFC 1521.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>(You can obtain RFCs from the Request for Comments Web site at http://www.rfc-editor.org)</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>The array of characters that serves as the buffer to which the text contents are written.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The zero-based index into the array specifying where the method can begin to write to the buffer.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>The number of bytes to write into the buffer.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The Base64 sequence is not valid.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> &lt; 0, or <ph id="ph2">&lt;code&gt;len&lt;/code&gt;</ph> &lt; 0, or <ph id="ph3">&lt;code&gt;len&lt;/code&gt;</ph><ph id="ph4"> &gt; &lt;code&gt;array&lt;/code&gt;</ph>.Length- <ph id="ph5">&lt;code&gt;offset&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Decodes <ph id="ph1">`BinHex`</ph> and returns the decoded binary bytes.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT">
          <source>Like <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadChars%2A&gt;</ph>, this method can be called successively to read large streams of embedded text.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>It decodes <ph id="ph1">`BinHex`</ph> content and returns the decoded binary bytes (for example, an inline <ph id="ph2">`BinHex`</ph> encoded GIF image) into the buffer.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The byte array that serves as the buffer to which the decoded binary bytes are written.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>The zero-based index into the array specifying where the method can begin to write to the buffer.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>The number of bytes to write into the buffer.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>The number of bytes written to your buffer.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BinHex`</ph> sequence is not valid.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>The value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;offset&lt;/code&gt;</ph> &lt; 0, or <ph id="ph2">&lt;code&gt;len&lt;/code&gt;</ph> &lt; 0, or <ph id="ph3">&lt;code&gt;len&lt;/code&gt;</ph><ph id="ph4"> &gt; &lt;code&gt;array&lt;/code&gt;</ph>.Length- <ph id="ph5">&lt;code&gt;offset&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Reads the text contents of an element into a character buffer.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>This method is designed to read large streams of embedded text by calling it successively.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the most efficient way to process very large streams of text embedded in an XML document.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rather than allocating large string objects, <ph id="ph1">`ReadChars`</ph> returns text content a buffer at a time.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is designed to work only on element nodes.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other node types cause <ph id="ph1">`ReadChars`</ph> to return <ph id="ph2">`0`</ph>.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following XML, if the reader is positioned on the start tag, <ph id="ph1">`ReadChars`</ph> returns <ph id="ph2">`test`</ph> and positions the reader after the end tag.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ReadChars`</ph> has the following functionality:</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is designed to work on element nodes only.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other node types cause <ph id="ph1">`ReadChars`</ph> to return 0.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns the actual character content.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no attempt to resolve entities, CDATA, or any other markup encountered.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ReadChars`</ph> returns everything between the start tag and the end tag, including markup.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`ReadChars`</ph> ignores XML markup that is not well-formed.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, when reading the following XML string <ph id="ph1">`&lt;A&gt;1&lt;A&gt;2&lt;/A&gt;`</ph>, <ph id="ph2">`ReadChars`</ph> returns <ph id="ph3">`1&lt;A&gt;2&lt;/A&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>(It returns markup from the matching element pair and ignores others.)</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not do any normalization.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`ReadChars`</ph> has reached the end of the character stream, it returns the value 0 and the reader is positioned after the end tag.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attribute read methods are not available while using <ph id="ph1">`ReadChars`</ph>.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, using the following XML:</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader is positioned on the <ph id="ph1">`&lt;item&gt;`</ph> element at the end of the while loop.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>The array of characters that serves as the buffer to which the text contents are written.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The position within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> where the method can begin writing text contents.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>The number of characters to write into <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The number of characters read.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>This can be <ph id="ph1">`0`</ph> if the reader is not positioned on an element or if there is no more text content to return in the current context.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is greater than the space specified in the <ph id="ph2">&lt;code&gt;buffer&lt;/code&gt;</ph> (buffer size - <ph id="ph3">&lt;code&gt;index&lt;/code&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph><ph id="ph2">
    `&lt; 0`</ph> or <ph id="ph3">&lt;code&gt;count&lt;/code&gt;</ph><ph id="ph4">`&lt; 0`</ph>.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>Reads the content and returns the <ph id="ph1">`Base64`</ph> decoded binary bytes.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method streams the content, decodes the <ph id="ph1">`Base64`</ph> content, and returns the decoded binary bytes (for example, an inline <ph id="ph2">`Base64`</ph>-encoded GIF image) into the buffer.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called successively to read large streams of embedded text.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can obtain RFCs from the Request for Comments Web site at http://www.rfc-editor.org.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not access any of the reader properties between calls to the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> method until the method returns the value 0.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has the following behavior:</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> returns the value 0 when it has reached the end of the byte stream it was operating on.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader is positioned on the first non-content node.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> is not supported on the following XML node types: <ph id="ph2">`Element`</ph>, <ph id="ph3">`XmlDeclaration`</ph>, <ph id="ph4">`None`</ph>, <ph id="ph5">`Document`</ph>, <ph id="ph6">`DocumentType`</ph>, <ph id="ph7">`Notation`</ph>, <ph id="ph8">`Entity`</ph>, <ph id="ph9">`DocumentFragment`</ph>.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> is not supported in the current node.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Reads the content and returns the <ph id="ph1">`BinHex`</ph> decoded binary bytes.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method streams the content, decodes the <ph id="ph1">`BinHex`</ph> content, and returns the decoded binary bytes (for example, an inline <ph id="ph2">`BinHex`</ph> encoded GIF image) into the buffer.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called successively to read large streams of embedded text.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not access any of the reader properties between calls to the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> method until the method returns the value 0.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has the following behavior:</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> returns the value 0 when it has reached the end of the byte stream it was operating on.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader is positioned on the first non-content node.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> is not supported on the following XML node types: <ph id="ph2">`Element`</ph>, <ph id="ph3">`XmlDeclaration`</ph>, <ph id="ph4">`None`</ph>, <ph id="ph5">`Document`</ph>, <ph id="ph6">`DocumentType`</ph>, <ph id="ph7">`Notation`</ph>, <ph id="ph8">`Entity`</ph>, <ph id="ph9">`DocumentFragment`</ph>.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)"&gt;&lt;/xref&gt;</ph> is not supported on the current node.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> implementation does not support this method.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Reads the element and decodes the Base64 content.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can obtain RFCs from the Request for Comments Web site at http://www.rfc-editor.org.</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can only read simple-content elements.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also contain entity references, which are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is very similar to the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> method except that it can only be called on element node types.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`count`</ph> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> reads all the remaining bytes in the document and returns the number of bytes read.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT">
          <source>The next <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> method call returns a zero and moves the reader to the node following the <ph id="ph2">&lt;xref:System.Xml.XmlNodeType.EndElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> method was called.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the reader reads all the text until the end element is encountered.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT">
          <source>It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>The current node is not an element node.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader"&gt;&lt;/xref&gt;</ph> implementation does not support this method.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>The element contains mixed-content.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>The content cannot be converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Reads the element and decodes the <ph id="ph1">`BinHex`</ph> content.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads the element content, decodes it using <ph id="ph1">`BinHex`</ph> encoding, and returns the decoded binary bytes (for example, an inline <ph id="ph2">`BinHex`</ph> encoded GIF image) into the buffer.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can only read simple-content elements.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can also contain entity references, which are automatically expanded.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT">
          <source>The element cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is very similar to the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> method except that it can only be called on element node types.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`count`</ph> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> reads all the remaining bytes in the document and returns the number of bytes read.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT">
          <source>The next <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> method call returns a zero and moves the reader to the node following the <ph id="ph2">&lt;xref:System.Xml.XmlNodeType.EndElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> method was called.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the reader reads all the text until the end element is encountered.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>The buffer into which to copy the resulting text.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>This value cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>The offset into the buffer where to start copying the result.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to copy into the buffer.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>The actual number of bytes copied is returned from this method.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>The number of bytes written to the buffer.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>The current node is not an element node.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> implementation does not support this method.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>The element contains mixed-content.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>The content cannot be converted to the requested type.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Gets the state of the reader.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Xml.ReadState"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Reads the contents of an element or a text node as a string.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positioned on an element, <ph id="ph1">`ReadString`</ph> concatenates all text, significant white space, white space, and <ph id="ph2">`CData`</ph> section node types together and returns the concatenated data as the element content.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT">
          <source>It stops when any markup is encountered, including comments and processing instructions.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT">
          <source>This could occur in a mixed content model, or when an element end tag is read.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT">
          <source>If positioned on a text node, <ph id="ph1">`ReadString`</ph> performs the same concatenation from the text node to the element end tag.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on an attribute text node, <ph id="ph1">`ReadString`</ph> has the same functionality as if the reader were position on the element start tag.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>It returns all the concatenated element text nodes.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The contents of the element or text node.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Note:`</ph> The text node can be either an element or an attribute text node.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>An error occurred while parsing the XML.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>An invalid operation was attempted.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Resets the state of the reader to ReadState.Initial.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables you to parse multiple XML documents in a single stream.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you reach the end of an XML document, you can call <ph id="ph1">`ResetState`</ph> to reset the state of the reader in preparation for the next XML document.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT">
          <source>The documents in the stream must share the same encoding.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this is not the case, when <ph id="ph1">`ResetState`</ph> is called an <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT">
          <source>(This is a change in behavior from .NET Framework version 1.1 and earlier).</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following properties are not affected by <ph id="ph1">`ResetState`</ph>.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`ResetState`</ph> if the reader was constructed using an <ph id="ph2">&lt;xref href="System.Xml.XmlParserContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Documents in a single stream do not share the same encoding.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Resolves the entity reference for <ph id="ph1">`EntityReference`</ph> nodes.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on an <ph id="ph1">`EntityReference`</ph> node (<ph id="ph2">`XmlNodeType.EntityReference`</ph>), if <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> is called after calling this method, the entity replacement text is parsed.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the entity replacement text is finished, an <ph id="ph1">`EndEntity`</ph> node is returned to close the entity reference scope.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling this method, if the entity is part of an attribute value, you must call <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadAttributeValue%2A&gt;</ph> to step into the entity.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Skips the children of the current node.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following XML input if the reader is positioned on the <ph id="ph1">`&lt;a&gt;`</ph> node or any of its attributes, calling <ph id="ph2">`Skip`</ph> positions the reader to the <ph id="ph3">`&lt;b&gt;`</ph> node.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on a leaf node already (such as the <ph id="ph1">`&lt;x&gt;`</ph> node or the text node <ph id="ph2">`abc`</ph>), calling <ph id="ph3">`Skip`</ph> is the same as calling <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method checks for well-formed XML.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Gets the text value of the current node.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>The value returned depends on the <ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.NodeType"&gt;&lt;/xref&gt;</ph> of the node.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>The following table lists node types that have a value to return.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>All other node types return <ph id="ph1">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Node Type</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>The value of the attribute.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>The content of the CDATA section.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>The content of the comment.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>The internal subset.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>The entire content, excluding the target.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>The white space within an <ph id="ph1">`xml:space`</ph>= 'preserve' scope.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>The content of the text node.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>The white space between markup.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>The content of the declaration.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies how white space is handled.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be changed at any time and takes effect on the next read operation.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the <ph id="ph1">`XmlTextReader`</ph> does not have DTD information available to it, <ph id="ph2">`SignificantWhitepsace`</ph> nodes are only returned within an <ph id="ph3">`xml:space='preserve'`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Xml.WhitespaceHandling"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`WhitespaceHandling.All`</ph> (returns <ph id="ph2">`Whitespace`</ph> and <ph id="ph3">`SignificantWhitespace`</ph> nodes).</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Invalid value specified.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Setting this property when the reader is closed (<ph id="ph1">&lt;xref href="System.Xml.XmlTextReader.ReadState"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`ReadState.Closed`</ph>).</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Gets the current <ph id="ph1">`xml:lang`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property represents the <ph id="ph1">`xml:lang`</ph> scope within which the current node resides.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, here is an XML fragment with <ph id="ph1">`xml:lang`</ph> set to US English in the root element:</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph>root xml:lang="en-us"&gt;</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph>name&gt;Fred<ph id="ph2">\&lt;</ph>/name&gt;</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">\&lt;</ph>/root&gt;</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the reader is positioned on the <ph id="ph1">`name`</ph> element, you can use this property to find that it is in the scope of a US English <ph id="ph2">`xml:lang`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">`xml:lang`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">&lt;xref href="System.Xml.XmlResolver"&gt;&lt;/xref&gt;</ph> used for resolving DTD references.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader uses <ph id="ph1">`XmlResolver`</ph> to resolve the location of the file loaded into the reader and also to resolve DTD references.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if your XML included the DOCTYPE declaration, <ph id="ph1">`&lt;!DOCTYPE book SYSTEM book.dtd&gt;`</ph> the reader resolves this external file and ensures that the DTD is well-formed.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT">
          <source>The reader does not use the DTD for validation.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can be changed at any time and takes effect on the next read operation.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is set to <ph id="ph1">`null`</ph>, any external DTD references encountered by the reader are not resolved.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 1.1 of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, if this property is not set, the trust level of the application determines the default behavior.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Fully trusted code:`</ph> The reader uses a default <ph id="ph2">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no user credentials.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT">
          <source>If authentication is required to access a network resource, use the <ph id="ph1">`XmlResolver`</ph> property to specify an <ph id="ph2">`XmlResolver`</ph> with the necessary credentials.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Semi-trusted code:`</ph> The <ph id="ph2">`XmlResolver`</ph> property is set to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT">
          <source>External resources are not resolved.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlResolver`</ph> to use.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>If set to <ph id="ph1">`null`</ph>, external resources are not resolved.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>In version 1.1 of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, the caller must be fully trusted in order to specify an <ph id="ph2">`XmlResolver`</ph>.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Gets the current <ph id="ph1">`xml:space`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt;</ph> method to take advantage of new functionality.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Xml.XmlSpace"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`xml:space`</ph> scope exists, this property defaults to <ph id="ph2">`XmlSpace.None`</ph>.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlNamespaceScope"&gt;&lt;/xref&gt;</ph> value that specifies the type of namespace nodes to return.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> that contains the current in-scope namespaces.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT">
          <source>This member is an explicit interface member implementation.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>The prefix whose namespace URI you wish to find.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>The namespace URI that is mapped to the prefix; <ph id="ph1">`null`</ph> if the prefix is not mapped to a namespace URI.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&lt;xref href="System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>The namespace URI whose prefix you wish to find.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>The prefix that is mapped to the namespace URI; <ph id="ph1">`null`</ph> if the namespace URI is not mapped to a prefix.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>