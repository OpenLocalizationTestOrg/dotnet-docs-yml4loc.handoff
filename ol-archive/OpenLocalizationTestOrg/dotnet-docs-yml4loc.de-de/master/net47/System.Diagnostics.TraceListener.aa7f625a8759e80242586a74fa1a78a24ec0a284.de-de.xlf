<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29db37d1bc00790148958e34eeae67dcfa416f3b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Diagnostics.TraceListener.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f77a5e9a97994040ad5ba19027f18b2d8ab39bf7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">189ba8a0afdcf623abbdac058a7bdd74a0d6082e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the <ph id="ph1">`abstract`</ph> base class for the listeners who monitor trace and debug output.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>For examples of how to implement a <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph>, see the <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> and the <ph id="ph4">&lt;xref:System.Diagnostics.EventLogTraceListener&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must enable tracing or debugging to use a trace listener.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following syntax is compiler specific.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable debugging in C#, add the <ph id="ph1">`/d:DEBUG`</ph> flag to the compiler command line when you compile your code, or you can add <ph id="ph2">`#define DEBUG`</ph> to the top of your file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Visual Basic, add the <ph id="ph1">`/d:DEBUG=True`</ph> flag to the compiler command line.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>To enable tracing in C#, add the <ph id="ph1">`/d:TRACE`</ph> flag to the compiler command line when you compile your code, or add <ph id="ph2">`#define TRACE`</ph> to the top of your file.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Visual Basic, add the <ph id="ph1">`/d:TRACE=True`</ph> flag to the compiler command line.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>To add a trace listener, edit the configuration file that corresponds to the name of your application.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within this file, you can add a listener, set its type and set its parameter, remove a listener, or clear all the listeners previously set by the application.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The configuration file should be formatted similar to the following example.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on using configuration files for tracing, see <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;system.diagnostics<ph id="ph2">\&amp;</ph>gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/trace-debug/system-diagnostics-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows initial property values for an instance of <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default Value</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The empty string ("").</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Indent</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>IndentSize</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Four spaces.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph> class using the specified name as the listener.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The name of the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the custom trace listener attributes defined in the application configuration file.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Classes that inherit from the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> class can add custom attributes by overriding the <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A&gt;</ph> method and returning a string array of custom attribute names.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Attributes%2A&gt;</ph> property identifies the custom attributes that are referenced in the application's configuration file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, in the following configuration file excerpt the <ph id="ph1">&lt;xref:System.Diagnostics.DelimitedListTraceListener&gt;</ph> custom attribute "delimiter" is referenced.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Attributes%2A&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.Collections.Specialized.StringDictionary&gt;</ph> containing the string "delimiter".</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unreferenced custom attributes are not enumerated.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.Specialized.StringDictionary"&gt;&lt;/xref&gt;</ph> containing the custom attributes for the trace listener.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method when the output is going to a file, such as to the <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a call to this method, you must reinitialize the object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Dispose%2A&gt;</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> to be reallocated for other purposes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Dispose%2A&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> references.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Emits an error message to the listener you create when you implement the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default behavior is to display the specified message in a message box when the application is running in a user-interface mode, and to the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> instances in a <ph id="ph2">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph> collection has an instance of a <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can customize this behavior by adding a <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> to or removing one from the collection.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A message to emit.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Emits an error message and a detailed error message to the listener you create when you implement the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default behavior is to display the message and detailed message in a message box when the application is running in a user-interface mode, and to the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> instances in a <ph id="ph2">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph> collection has an instance of a <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can customize this behavior by adding a <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> to or removing one from the collection.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A message to emit.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A detailed message to emit.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Gets and sets the trace filter for the trace listener.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>A trace filter can be added to a trace listener to provide a layer of screening beyond that provided to the trace source by switches.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">&lt;xref:System.Diagnostics.EventTypeFilter&gt;</ph> can be added to a trace listener to control the event types that are output by the listener.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Listeners that are called because the switch criteria are met can query their filter, if present, to determine if a trace is to be sent to output.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An object derived from the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceFilter"&gt;&lt;/xref&gt;</ph> base class.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, flushes the output buffer.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Gets the custom attributes supported by the trace listener.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation for <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A&gt;</ph> returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A string array naming the custom attributes supported by the trace listener, or <ph id="ph1">`null`</ph> if there are no custom attributes.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets or sets the indent level.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.IndentLevel%2A&gt;</ph> property represents the number of times that the indent specified by the <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener.IndentSize%2A&gt;</ph> property is applied.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is stored on per-thread/per-request basis.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The indent level.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The default is zero.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Gets or sets the number of spaces in an indent.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property is stored on per-thread/per-request basis.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The number of spaces in an indent.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The default is four spaces.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Set operation failed because the value is less than zero.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the trace listener is thread safe.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.IsThreadSafe%2A&gt;</ph> is used to determine whether to use a global lock when writing to the listener.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.IsThreadSafe%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the global lock is used regardless of the value of <ph id="ph3">&lt;xref:System.Diagnostics.Trace.UseGlobalLock%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The global lock is not used only if the value of <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.IsThreadSafe%2A&gt;</ph> is <ph id="ph2">`true`</ph> and the value of <ph id="ph3">&lt;xref:System.Diagnostics.Trace.UseGlobalLock%2A&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default behavior is to use the global lock whenever writing to the listener.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the trace listener is thread safe; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Gets or sets a name for this <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name can be used to organize and access listeners in a <ph id="ph1">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A name for this <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether to indent the output.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> The <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.WriteIndent%2A&gt;</ph> method, called by the <ph id="ph2">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> classes, sets the <ph id="ph4">&lt;xref:System.Diagnostics.TraceListener.NeedIndent%2A&gt;</ph> property value to <ph id="ph5">`false`</ph> to prevent later, unnecessary indents.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.NeedIndent%2A&gt;</ph> property to <ph id="ph2">`true`</ph> each time you wish to indent trace output.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the output should be indented; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Writes trace information, a data object and event information to the listener specific output.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not intended to be called directly by application code but by members of the <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data to output.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation writes the <ph id="ph1">`eventCache`</ph>, <ph id="ph2">`source`</ph>, <ph id="ph3">`eventType`</ph> and <ph id="ph4">`id`</ph> parameters in the header and footer of the trace.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`data`</ph> parameter is written as the body of the trace message.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ToString`</ph> method of the data object is used to convert the object to a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Diagnostics.TraceEventCache"&gt;&lt;/xref&gt;</ph> object that contains the current process ID, thread ID, and stack trace information.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A name used to identify the output, typically the name of the application that generated the trace event.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceEventType"&gt;&lt;/xref&gt;</ph> values specifying the type of event that has caused the trace.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A numeric identifier for the event.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The trace data to emit.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Writes trace information, an array of data objects and event information to the listener specific output.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not intended to be called directly by application code but by members of the <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data to output.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation writes the values of the <ph id="ph1">`source`</ph>, <ph id="ph2">`eventType`</ph> and <ph id="ph3">`id`</ph> parameters as a header.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data objects are converted to strings using the <ph id="ph1">`ToString`</ph> method of each object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`eventCache`</ph> data is written as a footer, the nature of the output data being dependent on the value of the <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Diagnostics.TraceEventCache"&gt;&lt;/xref&gt;</ph> object that contains the current process ID, thread ID, and stack trace information.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A name used to identify the output, typically the name of the application that generated the trace event.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceEventType"&gt;&lt;/xref&gt;</ph> values specifying the type of event that has caused the trace.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A numeric identifier for the event.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>An array of objects to emit as data.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Writes trace and event information to the listener specific output.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not intended to be called directly by application code but by members of the <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data to output.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation writes the values of the <ph id="ph1">`source`</ph>, <ph id="ph2">`eventType`</ph> and <ph id="ph3">`id`</ph> parameters as a header.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`eventCache`</ph> data is written as a footer, the nature of the output data being dependent on the value of the <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Diagnostics.TraceEventCache"&gt;&lt;/xref&gt;</ph> object that contains the current process ID, thread ID, and stack trace information.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A name used to identify the output, typically the name of the application that generated the trace event.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceEventType"&gt;&lt;/xref&gt;</ph> values specifying the type of event that has caused the trace.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A numeric identifier for the event.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Writes trace information, a message, and event information to the listener specific output.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not intended to be called directly by application code but by members of the <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data to output.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation writes the values of the <ph id="ph1">`source`</ph>, <ph id="ph2">`eventType`</ph> and <ph id="ph3">`id`</ph> parameters as a header, followed by the <ph id="ph4">`message`</ph> data.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`eventCache`</ph> data is written as a footer, the nature of the output data being dependent on the value of the <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Diagnostics.TraceEventCache"&gt;&lt;/xref&gt;</ph> object that contains the current process ID, thread ID, and stack trace information.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A name used to identify the output, typically the name of the application that generated the trace event.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceEventType"&gt;&lt;/xref&gt;</ph> values specifying the type of event that has caused the trace.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A numeric identifier for the event.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A message to write.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Writes trace information, a formatted array of objects and event information to the listener specific output.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not intended to be called directly by application code but by members of the <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data to output.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default implementation writes the values of the <ph id="ph1">`source`</ph>, <ph id="ph2">`eventType`</ph> and <ph id="ph3">`id`</ph> parameters as a header.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`args`</ph> object array is converted to a string using the <ph id="ph2">&lt;xref:System.String.Format%2A&gt;</ph> method, passing the <ph id="ph3">`format`</ph> string and <ph id="ph4">`args`</ph> array to format the string as the message portion of the trace.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`eventCache`</ph> data is written as a footer, the nature of the output data being dependent on the value of the <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Diagnostics.TraceEventCache"&gt;&lt;/xref&gt;</ph> object that contains the current process ID, thread ID, and stack trace information.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A name used to identify the output, typically the name of the application that generated the trace event.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceEventType"&gt;&lt;/xref&gt;</ph> values specifying the type of event that has caused the trace.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A numeric identifier for the event.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A format string that contains zero or more format items, which correspond to objects in the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept> array.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`object`</ph> array containing zero or more objects to format.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Gets or sets the trace output options.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property determines the optional content of trace output.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property can be set in the configuration file or programmatically during execution to include additional data specifically for a section of code.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can set the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property for the console trace listener to <ph id="ph2">&lt;xref:System.Diagnostics.TraceOptions?displayProperty=fullName&gt;</ph> to add call stack information to the trace output.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.TraceOptions&gt;</ph> enumeration is not used by the following classes and methods:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLogTraceListener&gt;</ph> class, because it can cause a large volume of data to be written to the log.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Write`</ph> and <ph id="ph2">`WriteLine`</ph> methods of the <ph id="ph3">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>, <ph id="ph4">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>, and <ph id="ph5">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.Write%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt;</ph> methods of the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListener&gt;</ph> class when they are not overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the enumeration values.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Diagnostics.TraceOptions.None"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Set operation failed because the value is invalid.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Writes trace information, a message, a related activity identity and event information to the listener specific output.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not intended to be called directly by application code but by members of the <ph id="ph1">&lt;xref:System.Diagnostics.Debug&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Trace&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.TraceSource&gt;</ph> classes to write trace data to output.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A&gt;</ph> method is used for the correlation of related traces.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.TraceTransfer%2A&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener.TraceEvent%2A&gt;</ph> method to process the call, with the eventType level set to <ph id="ph3">&lt;xref:System.Diagnostics.TraceEventType.Transfer&gt;</ph> and the <ph id="ph4">`relatedActivityId`</ph><ph id="ph5">&lt;xref:System.Guid&gt;</ph> as a string appended to the message.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Diagnostics.TraceEventCache"&gt;&lt;/xref&gt;</ph> object that contains the current process ID, thread ID, and stack trace information.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A name used to identify the output, typically the name of the application that generated the trace event.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A numeric identifier for the event.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A message to write.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Guid"&gt;&lt;/xref&gt;</ph> object identifying a related activity.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Writes the value of the object's <ph id="ph1">&lt;xref href="System.Object.ToString"&gt;&lt;/xref&gt;</ph> method to the listener you create when you implement the <ph id="ph2">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> whose fully qualified class name you want to write.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes the specified message to the listener you create in the derived class.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A message to write.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Writes a category name and the value of the object's <ph id="ph1">&lt;xref href="System.Object.ToString"&gt;&lt;/xref&gt;</ph> method to the listener you create when you implement the <ph id="ph2">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> whose fully qualified class name you want to write.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A category name used to organize the output.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Writes a category name and a message to the listener you create when you implement the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A message to write.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A category name used to organize the output.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Writes the indent to the listener you create when you implement this class, and resets the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener.NeedIndent"&gt;&lt;/xref&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method writes the indent and resets the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.NeedIndent%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method if <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.NeedIndent%2A&gt;</ph> is <ph id="ph2">`true`</ph> when you are overriding the <ph id="ph3">&lt;xref:System.Diagnostics.TraceListener.Write%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, this method uses blank spaces for indentation.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The size of the indent is determined by the values of the <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.IndentSize%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener.IndentLevel%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.TraceListener.IndentLevel%2A&gt;</ph> property represents the number of times the indent of the size specified by the <ph id="ph2">&lt;xref:System.Diagnostics.TraceListener.IndentSize%2A&gt;</ph> property is applied.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by the <ph id="ph1">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Writes the value of the object's <ph id="ph1">&lt;xref href="System.Object.ToString"&gt;&lt;/xref&gt;</ph> method to the listener you create when you implement the <ph id="ph2">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph> class, followed by a line terminator.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>The typical line terminator you might implement is a carriage return followed by a line feed (\r\n).</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> whose fully qualified class name you want to write.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The typical line terminator you might implement is a carriage return followed by a line feed (\r\n).</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>A message to write.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Writes a category name and the value of the object's <ph id="ph1">&lt;xref href="System.Object.ToString"&gt;&lt;/xref&gt;</ph> method to the listener you create when you implement the <ph id="ph2">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph> class, followed by a line terminator.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The typical line terminator you might implement is a carriage return followed by a line feed (\r\n).</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> whose fully qualified class name you want to write.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A category name used to organize the output.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Writes a category name and a message to the listener you create when you implement the <ph id="ph1">&lt;xref href="System.Diagnostics.TraceListener"&gt;&lt;/xref&gt;</ph> class, followed by a line terminator.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The typical line terminator you might implement is a carriage return followed by a line feed (\r\n).</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>A message to write.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A category name used to organize the output.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>