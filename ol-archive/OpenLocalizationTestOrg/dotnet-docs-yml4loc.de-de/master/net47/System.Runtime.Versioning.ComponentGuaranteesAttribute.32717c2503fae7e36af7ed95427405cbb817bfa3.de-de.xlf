<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1486cf825c5bcd5f01f753ec6bb5c6f1aa7b890a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.Versioning.ComponentGuaranteesAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97da097d3aac9fd95336b371a464d389c4ec7b96</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">031fb701a25c48e01ddbbcdc941e70d42eba02b1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines the compatibility guarantee of a component, type, or type member that may span multiple versions.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute&gt;</ph> is used by developers of components and class libraries to indicate the level of compatibility that consumers of their libraries can expect across multiple versions.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It indicates the level of guarantee that a future version of the library or component will not break an existing client.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clients can then use the <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute&gt;</ph> as an aid in designing their own interfaces to ensure stability across versions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime (CLR) does not use this attribute in any way.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its value lies in formally documenting the intent of the component author.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Compile-time tools can also use these declarations to detect compile-time errors that would otherwise break the declared guarantee.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Levels of Compatibility</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute&gt;</ph> supports the following levels of compatibility, which are represented by members of the <ph id="ph2">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;</ph> enumeration:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>No version-to-version compatibility (<ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client can expect that future versions will break the existing client.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>No Compatibility<ept id="p1">](#None)</ept> section later in this topic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Side-by-side version-to-version compatibility (<ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The component has been tested to work when more than one version of the assembly is loaded in the same application domain.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>In general, future versions can break compatibility.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when breaking changes are made, the old version is not modified but exists alongside the new version.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Side-by-side execution is the expected way to make existing clients work when breaking changes are made.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>Side-by-Side Compatibility<ept id="p1">](#SideBySide)</ept> section later in this topic.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Stable version-to-version compatibility (<ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Future versions should not break the client, and side-by-side execution should not be needed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the client is inadvertently broken, it may be possible to use side-by-side execution to fix the problem.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>Stable Compatibility<ept id="p1">](#Standard)</ept> section.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exchange version-to-version compatibility (<ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extraordinary care is taken to ensure that future versions will not break the client.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The client should use only these types in the signature of interfaces that are used for communication with other assemblies that are deployed independently of one another.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one version of these types is expected to be in a given application domain, which means that if a client breaks, side-by-side execution cannot fix the compatibility problem.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <bpt id="p1">[</bpt>Exchange Type Compatibility<ept id="p1">](#Exchange)</ept> section.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following sections discuss each level of guarantee in greater detail.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>No Compatibility</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marking a component as <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</ph> indicates that the provider makes no guarantees about compatibility.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clients should avoid taking any dependencies on the exposed interfaces.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>This level of compatibility is useful for types that are experimental or that are publicly exposed but are intended only for components that are always updated at the same time.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None&gt;</ph> explicitly indicates that this component should not be used by external components.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Side-by-Side Compatibility</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marking a component as <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</ph> indicates that the component has been tested to work when more than one version of the assembly is loaded into the same application domain.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Breaking changes are allowed as long as they are made to the assembly that has the greater version number.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Components that are bound to an old version of the assembly are expected to continue to bind to the old version, and other components can bind to the new version.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is also possible to update a component that is declared to be <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide&gt;</ph> by destructively modifying the old version.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Stable Compatibility</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marking a type as <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</ph> indicates that the type should remain stable across versions.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it may also be possible for side-by-side versions of a stable type to exist in the same application domain.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Stable types maintain a high binary compatibility bar.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because of this, providers should avoid making breaking changes to stable types.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following kinds of changes are acceptable:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Adding private instance fields to, or removing fields from, a type, as long as this does not break the serialization format.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing a non-serializable type to a serializable type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>(However, a serializable type cannot be changed to a non-serializable type.)</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Throwing new, more derived exceptions from a method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Improving the performance of a method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the range of return values, as long as the change does not adversely affect the majority of clients.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fixing serious bugs, if the business justification is high and the number of adversely affected clients is low.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because new versions of stable components are not expected to break existing clients, generally only one version of a stable component is needed in an application domain.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this is not a requirement, because stable types are not used as well-known exchange types that all components agree upon.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if a new version of a stable component does inadvertently break some component, and if other components need the new version, it may be possible to fix the problem by loading both the old and new component.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable&gt;</ph> provides a stronger version compatibility guarantee than <ph id="ph2">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is a common default for multi-version components.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable&gt;</ph> can be combined with <ph id="ph2">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide&gt;</ph>, which states that the component will not break compatibility but is tested to work when more than one version is loaded in a given application domain.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a type or method is marked as <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable&gt;</ph>, it can be upgraded to <ph id="ph2">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, it cannot be downgraded to <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exchange Type Compatibility</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Marking a type as <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName&gt;</ph> provides a stronger version compatibility guarantee than <ph id="ph2">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable&gt;</ph>, and should be applied to the most stable of all types.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>These types are intended to be used for interchange between independently built components across all component boundaries in both time (any version of the CLR or any version of a component or application) and space (cross-process, cross-CLR in one process, cross-application domain in one CLR).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a breaking change is made to an exchange type, it is impossible to fix the issue by loading multiple versions of the type.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exchange types should be changed only when a problem is very serious (such as a severe security issue) or the probability of breakage is very low (that is, if the behavior was already broken in a random way that code could not have conceivably taken a dependency on).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can make the following kinds of changes to an exchange type:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add inheritance of new interface definitions.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add new private methods that implement the methods of newly inherited interface definitions.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add new static fields.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add new static methods.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Add new non-virtual instance methods.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are considered breaking changes and are not allowed for primitive types:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing serialization formats.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version-tolerant serialization is required.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Adding or removing private instance fields.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>This risks changing the serialization format of the type and breaking client code that uses reflection.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the serializability of a type.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>A non-serializable type may not be made serializable, and vice versa.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Throwing different exceptions from a method.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the range of a method's return values, unless the member definition raises this possibility and clearly indicates how clients should handle unknown values.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fixing most bugs.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consumers of the type will rely on the existing behavior.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>After a component, type, or member is marked with the <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange&gt;</ph> guarantee, it cannot be changed to either <ph id="ph2">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable&gt;</ph> or <ph id="ph3">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, exchange types are the basic types (such as <ph id="ph1">&lt;xref:System.Int32&gt;</ph> and <ph id="ph2">&lt;xref:System.String&gt;</ph> in the .NET Framework) and interfaces (such as <ph id="ph3">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph>) that are commonly used in public interfaces.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exchange types may publicly expose only other types that are also marked with <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange&gt;</ph> compatibility.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, exchange types cannot depend on the behavior of Windows APIs that are prone to change.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Component Guarantees: A Summary</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table indicates how a component's characteristics and usage affect its compatibility guarantee.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Component characteristics</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exchange</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Stable</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Side-by-Side</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Can be used in interfaces between components that version independently.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>Can be used (privately) by an assembly that versions independently.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Can have multiple versions in a single application domain.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Can make breaking changes</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Tested to make certain multiple versions of the assembly can be loaded together.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>Can make breaking changes in place.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>N</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Can make very safe non-breaking servicing changes in place.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Y</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Applying the Attribute</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply the <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute&gt;</ph> to an assembly, a type, or a type member.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its application is hierarchical.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, by default, the guarantee defined by the <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt;</ph> property of the attribute at the assembly level defines the guarantee of all types in the assembly and all members in those types.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, if the guarantee is applied to the type, by default it also applies to each member of the type.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>This inherited guarantee can be overridden by applying the <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute&gt;</ph> to individual types and type members.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, guarantees that override the default can only weaken the guarantee; they cannot strengthen it.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an assembly is marked with the <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None&gt;</ph> guarantee, its types and members have no compatibility guarantee, and any other guarantee that is applied to types or members in the assembly is ignored.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Testing the Guarantee</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt;</ph> property returns a member of the <ph id="ph2">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions&gt;</ph> enumeration, which is marked with the <ph id="ph3">&lt;xref:System.FlagsAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that you should test for the flag that you are interested in by masking away potentially unknown flags.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following example tests whether a type is marked as <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example tests whether a type is marked as <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example tests wither a type is marked as <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None&gt;</ph> (that is, neither <ph id="ph2">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable&gt;</ph> nor <ph id="ph3">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Versioning.ComponentGuaranteesAttribute"&gt;&lt;/xref&gt;</ph> class with a value that indicates a library, type, or member's guaranteed level of compatibility across multiple versions.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute&gt;</ph> class is instantiated, the value of the <ph id="ph2">`guarantees`</ph> parameter is assigned to the <ph id="ph3">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates the guaranteed level of compatibility of a library, type, or type member that spans multiple versions.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the <ph id="ph1">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A&gt;</ph> property corresponds to the <ph id="ph2">`guarantees`</ph> parameter of the <ph id="ph3">&lt;xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies the level of compatibility that is guaranteed across multiple versions.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>