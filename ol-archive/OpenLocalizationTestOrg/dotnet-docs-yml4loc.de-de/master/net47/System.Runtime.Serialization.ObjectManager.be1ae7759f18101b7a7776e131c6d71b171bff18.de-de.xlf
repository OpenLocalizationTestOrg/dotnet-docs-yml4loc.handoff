<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">558cf39f2906be2e87478e7aa81482fce6f4b3a6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.Serialization.ObjectManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3d6474bdf99964dc05ed898ddfebe6a0a4e326b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a1701936af224cd624aedde475c0e15ee7db8b3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Keeps track of objects as they are deserialized.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>During deserialization, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> queries the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph> to determine whether a reference to an object in the serialized stream refers to an object that has already been deserialized (a backward reference), or to an object that has not yet been deserialized (a forward reference).</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reference in the serialized stream is a forward reference, then the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> can register a fixup with the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reference in the serialized stream is a backward reference, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> immediately completes the reference.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fixup refers to the process of finalizing object references not already completed during the object deserialization process.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the required object has been deserialized, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph> will complete the reference.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph> follows a set of rules that dictate the fixup order.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>All objects that implement <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> or have a <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializationSurrogate&gt;</ph> can expect to have all the objects that they transmitted through <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> available when the object tree is deserialized.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, a parent object cannot presume that all its child objects will be fully completed when it is fully deserialized.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>All child objects will be present but not all the grandchild objects will necessarily be present.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an object needs to take certain actions that depend on executing code on its child objects, it can delay these actions, implement the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IDeserializationCallback&gt;</ph> interface, and execute the code only when it is called back on this interface.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.ObjectManager"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The surrogate selector to use.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Serialization.ISurrogateSelector"&gt;&lt;/xref&gt;</ph> determines the correct surrogate to use when deserializing objects of a given type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>At deserialization time, the surrogate selector creates a new instance of the object from the information transmitted on the stream.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The streaming context.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Serialization.StreamingContext"&gt;&lt;/xref&gt;</ph> is not used by <ph id="ph2">`ObjectManager`</ph>, but is passed as a parameter to any objects implementing <ph id="ph3">&lt;xref href="System.Runtime.Serialization.ISerializable"&gt;&lt;/xref&gt;</ph> or having a <ph id="ph4">&lt;xref href="System.Runtime.Serialization.ISerializationSurrogate"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These objects can take specific actions depending on the source of the information to deserialize.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Performs all the recorded fixups.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fixups are carried out by any appropriate surrogate, the object itself (if it implements <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>), or the default implementation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A fixup was not successfully completed.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns the object with the specified object ID.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>An object can be registered and issued an object ID with a call to the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ObjectManager.RegisterObject%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The ID of the requested object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The object with the specified object ID if it has been previously stored or <ph id="ph1">`null`</ph> if no such object has been registered.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Raises the deserialization event to any registered object that implements <ph id="ph1">&lt;xref href="System.Runtime.Serialization.IDeserializationCallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Invokes the method marked with the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.OnDeserializingAttribute"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The instance of the type that contains the method to be invoked.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Records a fixup for one element in an array.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fixup is for a specified element of a specified array.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value used during the fixup process is provided in the <ph id="ph1">`objectRequired`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The ID of the array used to record a fixup.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The index within <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">arrayFixup</ph><ept id="p1">&lt;/code&gt;</ept> that a fixup is requested for.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The ID of the object that the current array element will point to after fixup is completed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">arrayToBeFixed</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">objectRequired</ph><ept id="p2">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Records fixups for the specified elements in an array, to be executed later.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fixup is for specified elements of a specified array.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value used during the fixup process is provided in the <ph id="ph1">`objectRequired`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The ID of the array used to record a fixup.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The indexes within the multidimensional array that a fixup is requested for.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The ID of the object the array elements will point to after fixup is completed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">arrayToBeFixed</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">objectRequired</ph><ept id="p2">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">indices</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Records a fixup for an object member, to be executed later.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fixup is for a specified member of a specified object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value to be used during the fixup process is provided as the <ph id="ph1">`objectRequired`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The ID of the object that needs the reference to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectRequired</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The member name of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectToBeFixed</ph><ept id="p1">&lt;/code&gt;</ept> where the fixup will be performed.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The ID of the object required by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectToBeFixed</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;objectToBeFixed&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;objectRequired&lt;/code&gt;</ph> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">memberName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Records a fixup for a member of an object, to be executed later.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The fixup is for a specified member of a specified object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value to be used during the fixup process is provided as the <ph id="ph1">`objectRequired`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The ID of the object that needs the reference to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectRequired</ph><ept id="p1">&lt;/code&gt;</ept> object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The member of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectToBeFixed</ph><ept id="p1">&lt;/code&gt;</ept> where the fixup will be performed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The ID of the object required by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectToBeFixed</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectToBeFixed</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">objectRequired</ph><ept id="p2">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">member</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Registers an object as it is deserialized, associating it with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph> retains information about both the object and its ID.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Later during deserialization, <ph id="ph1">&lt;xref:System.Runtime.Serialization.ObjectManager.GetObject%2A&gt;</ph> can be used to determine whether a particular object ID has already been deserialized, or whether it is a forward reference to an object that has not yet been deserialized.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The object to register.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The ID of the object to register.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept> has already been registered for an object other than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Registers an object as it is deserialized, associating it with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept>, and recording the <ph id="ph2">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> used with it.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph> retains the information about both the object and its ID.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>Later during deserialization, you can use <ph id="ph1">&lt;xref:System.Runtime.Serialization.ObjectManager.GetObject%2A&gt;</ph> to discover whether a particular object ID has already been deserialized, or if it is a forward reference to an object that has not yet been deserialized.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The object to register.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The ID of the object to register.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> used if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> implements <ph id="ph3">&lt;xref href="System.Runtime.Serialization.ISerializable"&gt;&lt;/xref&gt;</ph> or has a <ph id="ph4">&lt;xref href="System.Runtime.Serialization.ISerializationSurrogate"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">info</ph><ept id="p1">&lt;/code&gt;</ept> will be completed with any required fixup information and then passed to the required object when that object is completed.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept> has already been registered for an object other than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Registers a member of an object as it is deserialized, associating it with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept>, and recording the <ph id="ph2">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>You need to provide the <ph id="ph1">`member`</ph> and <ph id="ph2">`idOfContainingObj`</ph> parameters if <ph id="ph3">`obj`</ph> is a <ph id="ph4">&lt;xref:System.ValueType&gt;</ph> because of the way fixups are performed on <ph id="ph5">&lt;xref:System.ValueType&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The space to store the information for a <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> is allocated inline with its containing object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when the <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> is boxed to be registered with the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph>, it loses the connection with its containing object.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee that fixups occur in the instance of the <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> stored in the containing object and not in the boxed instance, the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph> retains some additional information.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph> retains information about both the object and its ID.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Later during deserialization, <ph id="ph1">&lt;xref:System.Runtime.Serialization.ObjectManager.GetObject%2A&gt;</ph> can be used to discover whether a particular object ID has already been deserialized, or whether it is a forward reference to an object not yet deserialized.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The object to register.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The ID of the object to register.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> used if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> implements <ph id="ph3">&lt;xref href="System.Runtime.Serialization.ISerializable"&gt;&lt;/xref&gt;</ph> or has a <ph id="ph4">&lt;xref href="System.Runtime.Serialization.ISerializationSurrogate"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">info</ph><ept id="p1">&lt;/code&gt;</ept> will be completed with any required fixup information and then passed to the required object when that object is completed.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The ID of the object that contains <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This parameter is required only if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> is a value type.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The field in the containing object where <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> exists.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This parameter has meaning only if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> is a value type.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept> has already been registered for an object other than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">member</ph><ept id="p3">&lt;/code&gt;</ept> is not a <ph id="ph4">&lt;xref href="System.Reflection.FieldInfo"&gt;&lt;/xref&gt;</ph> and <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">member</ph><ept id="p4">&lt;/code&gt;</ept> is not <ph id="ph6">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Registers a member of an array contained in an object while it is deserialized, associating it with <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept>, and recording the <ph id="ph2">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>You need to provide the <ph id="ph1">`member`</ph> and <ph id="ph2">`idOfContainingObj`</ph> parameters if <ph id="ph3">`obj`</ph> is a <ph id="ph4">&lt;xref:System.ValueType&gt;</ph> because of the way fixups are performed on <ph id="ph5">&lt;xref:System.ValueType&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The space to store the information for a <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> is allocated inline with its containing object.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, when the <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> is boxed to be registered with the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph>, it loses the connection with its containing object.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>To guarantee that fixups occur in the instance of the <ph id="ph1">&lt;xref:System.ValueType&gt;</ph> stored in the containing object and not in the boxed instance, the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph> retains some additional information.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.ObjectManager&gt;</ph> retains information about both the object and its ID.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Later during deserialization, <ph id="ph1">&lt;xref:System.Runtime.Serialization.ObjectManager.GetObject%2A&gt;</ph> can be used to discover whether a particular object ID has already been deserialized, or whether it is a forward reference to an object not yet deserialized.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The object to register.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The ID of the object to register.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> used if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> implements <ph id="ph3">&lt;xref href="System.Runtime.Serialization.ISerializable"&gt;&lt;/xref&gt;</ph> or has a <ph id="ph4">&lt;xref href="System.Runtime.Serialization.ISerializationSurrogate"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">info</ph><ept id="p1">&lt;/code&gt;</ept> will be completed with any required fixup information and then passed to the required object when that object is completed.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The ID of the object that contains <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This parameter is required only if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> is a value type.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The field in the containing object where <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> exists.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This parameter has meaning only if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> is a value type.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> is a <ph id="ph2">&lt;xref href="System.ValueType"&gt;&lt;/xref&gt;</ph> and a member of an array, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">arrayIndex</ph><ept id="p2">&lt;/code&gt;</ept> contains the index within that array where <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">obj</ph><ept id="p3">&lt;/code&gt;</ept> exists.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">arrayIndex</ph><ept id="p1">&lt;/code&gt;</ept> is ignored if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p2">&lt;/code&gt;</ept> is not both a <ph id="ph3">&lt;xref href="System.ValueType"&gt;&lt;/xref&gt;</ph> and a member of an array.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">objectID</ph><ept id="p1">&lt;/code&gt;</ept> has already been registered for an object other than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">member</ph><ept id="p3">&lt;/code&gt;</ept> is not a <ph id="ph4">&lt;xref href="System.Reflection.FieldInfo"&gt;&lt;/xref&gt;</ph> and <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">member</ph><ept id="p4">&lt;/code&gt;</ept> isn't <ph id="ph6">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>