<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d75a8b8df6b3cbf1073db7d5818c894414aaaf18</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xml.XmlWriter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9090caea2995513f7d175ddd920ed462c093ce0b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b65734fd55a1fba45bcf0188c2cb35f9d1accc8a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a writer that provides a fast, non-cached, forward-only way to generate streams or files that contain XML data.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> class writes XML data to a stream, file, text reader, or string.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It supports the W3C <bpt id="p1">[</bpt>Extensible Markup Language (XML) 1.0 (fourth edition)<ept id="p1">](http://www.w3.org/TR/2006/REC-xml-20060816/)</ept> and <bpt id="p2">[</bpt>Namespaces in XML 1.0 (third edition)<ept id="p2">](http://www.w3.org/TR/REC-xml-names/)</ept> recommendations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The members of the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> class enable you to:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Verify that the characters are legal XML characters and that element and attribute names are valid XML names.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Verify that the XML document is well-formed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Encode binary bytes as Base64 or BinHex, and write out the resulting text.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass values by using common language runtime types instead of strings, to avoid having to manually perform value conversions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Write multiple documents to one output stream.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Write valid names, qualified names, and name tokens.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this section:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Creating an XML writer<ept id="p1">](#create)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Specifying the output format<ept id="p1">](#output)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Data conformance<ept id="p1">](#conformance)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Writing elements<ept id="p1">](#writing_elements)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Writing attributes<ept id="p1">](#writing_attributes)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Handling namespaces<ept id="p1">](#handling_ns)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Writing typed data<ept id="p1">](#writing_types)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Closing the XML writer<ept id="p1">](#close)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Asynchronous programming<ept id="p1">](#async)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Security considerations<ept id="p1">](#security)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating an XML writer</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance, use the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify the set of features you want to enable on the XML writer, pass an <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> to the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, default settings are used.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> reference pages for details.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifying the output format</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class includes several properties that control how <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> output is formatted:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifies the text encoding to use.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is <ph id="ph1">`Encoding.UTF8`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Indicates whether to indent elements.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is <ph id="ph1">`false`</ph> (no indentation).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifies the character string to use when indenting.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is two spaces.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifies the character string to use for line breaks.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is <ph id="ph1">`\r\n`</ph> (carriage return, line feed).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifies how to handle newline characters.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Indicates whether to write attributes on a new line.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Indent%2A&gt;</ph> should be set to <ph id="ph2">`true`</ph> when using this property.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Indicates whether to write an XML declaration.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Indent%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlWriterSettings.IndentChars%2A&gt;</ph> properties control how insignificant white space is formatted.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to indent element nodes:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XmlWriter_v2#8<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#8)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XmlWriter_v2#8<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A&gt;</ph> to write each attribute on a new line with one extra level of indentation:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XmlWriter_v2#9<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#9)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XmlWriter_v2#9<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#9)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data conformance</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>An XML writer uses two properties from the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to check for data conformance:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.CheckCharacters%2A&gt;</ph> property instructs the XML writer to check characters and throw an <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> exception if any characters are outside the legal range, as defined by the W3C.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A&gt;</ph> property configures the XML writer to check that the stream being written complies with the rules for a well-formed XML 1.0 document or document fragment, as defined by the W3C.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The three conformance levels are described in the following table.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is <ph id="ph1">&lt;xref:System.Xml.ConformanceLevel.Document&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details, see the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=fullName&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Xml.ConformanceLevel?displayProperty=fullName&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Level</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML output conforms to the rules for a well-formed XML 1.0 document and can be processed by any conforming processor.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML output conforms to the rules for a well-formed XML 1.0 document fragment.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML writer determines which level of conformation checking to apply (document or fragment) based on the incoming data.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writing elements</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the following <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> methods to write element nodes.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>For examples, see the methods listed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>To</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Write an entire element  node, including a string value.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write an element value by using multiple method calls.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can call <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> to write a typed value, <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteCharEntity%2A&gt;</ph> to write a character entity, <ph id="ph3">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> to write an attribute, or you can write a child element.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a more sophisticated version of the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteElementString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>To close the element, you call the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteEndElement%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteFullEndElement%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>To copy an element node found at the current position of an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>When called, it copies everything from the source object to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writing attributes</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the following <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> methods to write attributes on element nodes.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>These methods can also be used to create namespace declarations on an element, as discussed in the next section.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>To</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write an entire attribute node, including a string value.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>To write the attribute value using multiple method calls.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can call <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> to write a typed value.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a more sophisticated version of the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteElementString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>To close the element, you call the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteEndAttribute%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>To copy all the attributes found at the current position of an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The attributes that are written depend on the type of node the reader is currently positioned on:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   For an attribute node, it writes the current attribute, and then the rest of the attributes until the element closing tag.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   For an element node, it writes all attributes contained by the element.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   For an XML declaration node, it writes all the attributes in the declaration.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   For all other node types, the method throws an exception.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Handling namespaces</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Namespaces are used to qualify element and attribute names in an XML document.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Namespace prefixes associate elements and attributes with namespaces, which are in turn associated with URI references.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Namespaces create element and attribute name uniqueness in an XML document.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> maintains a namespace stack that corresponds to all the namespaces defined in the current namespace scope.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>When writing elements and attributes you can utilize namespaces in the following ways:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Declare namespaces manually by using the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be useful when you know how to best optimize the number of namespace declarations.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override the current namespace declaration with a new namespace.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following code, the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> method changes the namespace URI for the <ph id="ph2">`"x"`</ph> prefix from <ph id="ph3">`"123"`</ph> to <ph id="ph4">`"abc"`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XmlWriter_v2#18<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#18)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XmlWriter_v2#18<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#18)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code generates the following XML string:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify a namespace prefix when writing attributes or elements.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many of the methods used to write element and attributes enable you to do this.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartElement%28System.String%2CSystem.String%2CSystem.String%29&gt;</ph> method writes a start tag and associates it with a specified namespace and prefix.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writing typed data</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method accepts a common language runtime (CLR) object, converts the input value to its string representation according to XML schema definition language (XSD) data type conversion rules, and writes it out by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is easier than using the methods in the <ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph> class to convert the typed data to a string value before writing it out.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>When writing to text, the typed value is serialized to text by using the <ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph> rules for that schema type.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>For default XSD data types that correspond to CLR types, see the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> can also be used to write to an XML data store.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class can create an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> object to create nodes for an <ph id="ph3">&lt;xref:System.Xml.XmlDocument&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the data store has schema information available to it, the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method throws an exception if you try to convert to a type that is not allowed.If the data store does not have schema information available to it, the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method treats all values as an <ph id="ph3">`xsd:anySimpleType`</ph> type.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Closing the XML writer</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> methods to output XML, the elements and attributes are not written until you call the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Close%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you are using <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> to populate an <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> object, you won't be able to see the written elements and attributes in the target document until you close the <ph id="ph3">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Asynchronous programming</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most of the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> methods have asynchronous counterparts that have "Async" at the end of their method names.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the asynchronous equivalent of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> is <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method, which doesn't have an asynchronous counterpart, convert the return value to a string and use the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Security considerations</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consider the following when working with the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exceptions thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> can disclose path information that you do not want bubbled up to the app.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your app must catch exceptions and process them appropriately.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteDocType%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.XmlWriter.WriteRaw%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not pass arbitrary data to these methods.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, closes this stream and the underlying stream.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any elements or attributes left open are automatically closed.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> methods to output XML, the elements and attributes will not be written until you call the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Close%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you are using the XmlWriter to populate an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph>, until you close the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>, you will not be able to observe the written elements and attributes in the target document.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance using the <ph id="ph2">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> to which to write to.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Content written by the <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> is appended to the <ph id="ph2">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object used to configure the new <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If this is <ph id="ph1">`null`</ph>, a <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> with default settings is used.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> is being used with the <ph id="ph2">&lt;xref href="System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)"&gt;&lt;/xref&gt;</ph> method, you should use the <ph id="ph3">&lt;xref href="System.Xml.Xsl.XslCompiledTransform.OutputSettings"&gt;&lt;/xref&gt;</ph> property to obtain an <ph id="ph4">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object with the correct settings.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This ensures that the created <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object has the correct output settings.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">builder</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance using the filename and <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The file to which you want to write.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> creates a file at the specified path and writes to it in XML 1.0 text syntax.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">outputFileName</ph><ept id="p1">&lt;/code&gt;</ept> must be a file system path.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object used to configure the new <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If this is <ph id="ph1">`null`</ph>, a <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> with default settings is used.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> is being used with the <ph id="ph2">&lt;xref href="System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)"&gt;&lt;/xref&gt;</ph> method, you should use the <ph id="ph3">&lt;xref href="System.Xml.Xsl.XslCompiledTransform.OutputSettings"&gt;&lt;/xref&gt;</ph> property to obtain an <ph id="ph4">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object with the correct settings.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This ensures that the created <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object has the correct output settings.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">url</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance using the <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to which you want to write.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> writes XML 1.0 text syntax and appends it to the specified <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object used to configure the new <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If this is <ph id="ph1">`null`</ph>, a <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> with default settings is used.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> is being used with the <ph id="ph2">&lt;xref href="System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)"&gt;&lt;/xref&gt;</ph> method, you should use the <ph id="ph3">&lt;xref href="System.Xml.Xsl.XslCompiledTransform.OutputSettings"&gt;&lt;/xref&gt;</ph> property to obtain an <ph id="ph4">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object with the correct settings.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This ensures that the created <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object has the correct output settings.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">text</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance using the stream and <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>XmlWriter always writes a Byte Order Mark (BOM) to the underlying data stream; however, some streams must not have a BOM.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>To omit the BOM, create a new <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object and set the Encoding property to be a new <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object with the Boolean value in the constructor set to false.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The stream to which you want to write.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> writes XML 1.0 text syntax and appends it to the specified stream.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object used to configure the new <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>If this is <ph id="ph1">`null`</ph>, a <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> with default settings is used.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> is being used with the <ph id="ph2">&lt;xref href="System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)"&gt;&lt;/xref&gt;</ph> method, you should use the <ph id="ph3">&lt;xref href="System.Xml.Xsl.XslCompiledTransform.OutputSettings"&gt;&lt;/xref&gt;</ph> property to obtain an <ph id="ph4">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object with the correct settings.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>This ensures that the created <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object has the correct output settings.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">stream</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance using the specified <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method allows you add additional features to an underlying <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>The underlying <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> object can be an object created by the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt;</ph> method, or an object created using the <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object that you want to use as the underlying writer.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object used to configure the new <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>If this is <ph id="ph1">`null`</ph>, a <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> with default settings is used.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> is being used with the <ph id="ph2">&lt;xref href="System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)"&gt;&lt;/xref&gt;</ph> method, you should use the <ph id="ph3">&lt;xref href="System.Xml.Xsl.XslCompiledTransform.OutputSettings"&gt;&lt;/xref&gt;</ph> property to obtain an <ph id="ph4">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object with the correct settings.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This ensures that the created <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object has the correct output settings.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object that is wrapped around the specified <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance using the specified <ph id="ph2">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use this overload, an <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object with default settings is used to create the XML writer.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two spaces</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.NamespaceHandling.Default&gt;</ph> (no removal)</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`\r\n`</ph> (carriage return, new line)</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify the features to support on the created XML writer, use an overload that takes an <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object as one of its arguments, and pass in a <ph id="ph2">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object with your custom settings.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph> to which to write to.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Content written by the <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> is appended to the <ph id="ph2">&lt;xref href="System.Text.StringBuilder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">builder</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance using the specified filename.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use this overload, an <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object with default settings is used to create the XML writer.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two spaces</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.NamespaceHandling.Default&gt;</ph> (no removal)</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`\r\n`</ph> (carriage return, new line)</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify the features to support on the created XML writer, use an overload that takes an <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object as one of its arguments, and pass in a <ph id="ph2">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object with your custom settings.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The file to which you want to write.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> creates a file at the specified path and writes to it in XML 1.0 text syntax.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">outputFileName</ph><ept id="p1">&lt;/code&gt;</ept> must be a file system path.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">url</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance using the specified <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use this overload, an <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object with default settings is used to create the XML writer.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two spaces</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.NamespaceHandling.Default&gt;</ph> (no removal)</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`\r\n`</ph> (carriage return, new line)</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify the features to support on the created writer, use an overload that takes an <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object as one of its arguments, and pass in an <ph id="ph2">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object with your custom settings.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to which you want to write.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> writes XML 1.0 text syntax and appends it to the specified <ph id="ph2">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">text</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance using the specified stream.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use this overload, an <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object with the following default settings is used to create the XML writer:</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two spaces</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.NamespaceHandling.Default&gt;</ph> (no removal)</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`\r\n`</ph> (carriage return, new line)</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify the features to support on the created writer, use an overload that takes an <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object as one of its arguments, and pass in an <ph id="ph2">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object with your custom settings.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, XmlWriter always writes a Byte Order Mark (BOM) to the underlying data stream; however, some streams must not have a BOM.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>To omit the BOM, create a new <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object and set the Encoding property to be a new <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object with the Boolean value in the constructor set to false.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The stream to which you want to write.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> writes XML 1.0 text syntax and appends it to the specified stream.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">stream</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance using the specified <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method allows you add features to an underlying <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>The underlying <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> object can be an object created by the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName&gt;</ph> method, or an object created using the <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use this overload, an <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object with default settings is used to create the XML writer.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two spaces</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xml.NamespaceHandling.Default&gt;</ph> (no removal)</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`\r\n`</ph> (carriage return, new line)</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to specify the features to support on the created XML writer, use an overload that takes an <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object as one of its arguments, and pass in a <ph id="ph2">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object with your custom settings.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object that you want to use as the underlying writer.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object that is wrapped around the specified <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">writer</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is called instead of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.Close%2A&gt;</ph> when you want to write more to the underlying stream without losing what is still in the buffer.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.FlushAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Asynchronously flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.Flush%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`Flush`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The namespace URI whose prefix you want to find.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The matching prefix or <ph id="ph1">`null`</ph> if no matching namespace URI is found in the current scope.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;ns&lt;/code&gt;</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object used to create this <ph id="ph2">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class is used to specify the set of features to support on the created writer instance.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Settings%2A&gt;</ph> property cannot be modified.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any attempt to change individual settings results in an exception being thrown.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlWriterSettings"&gt;&lt;/xref&gt;</ph> object used to create this writer instance.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>If this writer was not created using the <ph id="ph1">&lt;xref href="System.Xml.XmlWriter.Create*"&gt;&lt;/xref&gt;</ph> method, this property returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out all the attributes found at the current position in the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on an <ph id="ph1">`element`</ph> node <ph id="ph2">`WriteAttributes`</ph> copies all the contained attributes.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on an <ph id="ph1">`attribute`</ph> node, this method writes the current attribute, then the rest of the attributes until the element closing tag.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on an <ph id="ph1">`XmlDeclaration`</ph> node, this method writes all the attributes in the declaration.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is positioned on any other node type this method throws an <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called using <ph id="ph1">&lt;xref:System.Xml.XmlValidatingReader&gt;</ph>, to ensure well-formed XML any content (which has been expanded from the entities) that could result in an invalid document is replaced when written.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an attribute includes an <ph id="ph1">`&amp;gt;`</ph> entity that has been expanded, to ensure a well-formed document the expanded &gt; is replaced when written out with <ph id="ph2">`&amp;gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributesAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlReader`</ph> from which to copy the attributes.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to copy the default attributes from the <ph id="ph2">`XmlReader`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The reader is not positioned on an <ph id="ph1">`element`</ph>, <ph id="ph2">`attribute`</ph> or <ph id="ph3">`XmlDeclaration`</ph> node.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Asynchronously writes out all the attributes found at the current position in the <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributes%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlReader`</ph> from which to copy the attributes.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to copy the default attributes from the <ph id="ph2">`XmlReader`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteAttributes`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out the attribute with the specified local name and value.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`WriteAttributeString`</ph> does the following:</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the attribute value includes double or single quotes, they are replaced with <ph id="ph1">`&amp;quot;`</ph> and <ph id="ph2">`&amp;apos;`</ph> respectively.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>If writing an <ph id="ph1">`xml:space`</ph> attribute, the writer verifies the attribute value is valid.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Valid values are <ph id="ph1">`preserve`</ph> or <ph id="ph2">`default`</ph>.)</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>If writing an <ph id="ph1">`xml:lang`</ph> attribute, the writer does not verify that the attribute value is valid according to the W3C XML 1.0 recommendation.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The value of the attribute.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xml:space`</ph> or <ph id="ph2">`xml:lang`</ph> attribute value is invalid.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method writes out the attribute with a user defined namespace prefix and associates it with the given namespace.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`localName`</ph> is "xmlns" then this method also treats this as a namespace declaration.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">`ns`</ph> argument can be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`WriteAttributeString`</ph> does the following:</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the attribute value includes double or single quotes, they are replaced with <ph id="ph1">`&amp;quot;`</ph> and <ph id="ph2">`&amp;apos;`</ph> respectively.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>If writing an <ph id="ph1">`xml:space`</ph> attribute, the writer verifies the attribute value is valid.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Valid values are <ph id="ph1">`preserve`</ph> or <ph id="ph2">`default`</ph>.)</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT">
          <source>If writing an <ph id="ph1">`xml:lang`</ph> attribute, the writer does not verify that the attribute value is valid according to the W3C XML 1.0 recommendation.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The namespace URI to associate with the attribute.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The value of the attribute.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xml:space`</ph> or <ph id="ph2">`xml:lang`</ph> attribute value is invalid.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method writes out the attribute with a user defined namespace prefix and associates it with the given namespace.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the prefix is "xmlns" then this method also treats this as a namespace declaration and associates the declared prefix with the namespace URI provided in the given attribute value.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case the <ph id="ph1">`ns`</ph> argument can be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`WriteAttributeString`</ph> does the following:</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the attribute value includes double or single quotes, they are replaced with <ph id="ph1">`&amp;quot;`</ph> and <ph id="ph2">`&amp;apos;`</ph> respectively.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>If writing an <ph id="ph1">`xml:space`</ph> attribute, the writer verifies the attribute value is valid.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Valid values are <ph id="ph1">`preserve`</ph> or <ph id="ph2">`default`</ph>.)</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>If writing an <ph id="ph1">`xml:lang`</ph> attribute, the writer does not verify that the attribute value is valid according to the W3C XML 1.0 recommendation.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The namespace prefix of the attribute.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The namespace URI of the attribute.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The value of the attribute.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`xml:space`</ph> or <ph id="ph2">`xml:lang`</ph> attribute value is invalid.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">localName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">ns</ph><ept id="p2">&lt;/code&gt;</ept> is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Asynchronously writes out the attribute with the specified prefix, local name, namespace URI, and value.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The namespace prefix of the attribute.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The namespace URI of the attribute.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The value of the attribute.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteAttributeString`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the byte buffer may contain the binary contents of a GIF image.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>This clearly would not be valid XML.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Base64`</ph> encoding is designed to represent arbitrary byte sequences in a text form comprised of the 65 US-ASCII characters ([A-Za-z0-9+/=]) where each character encodes 6 bits of the binary data.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see Requests for Comments (RFC) 1521 located on the Request for Comments Web site at http://www.rfc-editor.org/.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteBase64Async%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Byte array to encode.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The position in the buffer indicating the start of the bytes to write.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The number of bytes to write.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The buffer length minus <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Asynchronously encodes the specified binary bytes as Base64 and writes out the resulting text.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteBase64%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Byte array to encode.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The position in the buffer indicating the start of the bytes to write.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The number of bytes to write.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteBase64`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, encodes the specified binary bytes as <ph id="ph1">`BinHex`</ph> and writes out the resulting text.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteBinHexAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Byte array to encode.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The position in the buffer indicating the start of the bytes to write.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The number of bytes to write.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The buffer length minus <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Asynchronously encodes the specified binary bytes as <ph id="ph1">`BinHex`</ph> and writes out the resulting text.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteBinHex%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Byte array to encode.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>The position in the buffer indicating the start of the bytes to write.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The number of bytes to write.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteBinHex`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out a <ph id="ph1">&lt;![CDATA[...]]&gt;</ph> block containing the specified text.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes an empty CDATA block, for example <ph id="ph4">\&lt;</ph>![CDATA[]]&gt;.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteCDataAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>The text to place inside the CDATA block.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The text would result in a non-well formed XML document.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Asynchronously writes out a <ph id="ph1">&lt;![CDATA[...]]&gt;</ph> block containing the specified text.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteCData%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The text to place inside the CDATA block.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteCData`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method writes the Unicode character in hexadecimal character entity reference format.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteCharEntityAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The Unicode character for which to generate a character entity.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>The character is in the surrogate pair character range, <ph id="ph1">`0xd800`</ph><ph id="ph2"> - </ph><ph id="ph3">`0xdfff`</ph>.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Asynchronously forces the generation of a character entity for the specified Unicode character value.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteCharEntity%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The Unicode character for which to generate a character entity.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteCharEntity`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes text one buffer at a time.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to write large amounts of text one buffer at a time.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>Special handling must be done to ensure the <ph id="ph1">`WriteChars`</ph> method does not split surrogate pair characters across multiple buffer writes.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source>The XML specification defines the valid ranges for surrogate pairs.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteCharsAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Character array containing the text to write.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The position in the buffer indicating the start of the text to write.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The number of characters to write.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>The buffer length minus <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept>; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> parameter value is not valid.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Asynchronously writes text one buffer at a time.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteChars%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Character array containing the text to write.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The position in the buffer indicating the start of the text to write.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The number of characters to write.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteChars`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out a comment <ph id="ph1">&lt;!--...--&gt;</ph> containing the specified text.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a comment with no data content, for example <ph id="ph4">\&lt;</ph>!----&gt;.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`text`</ph> contains an invalid sequence of two dashes "--" the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> can either throw an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph> (<ph id="ph4">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> objects) or insert a space between the dashes "- -" so that the text is a valid XML comment (<ph id="ph5">&lt;xref:System.Xml.XmlWriter&gt;</ph> objects created by the <ph id="ph6">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> method).</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteCommentAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Text to place inside the comment.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The text would result in a non-well-formed XML document.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Asynchronously writes out a comment <ph id="ph1">&lt;!--...--&gt;</ph> containing the specified text.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteComment%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Text to place inside the comment.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteComment`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not check for invalid characters in <ph id="ph1">`pubid`</ph>, <ph id="ph2">`sysid`</ph> or <ph id="ph3">`subset`</ph>.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also does not check that the internal subset is well-formed.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> does not validate the data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteDocType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not pass arbitrary data to this method.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteDocTypeAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The name of the DOCTYPE.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>This must be non-empty.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>If non-null it also writes PUBLIC "pubid" "sysid" where <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">pubid</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">sysid</ph><ept id="p2">&lt;/code&gt;</ept> are replaced with the value of the given arguments.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">pubid</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">sysid</ph><ept id="p2">&lt;/code&gt;</ept> is non-null it writes SYSTEM "sysid" where <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">sysid</ph><ept id="p3">&lt;/code&gt;</ept> is replaced with the value of this argument.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>If non-null it writes [subset] where subset is replaced with the value of this argument.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The value for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> would result in invalid XML.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Asynchronously writes the DOCTYPE declaration with the specified name and optional attributes.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteDocType%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The name of the DOCTYPE.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>This must be non-empty.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>If non-null it also writes PUBLIC "pubid" "sysid" where <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">pubid</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">sysid</ph><ept id="p2">&lt;/code&gt;</ept> are replaced with the value of the given arguments.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">pubid</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">sysid</ph><ept id="p2">&lt;/code&gt;</ept> is non-null it writes SYSTEM "sysid" where <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">sysid</ph><ept id="p3">&lt;/code&gt;</ept> is replaced with the value of this argument.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>If non-null it writes [subset] where subset is replaced with the value of this argument.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteDocType`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Writes an element with the specified local name and value.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteElementStringAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The value of the element.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">localName</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph> or an empty string.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>The parameter values are not valid.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>There is a character in the buffer that is a valid XML character but is not valid for the output encoding.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Writes an element with the specified local name, namespace URI, and value.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteElementStringAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>The namespace URI to associate with the element.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The value of the element.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">localName</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph> or an empty string.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>The parameter values are not valid.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>There is a character in the buffer that is a valid XML character but is not valid for the output encoding.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Writes an element with the specified prefix, local name, namespace URI, and value.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteElementStringAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>The prefix of the element.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The value of the element.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">localName</ph><ept id="p1">&lt;/code&gt;</ept> value is <ph id="ph2">`null`</ph> or an empty string.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The parameter values are not valid.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>There is a character in the buffer that is a valid XML character but is not valid for the output encoding.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Asynchronously writes an element with the specified prefix, local name, namespace URI, and value.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteElementString%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The prefix of the element.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The namespace URI of the element.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>The value of the element.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteElementString`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, closes the previous <ph id="ph1">&lt;xref href="System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)"&gt;&lt;/xref&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">`WriteStartAttribute`</ph>, you can close the attribute with this method.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also close the attribute by calling <ph id="ph1">`WriteStartAttribute`</ph> again, calling <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>, or calling <ph id="ph3">&lt;xref:System.Xml.XmlWriter.WriteEndElement%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> methods to output XML, the elements and attributes will not be written until you call the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Close%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you are using the XmlWriter to populate an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph>, until you close the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>, you will not be able to observe the written elements and attributes in the target document.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteEndAttributeAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Asynchronously closes the previous <ph id="ph1">&lt;xref href="System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)"&gt;&lt;/xref&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteEndAttribute%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteEndAttribute`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> methods to output XML, the elements and attributes will not be written until you call the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Close%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you are using the XmlWriter to populate an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph>, until you close the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>, you will not be able to observe the written elements and attributes in the target document.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteEndDocumentAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>The XML document is invalid.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Asynchronously closes any open elements or attributes and puts the writer back in the Start state.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteEndDocument%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteEndDocument`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the element contains no content, a short end tag "/&gt;" is written; otherwise, a full end tag is written.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> methods to output XML, the elements and attributes will not be written until you call the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Close%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you are using the XmlWwriter to populate an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph>, until you close the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>, you will not be able to observe the written elements and attributes in the target document.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteEndElementAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Asynchronously closes one element and pops the corresponding namespace scope.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteEndElement%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteEndElement`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out an entity reference as <ph id="ph1">`&amp;name;`</ph>.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteEntityRefAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>The name of the entity reference.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Asynchronously writes out an entity reference as <ph id="ph1">`&amp;name;`</ph>.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteEntityRef%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>The name of the entity reference.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteEntityRef`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method always writes the full end tag.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful when dealing with elements that must include a full end tag.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, browsers expect HTML script blocks to be closed with "<ph id="ph1">\&lt;</ph>/script&gt;".</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteFullEndElementAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Asynchronously closes one element and pops the corresponding namespace scope.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteFullEndElement%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteFullEndElement`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, <ph id="ph3">`WriteName`</ph> also checks that the name is also valid according to the W3C Namespaces in XML recommendation.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteNameAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>The name to write.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is not a valid XML name; or <ph id="ph2">&lt;code&gt;name&lt;/code&gt;</ph> is either <ph id="ph3">`null`</ph> or <ph id="ph4">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Asynchronously writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteName%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>The name to write.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteName`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteNmTokenAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>The name to write.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is not a valid NmToken; or <ph id="ph2">&lt;code&gt;name&lt;/code&gt;</ph> is either <ph id="ph3">`null`</ph> or <ph id="ph4">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Asynchronously writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteNmToken%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>The name to write.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteNmToken`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the supported node types for this method.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT">
          <source>NodeType</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT">
          <source>WriteNode Behavior</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out all the nodes irrespective of type.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, the writer consumes the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> and writes out all the nodes read including attributes, processing instructions, comments, and so on.</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT">
          <source>This situation occurs when the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> is in an initial state.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT">
          <source>(The <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadState%2A?displayProperty=fullName&gt;</ph> property returns <ph id="ph2">`ReaderState.Initial`</ph>).</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the element node and any attribute nodes.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT">
          <source>No operation.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartAttribute%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the text node.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the CDATA section node.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the entity reference node.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the processing instruction node.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the comment node.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the document type node.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the significant white space node.</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the white space node.</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the end element tag.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT">
          <source>No operation.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the XML declaration node.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is in the initial state, this method moves the reader to the end of file.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is already at the end of file or in a closed state, this method is non-operational.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code copies an entire XML input document to the console:</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have moved off the root node and are positioned elsewhere in the document the following C# example correctly writes out the nodes.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the reader is configured to return white space and the writer has is configured to indent output, <ph id="ph1">`WriteNode`</ph> may produce strange output.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT">
          <source>You will essentially be getting double formatting.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteNodeAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> to read from.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to copy the default attributes from the <ph id="ph2">`XmlReader`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph> contains invalid characters.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>Copies everything from the <ph id="ph1">&lt;xref href="System.Xml.XPath.XPathNavigator"&gt;&lt;/xref&gt;</ph> object to the writer.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>The position of the <ph id="ph1">&lt;xref href="System.Xml.XPath.XPathNavigator"&gt;&lt;/xref&gt;</ph> remains unchanged.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the supported <ph id="ph1">`XPath`</ph> node types for this method.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT">
          <source>XPathNodeType</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT">
          <source>WriteNode Behavior</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out all the nodes irrespective of type.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, the writer consumes the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> and writes out all the nodes from the root node (including attributes, processing instructions, comments and so on.)</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the element node and any attribute nodes.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT">
          <source>No operation.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartAttribute%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the text node.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT">
          <source>No operation.</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartAttribute%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> method to write the namespace declaration.</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the processing instruction node.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the comment node.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the significant white space node.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT">
          <source>Writes out the white space node.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteNodeAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XPath.XPathNavigator"&gt;&lt;/xref&gt;</ph> to copy from.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to copy the default attributes; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;navigator&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Asynchronously copies everything from the reader to the writer and moves the reader to the start of the next sibling.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteNode%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> to read from.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to copy the default attributes from the <ph id="ph2">`XmlReader`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteNode`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Asynchronously copies everything from the <ph id="ph1">&lt;xref href="System.Xml.XPath.XPathNavigator"&gt;&lt;/xref&gt;</ph> object to the writer.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>The position of the <ph id="ph1">&lt;xref href="System.Xml.XPath.XPathNavigator"&gt;&lt;/xref&gt;</ph> remains unchanged.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteNode%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xml.XPath.XPathNavigator"&gt;&lt;/xref&gt;</ph> to copy from.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to copy the default attributes; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteNode`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: <ph id="ph1">&lt;?name text?&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to write the XML declaration (rather than <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartDocument%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT">
          <source>This could result in the encoding attribute being incorrectly written.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following C# code would result in an invalid XML document because the default encoding is UTF-8.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a <ph id="ph4">`ProcessingInstruction`</ph> with no data content, for example <ph id="ph5">\&lt;</ph>?name?&gt;.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT">
          <source>If text contains an invalid sequence of "?&gt;", the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> can either throw an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> (<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> objects) or insert a space "?</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt;" to avoid writing invalid XML (<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> objects created by the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> method).</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteProcessingInstructionAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>The name of the processing instruction.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>The text to include in the processing instruction.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>The text would result in a non-well formed XML document.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>This method is being used to create an XML declaration after <ph id="ph1">&lt;xref href="System.Xml.XmlWriter.WriteStartDocument"&gt;&lt;/xref&gt;</ph> has already been called.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Asynchronously writes out a processing instruction with a space between the name and text as follows: <ph id="ph1">&lt;?name text?&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>The name of the processing instruction.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>The text to include in the processing instruction.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteProcessingInstruction`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out the namespace-qualified name.</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>This method looks up the prefix that is in scope for the given namespace.</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`ns`</ph> maps to the current default namespace, no prefix is generated.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT">
          <source>When writing attribute values, this method generates a prefix if <ph id="ph1">`ns`</ph> is not found.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT">
          <source>When writing element content, it throws an exception if <ph id="ph1">`ns`</ph> is not found.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a class derived from the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> does not override this method <ph id="ph2">`localName`</ph> is not checked to be a valid W3C XML name.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT">
          <source>In such case, before calling this method, the validity of the string can be checked by <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsName%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteQualifiedNameAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>The local name to write.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>The namespace URI for the name.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;localName&lt;/code&gt;</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;localName&lt;/code&gt;</ph> is not a valid name.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Asynchronously writes out the namespace-qualified name.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>This method looks up the prefix that is in scope for the given namespace.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteQualifiedName%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>The local name to write.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>The namespace URI for the name.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteQualifiedName`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes raw markup manually from a string.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not escape special characters.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> does not validate the data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteRaw%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not pass arbitrary data to this method.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteRawAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>String containing the text to write.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;data&lt;/code&gt;</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes raw markup manually from a character buffer.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not escape special characters.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> does not validate the data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteRaw%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not pass arbitrary data to this method.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteRawAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Character array containing the text to write.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>The position within the buffer indicating the start of the text to write.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>The number of characters to write.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>The buffer length minus <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> is less than <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Asynchronously writes raw markup manually from a string.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteRaw%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>String containing the text to write.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteRaw`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Asynchronously writes raw markup manually from a character buffer.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteRaw%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Character array containing the text to write.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>The position within the buffer indicating the start of the text to write.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>The number of characters to write.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteRaw`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Writes the start of an attribute with the specified local name.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables you to write a value using multiple Write methods.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>There is a character in the buffer that is a valid XML character but is not valid for the output encoding.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>Writes the start of an attribute with the specified local name and namespace URI.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is a more advanced version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> that allows you to write an attribute value using multiple write methods, such as <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlWriter.WriteQualifiedName%2A&gt;</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>The namespace URI of the attribute.</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>There is a character in the buffer that is a valid XML character but is not valid for the output encoding.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables you to write a value using multiple Write methods.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>The namespace prefix of the attribute.</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>The namespace URI for the attribute.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>There is a character in the buffer that is a valid XML character but is not valid for the output encoding.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>Asynchronously writes the start of an attribute with the specified prefix, local name, and namespace URI.</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartAttribute%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>The namespace prefix of the attribute.</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>The local name of the attribute.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>The namespace URI for the attribute.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteStartAttribute`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes the XML declaration with the version "1.0".</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT">
          <source>The encoding level of the document is determined by how the writer is implemented.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object is specified in the <ph id="ph2">`XmlTextWriter`</ph> constructor, this determines the value of the encoding attribute.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not create a standalone attribute.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`WriteStartDocument`</ph> is called the writer validates that what you are writing is a well-formed XML document.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, it checks that the XML declaration is the first node, that one and only one root-level element exists, and so on.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`WriteStartDocument`</ph> has been called and then the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A&gt;</ph> method is used to create another XML declaration, an exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes the XML declaration with the version "1.0" and the standalone attribute.</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT">
          <source>The encoding level of the document is determined by how the writer is implemented.</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object is specified in the <ph id="ph2">`XmlTextWriter`</ph> constructor, this determines the value of the encoding attribute.</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`WriteStartDocument`</ph> is called, the writer validates that what you are writing is a well-formed XML document.</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, it checks that the XML declaration is the first node, that one and only one root-level element exists, and so on.</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`WriteStartDocument`</ph> has been called and then the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A&gt;</ph> method is used to create another XML declaration, an exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, it writes "standalone=yes"; if <ph id="ph2">`false`</ph>, it writes "standalone=no".</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>Asynchronously writes the XML declaration with the version "1.0" and the standalone attribute.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartDocument%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, it writes "standalone=yes"; if <ph id="ph2">`false`</ph>, it writes "standalone=no".</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteStartDocument`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>Asynchronously writes the XML declaration with the version "1.0".</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartDocument%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteStartDocument`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out a start tag with the specified local name.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartElementAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>There is a character in the buffer that is a valid XML character but is not valid for the output encoding.</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes the specified start tag and associates it with the given namespace.</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling this method you can either write attributes, or create content using <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteComment%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph>, or <ph id="ph3">`WriteStartElement`</ph> for child elements.</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can close the element with either <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteEndElement%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteFullEndElement%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following C# code:</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generates the following output:</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartElementAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>The namespace URI to associate with the element.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>There is a character in the buffer that is a valid XML character but is not valid for the output encoding.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartElementAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>The namespace prefix of the element.</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>The namespace URI to associate with the element.</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>There is a character in the buffer that is a valid XML character but is not valid for the output encoding.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer.</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values).</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>Asynchronously writes the specified start tag and associates it with the given namespace and prefix.</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStartElement%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>The namespace prefix of the element.</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>The local name of the element.</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>The namespace URI to associate with the element.</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteStartElement`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the state of the writer.</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Xml.WriteState"&gt;&lt;/xref&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes the given text content.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`WriteString`</ph> does the following:</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT">
          <source>The characters <ph id="ph1">`&amp;`</ph>, <ph id="ph2">`&lt;`</ph>, and <ph id="ph3">`&gt;`</ph> are replaced with <ph id="ph4">`&amp;amp;`</ph>, <ph id="ph5">`&amp;lt;`</ph>, and <ph id="ph6">`&amp;gt;`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default behavior of an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> created using <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> is to throw an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph> when attempting to write character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD).</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT">
          <source>These invalid XML characters can be written by creating the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> with the <ph id="ph2">&lt;xref:System.Xml.XmlWriterSettings.CheckCharacters%2A&gt;</ph> property set to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT">
          <source>Doing so will result in the characters being replaced with numeric character entities (&amp;<ph id="ph1">\#</ph>0; through &amp;#0x1F).</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, an <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> created with the <ph id="ph2">`new`</ph> operator will replace the invalid characters with numeric character entities by default.</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> Microsoft does not encourage the practice of writing invalid XML characters since many applications that consume XML are not designed to handle invalid characters.</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`WriteString`</ph> is called in the context of an attribute value, double and single quotes are replaced with <ph id="ph2">`&amp;quot;`</ph> and <ph id="ph3">`&amp;apos;`</ph> respectively.</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, this input string <ph id="ph1">`test&lt;item&gt;test`</ph> is written out as</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a text node with no data content.</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>The text to write.</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>The text string contains an invalid surrogate pair.</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>Asynchronously writes the given text content.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>The text to write.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteString`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is only applicable on systems that use UTF-16 encoding.</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT">
          <source>The surrogate character entity is written in hexadecimal format.</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT">
          <source>The range for surrogate characters is #x10000 to #x10FFFF.</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following formula is used to generate the surrogate character entity: (<ph id="ph1">`highChar`</ph> -0xD800) * 0x400 + (<ph id="ph2">`lowChar`</ph> -0xDC00) + 0x10000</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT">
          <source>For both HTML and XML, the document character set (and therefore the notation of numeric character references) is based on UCS [ISO-10646].</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT">
          <source>A single numeric character reference in a source document may therefore in some cases correspond to two 16-bit units in a string (a high surrogate and a low surrogate).</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT">
          <source>These 16-bit units are referred to as a surrogate pair.</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information regarding surrogates or characters, refer to section 3.7 of the Unicode 3.0/Unicode 2.0 standard located at http://www.unicode.org, or section 2.2 of the W3C XML 1.0 Recommendation located at http://www.w3.org/TR/REC-xml#charsets.</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>The low surrogate.</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>This must be a value between 0xDC00 and 0xDFFF.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>The high surrogate.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>This must be a value between 0xD800 and 0xDBFF.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>An invalid surrogate character pair was passed.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>Asynchronously generates and writes the surrogate character entity for the surrogate character pair.</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteSurrogateCharEntity%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>The low surrogate.</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>This must be a value between 0xDC00 and 0xDFFF.</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>The high surrogate.</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>This must be a value between 0xD800 and 0xDBFF.</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteSurrogateCharEntity`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>Writes a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> is called multiple times in succession, the values are not delimited by a space.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteWhitespace%2A&gt;</ph> between calls to <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> to insert white space.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass an array type to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName&gt;</ph> overload to write out an array of distinct values.</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called on an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance that outputs text-only, the typed value is serialized to text.</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT">
          <source>For asynchronous operations, use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> value to write.</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>An invalid value was specified.</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Writes a single-precision floating-point number.</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <ph id="ph3">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> is called multiple times in succession, the values are not delimited by a space.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteWhitespace%2A&gt;</ph> between calls to <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> to insert white space.</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass an array type to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName&gt;</ph> overload to write out an array of distinct values.</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called on an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance that outputs text-only, the typed value is serialized to text.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT">
          <source>For asynchronous operations, convert the return value of this method to a string and use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>The single-precision floating-point number to write.</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>An invalid value was specified.</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Writes the object value.</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes the common language runtime (CLR) object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the CLR object is a list type such as <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>, or <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph>, it is treated as an array of the value type.</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called on an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance that outputs text-only, the typed value is serialized to text.</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For asynchronous operations, convert the return value of this method to a string and use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>The object value to write.</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> With the release of the .NET Framework 3.5, this method accepts <ph id="ph1">&lt;xref href="System.DateTimeOffset"&gt;&lt;/xref&gt;</ph> as a parameter.</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>An invalid value was specified.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>Writes a <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <ph id="ph3">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> is called multiple times in succession, the values are not delimited by a space.</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteWhitespace%2A&gt;</ph> between calls to <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> to insert white space.</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass an array type to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName&gt;</ph> overload to write out an array of distinct values.</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called on an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance that outputs text-only, the typed value is serialized to text.</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT">
          <source>For asynchronous operations, convert the return value of this method to a string and use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Int64"&gt;&lt;/xref&gt;</ph> value to write.</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>An invalid value was specified.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>Writes a <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <ph id="ph3">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> is called multiple times in succession, the values are not delimited by a space.</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteWhitespace%2A&gt;</ph> between calls to <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> to insert white space.</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass an array type to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName&gt;</ph> overload to write out an array of distinct values.</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called on an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance that outputs text-only, the typed value is serialized to text.</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For asynchronous operations, convert the return value of this method to a string and use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> value to write.</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>An invalid value was specified.</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>Writes a <ph id="ph1">&lt;xref href="System.DateTimeOffset"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For asynchronous operations, convert the return value of this method to a string and use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.DateTimeOffset"&gt;&lt;/xref&gt;</ph> value to write.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>Writes a <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <ph id="ph3">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> is called multiple times in succession, the values are not delimited by a space.</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteWhitespace%2A&gt;</ph> between calls to <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> to insert white space.</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass an array type to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName&gt;</ph> overload to write out an array of distinct values.</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called on an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance that outputs text-only, the typed value is serialized to text.</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT">
          <source>For asynchronous operations, convert the return value of this method to a string and use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Decimal"&gt;&lt;/xref&gt;</ph> value to write.</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>An invalid value was specified.</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>Writes a <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <ph id="ph3">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> is called multiple times in succession, the values are not delimited by a space.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteWhitespace%2A&gt;</ph> between calls to <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> to insert white space.</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass an array type to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName&gt;</ph> overload to write out an array of distinct values.</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called on an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance that outputs text-only, the typed value is serialized to text.</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT">
          <source>For asynchronous operations, convert the return value of this method to a string and use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.DateTime"&gt;&lt;/xref&gt;</ph> value to write.</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>An invalid value was specified.</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>Writes a <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <ph id="ph3">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> is called multiple times in succession, the values are not delimited by a space.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteWhitespace%2A&gt;</ph> between calls to <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> to insert white space.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass an array type to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName&gt;</ph> overload to write out an array of distinct values.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called on an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance that outputs text-only, the typed value is serialized to text.</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For asynchronous operations, convert the return value of this method to a string and use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Boolean"&gt;&lt;/xref&gt;</ph> value to write.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>An invalid value was specified.</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>Writes a <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes the common language runtime object and converts the input value to the desired output type using the XML Schema definition language (XSD) data type conversion rules.</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> converts the value to its string representations according to the XML Schema (XSD) data type rules and writes it out using the <ph id="ph3">&lt;xref:System.Xml.XmlWriter.WriteString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> is called multiple times in succession, the values are not delimited by a space.</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must call <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteWhitespace%2A&gt;</ph> between calls to <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteValue%2A&gt;</ph> to insert white space.</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pass an array type to the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName&gt;</ph> overload to write out an array of distinct values.</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called on an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instance that outputs text-only, the typed value is serialized to text.</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT">
          <source>For asynchronous operations, convert the return value of this method to a string and use the <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteStringAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> value to write.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>An invalid value was specified.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes out the given white space.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used to manually format your document.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the asynchronous version of this method, see <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteWhitespaceAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>The string of white space characters.</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>The string contains non-white space characters.</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>Asynchronously writes out the given white space.</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the asynchronous version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteWhitespace%2A&gt;</ph>, with the same functionality.</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use this method, you must set the <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings.Async%2A&gt;</ph> flag to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>The string of white space characters.</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>The task that represents the asynchronous <ph id="ph1">`WriteWhitespace`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> asynchronous method was called without setting the <ph id="ph2">&lt;xref href="System.Xml.XmlWriterSettings.Async"&gt;&lt;/xref&gt;</ph> flag to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "Set XmlWriterSettings.Async to true if you want to use Async Methods."</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the current <ph id="ph1">`xml:lang`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property allows one component to find out in what state another component has left the writer.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, perhaps one component wants to tell another which language help text to generate.</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The language information is communicated by writing an <ph id="ph1">`xml:lang`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>The current <ph id="ph1">`xml:lang`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets an <ph id="ph1">&lt;xref href="System.Xml.XmlSpace"&gt;&lt;/xref&gt;</ph> representing the current <ph id="ph2">`xml:space`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows one component to find out what state another component has left the writer in.</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`XmlSpace`</ph> representing the current <ph id="ph2">`xml:space`</ph> scope.</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>This is the default if no <ph id="ph1">`xml:space`</ph> scope exists.</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>The current scope is <ph id="ph1">`xml:space`</ph>="default".</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>The current scope is <ph id="ph1">`xml:space`</ph>="preserve".</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> method was called before a previous asynchronous operation finished.</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>In this case, <ph id="ph1">&lt;xref href="System.InvalidOperationException"&gt;&lt;/xref&gt;</ph> is thrown with the message "An asynchronous operation is already in progress."</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>