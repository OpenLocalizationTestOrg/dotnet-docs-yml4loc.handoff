<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2e10c87b4274cd25d340e0cfb45ef7583cb940a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Markup.AmbientAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a842eda4e22dcff4bc46c55281354e4a8267e14</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b98fe4d83b81d96bc9c123f0d55d09bc2ae0703</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies that a property or type should be treated as ambient.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The ambient concept relates to how XAML processors determine type owners of members.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ambient property is a property where the value is expected to be available in the parser context when creating an object graph, but where typical type-member lookup is suspended for purposes of the immediate XAML node set being created.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two main scenarios for the ambient concept:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some other property of the same object influences and qualifies how that object-property lookup should work.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property represents a larger deferral mechanism and the ambient capabilities for looking up a member value extend to all objects contained within the current object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This attribute can be applied to specific properties that have expected containers that enable an ambient property lookup behavior, or can be applied to a class to enable the ambient property behavior in all cases of that value type for a property.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> can also be applied to a CLR method, to support attributing a XAML attachable property as ambient.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is potentially necessary because in a CLR implementation a XAML attached property is implemented/represented to reflection as an accessor pattern with <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>No actual CLR property to attribute exists, so restricting usage for <ph id="ph1">&lt;xref:System.AttributeTargets&gt;</ph> to <ph id="ph2">`Property`</ph> would not have enabled specifying an attachable member as ambient.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an attachable member that you want to report as ambient, attribute the <ph id="ph1">`get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not attempt to attribute methods that are not specifically support methods of attachable members.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> is in the System.Xaml assembly.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ambient types (types where <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> is applied at type level) can be used for certain XAML processing situations where the type of a property needs to be resolved out of order.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Object Writer Scenarios</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are defining a XAML object writer, and you encounter a property, method or type where <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> is applied, you typically must access a service to determine the intended ambient property lookup behavior that is needed for writing out objects.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.IAmbientProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value Converters</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Type converters or markup extensions might need to know the ambient information in order to process properties that represent indirect type mappings, such as properties that specify members or types by string names with or without qualification.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this scenario, <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> is not intended to be used directly for value converter code logic.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rather, the value converter should rely on the XAML writer processing behavior, which will pass <ph id="ph1">&lt;xref:System.Xaml.IAmbientProvider&gt;</ph> in its service contexts to your value converter methods when called.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>WPF Scenarios for AmbientAttribute</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>A property of a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> (<ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph>) can qualify the necessary property name lookups that are needed to find the backing references for property names in <ph id="ph3">&lt;xref:System.Windows.Setter.Property%2A?displayProperty=fullName&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>All content within a <ph id="ph1">`Resources`</ph> property (items of a <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>) as well as template content, should be able to access other peers as values.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Declaring the entire <ph id="ph1">`Resources`</ph> property as ambient invokes logic that enables this in the WPF XAML parser.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> for an example of a scenario for setting <ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> at type level.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Markup.AmbientAttribute"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>