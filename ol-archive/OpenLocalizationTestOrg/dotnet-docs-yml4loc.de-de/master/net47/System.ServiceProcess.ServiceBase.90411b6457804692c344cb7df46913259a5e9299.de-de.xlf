<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb45011fa29f63075c7310d2ff8b8aaa1d641a8a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceProcess.ServiceBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b832c0dc728b4cce787d64cff3ac8242f192b21</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97da18394806f4db3679905afd098cf0b6ee289f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for a service that will exist as part of a service application.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase"&gt;&lt;/xref&gt;</ph> must be derived from when creating a new service class.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derive from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> when defining your service class in a service application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any useful service overrides the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional functionality, you can override <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> with specific behavior in response to changes in the service state.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The service can run without any user being logged on to the computer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, services run under the System account, which is not the same as the Administrator account.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change the rights of the System account.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can use a <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> to specify a user account under which the service will run.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>An executable can contain more than one service but must contain a separate <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> for each service.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance registers the service with the system.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The installer also associates each service with an event log that you can use to record service commands.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`main()`</ph> function in the executable defines which services should run.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current working directory of the service is the system directory, not the directory in which the executable is located.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you start a service, the system locates the executable and runs the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method for that service, contained within the executable.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, running the service is not the same as running the executable.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>The executable only loads the service.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The service is accessed (for example, started and stopped) through the Service Control Manager.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The executable calls the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> derived class's constructor the first time you call Start on the service.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> command-handling method is called immediately after the constructor executes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any resources that can be released by <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should be created in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating resources in the constructor prevents them from being created properly if the service is started again after <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> has released the resources.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Service Control Manager (SCM) provides a way to interact with the service.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SCM uses the values of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> to determine whether the service accepts Stop, Pause, or Continue commands.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph3">`true`</ph> in the service class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If enabled, the command is passed to the service, and <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>, the corresponding command-handling method (such as <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>) will not be processed, even if you have implemented the method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> class to do programmatically what the SCM does using a user interface.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can automate the tasks available in the console.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`true`</ph> but you have not implemented a corresponding command-handling method (such as <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>) the system throws an exception and ignores the command.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do not have to implement <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>, or any other method in <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the service's behavior is described in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, so at minimum, this member should be overridden.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`main()`</ph> function of the executable registers the service in the executable with the Service Control Manager by calling the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> object passed to the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph> method must match the <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property of the service installer for that service.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">`InstallUtil.exe`</ph> to install services on your system.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify a log other than the Application event log to receive notification of service calls, but neither the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> nor the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property can write to a custom log.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph> if you do not want to use automatic logging.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not create an instance of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, derive from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> and instantiate your derived class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The minimum you need to implement in the constructor for a class inherited from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> is to set the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> on your component.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>No other processing is specifically required in the constructor.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should handle most initialization in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> rather than in the constructor.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override the constructor in your derived class, call the base class constructor in your code.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> constructor sets <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you override the base class constructor, you should explicitly call it in the constructor of your derived class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`true`</ph> instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name of the service is used as the log's <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>To report information to a custom event log rather than the Application log, set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph> and write instructions within the command-handling methods <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to post to the appropriate log.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>, which supplies the source string for the event log, must be set before the service attempts to write to the event log.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Trying to access the event log before the source name is set throws an exception.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to report information in the event log; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the service can handle notifications of computer power status changes.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the command is passed to the service and the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> method is called if defined.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> is not implemented in the derived class, the SCM handles the power event through the empty base class <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the service handles the computer power status changes indicated in the <ph id="ph2">&lt;xref href="System.ServiceProcess.PowerBroadcastStatus"&gt;&lt;/xref&gt;</ph> class, otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This property is modified after the service was started.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the service can handle Terminal Server session change events; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This property is modified after the service was started.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the service can be paused and resumed.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the value of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property in the constructor for the service.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a service is paused, it halts what it is doing.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you continue the service (either through the Service Control Manager or programmatically), <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> runs.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sending a Pause request to the service can conserve system resources.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pause may not release all system resources, but Stop does.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> are often implemented to perform less processing than <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`true`</ph>, override <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> should be implemented to undo the processing in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if they are implemented.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the SCM, the <ph id="ph1">`Pause`</ph> and <ph id="ph2">`Continue`</ph> controls are disabled when <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the service can be paused; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The service has already been started.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase.CanPauseAndContinue"&gt;&lt;/xref&gt;</ph> property cannot be changed once the service has started.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the service should be notified when the system is shutting down.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the service is notified when the system is shutting down.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>At shutdown, the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> method is called if it has been implemented in your derived class.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the system should cause the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> method to execute; the service can call it, but this is not recommended.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the service should be notified when the system is shutting down; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The service has already been started.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase.CanShutdown"&gt;&lt;/xref&gt;</ph> property cannot be changed once the service has started.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the service can be stopped once it has started.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>For most services, the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`true`</ph>, but some operating system services, for example, do not allow the user to stop them.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the Stop command is passed to the service and the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method is called if it is defined.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the service can be stopped and the <ph id="ph2">&lt;xref href="System.ServiceProcess.ServiceBase.OnStop"&gt;&lt;/xref&gt;</ph> method called; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The service has already been started.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase.CanStop"&gt;&lt;/xref&gt;</ph> property cannot be changed once the service has started.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Disposes of the resources (other than memory) used by the <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> in your derived class (and through it, in the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class) when you are finished using the derived class.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> method leaves the derived class in an unusable state.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>, you must release all references to the derived class and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> so the memory they were occupying can be reclaimed by garbage collection.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> before you release your last reference to the class derived from <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> and the derived class are using will not be freed until garbage collection calls the objects' destructors.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is often implemented to process the code in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, combined with a call to <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you choose to do this in your derived class, it is customary to implement <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to allocate whatever <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> released.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to release both managed and unmanaged resources; <ph id="ph2">`false`</ph> to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor initializes the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property to an instance with the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName&gt;</ph> properties set.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The source is the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> of the service, and the log is the computer's Application log.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>These values are set automatically and cannot be changed for automatic logging of service commands.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id="ph2">`true`</ph>, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property to write additional messages to that log as well.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>The component calls <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName&gt;</ph> using this <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> member.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>To report information to a custom event log rather than the Application log, set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id="ph2">`false`</ph> and write instructions within the command-handling methods <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to post to the appropriate log.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Diagnostics.EventLog"&gt;&lt;/xref&gt;</ph> instance whose source is registered to the Application log.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Gets or sets the exit code for the service.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ExitCode%2A&gt;</ph> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The exit code for the service.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Indicates the maximum size for a service name.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase.OnContinue"&gt;&lt;/xref&gt;</ph> runs when a Continue command is sent to the service by the Service Control Manager (SCM).</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Specifies actions to take when a service resumes normal functioning after being paused.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to mirror your application's response to <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you continue the service (either through the Services console or programmatically), the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> processing runs, and the service becomes active again.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if they are implemented.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the SCM, the <ph id="ph1">`Pause`</ph> and <ph id="ph2">`Continue`</ph> controls are disabled when <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)"&gt;&lt;/xref&gt;</ph> executes when the Service Control Manager (SCM) passes a custom command to the service.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Specifies actions to take when a command with the specified parameter value occurs.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SCM does not examine the custom command to verify whether the service supports the <ph id="ph1">`command`</ph> parameter passed in.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>It passes the custom command directly to the service.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the service does not recognize the <ph id="ph1">`command`</ph> parameter, it does nothing.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom commands are raised by an <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A&gt;</ph> statement in a <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> component.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use a switch statement or if..then condition to handle the custom commands you define on your service.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The only values for a custom command that you can define in your application or use in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph> are those between 128 and 255.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Integers below 128 correspond to system-reserved values.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The command message sent to the service.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM).</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Specifies actions to take when a service pauses.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> to specify the processing that occurs when the service receives a Pause command.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you continue a paused service (either through the Services console or programmatically), the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> processing is run, and the service becomes active again.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Pause command only allows your application to react to a specific event.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> does nothing to the service that you do not define it to do.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>Sending a Pause request to the service can conserve system resources because Pause need not release all system resources.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you define Pause to release all system resources, it behaves like a Stop command.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> to <ph id="ph2">`true`</ph>, and override <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> should be implemented to undo the processing in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if implemented.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the SCM, the <ph id="ph1">`Pause`</ph> and <ph id="ph2">`Continue`</ph> controls are disabled when <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, executes when the computer's power status has changed.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> to specify the processing that occurs when the system event indicated in the <ph id="ph2">&lt;xref:System.ServiceProcess.PowerBroadcastStatus&gt;</ph> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ServiceProcess.PowerBroadcastStatus"&gt;&lt;/xref&gt;</ph> that indicates a notification from the system about its power status.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, the needs of your application determine what value to return.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For example, if a <ph id="ph1">`QuerySuspend`</ph> broadcast status is passed, you could cause your application to reject the query by returning <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Executes when a change event is received from a Terminal Server session.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A&gt;</ph> property to <ph id="ph2">`true`</ph> to enable the execution of this method.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A structure that identifies the change type.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, executes when the system is shutting down.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Specifies what should occur immediately prior to the system shutting down.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> to specify the processing that occurs when the system shuts down.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs only when the operating system is shut down, not when the computer is turned off.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> is expected to be overridden when the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically).</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Specifies actions to take when the service starts.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to specify the processing that occurs when the service receives a Start command.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> is the method in which you specify the behavior of the service.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> can take arguments as a way to pass data, but this usage is rare.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not use the constructor to perform processing that should be in <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to handle all initialization of your service.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The constructor is called when the application's executable runs, not when the service runs.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>The executable runs before <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you continue, for example, the constructor is not called again because the SCM already holds the object in memory.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> releases resources allocated in the constructor rather than in <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, the needed resources would not be created again the second time the service is called.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>Services can be set to start automatically when the computer reboots by setting the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> on the service's installer to <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceStartMode.Automatic&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>In such a situation, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> would be called at system startup.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> is expected to be overridden in the derived class.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the service to be useful, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should both be implemented in your service class.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Process initialization arguments for the service in the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method, not in the Main method.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arguments in the <ph id="ph1">`args`</ph> parameter array can be set manually in the properties window for the service in the Services console.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services<ph id="ph1">\\</ph><bpt id="p1">*</bpt><ph id="ph2">\&lt;</ph>service name&gt;<ept id="p1">*</ept>).</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can obtain the arguments from the registry using the <ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph> method, for example:  <ph id="ph2">`string[] imagePathArgs = Environment.GetCommandLineArgs();`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Data passed by the start command.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM).</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Specifies actions to take when a service stops running.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to specify the processing that occurs when the service receives a Stop command.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the SCM receives a Stop command, it uses the value of <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> to verify whether the service accepts Stop commands.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the Stop command is passed to the service, and the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method is called if it is defined.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is not implemented in the service, the SCM handles the Stop command.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the SCM ignores the Stop command.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is not passed to the service.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Stop command returns and throws an exception.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is expected to be overridden in the derived class.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the service to be useful, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should both be implemented in your service class.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Requests additional time for a pending operation.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A&gt;</ph> method is intended to be called by the overridden <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the pending operation is not a continue, pause, start, or stop, an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The requested time in milliseconds.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The service is not in a pending state.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Registers the executable for a service with the Service Control Manager (SCM).</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this overload in the <ph id="ph1">`main()`</ph> function of the service executable to register the service with the Service Control Manager.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29&gt;</ph>, the Service Control Manager issues a Start command, which results in a call to the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method in the service.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>The service is not started until the Start command is executed.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName&gt;</ph> method is called in much the same way as <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName&gt;</ph> for Windows Forms applications.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id="ph2">`true`</ph>, an entry is written to the event log if the service specified by the <ph id="ph3">`service`</ph> parameter fails to start.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase"&gt;&lt;/xref&gt;</ph> which indicates a service to start.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;service&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Registers the executable for multiple services with the Service Control Manager (SCM).</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this overload in the <ph id="ph1">`main()`</ph> function of the service executable to register the services with the Service Control Manager.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you call <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29&gt;</ph>, the Service Control Manager issues Start commands, which result in calls to the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> methods in the services.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>The services are not started until the Start commands are executed.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName&gt;</ph> method is called in much the same way as the <ph id="ph2">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName&gt;</ph> method for Windows Forms applications.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id="ph2">`true`</ph>, an entry is written to the event log if any service in the array fails to start.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>An array of ServiceBase instances, which indicate services to start.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>You did not supply a service to start.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The array might be <ph id="ph1">`null`</ph> or empty.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Gets the service control handle for the service.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>The service control handle is used to communicate with the Service Control Manager (SCM).</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>The handle can be used to update the service control manager's status information for the calling service using the unmanaged <ph id="ph1">`SetServiceStatus`</ph> function.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IntPtr"&gt;&lt;/xref&gt;</ph> structure that contains the service control handle for the service.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Registers the command handler and starts the service.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The number of arguments in the argument array.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IntPtr"&gt;&lt;/xref&gt;</ph> structure that points to an array of arguments.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Gets or sets the short name used to identify the service to the system.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> identifies the service to the Service Control Manager.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property must be identical to the name recorded for the service in the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName&gt;</ph> property of the corresponding installer class.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>In code, the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> of the service is usually set in the <ph id="ph2">`main()`</ph> function of the executable.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> is also used to specify the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName&gt;</ph> associated with the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> is an instance that writes service command information to the Application log.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>, which supplies the source string for the event log, must be set before the service writes to the event log.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Trying to access the event log before the source name is set causes an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The name of the service.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The service has already been started.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase.ServiceName"&gt;&lt;/xref&gt;</ph> property cannot be changed once the service has started.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The specified name is a zero-length string or is longer than <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase.MaxNameLength"&gt;&lt;/xref&gt;</ph>, or the specified name contains forward slash or backslash characters.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Stops the executing service.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.Stop%2A&gt;</ph> method sets the service state to indicate a stop is pending and calls the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the application is stopped, the service state is set to stopped.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the application is a hosted service, the application domain is unloaded.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>