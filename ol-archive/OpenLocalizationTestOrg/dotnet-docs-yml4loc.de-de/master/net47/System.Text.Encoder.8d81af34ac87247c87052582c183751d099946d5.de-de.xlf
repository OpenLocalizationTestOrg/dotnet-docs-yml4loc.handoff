<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c01af4441ca88e05eb380c0b745d62c2078e299d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Text.Encoder.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a24be1bc3e0c89ecfc37938266180afa380b87d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6866dddcb7db8de9a4777a8ea81ed7084d76f07</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Converts a set of characters into a sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain an instance of an implementation of the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> class, the application should use the <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method of an <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are several versions of both of these methods available in the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object maintains state information between successive calls to <ph id="ph2">`GetBytes`</ph> or <ph id="ph3">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> methods so that it can correctly encode character sequences that span blocks.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application is done with a stream of data it should make sure that the state information is flushed by setting the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> in the appropriate method call.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an exception occurs or if the application switches streams, it should call <ph id="ph1">&lt;xref:System.Text.Encoder.Reset%2A&gt;</ph> to clear the internal state of the <ph id="ph2">`Encoder`</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Considerations</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object can be serialized during a conversion operation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Text.Encoder"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To obtain an instance of an implementation of this class, the application should use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method of an <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> to make sure that the state information is flushed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Convert`</ph> method is designed to be used in a loop to encode an arbitrary amount of input, such as data read from a file or stream.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>It stores the output of the encoding operation in a fixed-size buffer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> topic for more comments.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`completed`</ph> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This parameter is set to <ph id="ph1">`false`</ph> if the number of characters specified by the <ph id="ph2">`charCount`</ph> parameter cannot be converted without exceeding the number of bytes specified by the <ph id="ph3">`byteCount`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <ph id="ph1">`chars`</ph> parameter by the number of characters specified by the <ph id="ph2">`charsUsed`</ph> parameter, then call the <ph id="ph3">`Convert`</ph> method again to process the remaining input.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`completed`</ph> parameter can also be set to <ph id="ph2">`false`</ph>, even though the <ph id="ph3">`charsUsed`</ph> and <ph id="ph4">`charCount`</ph> parameters are equal.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This situation occurs if there is still data in the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object that has not been stored in the <ph id="ph2">`chars`</ph> buffer.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The address of a string of UTF-16 encoded characters to convert.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The number of characters in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept> to convert.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The address of a buffer to store the converted bytes.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> to use in the conversion.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to indicate no further data is to be converted; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the number of characters from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept> that were used in the conversion.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the number of bytes that were used in the conversion.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When this method returns, contains <ph id="ph1">`true`</ph> if all the characters specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">charCount</ph><ept id="p1">&lt;/code&gt;</ept> were converted; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph> (<ph id="ph4">`Nothing`</ph>).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The output buffer is too small to contain any of the converted input.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The output buffer should be greater than or equal to the size indicated by the <ph id="ph1">&lt;xref href="System.Text.Encoder.GetByteCount*"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoder.Fallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> to make sure that the state information is flushed.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Convert`</ph> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>It stores the output of the encoding operation in a fixed-size buffer.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> topic for more comments.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`completed`</ph> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>This parameter is set to <ph id="ph1">`false`</ph> if the number of characters specified by the <ph id="ph2">`charCount`</ph> parameter cannot be converted without exceeding the number of bytes specified by the <ph id="ph3">`byteCount`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <ph id="ph1">`chars`</ph> parameter by the number of characters specified by the <ph id="ph2">`charsUsed`</ph> parameter, then call the <ph id="ph3">`Convert`</ph> method again to process the remaining input.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`completed`</ph> parameter can also be set to <ph id="ph2">`false`</ph>, even though the <ph id="ph3">`charsUsed`</ph> and <ph id="ph4">`charCount`</ph> parameters are equal.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>This situation occurs if there is still data in the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object that has not been stored in the <ph id="ph2">`chars`</ph> buffer.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An array of characters to convert.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The first element of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept> to convert.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The number of elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept> to convert.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>An array where the converted bytes are stored.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The first element of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> in which data is stored.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The maximum number of elements of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> to use in the conversion.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to indicate no further data is to be converted; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the number of characters from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept> that were used in the conversion.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the number of bytes that were produced by the conversion.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When this method returns, contains <ph id="ph1">`true`</ph> if all the characters specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">charCount</ph><ept id="p1">&lt;/code&gt;</ept> were converted; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph3">`null`</ph> (<ph id="ph4">`Nothing`</ph>).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charIndex&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;charCount&lt;/code&gt;</ph>, <ph id="ph3">&lt;code&gt;byteIndex&lt;/code&gt;</ph>, or <ph id="ph4">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">chars</ph><ept id="p1">&lt;/code&gt;</ept><ph id="ph2"> - </ph><bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">charIndex</ph><ept id="p2">&lt;/code&gt;</ept> is less than <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">charCount</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The length of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept><ph id="ph2"> - </ph><bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">byteIndex</ph><ept id="p2">&lt;/code&gt;</ept> is less than <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">byteCount</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The output buffer is too small to contain any of the converted input.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The output buffer should be greater than or equal to the size indicated by the <ph id="ph1">&lt;xref href="System.Text.Encoder.GetByteCount*"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoder.Fallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Gets or sets a <ph id="ph1">&lt;xref href="System.Text.EncoderFallback"&gt;&lt;/xref&gt;</ph> object for the current <ph id="ph2">&lt;xref href="System.Text.Encoder"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Text.EncoderFallback"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The value in a set operation is <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph>).</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A new value cannot be assigned in a set operation because the current <ph id="ph1">&lt;xref href="System.Text.EncoderFallbackBuffer"&gt;&lt;/xref&gt;</ph> object contains data that has not been encoded yet.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoder.Fallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Text.EncoderFallbackBuffer"&gt;&lt;/xref&gt;</ph> object associated with the current <ph id="ph2">&lt;xref href="System.Text.Encoder"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder.FallbackBuffer%2A&gt;</ph> object represents data used by the <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Text.EncoderFallbackBuffer"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A parameter indicates whether to clear the internal state of the encoder after the calculation.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not affect the state of the encoder.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> requires to store the resulting bytes, the application should use <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`GetBytes`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application should call <ph id="ph1">`GetByteCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A pointer to the first character to encode.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The number of characters to encode.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to simulate clearing the internal state of the encoder after the calculation; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> (<ph id="ph3">`Nothing`</ph> in Visual Basic .NET).</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoder.Fallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A parameter indicates whether to clear the internal state of the encoder after the calculation.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not affect the state of the encoder.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> requires to store the resulting bytes, the application should use <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`GetBytes`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application should call <ph id="ph1">`GetByteCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The character array containing the set of characters to encode.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The index of the first character to encode.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The number of characters to encode.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to simulate clearing the internal state of the encoder after the calculation; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;code&gt;chars&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoder.Fallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>A parameter indicates whether to clear the internal state of the encoder after the conversion.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> in the last call to <ph id="ph3">`GetBytes`</ph> to make sure that the state information is flushed and that the encoded bytes are properly terminated.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact buffer size that <ph id="ph1">`GetBytes`</ph> requires to store the resulting characters, the application should use <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`GetBytes`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application should call <ph id="ph1">`GetByteCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application is to convert many segments of an input stream, consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> topic for more comments.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A pointer to the first character to encode.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The number of characters to encode.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A pointer to the location at which to start writing the resulting sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to clear the internal state of the encoder after the conversion; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The actual number of bytes written at the location indicated by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> (<ph id="ph3">`Nothing`</ph>).</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> (<ph id="ph3">`Nothing`</ph>).</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than the resulting number of bytes.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoder.Fallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A parameter indicates whether to clear the internal state of the encoder after the conversion.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> in the last call to <ph id="ph3">`GetBytes`</ph> to make sure that the state information is flushed and that the encoded bytes are properly terminated.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>To calculate the exact buffer size that <ph id="ph1">`GetBytes`</ph> requires to store the resulting characters, the application should use <ph id="ph2">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`GetBytes`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application should call <ph id="ph1">`GetByteCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application is to convert many segments of an input stream, consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> topic for more comments.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The character array containing the set of characters to encode.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The index of the first character to encode.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The number of characters to encode.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The byte array to contain the resulting sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The index at which to start writing the resulting sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to clear the internal state of the encoder after the conversion; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The actual number of bytes written into <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bytes</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> (<ph id="ph3">`Nothing`</ph>).</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> (<ph id="ph3">`Nothing`</ph>).</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charIndex&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id="ph3">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is less than zero.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;charIndex&lt;/code&gt;</ph> and <ph id="ph2">&lt;code&gt;charCount&lt;/code&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;code&gt;chars&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is not a valid index in <ph id="ph2">&lt;code&gt;bytes&lt;/code&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;bytes&lt;/code&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;code&gt;byteIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting bytes.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>-and-</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Text.Encoder.Fallback"&gt;&lt;/xref&gt;</ph> is set to <ph id="ph2">&lt;xref href="System.Text.EncoderExceptionFallback"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, sets the encoder back to its initial state.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method clears the internal state of the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>The method clears any state information preserved from a previous call to <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>, including trailing characters at the end of the previous data block, such as an unmatched high surrogate.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your application should call the <ph id="ph1">`Reset`</ph> method if it wants to reuse the same encoder even after an exception is thrown by <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>, or if the application switches streams.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>