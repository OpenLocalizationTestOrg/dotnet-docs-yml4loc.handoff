<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e94e9b84206cbca473348e9567d27feb715d668c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.LocalDataStoreSlot.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c4862d9ba5cbe61d8d1c3a688b25a61ee036ff1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d10d1469e57a4b8e777ae159b865876cb6add6a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates a memory slot to store local data.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields, and data slots.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thread-relative static fields are <ph id="ph1">`static`</ph> fields (<ph id="ph2">`Shared`</ph> fields in Visual Basic) that are marked with the <ph id="ph3">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>They provide better performance than data slots, and enable compile-time type checking.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data slots are slower and more awkward to use than thread-relative static fields.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, data is stored as type <ph id="ph1">&lt;xref:System.Object&gt;</ph>, so you must cast it to the correct type before using it.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can use data slots when you have insufficient information at compile time to allocate static fields.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using TLS, see <bpt id="p1">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id="p1">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, the .NET Framework provides two mechanisms for using context local storage: context-relative static fields and data slots.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Context-relative static fields are static fields that are marked with the <ph id="ph1">&lt;xref:System.ContextStaticAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The trade-offs between using these two mechanisms are similar to the tradeoffs between using thread-relative static fields and data slots.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.LocalDataStoreSlot&gt;</ph> structure serves as a local store memory mechanism that threads and contexts can use to store thread-specific and context-specific data, respectively.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime allocates a multi-slot data store array to each process when it is created.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread or context calls various functions to allocate a data slot in the data store, to store and retrieve a data value in the slot, and to free a data slot for reuse after the thread or context object expires.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data slots are unique per thread or context; their values are not shared between the thread or context objects.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data slots can be allocated by a name or by an index number.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about storing local data, see <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.Remoting.Contexts.Context&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.LocalDataStoreSlot&gt;</ph> class is used with methods such as <ph id="ph2">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=fullName&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.Thread.GetData%2A?displayProperty=fullName&gt;</ph>, and <ph id="ph5">&lt;xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=fullName&gt;</ph>; it does not have any methods of its own that you need to use.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;xref href="System.LocalDataStoreSlot"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The garbage collector calls <ph id="ph1">&lt;xref:System.LocalDataStoreSlot.Finalize%2A&gt;</ph> when the current object is ready to be finalized.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>