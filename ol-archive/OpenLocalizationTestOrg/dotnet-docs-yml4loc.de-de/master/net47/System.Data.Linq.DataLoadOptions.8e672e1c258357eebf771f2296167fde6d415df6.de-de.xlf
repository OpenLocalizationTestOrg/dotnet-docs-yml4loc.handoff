<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0875ddfb1a91f30435258c10d0a85c8bf8396a6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Data.Linq.DataLoadOptions.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">143dbdb8ffaef15038e8d22a97dfe94484eb6c02</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4bc4ab1c4cae22626c064c7c90e92311b36f1314</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides for immediate loading and filtering of related data.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>General</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you query for an object, you actually retrieve only the object you requested.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">*</bpt>related<ept id="p1">*</ept> objects are not automatically fetched at the same time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For more information, see <bpt id="p1">[</bpt>Querying Across Relationships<ept id="p1">](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> class provides two methods to achieve immediate loading of specified related data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> method allows for immediate loading of data related to the main target.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A&gt;</ph> method allows for filtering related objects.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rules</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note the following rules regarding <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> usage:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assigning a <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> to a <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> after the first query has been executed generates an exception.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modifying a <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph> after it has been assigned to a <ph id="ph2">&lt;xref:System.Data.Linq.DataContext&gt;</ph> generates an exception</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cycle Handling</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A&gt;</ph> directives must not create cycles.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following represent examples of such graphs:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example 1: Self recursive</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example 2: Back-pointers</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example 3: Longer cycles</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this should not occur in a well-normalized model, it is possible.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example 4: Self recursive subQueries</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Example 5: Longer recursive subqueries</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are some general rules that help you understand what occurs in these scenarios.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>LoadWith<ept id="p1">**</ept> Each call to <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> checks whether cycles have been introduced into the graph.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are, as in Examples 1, 2, and 3, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>AssociateWith<ept id="p1">**</ept> The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Example 4, the <ph id="ph1">`Where`</ph> clause is executed against all <ph id="ph2">`A`</ph>, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Example 5, the first <ph id="ph1">`Where`</ph> clause is applied to all the <ph id="ph2">`B`</ph>s, even though there are subqueries on <ph id="ph3">`B`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second <ph id="ph1">`Where`</ph> clause is applied to all the <ph id="ph2">`A`</ph>s even though there are subqueries on <ph id="ph3">`A`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Data.Linq.DataLoadOptions"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Filters the objects retrieved for a particular relationship.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, the inner loop iterates only over those <ph id="ph1">`Orders`</ph> that have not been shipped today.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Identifies the query to be used on a particular one-to-many field or property.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Note the following:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If an operator other than a valid operator appears in the expression, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Valid operators are as follows:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Where</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>OrderBy</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>ThenBy</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>OrderByDescending</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>ThenByDescending</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Take</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Filters objects retrieved for a particular relationship.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about how to avoid cycles, see <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Identifies the query to be used on a particular one-to-many field or property.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Note the following:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If an operator other than a valid operator appears in the expression, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Valid operators are as follows:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Where</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>OrderBy</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>ThenBy</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>OrderByDescending</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>ThenByDescending</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Take</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The type that is queried against.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the type is unmapped, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Retrieves specified data related to the main target by using a lambda expression.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, all the <ph id="ph1">`Orders`</ph> for all the <ph id="ph2">`Customers`</ph> who are located in London are retrieved when the query is executed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, successive access to the <ph id="ph1">`Orders`</ph> property on a <ph id="ph2">`Customer`</ph> object does not trigger a new database query.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A lambda expression that identifies the related material.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Specifies which sub-objects to retrieve when a query is submitted for an object of type T.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot specify the loading of two levels of relationships (for example, <ph id="ph1">`Orders.OrderDetails`</ph>).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>In these scenarios you must specify two separate <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid cycling, see Remarks section in <ph id="ph1">&lt;xref:System.Data.Linq.DataLoadOptions&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Identifies the field or property to be retrieved.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If the expression does not identify a field or property that represents a one-to-one or one-to-many relationship, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Type that is queried against.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If this type is unmapped, an exception is thrown.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>