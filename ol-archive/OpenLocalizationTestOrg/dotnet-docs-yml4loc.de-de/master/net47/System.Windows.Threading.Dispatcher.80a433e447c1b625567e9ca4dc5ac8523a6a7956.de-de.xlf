<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9103f60218bb0ed175fa55b525a36cd4d176219d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Threading.Dispatcher.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb9323c933f85172b2f269db7895e069cb5d2a69</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5bbd44b14d4ab62a24888b28dd72d277fd9e0b7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides services for managing the queue of work items for a thread.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> maintains a prioritized queue of work items for a specific thread.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is created on a thread, it becomes the only <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that can be associated with the thread, even if the <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is shut down.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to get the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;</ph> for the current thread and a <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is not associated with the thread, a <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> will be created.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is also created when you create a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create a <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> on a background thread, be sure to shut down the dispatcher before exiting the thread.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is shut down, it cannot be restarted.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> can only be accessed by the <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> it is associated with.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that is associated with the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> on the <ph id="ph3">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the <ph id="ph4">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id="ph4">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>All of the methods on <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>, with the exception of <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;</ph>, are free-threaded.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects that derive from <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> have thread affinity.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects that derive from <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> are free-threaded when they are frozen.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](~/docs/framework/wpf/advanced/freezable-objects-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments on the thread that the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> was created on.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object returned by <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> can be used in several ways to interact with the specified delegate, such as:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> of the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Removing the delegate from the event queue.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Waiting for the delegate to return.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Obtaining the value that the delegate returns after it is executed.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id="ph4">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept>, which is pushed onto the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.BeginInvoke*"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> calls are made at the same <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>, they will be executed in the order the calls were made.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> returns a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object that can be used to interact with the delegate when the delegate is in the event queue.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object returned by <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> can be used in several ways to interact with the specified delegate, such as:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> of the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Removing the delegate from the event queue.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Waiting for the delegate to return.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Obtaining the value that the delegate returns after it is executed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id="ph4">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.BeginInvoke*"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> was created on.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object returned by <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> can be used in several ways to interact with the specified delegate, such as:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> of the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Removing the delegate from the event queue.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Waiting for the delegate to return.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Obtaining the value that the delegate returns after it is executed.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id="ph4">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept>, which is pushed onto the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.BeginInvoke*"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> returns a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object that can be used to interact with the delegate when the delegate is in the event queue.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object returned by <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> can be used in several ways to interact with the specified delegate, such as:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> of the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Removing the delegate from the event queue.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>Waiting for the delegate to return.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Obtaining the value that the delegate returns after it is executed.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> calls are made at the same <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>, they will be executed in the order the calls were made.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id="ph4">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.BeginInvoke*"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`arg`</ph> parameter can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> returns a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object that can be used to interact with the delegate when the delegate is in the event queue.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object returned by <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> can be used in several ways to interact with the specified delegate, such as:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph> of the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Removing the delegate from the event queue.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Waiting for the delegate to return.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Obtaining the value that the delegate returns after it is executed.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> calls are made at the same <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>, they will be executed in the order the calls were made.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is called on a <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that has shut down, the status property of the returned <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id="ph4">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.BeginInvoke*"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> queue.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;&lt;/xref&gt;</ph> is not a valid priority.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Initiates shutdown of the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> asynchronously.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A&gt;</ph> demands unrestricted UI Permissions.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> starts to shut down, the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shut down completely until the event queue unwinds.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The priority at which to begin shutting down the dispatcher.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread is the thread associated with this <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> that a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> is created on may access the object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> to access the object from a different thread.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</ph> can be called from any thread.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</ph> is <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</ph> returns a Boolean indicating whether the calling thread has access to the <ph id="ph4">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</ph> throws an exception.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the calling thread is the thread associated with this <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> for the thread currently executing and creates a new <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> if one is not already associated with the thread.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is not associated with the current thread, a new <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> will be created.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is not the case with the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</ph> will return <ph id="ph2">`null`</ph> if there is not a dispatcher associated with the specified thread.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The dispatcher associated with the current thread.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Disables processing of the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> queue.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>The effects of disabling processing are as follows:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_clr#initcap](~/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph> locks will not pump messages internally.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;</ph> objects are not allowed to be pushed.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Message processing is not permitted.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;</ph> structure that <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;</ph> returns when it is called can be used to re-enable dispatcher processing.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;</ph> on the <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;</ph> structure re-enables processing.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;</ph> can only be called on the thread the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A structure used to re-enable dispatcher processing.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Requests that all frames exit, including nested frames.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> for the specified thread.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dispatcher is not available for the specified thread, <ph id="ph1">`null`</ph> will be returned.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</ph> does not create a <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> on a thread that does not have a <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>A new <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is created on a thread that does not already have a <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> when attempting to get the <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> by using the <ph id="ph4">&lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The thread to obtain the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> from.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The dispatcher for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">thread</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> has finished shutting down.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> starts to shut down, the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shutdown completely until the event queue unwinds.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the dispatcher has finished shutting down; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Determines whether the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is shutting down.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> starts to shut down, the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shut down completely until the event queue unwinds.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> has started shutting down; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Gets the collection of hooks that provide additional event information about the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherHooks&gt;</ph> class provides additional event information about the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>, such as when the <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is inactive or when an operation has competed.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The hooks associated with this <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the specified method.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <ph id="ph1">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <ph id="ph2">&lt;xref href="System.Windows.Threading.DispatcherPriority.Inactive"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>This can be <ph id="ph1">`null`</ph> if no arguments are needed.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <ph id="ph1">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <ph id="ph2">&lt;xref href="System.Windows.Threading.DispatcherPriority.Inactive"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <ph id="ph1">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <ph id="ph2">&lt;xref href="System.Windows.Threading.DispatcherPriority.Inactive"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Action"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The minimum amount of time to wait for the operation to start.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> was created.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <ph id="ph1">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <ph id="ph1">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <ph id="ph2">&lt;xref href="System.Windows.Threading.DispatcherPriority.Inactive"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept>, which is pushed onto the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <ph id="ph1">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept>, which is pushed onto the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <ph id="ph1">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Action"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority on the thread on which the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes no arguments, which is pushed onto the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <ph id="ph1">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <ph id="ph2">&lt;xref href="System.Windows.Threading.DispatcherPriority.Inactive"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate with the specified arguments synchronously on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept>, which is pushed onto the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <ph id="ph1">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Action"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Action"&gt;&lt;/xref&gt;</ph> synchronously on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherObject&gt;</ph> may access that object.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> that was created on the UI thread.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>, the background thread must delegate the work to the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> associated with the UI thread.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is synchronous and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is asynchronous.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> at the specified <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept>, which is pushed onto the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> event queue, the specified method is invoked.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Can be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <ph id="ph1">`null`</ph> if the delegate has no return value.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Func`1"&gt;&lt;/xref&gt;</ph> synchronously on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by <ph id="ph1">`callback`</ph>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>The return value type of the specified delegate.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Func`1"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by <ph id="ph1">`callback`</ph>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The return value type of the specified delegate.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Func`1"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by <ph id="ph1">`callback`</ph>.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the operation.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The return value type of the specified delegate.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Func`1"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value returned by <ph id="ph1">`callback`</ph>.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the operation.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The minimum amount of time to wait for the operation to start.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The return value type of the specified delegate.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Action"&gt;&lt;/xref&gt;</ph> asynchronously on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Action"&gt;&lt;/xref&gt;</ph> asynchronously at the specified priority on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Action"&gt;&lt;/xref&gt;</ph> asynchronously at the specified priority on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Func`1"&gt;&lt;/xref&gt;</ph> synchronously at the specified priority on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the operation.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The return value type of the specified delegate.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Func`1"&gt;&lt;/xref&gt;</ph> asynchronously on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The return value type of the specified delegate.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Executes the specified <ph id="ph1">&lt;xref href="System.Func`1"&gt;&lt;/xref&gt;</ph> asynchronously at the specified priority on the thread the <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The return value type of the specified delegate.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)"&gt;&lt;/xref&gt;</ph> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Initiates the shutdown process of the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> synchronously.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A&gt;</ph> demands unrestricted UI Permissions.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> starts to shut down, the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shut down completely until the event queue unwinds.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Enters an execute loop.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;</ph> represents a loop that processes pending work items.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispatcher processes the work item queue in a loop.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>The loop is referred to as a frame.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial loop is typically initiated by the application by calling <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.PushFrame%2A&gt;</ph> enters a loop represented by the parameter <ph id="ph2">`frame`</ph>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT">
          <source>At each iteration of the loop, the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> will check the <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;</ph> property on the <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;</ph> class to determine whether the loop should continue or if it should stop.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;</ph> allows for the <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;</ph> property to be set explicitly and it respects the <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> property on the <ph id="ph4">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means when the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> starts to shut down, frames that use the default <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;</ph> implementation will exit, which enables all nested frames to exit.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The frame for the dispatcher to process.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.HasShutdownFinished"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`true`</ph></source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph> is running on a different <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Dispatcher processing has been disabled.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Pushes the main execution frame on the event queue of the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> processes the event queue in a loop.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>The loop is referred to as a frame.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial loop is typically initiated by the application by calling <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>The main execution frame will continue until the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is shutdown.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> finishes shutting down.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the shutdown process of a <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is started, the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shutdown completely until the event queue unwinds.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Occurs when the <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> begins to shut down.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the shutdown process of a <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is started, the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;</ph> event is raised and <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;</ph> is set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> does not shutdown completely until the event queue unwinds.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</ph> event is raised and the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</ph> property is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Gets the thread this <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph> is associated with.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The thread.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.Invoke*"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher.BeginInvoke*"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised when an exception that was thrown during execution of a delegate by way of <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> is uncaught.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</ph> event provides a means to not raise the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</ph> event is raised first, and If <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;</ph> on the <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;</ph> is set to <ph id="ph4">`false`</ph>, the <ph id="ph5">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event will not be raised.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher.Invoke*"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Windows.Threading.Dispatcher.BeginInvoke*"&gt;&lt;/xref&gt;</ph> when in the filter stage.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> and is uncaught.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is not unwound at this point (first-chance exception).</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</ph> event provides a means to not raise the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</ph> event is raised first, and If <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;</ph> on the <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;</ph> is set to <ph id="ph4">`false`</ph>, the <ph id="ph5">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event will not be raised.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Determines whether the specified <ph id="ph1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;&lt;/xref&gt;</ph> is a valid priority.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The priority to check.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>A string that will be returned by the exception that occurs if the priority is invalid.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread has access to this <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the thread the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> is created on may access the <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is public; therefore, any thread can check to see whether it has access to the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</ph> is <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</ph> returns a Boolean if the calling thread does not have access to the <ph id="ph4">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</ph> throws an exception.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>The calling thread does not have access to this <ph id="ph1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is equivalent to calling the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;</ph> method and passing in <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>The priority at which to schedule the continuation.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>