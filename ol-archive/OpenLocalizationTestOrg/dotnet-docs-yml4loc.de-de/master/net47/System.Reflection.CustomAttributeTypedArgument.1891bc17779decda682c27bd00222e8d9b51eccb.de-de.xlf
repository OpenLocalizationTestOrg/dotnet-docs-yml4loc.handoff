<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ddd5eb798c59cc3373cc466980bf915edc92300d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Reflection.CustomAttributeTypedArgument.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">063ae116a236ae97fdfaa786c562fd5a18d4cfd9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a3eb8a86675eabf3fb45bccff342053e8424a31</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an argument of a custom attribute in the reflection-only context, or an element of an array argument.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structure is used by the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class to provide access to the type and value of a positional argument specified for a custom attribute instance, without executing the attribute constructor.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also provides access to the type and value of a named argument without executing the code of the corresponding property of the custom attribute type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The types and values of all the positional and named arguments of an attribute instance are provided by <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structures.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The positional attributes returned by the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A?displayProperty=fullName&gt;</ph> property are directly represented by <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structures, but the named arguments returned by the <ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A?displayProperty=fullName&gt;</ph> property are represented by <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structures; to get the <ph id="ph5">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure for a named argument, use the <ph id="ph6">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an argument is an array of values, the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> that represents the argument returns a generic <ph id="ph3">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> of <ph id="ph4">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> object in the collection represents the corresponding element of the array.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>To create instances of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class, use the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> factory method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeTypedArgument"&gt;&lt;/xref&gt;</ph> class with the specified value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`value`</ph> parameter cannot be <ph id="ph2">`null`</ph> for this constructor, because the argument type is inferred from the type of <ph id="ph3">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a <ph id="ph1">`null`</ph> value, use the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument.%23ctor%28System.Type%2CSystem.Object%29&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is for use by inheritors of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is not intended for use in application code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The value of the custom attribute argument.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeTypedArgument"&gt;&lt;/xref&gt;</ph> class with the specified type and value.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is for use by inheritors of the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is not intended for use in application code.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The type of the custom attribute argument.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The value of the custom attribute argument.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;argumentType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets the type of the argument or of the array argument element.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>For simple arguments or for elements of array arguments, this property identifies the actual type of the value returned by the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For array arguments, this property returns the array type, but the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> property returns a <ph id="ph2">`ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;`</ph> (<ph id="ph3">`ReadOnlyCollection(Of CustomAttributeTypedArgument)`</ph> in Visual Basic) in which each element of the collection represents the corresponding element of the array argument.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object representing the type of the argument or of the array element.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Indicates whether this instance and a specified object are equal.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Another object to compare to.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> and this instance are the same type and represent the same value; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this instance.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer that is the hash code for this instance.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Tests whether two <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeTypedArgument"&gt;&lt;/xref&gt;</ph> structures are equivalent.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Equals%28System.Reflection.CustomAttributeTypedArgument%2CSystem.Reflection.CustomAttributeTypedArgument%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeTypedArgument"&gt;&lt;/xref&gt;</ph> structure to the left of the equality operator.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeTypedArgument"&gt;&lt;/xref&gt;</ph> structure to the right of the equality operator.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two <ph id="ph2">&lt;xref href="System.Reflection.CustomAttributeTypedArgument"&gt;&lt;/xref&gt;</ph> structures are equal; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Tests whether two <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeTypedArgument"&gt;&lt;/xref&gt;</ph> structures are different.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Compare%28System.Reflection.CustomAttributeTypedArgument%2CSystem.Reflection.CustomAttributeTypedArgument%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeTypedArgument"&gt;&lt;/xref&gt;</ph> structure to the left of the inequality operator.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Reflection.CustomAttributeTypedArgument"&gt;&lt;/xref&gt;</ph> structure to the right of the inequality operator.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the two <ph id="ph2">&lt;xref href="System.Reflection.CustomAttributeTypedArgument"&gt;&lt;/xref&gt;</ph> structures are different; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns a string consisting of the argument name, the equal sign, and a string representation of the argument value.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A string consisting of the argument name, the equal sign, and a string representation of the argument value.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets the value of the argument for a simple argument or for an element of an array argument; gets a collection of values for an array argument.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> represents an array argument, this property returns a <ph id="ph2">`ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;`</ph> (<ph id="ph3">`ReadOnlyCollection(Of CustomAttributeTypedArgument)`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each element of the collection represents the corresponding element of the array argument.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the value can be obtained by using the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A&gt;</ph> gets the actual type of the value returned by the <ph id="ph2">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A&gt;</ph> property for simple arguments or for elements of array arguments.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>It returns the array type for array arguments.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An object that represents the value of the argument or element, or a generic <ph id="ph1">&lt;xref href="System.Collections.ObjectModel.ReadOnlyCollection`1"&gt;&lt;/xref&gt;</ph> of <ph id="ph2">&lt;xref href="System.Reflection.CustomAttributeTypedArgument"&gt;&lt;/xref&gt;</ph> objects that represent the values of an array-type argument.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>