<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6c7606c9b986e44fca4241685961047c79cbe6d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xaml.XamlObjectWriterSettings.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">382ae772aafe3d1e2c5750d4199fcdbfc5e34d25</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bf0a54ce8fc22b3e8a2105ab207e47d9dad4bc1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides specific XAML writer settings for <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> can function within specified <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Where settings are not specified, an instance of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;</ph> exists that has default values for a constructed <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, and this instance can be used in merges of settings for a derived class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriterSettings"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriterSettings"&gt;&lt;/xref&gt;</ph> class that is based on the copy of an existing instance.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The settings instance to copy.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;settings&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Gets or sets <ph id="ph1">&lt;xref href="System.Xaml.Permissions.XamlAccessLevel"&gt;&lt;/xref&gt;</ph> permissions that the XAML writer observes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property indicates the expected access level for non-public members, which are accessed in partial trust through a partial-trust tolerant runtime.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Xaml.Permissions.XamlAccessLevel"&gt;&lt;/xref&gt;</ph> permissions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Gets or sets a reference to a callback that is invoked by the XAML writer at the <ph id="ph1">&lt;xref href="System.ComponentModel.ISupportInitialize.BeginInit"&gt;&lt;/xref&gt;</ph> phase of the object lifetime for each created object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A callback that is invoked by the XAML writer at the <ph id="ph1">&lt;xref href="System.ComponentModel.ISupportInitialize.BeginInit"&gt;&lt;/xref&gt;</ph> phase of object lifetime.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Gets or sets a reference to a callback that is invoked by the XAML writer at the <ph id="ph1">&lt;xref href="System.ComponentModel.ISupportInitialize.EndInit"&gt;&lt;/xref&gt;</ph> phase of the object lifetime for each created object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A callback that is invoked by the XAML writer at the <ph id="ph1">&lt;xref href="System.ComponentModel.ISupportInitialize.EndInit"&gt;&lt;/xref&gt;</ph> phase of object lifetime.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Gets or sets a reference to a callback that is invoked by the XAML writer at the post-member-write phase of the object lifetime for each created object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A callback that is invoked by the XAML writer at the post-member-write phase of object lifetime.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets or sets a reference to a callback that is invoked by the XAML writer at the pre-member-write phase of the object lifetime for each created object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A callback that is invoked by the XAML writer at the pre-member-write phase of object lifetime.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets or sets the XAML namescope to use for registering names from the XAML writer if <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specific contexts for a <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> might use an external XAML namescope.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the WPF XAML implementation, XAML writer operations that are initiated by <ph id="ph1">&lt;xref:System.Windows.FrameworkTemplate&gt;</ph> specify a separate XAML namescope.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this WPF scenario, templates should not share a XAML namescope with the root of the XAML page that defines them.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, they should process into a separate, designated XAML namescope.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The XAML namescope to use for registering names.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that specifies whether the XAML writer should ignore (not call) <ph id="ph1">&lt;xref href="System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"&gt;&lt;/xref&gt;</ph> implementations on a <ph id="ph2">&lt;xref href="System.ComponentModel.TypeConverter"&gt;&lt;/xref&gt;</ph> in type-converter situations.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class and its <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A&gt;</ph> method are part of an overall design for type conversion in the CLR.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>In XAML systems, you can typically assume that type-converter input is identifiable by the XAML reader, and for purposes of input, is always a string.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set this property to <ph id="ph1">`true`</ph>, you enable a mode where this assumption is codified in the XAML object writer behavior.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This mode supports a compatibility requirement for previous versions of WPF XAML.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the XAML writer ignores <ph id="ph2">&lt;xref href="System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"&gt;&lt;/xref&gt;</ph> implementations; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that determines whether to disable a default <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph> feature that runs type conversion on the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">K</ph><ept id="p1">&lt;/code&gt;</ept> component of a <ph id="ph3">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> before writing the object graph representation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the <ph id="ph1">`K`</ph> type conversion feature, see Remarks in <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">K</ph><ept id="p1">&lt;/code&gt;</ept> type conversion for a <ph id="ph3">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> object should be disabled.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> if performing <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">K</ph><ept id="p1">&lt;/code&gt;</ept> type conversion for a <ph id="ph3">&lt;xref href="System.Collections.Generic.Dictionary`2"&gt;&lt;/xref&gt;</ph> object applies.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that determines whether name registration should occur against the specified <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriterSettings.ExternalNameScope"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if name registration should occur against the <ph id="ph2">&lt;xref href="System.Xaml.XamlObjectWriterSettings.ExternalNameScope"&gt;&lt;/xref&gt;</ph>; <ph id="ph3">`false`</ph> if name registration should occur into the parent XAML namescope.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets or sets a preexisting root object for <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph> operations.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you set this value, the root object instance is used as an implicit <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> call (with object input that is direct instead of coming from the reader) that precedes the first explicit node-write call by the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any error checking, such as verifying the XAML type of the provided root object, is deferred until that implicit <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> call, instead of being checked when you set this settings property.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A preexisting root object for <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph> operations.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that determines whether the XAML writer omits to check for the code path that checks for duplicate properties.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The specified code path checks the currently assigned properties and throws an exception if a duplicate property set of the named ambient property is attempted.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.IAmbientProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the duplicate property check should be omitted; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the <ph id="ph1">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph> should omit to call <ph id="ph2">`ProvideValue`</ph> on a markup extension, which is relevant when the markup extension represents the root of an object graph.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This setting is used when the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> processes the root node (<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>, or members within the root node).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is relevant for template and defer-load scenarios.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Xaml.XamlObjectWriter"&gt;&lt;/xref&gt;</ph> should omit to call <ph id="ph3">`ProvideValue`</ph> on a markup extension; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Used in the <ph id="ph1">`BeginInitHandler`</ph> in place of the actual <ph id="ph2">`BaseUri`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Used internally to provide the correct info in the handler, while keeping runtime behavior fully compatible.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> to be used in place of the actual <ph id="ph2">`BaseUri`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets or sets the handler to use when the object writer calls into a CLR-implemented <ph id="ph1">`SetValue`</ph> for dependency properties.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event handler is based on the generic <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> delegate that uses the <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs&gt;</ph> event data.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A handler implementation that handles this case.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>