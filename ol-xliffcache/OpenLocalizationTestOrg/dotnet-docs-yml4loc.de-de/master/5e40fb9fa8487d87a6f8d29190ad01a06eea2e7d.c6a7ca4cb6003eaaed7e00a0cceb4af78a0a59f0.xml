{"nodes":[{"content":"Represents an exception handler in a byte array of IL to be passed to a method such as <xref href=\"System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})\"></xref>.","nodes":[{"pos":[0,334],"content":"Represents an exception handler in a byte array of IL to be passed to a method such as <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})\"&gt;&lt;/xref&gt;</ph>.","source":"Represents an exception handler in a byte array of IL to be passed to a method such as <xref href=\"System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})\"></xref>."}],"pos":[1453,1788],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> class with the specified parameters.","nodes":[{"pos":[0,131],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> class with the specified parameters.","source":"Initializes a new instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> class with the specified parameters."}],"pos":[3852,3984],"yaml":true},{"content":"The byte offset of the first instruction protected by this exception handler.","nodes":[{"pos":[0,77],"content":"The byte offset of the first instruction protected by this exception handler.","nodes":[{"content":"The byte offset of the first instruction protected by this exception handler.","pos":[0,77]}]}],"pos":[4278,4356],"yaml":true},{"content":"The number of bytes protected by this exception handler.","nodes":[{"pos":[0,56],"content":"The number of bytes protected by this exception handler.","nodes":[{"content":"The number of bytes protected by this exception handler.","pos":[0,56]}]}],"pos":[4420,4477],"yaml":true},{"content":"The byte offset of the beginning of the filter code. The filter code ends at the first instruction of the handler block. For non-filter exception handlers, specify 0 (zero) for this parameter.","nodes":[{"pos":[0,192],"content":"The byte offset of the beginning of the filter code. The filter code ends at the first instruction of the handler block. For non-filter exception handlers, specify 0 (zero) for this parameter.","nodes":[{"content":"The byte offset of the beginning of the filter code. The filter code ends at the first instruction of the handler block. For non-filter exception handlers, specify 0 (zero) for this parameter.","pos":[0,192],"nodes":[{"content":"The byte offset of the beginning of the filter code.","pos":[0,52]},{"content":"The filter code ends at the first instruction of the handler block.","pos":[53,120]},{"content":"For non-filter exception handlers, specify 0 (zero) for this parameter.","pos":[121,192]}]}]}],"pos":[4544,4737],"yaml":true},{"content":"The byte offset of the first instruction of this exception handler.","nodes":[{"pos":[0,67],"content":"The byte offset of the first instruction of this exception handler.","nodes":[{"content":"The byte offset of the first instruction of this exception handler.","pos":[0,67]}]}],"pos":[4805,4873],"yaml":true},{"content":"The number of bytes in this exception handler.","nodes":[{"pos":[0,46],"content":"The number of bytes in this exception handler.","nodes":[{"content":"The number of bytes in this exception handler.","pos":[0,46]}]}],"pos":[4941,4988],"yaml":true},{"content":"One of the enumeration values that specifies the kind of exception handler.","nodes":[{"pos":[0,75],"content":"One of the enumeration values that specifies the kind of exception handler.","nodes":[{"content":"One of the enumeration values that specifies the kind of exception handler.","pos":[0,75]}]}],"pos":[5083,5159],"yaml":true},{"content":"The token of the exception type handled by this exception handler. If not applicable, specify 0 (zero).","nodes":[{"pos":[0,103],"content":"The token of the exception type handled by this exception handler. If not applicable, specify 0 (zero).","nodes":[{"content":"The token of the exception type handled by this exception handler. If not applicable, specify 0 (zero).","pos":[0,103],"nodes":[{"content":"The token of the exception type handled by this exception handler.","pos":[0,66]},{"content":"If not applicable, specify 0 (zero).","pos":[67,103]}]}]}],"pos":[5232,5336],"yaml":true},{"content":"<code>tryOffset</code>, <code>filterOffset</code>, <code>handlerOffset</code>, <code>tryLength</code>, or <code>handlerLength</code> are negative.","nodes":[{"pos":[0,146],"content":"<ph id=\"ph1\">&lt;code&gt;tryOffset&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;filterOffset&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;handlerOffset&lt;/code&gt;</ph>, <ph id=\"ph4\">&lt;code&gt;tryLength&lt;/code&gt;</ph>, or <ph id=\"ph5\">&lt;code&gt;handlerLength&lt;/code&gt;</ph> are negative.","source":"<code>tryOffset</code>, <code>filterOffset</code>, <code>handlerOffset</code>, <code>tryLength</code>, or <code>handlerLength</code> are negative."}],"pos":[5523,5670],"yaml":true},{"content":"Indicates whether this instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object is equal to a specified object.","nodes":[{"pos":[0,138],"content":"Indicates whether this instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> object is equal to a specified object.","source":"Indicates whether this instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object is equal to a specified object."}],"pos":[6782,6921],"yaml":true},{"content":"The object to compare this instance to.","nodes":[{"pos":[0,39],"content":"The object to compare this instance to.","nodes":[{"content":"The object to compare this instance to.","pos":[0,39]}]}],"pos":[7061,7101],"yaml":true},{"content":"`true` if <code>obj</code> and this instance are equal; otherwise, `false`.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> and this instance are equal; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>obj</code> and this instance are equal; otherwise, `false`."}],"pos":[7159,7237],"yaml":true},{"content":"Indicates whether this instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object is equal to another <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object.","nodes":[{"pos":[0,195],"content":"Indicates whether this instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> object is equal to another <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> object.","source":"Indicates whether this instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object is equal to another <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object."}],"pos":[8534,8730],"yaml":true},{"content":"The exception handler object to compare this instance to.","nodes":[{"pos":[0,57],"content":"The exception handler object to compare this instance to.","nodes":[{"content":"The exception handler object to compare this instance to.","pos":[0,57]}]}],"pos":[8924,8982],"yaml":true},{"content":"`true` if <code>other</code> and this instance are equal; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept> and this instance are equal; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>other</code> and this instance are equal; otherwise, `false`."}],"pos":[9040,9120],"yaml":true},{"content":"Gets the token of the exception type handled by this handler.","nodes":[{"pos":[0,61],"content":"Gets the token of the exception type handled by this handler.","nodes":[{"content":"Gets the token of the exception type handled by this handler.","pos":[0,61]}]}],"pos":[10314,10376],"yaml":true},{"content":"The token of the exception type handled by this handler, or 0 if none exists.","nodes":[{"pos":[0,77],"content":"The token of the exception type handled by this handler, or 0 if none exists.","nodes":[{"content":"The token of the exception type handled by this handler, or 0 if none exists.","pos":[0,77]}]}],"pos":[10494,10572],"yaml":true},{"content":"Gets the byte offset at which the filter code for the exception handler begins.","nodes":[{"pos":[0,79],"content":"Gets the byte offset at which the filter code for the exception handler begins.","nodes":[{"content":"Gets the byte offset at which the filter code for the exception handler begins.","pos":[0,79]}]}],"pos":[11742,11822],"yaml":true},{"content":"The byte offset at which the filter code begins, or 0 if no filter  is present.","nodes":[{"pos":[0,79],"content":"The byte offset at which the filter code begins, or 0 if no filter  is present.","nodes":[{"content":"The byte offset at which the filter code begins, or 0 if no filter  is present.","pos":[0,79]}]}],"pos":[11934,12014],"yaml":true},{"content":"Serves as the default hash function.","nodes":[{"pos":[0,36],"content":"Serves as the default hash function.","nodes":[{"content":"Serves as the default hash function.","pos":[0,36]}]}],"pos":[13176,13213],"yaml":true},{"content":"The hash code for the current object.","nodes":[{"pos":[0,37],"content":"The hash code for the current object.","nodes":[{"content":"The hash code for the current object.","pos":[0,37]}]}],"pos":[13347,13385],"yaml":true},{"content":"Gets the length, in bytes, of the exception handler.","nodes":[{"pos":[0,52],"content":"Gets the length, in bytes, of the exception handler.","nodes":[{"content":"Gets the length, in bytes, of the exception handler.","pos":[0,52]}]}],"pos":[14554,14607],"yaml":true},{"content":"The length, in bytes, of the exception handler.","nodes":[{"pos":[0,47],"content":"The length, in bytes, of the exception handler.","nodes":[{"content":"The length, in bytes, of the exception handler.","pos":[0,47]}]}],"pos":[14720,14768],"yaml":true},{"content":"Gets the byte offset of the first instruction of the exception handler.","nodes":[{"pos":[0,71],"content":"Gets the byte offset of the first instruction of the exception handler.","nodes":[{"content":"Gets the byte offset of the first instruction of the exception handler.","pos":[0,71]}]}],"pos":[15939,16011],"yaml":true},{"content":"The byte offset of the first instruction of the exception handler.","nodes":[{"pos":[0,66],"content":"The byte offset of the first instruction of the exception handler.","nodes":[{"content":"The byte offset of the first instruction of the exception handler.","pos":[0,66]}]}],"pos":[16124,16191],"yaml":true},{"content":"Gets a value that represents the kind of exception handler this object represents.","nodes":[{"pos":[0,82],"content":"Gets a value that represents the kind of exception handler this object represents.","nodes":[{"content":"Gets a value that represents the kind of exception handler this object represents.","pos":[0,82]}]}],"pos":[17308,17391],"yaml":true},{"content":"One of the enumeration values that specifies the kind of exception handler.","nodes":[{"pos":[0,75],"content":"One of the enumeration values that specifies the kind of exception handler.","nodes":[{"content":"One of the enumeration values that specifies the kind of exception handler.","pos":[0,75]}]}],"pos":[17576,17652],"yaml":true},{"content":"Determines whether two specified instances of <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> are equal.","nodes":[{"pos":[0,117],"content":"Determines whether two specified instances of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> are equal.","source":"Determines whether two specified instances of <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> are equal."}],"pos":[19153,19271],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[19522,19551],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[19638,19668],"yaml":true},{"content":"`true` if <code>left</code> and <code>right</code> are equal; otherwise, `false`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are equal; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> and <code>right</code> are equal; otherwise, `false`."}],"pos":[19726,19810],"yaml":true},{"content":"Determines whether two specified instances of <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> are not equal.","nodes":[{"pos":[0,121],"content":"Determines whether two specified instances of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> are not equal.","source":"Determines whether two specified instances of <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> are not equal."}],"pos":[21330,21452],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[21705,21734],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[21821,21851],"yaml":true},{"content":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are not equal; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`."}],"pos":[21909,21997],"yaml":true},{"content":"Gets the length, in bytes, of the code protected by this exception handler.","nodes":[{"pos":[0,75],"content":"Gets the length, in bytes, of the code protected by this exception handler.","nodes":[{"content":"Gets the length, in bytes, of the code protected by this exception handler.","pos":[0,75]}]}],"pos":[23144,23220],"yaml":true},{"content":"The length, in bytes, of the code protected by this exception handler.","nodes":[{"pos":[0,70],"content":"The length, in bytes, of the code protected by this exception handler.","nodes":[{"content":"The length, in bytes, of the code protected by this exception handler.","pos":[0,70]}]}],"pos":[23329,23400],"yaml":true},{"content":"Gets the byte offset at which the code that is protected by this exception handler begins.","nodes":[{"pos":[0,90],"content":"Gets the byte offset at which the code that is protected by this exception handler begins.","nodes":[{"content":"Gets the byte offset at which the code that is protected by this exception handler begins.","pos":[0,90]}]}],"pos":[24543,24634],"yaml":true},{"content":"The byte offset at which the code that is protected by this exception handler begins.","nodes":[{"pos":[0,85],"content":"The byte offset at which the code that is protected by this exception handler begins.","nodes":[{"content":"The byte offset at which the code that is protected by this exception handler begins.","pos":[0,85]}]}],"pos":[24743,24829],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.ExceptionHandler\n  commentId: T:System.Reflection.Emit.ExceptionHandler\n  id: ExceptionHandler\n  children:\n  - System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)\n  - System.Reflection.Emit.ExceptionHandler.Equals(System.Object)\n  - System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)\n  - System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  - System.Reflection.Emit.ExceptionHandler.FilterOffset\n  - System.Reflection.Emit.ExceptionHandler.GetHashCode\n  - System.Reflection.Emit.ExceptionHandler.HandlerLength\n  - System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  - System.Reflection.Emit.ExceptionHandler.Kind\n  - System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  - System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  - System.Reflection.Emit.ExceptionHandler.TryLength\n  - System.Reflection.Emit.ExceptionHandler.TryOffset\n  langs:\n  - csharp\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.Reflection.Emit.ExceptionHandler\n  type: Struct\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Represents an exception handler in a byte array of IL to be passed to a method such as <xref href=\"System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})\"></xref>.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public struct ExceptionHandler : IEquatable<System.Reflection.Emit.ExceptionHandler>\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements:\n  - System.IEquatable{System.Reflection.Emit.ExceptionHandler}\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)\n  commentId: M:System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)'\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: ExceptionHandler(Int32, Int32, Int32, Int32, Int32, ExceptionHandlingClauseOptions, Int32)\n  nameWithType: ExceptionHandler.ExceptionHandler(Int32, Int32, Int32, Int32, Int32, ExceptionHandlingClauseOptions, Int32)\n  fullName: ExceptionHandler.ExceptionHandler(Int32, Int32, Int32, Int32, Int32, ExceptionHandlingClauseOptions, Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> class with the specified parameters.\n  syntax:\n    content: public ExceptionHandler (int tryOffset, int tryLength, int filterOffset, int handlerOffset, int handlerLength, System.Reflection.ExceptionHandlingClauseOptions kind, int exceptionTypeToken);\n    parameters:\n    - id: tryOffset\n      type: System.Int32\n      description: The byte offset of the first instruction protected by this exception handler.\n    - id: tryLength\n      type: System.Int32\n      description: The number of bytes protected by this exception handler.\n    - id: filterOffset\n      type: System.Int32\n      description: The byte offset of the beginning of the filter code. The filter code ends at the first instruction of the handler block. For non-filter exception handlers, specify 0 (zero) for this parameter.\n    - id: handlerOffset\n      type: System.Int32\n      description: The byte offset of the first instruction of this exception handler.\n    - id: handlerLength\n      type: System.Int32\n      description: The number of bytes in this exception handler.\n    - id: kind\n      type: System.Reflection.ExceptionHandlingClauseOptions\n      description: One of the enumeration values that specifies the kind of exception handler.\n    - id: exceptionTypeToken\n      type: System.Int32\n      description: The token of the exception type handled by this exception handler. If not applicable, specify 0 (zero).\n  overload: System.Reflection.Emit.ExceptionHandler.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>tryOffset</code>, <code>filterOffset</code>, <code>handlerOffset</code>, <code>tryLength</code>, or <code>handlerLength</code> are negative.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Object)\n  commentId: M:System.Reflection.Emit.ExceptionHandler.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: ExceptionHandler.Equals(Object)\n  fullName: ExceptionHandler.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Indicates whether this instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object is equal to a specified object.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare this instance to.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> and this instance are equal; otherwise, `false`.'\n  overload: System.Reflection.Emit.ExceptionHandler.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)\n  commentId: M:System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)\n  id: Equals(System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: Equals(ExceptionHandler)\n  nameWithType: ExceptionHandler.Equals(ExceptionHandler)\n  fullName: ExceptionHandler.Equals(ExceptionHandler)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Indicates whether this instance of the <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object is equal to another <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> object.\n  syntax:\n    content: public bool Equals (System.Reflection.Emit.ExceptionHandler other);\n    parameters:\n    - id: other\n      type: System.Reflection.Emit.ExceptionHandler\n      description: The exception handler object to compare this instance to.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>other</code> and this instance are equal; otherwise, `false`.'\n  overload: System.Reflection.Emit.ExceptionHandler.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  commentId: P:System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  id: ExceptionTypeToken\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: ExceptionTypeToken\n  nameWithType: ExceptionHandler.ExceptionTypeToken\n  fullName: ExceptionHandler.ExceptionTypeToken\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the token of the exception type handled by this handler.\n  syntax:\n    content: public int ExceptionTypeToken { get; }\n    return:\n      type: System.Int32\n      description: The token of the exception type handled by this handler, or 0 if none exists.\n  overload: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.FilterOffset\n  commentId: P:System.Reflection.Emit.ExceptionHandler.FilterOffset\n  id: FilterOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: FilterOffset\n  nameWithType: ExceptionHandler.FilterOffset\n  fullName: ExceptionHandler.FilterOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the byte offset at which the filter code for the exception handler begins.\n  syntax:\n    content: public int FilterOffset { get; }\n    return:\n      type: System.Int32\n      description: The byte offset at which the filter code begins, or 0 if no filter  is present.\n  overload: System.Reflection.Emit.ExceptionHandler.FilterOffset*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.GetHashCode\n  commentId: M:System.Reflection.Emit.ExceptionHandler.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: ExceptionHandler.GetHashCode()\n  fullName: ExceptionHandler.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Serves as the default hash function.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code for the current object.\n  overload: System.Reflection.Emit.ExceptionHandler.GetHashCode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerLength\n  commentId: P:System.Reflection.Emit.ExceptionHandler.HandlerLength\n  id: HandlerLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: HandlerLength\n  nameWithType: ExceptionHandler.HandlerLength\n  fullName: ExceptionHandler.HandlerLength\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the length, in bytes, of the exception handler.\n  syntax:\n    content: public int HandlerLength { get; }\n    return:\n      type: System.Int32\n      description: The length, in bytes, of the exception handler.\n  overload: System.Reflection.Emit.ExceptionHandler.HandlerLength*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  commentId: P:System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  id: HandlerOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: HandlerOffset\n  nameWithType: ExceptionHandler.HandlerOffset\n  fullName: ExceptionHandler.HandlerOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the byte offset of the first instruction of the exception handler.\n  syntax:\n    content: public int HandlerOffset { get; }\n    return:\n      type: System.Int32\n      description: The byte offset of the first instruction of the exception handler.\n  overload: System.Reflection.Emit.ExceptionHandler.HandlerOffset*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.Kind\n  commentId: P:System.Reflection.Emit.ExceptionHandler.Kind\n  id: Kind\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: Kind\n  nameWithType: ExceptionHandler.Kind\n  fullName: ExceptionHandler.Kind\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value that represents the kind of exception handler this object represents.\n  syntax:\n    content: public System.Reflection.ExceptionHandlingClauseOptions Kind { get; }\n    return:\n      type: System.Reflection.ExceptionHandlingClauseOptions\n      description: One of the enumeration values that specifies the kind of exception handler.\n  overload: System.Reflection.Emit.ExceptionHandler.Kind*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  commentId: M:System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  id: op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: op_Equality(ExceptionHandler, ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Equality(ExceptionHandler, ExceptionHandler)\n  fullName: ExceptionHandler.op_Equality(ExceptionHandler, ExceptionHandler)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Determines whether two specified instances of <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> are equal.\n  syntax:\n    content: public static bool op_Equality (System.Reflection.Emit.ExceptionHandler left, System.Reflection.Emit.ExceptionHandler right);\n    parameters:\n    - id: left\n      type: System.Reflection.Emit.ExceptionHandler\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.Emit.ExceptionHandler\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> and <code>right</code> are equal; otherwise, `false`.'\n  overload: System.Reflection.Emit.ExceptionHandler.op_Equality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  commentId: M:System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  id: op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: op_Inequality(ExceptionHandler, ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Inequality(ExceptionHandler, ExceptionHandler)\n  fullName: ExceptionHandler.op_Inequality(ExceptionHandler, ExceptionHandler)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Determines whether two specified instances of <xref href=\"System.Reflection.Emit.ExceptionHandler\"></xref> are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Reflection.Emit.ExceptionHandler left, System.Reflection.Emit.ExceptionHandler right);\n    parameters:\n    - id: left\n      type: System.Reflection.Emit.ExceptionHandler\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.Emit.ExceptionHandler\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'\n  overload: System.Reflection.Emit.ExceptionHandler.op_Inequality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.TryLength\n  commentId: P:System.Reflection.Emit.ExceptionHandler.TryLength\n  id: TryLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: TryLength\n  nameWithType: ExceptionHandler.TryLength\n  fullName: ExceptionHandler.TryLength\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the length, in bytes, of the code protected by this exception handler.\n  syntax:\n    content: public int TryLength { get; }\n    return:\n      type: System.Int32\n      description: The length, in bytes, of the code protected by this exception handler.\n  overload: System.Reflection.Emit.ExceptionHandler.TryLength*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.ExceptionHandler.TryOffset\n  commentId: P:System.Reflection.Emit.ExceptionHandler.TryOffset\n  id: TryOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: TryOffset\n  nameWithType: ExceptionHandler.TryOffset\n  fullName: ExceptionHandler.TryOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the byte offset at which the code that is protected by this exception handler begins.\n  syntax:\n    content: public int TryOffset { get; }\n    return:\n      type: System.Int32\n      description: The byte offset at which the code that is protected by this exception handler begins.\n  overload: System.Reflection.Emit.ExceptionHandler.TryOffset*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: ExceptionHandler(Int32, Int32, Int32, Int32, Int32, ExceptionHandlingClauseOptions, Int32)\n  nameWithType: ExceptionHandler.ExceptionHandler(Int32, Int32, Int32, Int32, Int32, ExceptionHandlingClauseOptions, Int32)\n  fullName: ExceptionHandler.ExceptionHandler(Int32, Int32, Int32, Int32, Int32, ExceptionHandlingClauseOptions, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.ExceptionHandlingClauseOptions\n  parent: System.Reflection\n  isExternal: false\n  name: ExceptionHandlingClauseOptions\n  nameWithType: ExceptionHandlingClauseOptions\n  fullName: System.Reflection.ExceptionHandlingClauseOptions\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Object)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: ExceptionHandler.Equals(Object)\n  fullName: ExceptionHandler.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Equals(ExceptionHandler)\n  nameWithType: ExceptionHandler.Equals(ExceptionHandler)\n  fullName: ExceptionHandler.Equals(ExceptionHandler)\n- uid: System.Reflection.Emit.ExceptionHandler\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.Reflection.Emit.ExceptionHandler\n- uid: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: ExceptionTypeToken\n  nameWithType: ExceptionHandler.ExceptionTypeToken\n  fullName: ExceptionHandler.ExceptionTypeToken\n- uid: System.Reflection.Emit.ExceptionHandler.FilterOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: FilterOffset\n  nameWithType: ExceptionHandler.FilterOffset\n  fullName: ExceptionHandler.FilterOffset\n- uid: System.Reflection.Emit.ExceptionHandler.GetHashCode\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ExceptionHandler.GetHashCode()\n  fullName: ExceptionHandler.GetHashCode()\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: HandlerLength\n  nameWithType: ExceptionHandler.HandlerLength\n  fullName: ExceptionHandler.HandlerLength\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: HandlerOffset\n  nameWithType: ExceptionHandler.HandlerOffset\n  fullName: ExceptionHandler.HandlerOffset\n- uid: System.Reflection.Emit.ExceptionHandler.Kind\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Kind\n  nameWithType: ExceptionHandler.Kind\n  fullName: ExceptionHandler.Kind\n- uid: System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: op_Equality(ExceptionHandler, ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Equality(ExceptionHandler, ExceptionHandler)\n  fullName: ExceptionHandler.op_Equality(ExceptionHandler, ExceptionHandler)\n- uid: System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: op_Inequality(ExceptionHandler, ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Inequality(ExceptionHandler, ExceptionHandler)\n  fullName: ExceptionHandler.op_Inequality(ExceptionHandler, ExceptionHandler)\n- uid: System.Reflection.Emit.ExceptionHandler.TryLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: TryLength\n  nameWithType: ExceptionHandler.TryLength\n  fullName: ExceptionHandler.TryLength\n- uid: System.Reflection.Emit.ExceptionHandler.TryOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: TryOffset\n  nameWithType: ExceptionHandler.TryOffset\n  fullName: ExceptionHandler.TryOffset\n- uid: System.Reflection.Emit.ExceptionHandler.#ctor*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler.ExceptionHandler\n  fullName: ExceptionHandler.ExceptionHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.Reflection.Emit.ExceptionHandler.Equals*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Equals\n  nameWithType: ExceptionHandler.Equals\n  fullName: ExceptionHandler.Equals\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: ExceptionTypeToken\n  nameWithType: ExceptionHandler.ExceptionTypeToken\n  fullName: ExceptionHandler.ExceptionTypeToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.Reflection.Emit.ExceptionHandler.FilterOffset*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: FilterOffset\n  nameWithType: ExceptionHandler.FilterOffset\n  fullName: ExceptionHandler.FilterOffset\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.Reflection.Emit.ExceptionHandler.GetHashCode*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: GetHashCode\n  nameWithType: ExceptionHandler.GetHashCode\n  fullName: ExceptionHandler.GetHashCode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerLength*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: HandlerLength\n  nameWithType: ExceptionHandler.HandlerLength\n  fullName: ExceptionHandler.HandlerLength\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerOffset*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: HandlerOffset\n  nameWithType: ExceptionHandler.HandlerOffset\n  fullName: ExceptionHandler.HandlerOffset\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.Reflection.Emit.ExceptionHandler.Kind*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Kind\n  nameWithType: ExceptionHandler.Kind\n  fullName: ExceptionHandler.Kind\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.Reflection.Emit.ExceptionHandler.op_Equality*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: op_Equality\n  nameWithType: ExceptionHandler.op_Equality\n  fullName: ExceptionHandler.op_Equality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.Reflection.Emit.ExceptionHandler.op_Inequality*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: op_Inequality\n  nameWithType: ExceptionHandler.op_Inequality\n  fullName: ExceptionHandler.op_Inequality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.Reflection.Emit.ExceptionHandler.TryLength*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: TryLength\n  nameWithType: ExceptionHandler.TryLength\n  fullName: ExceptionHandler.TryLength\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.Reflection.Emit.ExceptionHandler.TryOffset*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: TryOffset\n  nameWithType: ExceptionHandler.TryOffset\n  fullName: ExceptionHandler.TryOffset\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/ExceptionHandler.xml\n- uid: System.IEquatable`1\n  name: IEquatable<T>\n  nameWithType: IEquatable<T>\n  fullName: System.IEquatable<T>\n- uid: System.IEquatable{System.Reflection.Emit.ExceptionHandler}\n  parent: System\n  isExternal: false\n  name: IEquatable<ExceptionHandler>\n  nameWithType: IEquatable<ExceptionHandler>\n  fullName: System.IEquatable<System.Reflection.Emit.ExceptionHandler>\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.Emit.ExceptionHandler\n    name: ExceptionHandler\n    nameWithType: ExceptionHandler\n    fullName: System.Reflection.Emit.ExceptionHandler\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n"}