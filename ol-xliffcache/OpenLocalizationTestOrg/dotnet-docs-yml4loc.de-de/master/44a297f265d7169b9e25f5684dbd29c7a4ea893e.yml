### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.BackgroundWorker
  commentId: T:System.ComponentModel.BackgroundWorker
  id: BackgroundWorker
  children:
  - System.ComponentModel.BackgroundWorker.#ctor
  - System.ComponentModel.BackgroundWorker.CancelAsync
  - System.ComponentModel.BackgroundWorker.CancellationPending
  - System.ComponentModel.BackgroundWorker.Dispose
  - System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)
  - System.ComponentModel.BackgroundWorker.DoWork
  - System.ComponentModel.BackgroundWorker.IsBusy
  - System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)
  - System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)
  - System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)
  - System.ComponentModel.BackgroundWorker.ProgressChanged
  - System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)
  - System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)
  - System.ComponentModel.BackgroundWorker.RunWorkerAsync
  - System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)
  - System.ComponentModel.BackgroundWorker.RunWorkerCompleted
  - System.ComponentModel.BackgroundWorker.WorkerReportsProgress
  - System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation
  langs:
  - csharp
  name: BackgroundWorker
  nameWithType: BackgroundWorker
  fullName: System.ComponentModel.BackgroundWorker
  type: Class
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Executes an operation on a separate thread.
  remarks: "The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread. Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running. When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution.  \n  \n To execute a time-consuming operation in the background, create a <xref:System.ComponentModel.BackgroundWorker> and listen for events that report the progress of your operation and signal when your operation is finished. You can create the <xref:System.ComponentModel.BackgroundWorker> programmatically or you can drag it onto your form from the **Components** tab of the **Toolbox**. If you create the <xref:System.ComponentModel.BackgroundWorker> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.  \n  \n To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event. Call your time-consuming operation in this event handler. To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>. To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event.  \n  \n> [!NOTE]\n>  You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler. Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events.  \n>   \n>  <xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries. Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>.  \n  \n If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter. Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=fullName> property.  \n  \n For more information about <xref:System.ComponentModel.BackgroundWorker>, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)."
  example:
  - "The following code example demonstrates the basics of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously. The following illustration shows an example of the output.  \n  \n ![BackgroundWorker simple example](~/add/media/backgroundworker-simple.png \"BackgroundWorker simple example\")  \n  \n To try this code, create a Windows Forms application. Add a <xref:System.Windows.Forms.Label> control named `resultLabel` and add two <xref:System.Windows.Forms.Button> controls named `startAsyncButton` and `cancelAsyncButton`. Create <xref:System.Windows.Forms.Control.Click> event handlers for both buttons. From the **Components** tab of the Toolbox, add a <xref:System.ComponentModel.BackgroundWorker> component named `backgroundWorker1`. Create <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handlers for the <xref:System.ComponentModel.BackgroundWorker>. In the code for the form, replace the existing code with the following code.  \n  \n [!code-csharp[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/cs/form1.cs#1)]\n [!code-vb[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/vb/form1.vb#1)]  \n  \n The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously. The following illustration shows an example of the output.  \n  \n ![BackgroundWorker Fibonacci example](~/add/media/backgroundworker-fibonacci.png \"BackgroundWorker Fibonacci example\")  \n  \n The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.  \n  \n [!code-cpp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#1)]\n [!code-csharp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#1)]\n [!code-vb[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#1)]"
  syntax:
    content: 'public class BackgroundWorker : System.ComponentModel.Component'
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.#ctor
  commentId: M:System.ComponentModel.BackgroundWorker.#ctor
  id: '#ctor'
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: BackgroundWorker()
  nameWithType: BackgroundWorker.BackgroundWorker()
  fullName: BackgroundWorker.BackgroundWorker()
  type: Constructor
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Initializes a new instance of the <xref href="System.ComponentModel.BackgroundWorker"></xref> class.
  remarks: This constructor initializes a <xref:System.ComponentModel.BackgroundWorker>.
  syntax:
    content: public BackgroundWorker ();
    parameters: []
  overload: System.ComponentModel.BackgroundWorker.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.CancelAsync
  commentId: M:System.ComponentModel.BackgroundWorker.CancelAsync
  id: CancelAsync
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: CancelAsync()
  nameWithType: BackgroundWorker.CancelAsync()
  fullName: BackgroundWorker.CancelAsync()
  type: Method
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Requests cancellation of a pending background operation.
  remarks: "<xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> submits a request to terminate the pending background operation and sets the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to `true`.  \n  \n When you call <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, your worker method has an opportunity to stop its execution and exit. The worker code should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to see if it has been set to `true`.  \n  \n> [!CAUTION]\n>  Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md)."
  example:
  - "The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to cancel an asynchronous (\"background\") operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \n  \n [!code-cpp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#4)]\n [!code-csharp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#4)]\n [!code-vb[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#4)]"
  syntax:
    content: public void CancelAsync ();
    parameters: []
  overload: System.ComponentModel.BackgroundWorker.CancelAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <xref href="System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation"></xref> is `false`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.CancellationPending
  commentId: P:System.ComponentModel.BackgroundWorker.CancellationPending
  id: CancellationPending
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: CancellationPending
  nameWithType: BackgroundWorker.CancellationPending
  fullName: BackgroundWorker.CancellationPending
  type: Property
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Gets a value indicating whether the application has requested cancellation of a background operation.
  remarks: "If <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> is `true`, then the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method has been called on the <xref:System.ComponentModel.BackgroundWorker>.  \n  \n This property is meant for use by the worker thread, which should periodically check <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> and abort the background operation when it is set to `true`."
  example:
  - "The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to query a <xref:System.ComponentModel.BackgroundWorker> about its cancellation state. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \n  \n [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]\n [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]\n [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]"
  syntax:
    content: >-
      [System.ComponentModel.Browsable(false)]

      public bool CancellationPending { get; }
    return:
      type: System.Boolean
      description: '`true` if the application has requested cancellation of a background operation; otherwise, `false`. The default is `false`.'
  overload: System.ComponentModel.BackgroundWorker.CancellationPending*
  exceptions: []
  attributes:
  - type: System.ComponentModel.BrowsableAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.Dispose
  commentId: M:System.ComponentModel.BackgroundWorker.Dispose
  id: Dispose
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: Dispose()
  nameWithType: BackgroundWorker.Dispose()
  fullName: BackgroundWorker.Dispose()
  type: Method
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.ComponentModel.BackgroundWorker.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)
  commentId: M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: BackgroundWorker.Dispose(Boolean)
  fullName: BackgroundWorker.Dispose(Boolean)
  type: Method
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
  overload: System.ComponentModel.BackgroundWorker.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.DoWork
  commentId: E:System.ComponentModel.BackgroundWorker.DoWork
  id: DoWork
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: DoWork
  nameWithType: BackgroundWorker.DoWork
  fullName: BackgroundWorker.DoWork
  type: Event
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Occurs when <xref href="System.ComponentModel.BackgroundWorker.RunWorkerAsync"></xref> is called.
  remarks: "This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method. This is where you start the operation that performs the potentially time-consuming work.  \n  \n Your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property value and abort the operation if it is `true`. When this occurs, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> to `true`, and the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will be set to `true`.  \n  \n> [!CAUTION]\n>  Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).  \n  \n If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=fullName> property. This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property.  \n  \n If the operation raises an exception that your code does not handle, the <xref:System.ComponentModel.BackgroundWorker> catches the exception and passes it into the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler, where it is exposed as the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName>. If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler where the unhandled exception was raised. If you have more than one <xref:System.ComponentModel.BackgroundWorker>, you should not reference any of them directly, as this would couple your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler to a specific instance of <xref:System.ComponentModel.BackgroundWorker>. Instead, you should access your <xref:System.ComponentModel.BackgroundWorker> by casting the `sender` parameter in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.  \n  \n You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler. Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.DoWork> event to start an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \n  \n [!code-cpp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)]\n [!code-csharp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)]\n [!code-vb[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)]"
  syntax:
    content: public event System.ComponentModel.DoWorkEventHandler DoWork;
    return:
      type: System.ComponentModel.DoWorkEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.IsBusy
  commentId: P:System.ComponentModel.BackgroundWorker.IsBusy
  id: IsBusy
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: IsBusy
  nameWithType: BackgroundWorker.IsBusy
  fullName: BackgroundWorker.IsBusy
  type: Property
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Gets a value indicating whether the <xref href="System.ComponentModel.BackgroundWorker"></xref> is running an asynchronous operation.
  remarks: The <xref:System.ComponentModel.BackgroundWorker> starts an asynchronous operation when you call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.
  example:
  - "The following code example demonstrates how to use the <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> property to wait for completion of a <xref:System.ComponentModel.BackgroundWorker> operation. This code example is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).  \n  \n [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]\n [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]"
  syntax:
    content: >-
      [System.ComponentModel.Browsable(false)]

      public bool IsBusy { get; }
    return:
      type: System.Boolean
      description: '`true`, if the <xref href="System.ComponentModel.BackgroundWorker"></xref> is running an asynchronous operation; otherwise, `false`.'
  overload: System.ComponentModel.BackgroundWorker.IsBusy*
  exceptions: []
  attributes:
  - type: System.ComponentModel.BrowsableAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)
  commentId: M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)
  id: OnDoWork(System.ComponentModel.DoWorkEventArgs)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: OnDoWork(DoWorkEventArgs)
  nameWithType: BackgroundWorker.OnDoWork(DoWorkEventArgs)
  fullName: BackgroundWorker.OnDoWork(DoWorkEventArgs)
  type: Method
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Raises the <xref href="System.ComponentModel.BackgroundWorker.DoWork"></xref> event.
  syntax:
    content: protected virtual void OnDoWork (System.ComponentModel.DoWorkEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.DoWorkEventArgs
      description: An <xref href="System.EventArgs"></xref> that contains the event data.
  overload: System.ComponentModel.BackgroundWorker.OnDoWork*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)
  commentId: M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)
  id: OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: OnProgressChanged(ProgressChangedEventArgs)
  nameWithType: BackgroundWorker.OnProgressChanged(ProgressChangedEventArgs)
  fullName: BackgroundWorker.OnProgressChanged(ProgressChangedEventArgs)
  type: Method
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Raises the <xref href="System.ComponentModel.BackgroundWorker.ProgressChanged"></xref> event.
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method to report the progress of an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.  \n  \n [!code-csharp[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#24)]\n [!code-vb[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#24)]"
  syntax:
    content: protected virtual void OnProgressChanged (System.ComponentModel.ProgressChangedEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.ProgressChangedEventArgs
      description: An <xref href="System.EventArgs"></xref> that contains the event data.
  overload: System.ComponentModel.BackgroundWorker.OnProgressChanged*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)
  commentId: M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)
  id: OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: OnRunWorkerCompleted(RunWorkerCompletedEventArgs)
  nameWithType: BackgroundWorker.OnRunWorkerCompleted(RunWorkerCompletedEventArgs)
  fullName: BackgroundWorker.OnRunWorkerCompleted(RunWorkerCompletedEventArgs)
  type: Method
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Raises the <xref href="System.ComponentModel.BackgroundWorker.RunWorkerCompleted"></xref> event.
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnRunWorkerCompleted (System.ComponentModel.RunWorkerCompletedEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.RunWorkerCompletedEventArgs
      description: An <xref href="System.EventArgs"></xref> that contains the event data.
  overload: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.ProgressChanged
  commentId: E:System.ComponentModel.BackgroundWorker.ProgressChanged
  id: ProgressChanged
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: ProgressChanged
  nameWithType: BackgroundWorker.ProgressChanged
  fullName: BackgroundWorker.ProgressChanged
  type: Event
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Occurs when <xref href="System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"></xref> is called.
  remarks: "This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \n  \n [!code-cpp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#7)]\n [!code-csharp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#7)]\n [!code-vb[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#7)]"
  syntax:
    content: public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged;
    return:
      type: System.ComponentModel.ProgressChangedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)
  commentId: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)
  id: ReportProgress(System.Int32)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: ReportProgress(Int32)
  nameWithType: BackgroundWorker.ReportProgress(Int32)
  fullName: BackgroundWorker.ReportProgress(Int32)
  type: Method
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Raises the <xref href="System.ComponentModel.BackgroundWorker.ProgressChanged"></xref> event.
  remarks: "If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must be `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.  \n  \n It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.  \n  \n The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately. The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>."
  example:
  - "The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \n  \n [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]\n [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]\n [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]"
  syntax:
    content: public void ReportProgress (int percentProgress);
    parameters:
    - id: percentProgress
      type: System.Int32
      description: The percentage, from 0 to 100, of the background operation that is complete.
  overload: System.ComponentModel.BackgroundWorker.ReportProgress*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.ComponentModel.BackgroundWorker.WorkerReportsProgress"></xref> property is set to `false`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)
  commentId: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)
  id: ReportProgress(System.Int32,System.Object)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: ReportProgress(Int32, Object)
  nameWithType: BackgroundWorker.ReportProgress(Int32, Object)
  fullName: BackgroundWorker.ReportProgress(Int32, Object)
  type: Method
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Raises the <xref href="System.ComponentModel.BackgroundWorker.ProgressChanged"></xref> event.
  remarks: "If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.  \n  \n It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed."
  example:
  - "The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <xref:System.Windows.Forms.ToolStripProgressBar> class.  \n  \n [!code-csharp[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/CS/form1.cs#10)]\n [!code-vb[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/VB/form1.vb#10)]"
  syntax:
    content: public void ReportProgress (int percentProgress, object userState);
    parameters:
    - id: percentProgress
      type: System.Int32
      description: The percentage, from 0 to 100, of the background operation that is complete.
    - id: userState
      type: System.Object
      description: The state object passed to <xref href="System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)"></xref>.
  overload: System.ComponentModel.BackgroundWorker.ReportProgress*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.ComponentModel.BackgroundWorker.WorkerReportsProgress"></xref> property is set to `false`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync
  commentId: M:System.ComponentModel.BackgroundWorker.RunWorkerAsync
  id: RunWorkerAsync
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: RunWorkerAsync()
  nameWithType: BackgroundWorker.RunWorkerAsync()
  fullName: BackgroundWorker.RunWorkerAsync()
  type: Method
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Starts execution of a background operation.
  remarks: "The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.  \n  \n If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>."
  example:
  - "The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation. It is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).  \n  \n [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]\n [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]"
  syntax:
    content: public void RunWorkerAsync ();
    parameters: []
  overload: System.ComponentModel.BackgroundWorker.RunWorkerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <xref href="System.ComponentModel.BackgroundWorker.IsBusy"></xref> is `true`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)
  commentId: M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)
  id: RunWorkerAsync(System.Object)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: RunWorkerAsync(Object)
  nameWithType: BackgroundWorker.RunWorkerAsync(Object)
  fullName: BackgroundWorker.RunWorkerAsync(Object)
  type: Method
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Starts execution of a background operation.
  remarks: "The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.  \n  \n If your operation requires a parameter, you can provide it as the `argument` parameter to <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.  \n  \n If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>."
  example:
  - "The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \n  \n [!code-cpp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#3)]\n [!code-csharp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#3)]\n [!code-vb[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#3)]"
  syntax:
    content: public void RunWorkerAsync (object argument);
    parameters:
    - id: argument
      type: System.Object
      description: A parameter for use by the background operation to be executed in the <xref href="System.ComponentModel.BackgroundWorker.DoWork"></xref> event handler.
  overload: System.ComponentModel.BackgroundWorker.RunWorkerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <xref href="System.ComponentModel.BackgroundWorker.IsBusy"></xref> is `true`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.RunWorkerCompleted
  commentId: E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted
  id: RunWorkerCompleted
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: RunWorkerCompleted
  nameWithType: BackgroundWorker.RunWorkerCompleted
  fullName: BackgroundWorker.RunWorkerCompleted
  type: Event
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Occurs when the background operation has completed, has been canceled, or has raised an exception.
  remarks: "This event is raised when the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler returns.  \n  \n If the operation completes successfully and its result is assigned in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can access the result through the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property.  \n  \n The <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> indicates that an exception was thrown by the operation.  \n  \n The <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> indicates whether a cancellation request was processed by the background operation. If your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler detects a cancellation request by checking the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> to `true`, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> also will be set to `true`.  \n  \n> [!CAUTION]\n>  Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).  \n  \n Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=fullName> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=fullName> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property. If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property raises an exception."
  example:
  - "The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event to handle the result of an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \n  \n [!code-cpp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#6)]\n [!code-csharp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#6)]\n [!code-vb[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#6)]"
  syntax:
    content: public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted;
    return:
      type: System.ComponentModel.RunWorkerCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.WorkerReportsProgress
  commentId: P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress
  id: WorkerReportsProgress
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: WorkerReportsProgress
  nameWithType: BackgroundWorker.WorkerReportsProgress
  fullName: BackgroundWorker.WorkerReportsProgress
  type: Property
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Gets or sets a value indicating whether the <xref href="System.ComponentModel.BackgroundWorker"></xref> can report progress updates.
  remarks: Set the <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support progress updates. When this property is `true`, user code can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.
  syntax:
    content: public bool WorkerReportsProgress { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.ComponentModel.BackgroundWorker"></xref> supports progress updates; otherwise `false`. The default is `false`.'
  overload: System.ComponentModel.BackgroundWorker.WorkerReportsProgress*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation
  commentId: P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation
  id: WorkerSupportsCancellation
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  name: WorkerSupportsCancellation
  nameWithType: BackgroundWorker.WorkerSupportsCancellation
  fullName: BackgroundWorker.WorkerSupportsCancellation
  type: Property
  assemblies:
  - System.ComponentModel.EventBasedAsync
  - System
  - netstandard
  namespace: System.ComponentModel
  summary: Gets or sets a value indicating whether the <xref href="System.ComponentModel.BackgroundWorker"></xref> supports asynchronous cancellation.
  remarks: Set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support cancellation. When this property is `true`, you can call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to interrupt a background operation.
  syntax:
    content: public bool WorkerSupportsCancellation { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.ComponentModel.BackgroundWorker"></xref> supports cancellation; otherwise `false`. The default is `false`.'
  overload: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ComponentModel.BackgroundWorker.#ctor
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: BackgroundWorker()
  nameWithType: BackgroundWorker.BackgroundWorker()
  fullName: BackgroundWorker.BackgroundWorker()
- uid: System.ComponentModel.BackgroundWorker.CancelAsync
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: CancelAsync()
  nameWithType: BackgroundWorker.CancelAsync()
  fullName: BackgroundWorker.CancelAsync()
- uid: System.ComponentModel.BackgroundWorker.CancellationPending
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: CancellationPending
  nameWithType: BackgroundWorker.CancellationPending
  fullName: BackgroundWorker.CancellationPending
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.BackgroundWorker.Dispose
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: Dispose()
  nameWithType: BackgroundWorker.Dispose()
  fullName: BackgroundWorker.Dispose()
- uid: System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: BackgroundWorker.Dispose(Boolean)
  fullName: BackgroundWorker.Dispose(Boolean)
- uid: System.ComponentModel.BackgroundWorker.DoWork
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: DoWork
  nameWithType: BackgroundWorker.DoWork
  fullName: BackgroundWorker.DoWork
- uid: System.ComponentModel.DoWorkEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: DoWorkEventHandler
  nameWithType: DoWorkEventHandler
  fullName: System.ComponentModel.DoWorkEventHandler
- uid: System.ComponentModel.BackgroundWorker.IsBusy
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: IsBusy
  nameWithType: BackgroundWorker.IsBusy
  fullName: BackgroundWorker.IsBusy
- uid: System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: OnDoWork(DoWorkEventArgs)
  nameWithType: BackgroundWorker.OnDoWork(DoWorkEventArgs)
  fullName: BackgroundWorker.OnDoWork(DoWorkEventArgs)
- uid: System.ComponentModel.DoWorkEventArgs
  parent: System.ComponentModel
  isExternal: false
  name: DoWorkEventArgs
  nameWithType: DoWorkEventArgs
  fullName: System.ComponentModel.DoWorkEventArgs
- uid: System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: OnProgressChanged(ProgressChangedEventArgs)
  nameWithType: BackgroundWorker.OnProgressChanged(ProgressChangedEventArgs)
  fullName: BackgroundWorker.OnProgressChanged(ProgressChangedEventArgs)
- uid: System.ComponentModel.ProgressChangedEventArgs
  parent: System.ComponentModel
  isExternal: false
  name: ProgressChangedEventArgs
  nameWithType: ProgressChangedEventArgs
  fullName: System.ComponentModel.ProgressChangedEventArgs
- uid: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: OnRunWorkerCompleted(RunWorkerCompletedEventArgs)
  nameWithType: BackgroundWorker.OnRunWorkerCompleted(RunWorkerCompletedEventArgs)
  fullName: BackgroundWorker.OnRunWorkerCompleted(RunWorkerCompletedEventArgs)
- uid: System.ComponentModel.RunWorkerCompletedEventArgs
  parent: System.ComponentModel
  isExternal: false
  name: RunWorkerCompletedEventArgs
  nameWithType: RunWorkerCompletedEventArgs
  fullName: System.ComponentModel.RunWorkerCompletedEventArgs
- uid: System.ComponentModel.BackgroundWorker.ProgressChanged
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: ProgressChanged
  nameWithType: BackgroundWorker.ProgressChanged
  fullName: BackgroundWorker.ProgressChanged
- uid: System.ComponentModel.ProgressChangedEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: ProgressChangedEventHandler
  nameWithType: ProgressChangedEventHandler
  fullName: System.ComponentModel.ProgressChangedEventHandler
- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: ReportProgress(Int32)
  nameWithType: BackgroundWorker.ReportProgress(Int32)
  fullName: BackgroundWorker.ReportProgress(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: ReportProgress(Int32, Object)
  nameWithType: BackgroundWorker.ReportProgress(Int32, Object)
  fullName: BackgroundWorker.ReportProgress(Int32, Object)
- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: RunWorkerAsync()
  nameWithType: BackgroundWorker.RunWorkerAsync()
  fullName: BackgroundWorker.RunWorkerAsync()
- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: RunWorkerAsync(Object)
  nameWithType: BackgroundWorker.RunWorkerAsync(Object)
  fullName: BackgroundWorker.RunWorkerAsync(Object)
- uid: System.ComponentModel.BackgroundWorker.RunWorkerCompleted
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: RunWorkerCompleted
  nameWithType: BackgroundWorker.RunWorkerCompleted
  fullName: BackgroundWorker.RunWorkerCompleted
- uid: System.ComponentModel.RunWorkerCompletedEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: RunWorkerCompletedEventHandler
  nameWithType: RunWorkerCompletedEventHandler
  fullName: System.ComponentModel.RunWorkerCompletedEventHandler
- uid: System.ComponentModel.BackgroundWorker.WorkerReportsProgress
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: WorkerReportsProgress
  nameWithType: BackgroundWorker.WorkerReportsProgress
  fullName: BackgroundWorker.WorkerReportsProgress
- uid: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: WorkerSupportsCancellation
  nameWithType: BackgroundWorker.WorkerSupportsCancellation
  fullName: BackgroundWorker.WorkerSupportsCancellation
- uid: System.ComponentModel.BackgroundWorker.#ctor*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: BackgroundWorker
  nameWithType: BackgroundWorker.BackgroundWorker
  fullName: BackgroundWorker.BackgroundWorker
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.CancelAsync*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: CancelAsync
  nameWithType: BackgroundWorker.CancelAsync
  fullName: BackgroundWorker.CancelAsync
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.CancellationPending*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: CancellationPending
  nameWithType: BackgroundWorker.CancellationPending
  fullName: BackgroundWorker.CancellationPending
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.Dispose*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: Dispose
  nameWithType: BackgroundWorker.Dispose
  fullName: BackgroundWorker.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.IsBusy*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: IsBusy
  nameWithType: BackgroundWorker.IsBusy
  fullName: BackgroundWorker.IsBusy
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.OnDoWork*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: OnDoWork
  nameWithType: BackgroundWorker.OnDoWork
  fullName: BackgroundWorker.OnDoWork
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.OnProgressChanged*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: OnProgressChanged
  nameWithType: BackgroundWorker.OnProgressChanged
  fullName: BackgroundWorker.OnProgressChanged
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: OnRunWorkerCompleted
  nameWithType: BackgroundWorker.OnRunWorkerCompleted
  fullName: BackgroundWorker.OnRunWorkerCompleted
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.ReportProgress*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: ReportProgress
  nameWithType: BackgroundWorker.ReportProgress
  fullName: BackgroundWorker.ReportProgress
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: RunWorkerAsync
  nameWithType: BackgroundWorker.RunWorkerAsync
  fullName: BackgroundWorker.RunWorkerAsync
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.WorkerReportsProgress*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: WorkerReportsProgress
  nameWithType: BackgroundWorker.WorkerReportsProgress
  fullName: BackgroundWorker.WorkerReportsProgress
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation*
  parent: System.ComponentModel.BackgroundWorker
  isExternal: false
  name: WorkerSupportsCancellation
  nameWithType: BackgroundWorker.WorkerSupportsCancellation
  fullName: BackgroundWorker.WorkerSupportsCancellation
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
