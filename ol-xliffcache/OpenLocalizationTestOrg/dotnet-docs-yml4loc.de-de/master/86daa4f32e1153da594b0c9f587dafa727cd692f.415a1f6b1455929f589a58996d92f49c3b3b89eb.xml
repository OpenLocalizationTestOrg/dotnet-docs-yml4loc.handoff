{"nodes":[{"content":"Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.","nodes":[{"pos":[0,137],"content":"Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.","nodes":[{"content":"Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.","pos":[0,137],"nodes":[{"content":"Provides a base class for specifying dynamic behavior at run time.","pos":[0,66]},{"content":"This class must be inherited from; you cannot instantiate it directly.","pos":[67,137]}]}]}],"pos":[1820,1958],"yaml":true},{"content":"The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations. For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.  \n  \n This class can be useful if you want to create a more convenient protocol for a library. For example, if users of your library have to use syntax like `Scriptobj.SetProperty(\"Count\", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.  \n  \n You cannot directly create an instance of the `DynamicObject` class. To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods. For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.  \n  \n In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword. For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).  \n  \n In Visual Basic, dynamic operations are supported by late binding. For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).  \n  \n The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.  \n  \n```csharp  \npublic class SampleDynamicObject : DynamicObject {}  \n//...  \ndynamic sampleObject = new SampleDynamicObject ();  \n```  \n  \n```vb  \nPublic Class SampleDynamicObject   \n    Inherits DynamicObject  \n'...  \nDim sampleObject As Object = New SampleDynamicObject()  \n```  \n  \n You can also add your own members to classes derived from the `DynamicObject` class. If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.  \n  \n The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model. For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function. For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md) and documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site.  \n  \n> [!NOTE]\n>  If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.  \n>   \n>  If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.","nodes":[{"pos":[0,321],"content":"The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations. For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.","nodes":[{"content":"The <ph id=\"ph1\">`DynamicObject`</ph> class enables you to define which operations can be performed on dynamic objects and how to perform those operations.","pos":[0,137],"source":"The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations."},{"content":"For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.","pos":[138,321]}]},{"pos":[328,599],"content":"This class can be useful if you want to create a more convenient protocol for a library. For example, if users of your library have to use syntax like `Scriptobj.SetProperty(\"Count\", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.","nodes":[{"content":"This class can be useful if you want to create a more convenient protocol for a library.","pos":[0,88]},{"content":"For example, if users of your library have to use syntax like <ph id=\"ph1\">`Scriptobj.SetProperty(\"Count\", 1)`</ph>, you can provide the ability to use much simpler syntax, like <ph id=\"ph2\">`scriptobj.Count = 1`</ph>.","pos":[89,271],"source":" For example, if users of your library have to use syntax like `Scriptobj.SetProperty(\"Count\", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`."}]},{"pos":[606,1016],"content":"You cannot directly create an instance of the `DynamicObject` class. To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods. For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.","nodes":[{"content":"You cannot directly create an instance of the <ph id=\"ph1\">`DynamicObject`</ph> class.","pos":[0,68],"source":"You cannot directly create an instance of the `DynamicObject` class."},{"content":"To implement the dynamic behavior, you may want to inherit from the <ph id=\"ph1\">`DynamicObject`</ph> class and override necessary methods.","pos":[69,190],"source":" To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods."},{"content":"For example, if you need only operations for setting and getting properties, you can override just the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Dynamic.DynamicObject.TryGetMember%2A&gt;</ph> methods.","pos":[191,410],"source":" For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods."}]},{"pos":[1023,1266],"content":"In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword. For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).","nodes":[{"content":"In C#, to enable dynamic behavior for instances of classes derived from the <ph id=\"ph1\">`DynamicObject`</ph> class, you must use the <ph id=\"ph2\">`dynamic`</ph> keyword.","pos":[0,134],"source":"In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Type dynamic<ept id=\"p1\">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>.","pos":[135,243],"source":" For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md)."}]},{"pos":[1273,1463],"content":"In Visual Basic, dynamic operations are supported by late binding. For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).","nodes":[{"content":"In Visual Basic, dynamic operations are supported by late binding.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Early and Late Binding<ept id=\"p1\">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>.","pos":[67,190],"source":" For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)."}]},{"pos":[1470,1594],"content":"The following code example demonstrates how to create an instance of a class that is derived from the <ph id=\"ph1\">`DynamicObject`</ph> class.","source":"The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class."},{"pos":[1883,2317],"content":"You can also add your own members to classes derived from the `DynamicObject` class. If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.","nodes":[{"content":"You can also add your own members to classes derived from the <ph id=\"ph1\">`DynamicObject`</ph> class.","pos":[0,84],"source":"You can also add your own members to classes derived from the `DynamicObject` class."},{"content":"If your class defines properties and also overrides the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.","pos":[85,326],"source":" If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class."},{"content":"If there is no such property, the DLR calls the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method.","pos":[327,434],"source":" If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method."}]},{"pos":[2324,2909],"content":"The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model. For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function. For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md) and documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site.","nodes":[{"content":"The <ph id=\"ph1\">`DynamicObject`</ph> class implements the DLR interface <ph id=\"ph2\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, which enables you to share instances of the <ph id=\"ph3\">`DynamicObject`</ph> class between languages that support the DLR interoperability model.","pos":[0,233],"source":"The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model."},{"content":"For example, you can create an instance of the <ph id=\"ph1\">`DynamicObject`</ph> class in C# and then pass it to an IronPython function.","pos":[234,352],"source":" For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Dynamic Language Runtime Overview<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md)</ept> and documentation on the <bpt id=\"p2\">[</bpt>CodePlex<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=141028)</ept> Web site.","pos":[353,585],"source":" For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md) and documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site."}]},{"pos":[2917,3172],"content":"[!NOTE]\n If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.","leadings":["","> "],"nodes":[{"content":"If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <ph id=\"ph1\">&lt;xref:System.Dynamic.ExpandoObject&gt;</ph> class.","pos":[9,253],"source":" If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class."}]},{"pos":[3183,3468],"content":"If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.","nodes":[{"content":"If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <ph id=\"ph1\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph> interface.","pos":[0,285],"source":"If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface."}]}],"pos":[1969,5474],"yaml":true,"extradata":"MT"},{"content":"Enables derived types to initialize a new instance of the <xref href=\"System.Dynamic.DynamicObject\"></xref> type.","nodes":[{"pos":[0,113],"content":"Enables derived types to initialize a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> type.","source":"Enables derived types to initialize a new instance of the <xref href=\"System.Dynamic.DynamicObject\"></xref> type."}],"pos":[8693,8807],"yaml":true},{"content":"You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class. To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.  \n  \n In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword. For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).  \n  \n In Visual Basic, dynamic operations are supported by late binding. For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).","nodes":[{"pos":[0,222],"content":"You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class. To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.","nodes":[{"content":"You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class. To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.","pos":[0,222],"nodes":[{"content":"You cannot directly create an instance of the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.","pos":[0,88],"source":"You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class."},{"content":"To implement dynamic behavior, you have to inherit from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class and override necessary methods.","pos":[89,222],"source":" To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods."}]}]},{"pos":[229,496],"content":"In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword. For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).","nodes":[{"content":"In C#, to enable dynamic behavior for instances of the classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class, you must use the <ph id=\"ph2\">`dynamic`</ph> keyword.","pos":[0,158],"source":"In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Using Type dynamic<ept id=\"p1\">](~/docs/csharp/programming-guide/types/using-type-dynamic.md)</ept>.","pos":[159,267],"source":" For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md)."}]},{"pos":[503,693],"content":"In Visual Basic, dynamic operations are supported by late binding. For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).","nodes":[{"content":"In Visual Basic, dynamic operations are supported by late binding.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Early and Late Binding<ept id=\"p1\">](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)</ept>.","pos":[67,190],"source":" For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724)."}]}],"pos":[8818,9518],"yaml":true,"extradata":"MT"},{"content":"Returns the enumeration of all dynamic member names.","nodes":[{"pos":[0,52],"content":"Returns the enumeration of all dynamic member names.","nodes":[{"content":"Returns the enumeration of all dynamic member names.","pos":[0,52]}]}],"pos":[11380,11433],"yaml":true},{"content":"This method exists for debugging purposes only.","nodes":[{"pos":[0,47],"content":"This method exists for debugging purposes only.","nodes":[{"content":"This method exists for debugging purposes only.","pos":[0,47]}]}],"pos":[11444,11492],"yaml":true,"extradata":"MT"},{"content":"A sequence that contains dynamic member names.","nodes":[{"pos":[0,46],"content":"A sequence that contains dynamic member names.","nodes":[{"content":"A sequence that contains dynamic member names.","pos":[0,46]}]}],"pos":[11719,11766],"yaml":true},{"content":"Provides a <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.","nodes":[{"pos":[0,413],"content":"Provides a <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.","nodes":[{"content":"Provides a <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicMetaObject\"&gt;&lt;/xref&gt;</ph> that dispatches to the dynamic virtual methods.","pos":[0,112],"source":"Provides a <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> that dispatches to the dynamic virtual methods."},{"content":"The object can be encapsulated inside another <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicMetaObject\"&gt;&lt;/xref&gt;</ph> to provide custom behavior for individual actions.","pos":[113,263],"source":" The object can be encapsulated inside another <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> to provide custom behavior for individual actions."},{"content":"This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.","pos":[264,413]}]}],"pos":[13229,13643],"yaml":true},{"content":"The expression that represents <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> to dispatch to the dynamic virtual methods.","nodes":[{"pos":[0,128],"content":"The expression that represents <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicMetaObject\"&gt;&lt;/xref&gt;</ph> to dispatch to the dynamic virtual methods.","source":"The expression that represents <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> to dispatch to the dynamic virtual methods."}],"pos":[13878,14007],"yaml":true},{"content":"An object of the <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> type.","nodes":[{"pos":[0,76],"content":"An object of the <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicMetaObject\"&gt;&lt;/xref&gt;</ph> type.","source":"An object of the <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> type."}],"pos":[14083,14160],"yaml":true},{"content":"Provides implementation for binary operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as addition and multiplication.","nodes":[{"pos":[0,232],"content":"Provides implementation for binary operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as addition and multiplication.","nodes":[{"content":"Provides implementation for binary operations.","pos":[0,46]},{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class can override this method to specify dynamic behavior for operations such as addition and multiplication.","pos":[47,232],"source":" Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as addition and multiplication."}]}],"pos":[15819,16052],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \n  \n This method is called when you have binary operations such as addition or multiplication. For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.  \n  \n You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.  \n  \n If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <xref:System.Linq.Expressions.ExpressionType>, see documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site.  \n  \n|Value|Description|C#|Visual Basic|  \n|-----------|-----------------|---------|------------------|  \n|`Add`|An addition operation without overflow checking, for numeric operands.|`a + b`|`a + b`|  \n|`AddAssign`|An addition compound assignment operation without overflow checking, for numeric operands.|`a += b`|Not supported.|  \n|`And`|A bitwise `AND` operation.|`a & b`|`a And b`|  \n|`AndAssign`|A bitwise `AND` compound assignment operation.|`a &= b`|Not supported.|  \n|`Divide`|An arithmetic division operation.|`a / b`|`a / b`|  \n|`DivideAssign`|An arithmetic division compound assignment operation.|`a /= b`|Not supported.|  \n|`ExclusiveOr`|A bitwise `XOR` operation.|`a ^ b`|`a Xor b`|  \n|`ExclusiveOrAssign`|A bitwise `XOR` compound assignment operation.|`a ^= b`|Not supported.|  \n|`GreaterThan`|A \"greater than\" comparison.|`a > b`|`a > b`|  \n|`GreaterThanOrEqual`|A \"greater than or equal to\" comparison.|`a >= b`|Not supported.|  \n|`LeftShift`|A bitwise left-shift operation.|`a << b`|`a << b`|  \n|`LeftShiftAssign`|A bitwise left-shift compound assignment operation.|`a <<= b`|Not supported.|  \n|`LessThan`|A \"less than\" comparison.|`a < b`|`a < b`|  \n|`LessThanOrEqual`|A \"less than or equal to\" comparison.|`a <= b`|Not supported.|  \n|`Modulo`|An arithmetic remainder operation.|`a % b`|`a Mod b`|  \n|`ModuloAssign`|An arithmetic remainder compound assignment operation.|`a %= b`|Not supported.|  \n|`Multiply`|A multiplication operation without overflow checking, for numeric operands.|`a * b`|`a * b`|  \n|`MultiplyAssign`|A multiplication compound assignment operation without overflow checking, for numeric operands.|`a *= b`|Not supported.|  \n|`NotEqual`|An inequality comparison.|`a != b`|`a <> b`|  \n|`Or`|A bitwise or logical `OR` operation.|`a &#124; b`|`a Or b`|  \n|`OrAssign`|A bitwise or logical `OR` compound assignment.|`a &#124;= b`|Not supported.|  \n|`Power`|A mathematical operation of raising a number to a power.|Not supported.|`a ^ b`|  \n|`RightShift`|A bitwise right-shift operation.|`a >> b`|`a >> b`|  \n|`RightShiftAssign`|A bitwise right-shift compound assignment operation.|`a >>= b`|Not supported.|  \n|`Subtract`|A subtraction operation without overflow checking, for numeric operands.|`a - b`|`a - b`|  \n|`SubtractAssign`|A subtraction compound assignment operation without overflow checking, for numeric operands.|`a -= b`|Not supported.|  \n  \n> [!NOTE]\n>  To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.  \n>   \n>  The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation. The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.  \n>   \n>  The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation. The `And` operation is performed only if the result of the `IsFalse` operation is `false`.","nodes":[{"pos":[0,329],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","pos":[0,329],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how binary operations should be performed for a dynamic object.","pos":[0,166],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object."},{"content":"When the method is not overridden, the run-time binder of the language determines the behavior.","pos":[167,262]},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[263,329]}]}]},{"pos":[336,683],"content":"This method is called when you have binary operations such as addition or multiplication. For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.","nodes":[{"content":"This method is called when you have binary operations such as addition or multiplication.","pos":[0,89]},{"content":"For example, if the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph> method is overridden, it is automatically invoked for statements like <ph id=\"ph2\">`sum = first + second`</ph> or <ph id=\"ph3\">`multiply = first*second`</ph>, where <ph id=\"ph4\">`first`</ph> is derived from the <ph id=\"ph5\">`DynamicObject`</ph> class.","pos":[90,347],"source":" For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class."}]},{"pos":[690,813],"content":"You can get information about the type of the binary operation by using the <ph id=\"ph1\">`Operation`</ph> property of the <ph id=\"ph2\">`binder`</ph> parameter.","source":"You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter."},{"pos":[820,1270],"content":"If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <xref:System.Linq.Expressions.ExpressionType>, see documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site.","nodes":[{"content":"If your dynamic object is used only in C# and Visual Basic, the <ph id=\"ph1\">`binder.Operation`</ph> property can have one of the following values from the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph> enumeration.","pos":[0,196],"source":"If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration."},{"content":"However, in other languages such as IronPython or IronRuby, you can have other values.","pos":[197,283]},{"content":"For more information about <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph>, see documentation on the <bpt id=\"p1\">[</bpt>CodePlex<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141028)</ept> Web site.","pos":[284,450],"source":" For more information about <xref:System.Linq.Expressions.ExpressionType>, see documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site."}]},{"pos":[1277,1282],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[1283,1294],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[1295,1297],"content":"C#","nodes":[{"content":"C#","pos":[0,2]}]},{"pos":[1298,1310],"content":"Visual Basic","nodes":[{"content":"Visual Basic","pos":[0,12]}]},{"pos":[1384,1454],"content":"An addition operation without overflow checking, for numeric operands.","nodes":[{"content":"An addition operation without overflow checking, for numeric operands.","pos":[0,70]}]},{"pos":[1487,1577],"content":"An addition compound assignment operation without overflow checking, for numeric operands.","nodes":[{"content":"An addition compound assignment operation without overflow checking, for numeric operands.","pos":[0,90]}]},{"pos":[1587,1601],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[1612,1638],"content":"A bitwise <ph id=\"ph1\">`AND`</ph> operation.","source":"A bitwise `AND` operation."},{"pos":[1673,1719],"content":"A bitwise <ph id=\"ph1\">`AND`</ph> compound assignment operation.","source":"A bitwise `AND` compound assignment operation."},{"pos":[1729,1743],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[1757,1790],"content":"An arithmetic division operation.","nodes":[{"content":"An arithmetic division operation.","pos":[0,33]}]},{"pos":[1826,1879],"content":"An arithmetic division compound assignment operation.","nodes":[{"content":"An arithmetic division compound assignment operation.","pos":[0,53]}]},{"pos":[1889,1903],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[1922,1948],"content":"A bitwise <ph id=\"ph1\">`XOR`</ph> operation.","source":"A bitwise `XOR` operation."},{"pos":[1991,2037],"content":"A bitwise <ph id=\"ph1\">`XOR`</ph> compound assignment operation.","source":"A bitwise `XOR` compound assignment operation."},{"pos":[2047,2061],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[2080,2108],"content":"A \"greater than\" comparison.","nodes":[{"content":"A \"greater than\" comparison.","pos":[0,28]}]},{"pos":[2150,2190],"content":"A \"greater than or equal to\" comparison.","nodes":[{"content":"A \"greater than or equal to\" comparison.","pos":[0,40]}]},{"pos":[2200,2214],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[2231,2262],"content":"A bitwise left-shift operation.","nodes":[{"content":"A bitwise left-shift operation.","pos":[0,31]}]},{"pos":[2303,2354],"content":"A bitwise left-shift compound assignment operation.","nodes":[{"content":"A bitwise left-shift compound assignment operation.","pos":[0,51]}]},{"pos":[2365,2379],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[2395,2420],"content":"A \"less than\" comparison.","nodes":[{"content":"A \"less than\" comparison.","pos":[0,25]}]},{"pos":[2459,2496],"content":"A \"less than or equal to\" comparison.","nodes":[{"content":"A \"less than or equal to\" comparison.","pos":[0,37]}]},{"pos":[2506,2520],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[2534,2568],"content":"An arithmetic remainder operation.","nodes":[{"content":"An arithmetic remainder operation.","pos":[0,34]}]},{"pos":[2606,2660],"content":"An arithmetic remainder compound assignment operation.","nodes":[{"content":"An arithmetic remainder compound assignment operation.","pos":[0,54]}]},{"pos":[2670,2684],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[2700,2775],"content":"A multiplication operation without overflow checking, for numeric operands.","nodes":[{"content":"A multiplication operation without overflow checking, for numeric operands.","pos":[0,75]}]},{"pos":[2813,2908],"content":"A multiplication compound assignment operation without overflow checking, for numeric operands.","nodes":[{"content":"A multiplication compound assignment operation without overflow checking, for numeric operands.","pos":[0,95]}]},{"pos":[2918,2932],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[2948,2973],"content":"An inequality comparison.","nodes":[{"content":"An inequality comparison.","pos":[0,25]}]},{"pos":[3001,3037],"content":"A bitwise or logical <ph id=\"ph1\">`OR`</ph> operation.","source":"A bitwise or logical `OR` operation."},{"pos":[3075,3121],"content":"A bitwise or logical <ph id=\"ph1\">`OR`</ph> compound assignment.","source":"A bitwise or logical `OR` compound assignment."},{"pos":[3136,3150],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[3163,3219],"content":"A mathematical operation of raising a number to a power.","nodes":[{"content":"A mathematical operation of raising a number to a power.","pos":[0,56]}]},{"pos":[3220,3234],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[3260,3292],"content":"A bitwise right-shift operation.","nodes":[{"content":"A bitwise right-shift operation.","pos":[0,32]}]},{"pos":[3334,3386],"content":"A bitwise right-shift compound assignment operation.","nodes":[{"content":"A bitwise right-shift compound assignment operation.","pos":[0,52]}]},{"pos":[3397,3411],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[3427,3499],"content":"A subtraction operation without overflow checking, for numeric operands.","nodes":[{"content":"A subtraction operation without overflow checking, for numeric operands.","pos":[0,72]}]},{"pos":[3537,3629],"content":"A subtraction compound assignment operation without overflow checking, for numeric operands.","nodes":[{"content":"A subtraction compound assignment operation without overflow checking, for numeric operands.","pos":[0,92]}]},{"pos":[3639,3653],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[3662,3941],"content":"[!NOTE]\n To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.","leadings":["","> "],"nodes":[{"content":"To implement <ph id=\"ph1\">`OrElse`</ph> (<ph id=\"ph2\">`a || b`</ph>) and <ph id=\"ph3\">`AndAlso`</ph> (<ph id=\"ph4\">`a &amp;&amp; b`</ph>) operations for dynamic objects in C#, you may want to implement both the <ph id=\"ph5\">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph> method and the <ph id=\"ph6\">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph> method.","pos":[9,277],"source":" To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method."}]},{"pos":[3952,4135],"content":"The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation. The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.","nodes":[{"content":"The <ph id=\"ph1\">`OrElse`</ph> operation consists of the unary <ph id=\"ph2\">`IsTrue`</ph> operation and the binary <ph id=\"ph3\">`Or`</ph> operation.","pos":[0,94],"source":"The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation."},{"content":"The <ph id=\"ph1\">`Or`</ph> operation is performed only if the result of the <ph id=\"ph2\">`IsTrue`</ph> operation is <ph id=\"ph3\">`false`</ph>.","pos":[95,183],"source":" The `Or` operation is performed only if the result of the `IsTrue` operation is `false`."}]},{"pos":[4146,4334],"content":"The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation. The `And` operation is performed only if the result of the `IsFalse` operation is `false`.","nodes":[{"content":"The <ph id=\"ph1\">`AndAlso`</ph> operation consists of the unary <ph id=\"ph2\">`IsFalse`</ph> operation and the binary <ph id=\"ph3\">`And`</ph> operation.","pos":[0,97],"source":"The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation."},{"content":"The <ph id=\"ph1\">`And`</ph> operation is performed only if the result of the <ph id=\"ph2\">`IsFalse`</ph> operation is <ph id=\"ph3\">`false`</ph>.","pos":[98,188],"source":" The `And` operation is performed only if the result of the `IsFalse` operation is `false`."}]}],"pos":[16063,20450],"yaml":true,"extradata":"MT"},{"content":"Provides information about the binary operation. The <code>binder.Operation</code> property returns an <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> object. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the `DynamicObject` class, <code>binder.Operation</code> returns <code>ExpressionType.Add</code>.","nodes":[{"pos":[0,400],"content":"Provides information about the binary operation. The <code>binder.Operation</code> property returns an <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> object. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the `DynamicObject` class, <code>binder.Operation</code> returns <code>ExpressionType.Add</code>.","nodes":[{"content":"Provides information about the binary operation.","pos":[0,48]},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder.Operation</ph><ept id=\"p1\">&lt;/code&gt;</ept> property returns an <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ExpressionType\"&gt;&lt;/xref&gt;</ph> object.","pos":[49,170],"source":" The <code>binder.Operation</code> property returns an <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> object."},{"content":"For example, for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sum = first + second</ph><ept id=\"p1\">&lt;/code&gt;</ept> statement, where <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">first</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">second</ph><ept id=\"p3\">&lt;/code&gt;</ept> are derived from the <ph id=\"ph4\">`DynamicObject`</ph> class, <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">binder.Operation</ph><ept id=\"p4\">&lt;/code&gt;</ept> returns <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">ExpressionType.Add</ph><ept id=\"p5\">&lt;/code&gt;</ept>.","pos":[171,400],"source":" For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the `DynamicObject` class, <code>binder.Operation</code> returns <code>ExpressionType.Add</code>."}]}],"pos":[21838,22239],"yaml":true},{"content":"The right operand for the binary operation. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the `DynamicObject` class, <code>arg</code> is equal to <code>second</code>.","nodes":[{"pos":[0,252],"content":"The right operand for the binary operation. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the `DynamicObject` class, <code>arg</code> is equal to <code>second</code>.","nodes":[{"content":"The right operand for the binary operation.","pos":[0,43]},{"content":"For example, for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sum = first + second</ph><ept id=\"p1\">&lt;/code&gt;</ept> statement, where <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">first</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">second</ph><ept id=\"p3\">&lt;/code&gt;</ept> are derived from the <ph id=\"ph4\">`DynamicObject`</ph> class, <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">arg</ph><ept id=\"p4\">&lt;/code&gt;</ept> is equal to <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">second</ph><ept id=\"p5\">&lt;/code&gt;</ept>.","pos":[44,252],"source":" For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the `DynamicObject` class, <code>arg</code> is equal to <code>second</code>."}]}],"pos":[22298,22551],"yaml":true},{"content":"The result of the binary operation.","nodes":[{"pos":[0,35],"content":"The result of the binary operation.","nodes":[{"content":"The result of the binary operation.","pos":[0,35]}]}],"pos":[22613,22649],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"pos":[0,218],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[152,218]}]}],"pos":[22707,22928],"yaml":true},{"content":"Provides implementation for type conversion operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.","nodes":[{"pos":[0,253],"content":"Provides implementation for type conversion operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.","nodes":[{"content":"Provides implementation for type conversion operations.","pos":[0,55]},{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.","pos":[56,253],"source":" Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations that convert an object from one type to another."}]}],"pos":[24430,24684],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \n  \n In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.  \n  \n In Visual Basic, only explicit conversion is supported. If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.  \n  \n```csharp  \n// Explicit conversion.  \nString sampleExplicit = (String)sampleObject;  \n// Implicit conversion.  \nString sampleImplicit = sampleObject;  \n```  \n  \n```vb  \n// Explicit conversion - first variant.  \nDim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  \n// Explicit conversion - second variant.  \nDim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  \n```","nodes":[{"pos":[0,329],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","pos":[0,329],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how a type conversion should be performed for a dynamic object.","pos":[0,166],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object."},{"content":"When the method is not overridden, the run-time binder of the language determines the behavior.","pos":[167,262]},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[263,329]}]}]},{"pos":[336,486],"content":"In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.","nodes":[{"content":"In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.","pos":[0,150]}]},{"pos":[493,728],"content":"In Visual Basic, only explicit conversion is supported. If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.","nodes":[{"content":"In Visual Basic, only explicit conversion is supported. If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.","pos":[0,235],"nodes":[{"content":"In Visual Basic, only explicit conversion is supported.","pos":[0,55]},{"content":"If you override this method, you call it by using the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A&gt;</ph> functions.","pos":[56,235],"source":" If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions."}]}]}],"pos":[24695,25833],"yaml":true,"extradata":"MT"},{"content":"Provides information about the conversion operation. The <code>binder.Type</code> property provides the type to which the object must be converted. For example, for the statement <code>(String)sampleObject</code> in C# (<code>CType(sampleObject, Type)</code> in Visual Basic), where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Type</code> returns the <xref href=\"System.String\"></xref> type. The <code>binder.Explicit</code> property provides information about the kind of conversion that occurs. It returns `true` for explicit conversion and `false` for implicit conversion.","nodes":[{"pos":[0,672],"content":"Provides information about the conversion operation. The <code>binder.Type</code> property provides the type to which the object must be converted. For example, for the statement <code>(String)sampleObject</code> in C# (<code>CType(sampleObject, Type)</code> in Visual Basic), where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Type</code> returns the <xref href=\"System.String\"></xref> type. The <code>binder.Explicit</code> property provides information about the kind of conversion that occurs. It returns `true` for explicit conversion and `false` for implicit conversion.","nodes":[{"content":"Provides information about the conversion operation.","pos":[0,52]},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder.Type</ph><ept id=\"p1\">&lt;/code&gt;</ept> property provides the type to which the object must be converted.","pos":[53,147],"source":" The <code>binder.Type</code> property provides the type to which the object must be converted."},{"content":"For example, for the statement <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">(String)sampleObject</ph><ept id=\"p1\">&lt;/code&gt;</ept> in C# (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">CType(sampleObject, Type)</ph><ept id=\"p2\">&lt;/code&gt;</ept> in Visual Basic), where <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">sampleObject</ph><ept id=\"p3\">&lt;/code&gt;</ept> is an instance of the class derived from the <ph id=\"ph4\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class, <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">binder.Type</ph><ept id=\"p4\">&lt;/code&gt;</ept> returns the <ph id=\"ph6\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> type.","pos":[148,488],"source":" For example, for the statement <code>(String)sampleObject</code> in C# (<code>CType(sampleObject, Type)</code> in Visual Basic), where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Type</code> returns the <xref href=\"System.String\"></xref> type."},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder.Explicit</ph><ept id=\"p1\">&lt;/code&gt;</ept> property provides information about the kind of conversion that occurs.","pos":[489,593],"source":" The <code>binder.Explicit</code> property provides information about the kind of conversion that occurs."},{"content":"It returns <ph id=\"ph1\">`true`</ph> for explicit conversion and <ph id=\"ph2\">`false`</ph> for implicit conversion.","pos":[594,672],"source":" It returns `true` for explicit conversion and `false` for implicit conversion."}]}],"pos":[27125,27798],"yaml":true},{"content":"The result of the type conversion operation.","nodes":[{"pos":[0,44],"content":"The result of the type conversion operation.","nodes":[{"content":"The result of the type conversion operation.","pos":[0,44]}]}],"pos":[27860,27905],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"pos":[0,218],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[152,218]}]}],"pos":[27963,28184],"yaml":true},{"content":"Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.","nodes":[{"pos":[0,153],"content":"Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.","nodes":[{"content":"Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.","pos":[0,153],"nodes":[{"content":"Provides the implementation for operations that initialize a new instance of a dynamic object.","pos":[0,94]},{"content":"This method is not intended for use in C# or Visual Basic.","pos":[95,153]}]}]}],"pos":[29840,29994],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \n  \n C# and Visual Basic compilers never emit code to use this method because they do not support first-class types. This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.","nodes":[{"pos":[0,329],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","pos":[0,329],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how a new instance of the dynamic object should be initialized.","pos":[0,166],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized."},{"content":"When the method is not overridden, the run-time binder of the language determines the behavior.","pos":[167,262]},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[263,329]}]}]},{"pos":[336,572],"content":"C# and Visual Basic compilers never emit code to use this method because they do not support first-class types. This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.","nodes":[{"content":"C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.","pos":[0,111]},{"content":"This method is intended for languages that support the initialization of dynamic objects by using syntax like <ph id=\"ph1\">`dynamic new`</ph>.","pos":[112,236],"source":" This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`."}]}],"pos":[30005,30582],"yaml":true,"extradata":"MT"},{"content":"Provides information about the initialization operation.","nodes":[{"pos":[0,56],"content":"Provides information about the initialization operation.","nodes":[{"content":"Provides information about the initialization operation.","pos":[0,56]}]}],"pos":[30823,30880],"yaml":true},{"content":"The arguments that are passed to the object during initialization. For example, for the <code>new SampleType(100)</code> operation, where <code>SampleType</code> is the type derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100.","nodes":[{"pos":[0,285],"content":"The arguments that are passed to the object during initialization. For example, for the <code>new SampleType(100)</code> operation, where <code>SampleType</code> is the type derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100.","nodes":[{"content":"The arguments that are passed to the object during initialization.","pos":[0,66]},{"content":"For example, for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">new SampleType(100)</ph><ept id=\"p1\">&lt;/code&gt;</ept> operation, where <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">SampleType</ph><ept id=\"p2\">&lt;/code&gt;</ept> is the type derived from the <ph id=\"ph3\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">args[0]</ph><ept id=\"p3\">&lt;/code&gt;</ept> is equal to 100.","pos":[67,285],"source":" For example, for the <code>new SampleType(100)</code> operation, where <code>SampleType</code> is the type derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100."}]}],"pos":[30942,31228],"yaml":true},{"content":"The result of the initialization.","nodes":[{"pos":[0,33],"content":"The result of the initialization.","nodes":[{"content":"The result of the initialization.","pos":[0,33]}]}],"pos":[31290,31324],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"pos":[0,218],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[152,218]}]}],"pos":[31382,31603],"yaml":true},{"content":"Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.","nodes":[{"pos":[0,133],"content":"Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.","nodes":[{"content":"Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.","pos":[0,133],"nodes":[{"content":"Provides the implementation for operations that delete an object by index.","pos":[0,74]},{"content":"This method is not intended for use in C# or Visual Basic.","pos":[75,133]}]}]}],"pos":[33161,33295],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \n  \n C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.","nodes":[{"pos":[0,323],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","pos":[0,323],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how a value that has a specified index should be deleted.","pos":[0,160],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted."},{"content":"When the method is not overridden, the run-time binder of the language determines the behavior.","pos":[161,256]},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[257,323]}]}]},{"pos":[330,578],"content":"C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.","nodes":[{"content":"C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.","pos":[0,116]},{"content":"This method is intended for languages that support syntax for deleting objects by index, such as <ph id=\"ph1\">`del sampleObject[1,2]`</ph> in Python.","pos":[117,248],"source":" This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python."}]}],"pos":[33306,33889],"yaml":true,"extradata":"MT"},{"content":"Provides information about the deletion.","nodes":[{"pos":[0,40],"content":"Provides information about the deletion.","nodes":[{"content":"Provides information about the deletion.","pos":[0,40]}]}],"pos":[34105,34146],"yaml":true},{"content":"The indexes to be deleted.","nodes":[{"pos":[0,26],"content":"The indexes to be deleted.","nodes":[{"content":"The indexes to be deleted.","pos":[0,26]}]}],"pos":[34211,34238],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"pos":[0,218],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[152,218]}]}],"pos":[34296,34517],"yaml":true},{"content":"Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.","nodes":[{"pos":[0,131],"content":"Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.","nodes":[{"content":"Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.","pos":[0,131],"nodes":[{"content":"Provides the implementation for operations that delete an object member.","pos":[0,72]},{"content":"This method is not intended for use in C# or Visual Basic.","pos":[73,131]}]}]}],"pos":[35983,36115],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted. When this method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \n  \n C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.","nodes":[{"pos":[0,306],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted. When this method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted. When this method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","pos":[0,306],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how an object member should be deleted.","pos":[0,142],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted."},{"content":"When this method is not overridden, the run-time binder of the language determines the behavior.","pos":[143,239]},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[240,306]}]}]},{"pos":[313,560],"content":"C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.","nodes":[{"content":"C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.","pos":[0,116]},{"content":"This method is intended for languages that support syntax for deleting members, such as <ph id=\"ph1\">`del sampleObject.SampleMember`</ph> in Python.","pos":[117,247],"source":" This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python."}]}],"pos":[36126,36691],"yaml":true,"extradata":"MT"},{"content":"Provides information about the deletion.","nodes":[{"pos":[0,40],"content":"Provides information about the deletion.","nodes":[{"content":"Provides information about the deletion.","pos":[0,40]}]}],"pos":[36892,36933],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"pos":[0,218],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[152,218]}]}],"pos":[36991,37212],"yaml":true},{"content":"Provides the implementation for operations that get a value by index. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for indexing operations.","nodes":[{"pos":[0,228],"content":"Provides the implementation for operations that get a value by index. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for indexing operations.","nodes":[{"content":"Provides the implementation for operations that get a value by index.","pos":[0,69]},{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class can override this method to specify dynamic behavior for indexing operations.","pos":[70,228],"source":" Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for indexing operations."}]}],"pos":[38801,39030],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  \n  \n If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.","nodes":[{"pos":[0,318],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)","pos":[0,318],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how getting a value by index should be performed for a dynamic object.","pos":[0,173],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object."},{"content":"When the method is not overridden, the run-time binder of the language determines the behavior.","pos":[174,269]},{"content":"(In most cases, a run-time exception is thrown.)","pos":[270,318]}]}]},{"pos":[325,560],"content":"If this method is overridden, it is automatically invoked when you have an operation like <ph id=\"ph1\">`sampleObject[3]`</ph> in C# or <ph id=\"ph2\">`sampleObject(3)`</ph> in Visual Basic, where <ph id=\"ph3\">`sampleObject`</ph> is derived from the <ph id=\"ph4\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.","source":"If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class."}],"pos":[39041,39606],"yaml":true,"extradata":"MT"},{"content":"Provides information about the operation.","nodes":[{"pos":[0,41],"content":"Provides information about the operation.","nodes":[{"content":"Provides information about the operation.","pos":[0,41]}]}],"pos":[41088,41130],"yaml":true},{"content":"The indexes that are used in the operation. For example, for the <code>sampleObject[3]</code> operation in C# (<code>sampleObject(3)</code> in Visual Basic), where <code>sampleObject</code> is derived from the `DynamicObject` class, <code>indexes[0]</code> is equal to 3.","nodes":[{"pos":[0,271],"content":"The indexes that are used in the operation. For example, for the <code>sampleObject[3]</code> operation in C# (<code>sampleObject(3)</code> in Visual Basic), where <code>sampleObject</code> is derived from the `DynamicObject` class, <code>indexes[0]</code> is equal to 3.","nodes":[{"content":"The indexes that are used in the operation.","pos":[0,43]},{"content":"For example, for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sampleObject[3]</ph><ept id=\"p1\">&lt;/code&gt;</ept> operation in C# (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">sampleObject(3)</ph><ept id=\"p2\">&lt;/code&gt;</ept> in Visual Basic), where <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">sampleObject</ph><ept id=\"p3\">&lt;/code&gt;</ept> is derived from the <ph id=\"ph4\">`DynamicObject`</ph> class, <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">indexes[0]</ph><ept id=\"p4\">&lt;/code&gt;</ept> is equal to 3.","pos":[44,271],"source":" For example, for the <code>sampleObject[3]</code> operation in C# (<code>sampleObject(3)</code> in Visual Basic), where <code>sampleObject</code> is derived from the `DynamicObject` class, <code>indexes[0]</code> is equal to 3."}]}],"pos":[41195,41467],"yaml":true},{"content":"The result of the index operation.","nodes":[{"pos":[0,34],"content":"The result of the index operation.","nodes":[{"content":"The result of the index operation.","pos":[0,34]}]}],"pos":[41529,41564],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)","nodes":[{"pos":[0,200],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a run-time exception is thrown.)","pos":[152,200]}]}],"pos":[41622,41825],"yaml":true},{"content":"Provides the implementation for operations that get member values. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as getting a value for a property.","nodes":[{"pos":[0,255],"content":"Provides the implementation for operations that get member values. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as getting a value for a property.","nodes":[{"content":"Provides the implementation for operations that get member values.","pos":[0,66]},{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class can override this method to specify dynamic behavior for operations such as getting a value for a property.","pos":[67,255],"source":" Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as getting a value for a property."}]}],"pos":[43344,43600],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  \n  \n This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.  \n  \n You can also add your own members to classes derived from the `DynamicObject` class. If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.","nodes":[{"pos":[0,327],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)","pos":[0,327],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that get member values should be performed for a dynamic object.","pos":[0,182],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object."},{"content":"When the method is not overridden, the run-time binder of the language determines the behavior.","pos":[183,278]},{"content":"(In most cases, a run-time exception is thrown.)","pos":[279,327]}]}]},{"pos":[334,544],"content":"This method is called when you have statements like <ph id=\"ph1\">`Console.WriteLine(sampleObject.SampleProperty)`</ph>, where <ph id=\"ph2\">`sampleObject`</ph> is an instance of the class derived from the <ph id=\"ph3\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.","source":"This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class."},{"pos":[551,985],"content":"You can also add your own members to classes derived from the `DynamicObject` class. If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.","nodes":[{"content":"You can also add your own members to classes derived from the <ph id=\"ph1\">`DynamicObject`</ph> class.","pos":[0,84],"source":"You can also add your own members to classes derived from the `DynamicObject` class."},{"content":"If your class defines properties and also overrides the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.","pos":[85,326],"source":" If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class."},{"content":"If there is no such property, the DLR calls the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method.","pos":[327,434],"source":" If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method."}]}],"pos":[43611,44603],"yaml":true,"extradata":"MT"},{"content":"Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the <code>Console.WriteLine(sampleObject.SampleProperty)</code> statement, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleProperty\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.","nodes":[{"pos":[0,561],"content":"Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the <code>Console.WriteLine(sampleObject.SampleProperty)</code> statement, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleProperty\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.","nodes":[{"content":"Provides information about the object that called the dynamic operation.","pos":[0,72]},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder.Name</ph><ept id=\"p1\">&lt;/code&gt;</ept> property provides the name of the member on which the dynamic operation is performed.","pos":[73,187],"source":" The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed."},{"content":"For example, for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Console.WriteLine(sampleObject.SampleProperty)</ph><ept id=\"p1\">&lt;/code&gt;</ept> statement, where <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">sampleObject</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an instance of the class derived from the <ph id=\"ph3\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">binder.Name</ph><ept id=\"p3\">&lt;/code&gt;</ept> returns \"SampleProperty\".","pos":[188,464],"source":" For example, for the <code>Console.WriteLine(sampleObject.SampleProperty)</code> statement, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleProperty\"."},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder.IgnoreCase</ph><ept id=\"p1\">&lt;/code&gt;</ept> property specifies whether the member name is case-sensitive.","pos":[465,561],"source":" The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive."}]}],"pos":[46111,46673],"yaml":true},{"content":"The result of the get operation. For example, if the method is called for a property, you can assign the property value to <code>result</code>.","nodes":[{"pos":[0,143],"content":"The result of the get operation. For example, if the method is called for a property, you can assign the property value to <code>result</code>.","nodes":[{"content":"The result of the get operation.","pos":[0,32]},{"content":"For example, if the method is called for a property, you can assign the property value to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">result</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[33,143],"source":" For example, if the method is called for a property, you can assign the property value to <code>result</code>."}]}],"pos":[46735,46879],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)","nodes":[{"pos":[0,200],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a run-time exception is thrown.)","pos":[152,200]}]}],"pos":[46937,47140],"yaml":true},{"content":"Provides the implementation for operations that invoke an object. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.","nodes":[{"pos":[0,256],"content":"Provides the implementation for operations that invoke an object. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.","nodes":[{"content":"Provides the implementation for operations that invoke an object.","pos":[0,65]},{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.","pos":[66,256],"source":" Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate."}]}],"pos":[48702,48959],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  \n  \n If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.  \n  \n The operation for invoking an object is supported in C# but not in Visual Basic. The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.","nodes":[{"pos":[0,326],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)","pos":[0,326],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.","pos":[0,181],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object."},{"content":"When the method is not overridden, the run-time binder of the language determines the behavior.","pos":[182,277]},{"content":"(In most cases, a run-time exception is thrown.)","pos":[278,326]}]}]},{"pos":[333,527],"content":"If this method is overridden, it is automatically invoked when you have an operation like <ph id=\"ph1\">`sampleObject(100)`</ph>, where <ph id=\"ph2\">`sampleObject`</ph> is derived from the <ph id=\"ph3\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.","source":"If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class."},{"pos":[534,757],"content":"The operation for invoking an object is supported in C# but not in Visual Basic. The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.","nodes":[{"content":"The operation for invoking an object is supported in C# but not in Visual Basic.","pos":[0,80]},{"content":"The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like <ph id=\"ph1\">`sampleObject(100)`</ph>.","pos":[81,223],"source":" The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`."}]}],"pos":[48970,49734],"yaml":true,"extradata":"MT"},{"content":"Provides information about the invoke operation.","nodes":[{"pos":[0,48],"content":"Provides information about the invoke operation.","nodes":[{"content":"Provides information about the invoke operation.","pos":[0,48]}]}],"pos":[50831,50880],"yaml":true},{"content":"The arguments that are passed to the object during the invoke operation. For example, for the <code>sampleObject(100)</code> operation, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100.","nodes":[{"pos":[0,282],"content":"The arguments that are passed to the object during the invoke operation. For example, for the <code>sampleObject(100)</code> operation, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100.","nodes":[{"content":"The arguments that are passed to the object during the invoke operation.","pos":[0,72]},{"content":"For example, for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sampleObject(100)</ph><ept id=\"p1\">&lt;/code&gt;</ept> operation, where <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">sampleObject</ph><ept id=\"p2\">&lt;/code&gt;</ept> is derived from the <ph id=\"ph3\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">args[0]</ph><ept id=\"p3\">&lt;/code&gt;</ept> is equal to 100.","pos":[73,282],"source":" For example, for the <code>sampleObject(100)</code> operation, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100."}]}],"pos":[50942,51225],"yaml":true},{"content":"The result of the object invocation.","nodes":[{"pos":[0,36],"content":"The result of the object invocation.","nodes":[{"content":"The result of the object invocation.","pos":[0,36]}]}],"pos":[51287,51324],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.","nodes":[{"pos":[0,217],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.","pos":[152,217]}]}],"pos":[51382,51602],"yaml":true},{"content":"Provides the implementation for operations that invoke a member. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as calling a method.","nodes":[{"pos":[0,239],"content":"Provides the implementation for operations that invoke a member. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as calling a method.","nodes":[{"content":"Provides the implementation for operations that invoke a member.","pos":[0,64]},{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class can override this method to specify dynamic behavior for operations such as calling a method.","pos":[65,239],"source":" Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as calling a method."}]}],"pos":[53233,53473],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \n  \n If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.  \n  \n You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class. For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class. If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.  \n  \n This method does not support `ref` and `out` parameters. All parameters in the `args` array are passed by value.","nodes":[{"pos":[0,351],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","pos":[0,351],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.","pos":[0,188],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object."},{"content":"When the method is not overridden, the run-time binder of the language determines the behavior.","pos":[189,284]},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[285,351]}]}]},{"pos":[358,548],"content":"If this method is overridden, it is automatically invoked when you perform an operation like <ph id=\"ph1\">`sampleObject.SampleMethod(100)`</ph>, where <ph id=\"ph2\">`sampleObject`</ph> is derived from the <ph id=\"ph3\">`DynamicObject`</ph> class.","source":"If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class."},{"pos":[555,985],"content":"You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class. For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class. If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.","nodes":[{"content":"You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class. For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class. If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.","pos":[0,430],"nodes":[{"content":"You can also add your own methods to classes that are derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.","pos":[0,113],"source":"You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class."},{"content":"For example, if you override the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.","pos":[114,315],"source":" For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class."},{"content":"If it does not find the method, it uses the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject.TryInvokeMember%2A&gt;</ph> implementation.","pos":[316,430],"source":" If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation."}]}]},{"pos":[992,1104],"content":"This method does not support `ref` and `out` parameters. All parameters in the `args` array are passed by value.","nodes":[{"content":"This method does not support <ph id=\"ph1\">`ref`</ph> and <ph id=\"ph2\">`out`</ph> parameters.","pos":[0,56],"source":"This method does not support `ref` and `out` parameters."},{"content":"All parameters in the <ph id=\"ph1\">`args`</ph> array are passed by value.","pos":[57,112],"source":" All parameters in the `args` array are passed by value."}]}],"pos":[53484,54597],"yaml":true,"extradata":"MT"},{"content":"Provides information about the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleMethod\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.","nodes":[{"pos":[0,520],"content":"Provides information about the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleMethod\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.","nodes":[{"content":"Provides information about the dynamic operation.","pos":[0,49]},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder.Name</ph><ept id=\"p1\">&lt;/code&gt;</ept> property provides the name of the member on which the dynamic operation is performed.","pos":[50,164],"source":" The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed."},{"content":"For example, for the statement <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sampleObject.SampleMethod(100)</ph><ept id=\"p1\">&lt;/code&gt;</ept>, where <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">sampleObject</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an instance of the class derived from the <ph id=\"ph3\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">binder.Name</ph><ept id=\"p3\">&lt;/code&gt;</ept> returns \"SampleMethod\".","pos":[165,423],"source":" For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleMethod\"."},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder.IgnoreCase</ph><ept id=\"p1\">&lt;/code&gt;</ept> property specifies whether the member name is case-sensitive.","pos":[424,520],"source":" The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive."}]}],"pos":[56243,56764],"yaml":true},{"content":"The arguments that are passed to the object member during the invoke operation. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100.","nodes":[{"pos":[0,302],"content":"The arguments that are passed to the object member during the invoke operation. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100.","nodes":[{"content":"The arguments that are passed to the object member during the invoke operation.","pos":[0,79]},{"content":"For example, for the statement <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sampleObject.SampleMethod(100)</ph><ept id=\"p1\">&lt;/code&gt;</ept>, where <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">sampleObject</ph><ept id=\"p2\">&lt;/code&gt;</ept> is derived from the <ph id=\"ph3\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">args[0]</ph><ept id=\"p3\">&lt;/code&gt;</ept> is equal to 100.","pos":[80,302],"source":" For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100."}]}],"pos":[56826,57129],"yaml":true},{"content":"The result of the member invocation.","nodes":[{"pos":[0,36],"content":"The result of the member invocation.","nodes":[{"content":"The result of the member invocation.","pos":[0,36]}]}],"pos":[57191,57228],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"pos":[0,218],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[152,218]}]}],"pos":[57286,57507],"yaml":true},{"content":"Provides the implementation for operations that set a value by index. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations that access objects by a specified index.","nodes":[{"pos":[0,260],"content":"Provides the implementation for operations that set a value by index. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations that access objects by a specified index.","nodes":[{"content":"Provides the implementation for operations that set a value by index.","pos":[0,69]},{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class can override this method to specify dynamic behavior for operations that access objects by a specified index.","pos":[70,260],"source":" Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations that access objects by a specified index."}]}],"pos":[59093,59354],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \n  \n If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.","nodes":[{"pos":[0,353],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","pos":[0,353],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.","pos":[0,190],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object."},{"content":"When the method is not overridden, the run-time binder of the language determines the behavior.","pos":[191,286]},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[287,353]}]}]},{"pos":[360,605],"content":"If this method is overridden, it is automatically invoked when you have an operation like <ph id=\"ph1\">`sampleObject[3] = 10`</ph> in C# or <ph id=\"ph2\">`sampleObject(3) = 10`</ph> in Visual Basic, where <ph id=\"ph3\">`sampleObject`</ph> is derived from the <ph id=\"ph4\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.","source":"If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class."}],"pos":[59365,59975],"yaml":true,"extradata":"MT"},{"content":"Provides information about the operation.","nodes":[{"pos":[0,41],"content":"Provides information about the operation.","nodes":[{"content":"Provides information about the operation.","pos":[0,41]}]}],"pos":[61452,61494],"yaml":true},{"content":"The indexes that are used in the operation. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>indexes[0]</code> is equal to 3.","nodes":[{"pos":[0,315],"content":"The indexes that are used in the operation. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>indexes[0]</code> is equal to 3.","nodes":[{"content":"The indexes that are used in the operation.","pos":[0,43]},{"content":"For example, for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sampleObject[3] = 10</ph><ept id=\"p1\">&lt;/code&gt;</ept> operation in C# (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">sampleObject(3) = 10</ph><ept id=\"p2\">&lt;/code&gt;</ept> in Visual Basic), where <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">sampleObject</ph><ept id=\"p3\">&lt;/code&gt;</ept> is derived from the <ph id=\"ph4\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class, <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">indexes[0]</ph><ept id=\"p4\">&lt;/code&gt;</ept> is equal to 3.","pos":[44,315],"source":" For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>indexes[0]</code> is equal to 3."}]}],"pos":[61559,61875],"yaml":true},{"content":"The value to set to the object that has the specified index. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>value</code> is equal to 10.","nodes":[{"pos":[0,328],"content":"The value to set to the object that has the specified index. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>value</code> is equal to 10.","nodes":[{"content":"The value to set to the object that has the specified index.","pos":[0,60]},{"content":"For example, for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sampleObject[3] = 10</ph><ept id=\"p1\">&lt;/code&gt;</ept> operation in C# (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">sampleObject(3) = 10</ph><ept id=\"p2\">&lt;/code&gt;</ept> in Visual Basic), where <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">sampleObject</ph><ept id=\"p3\">&lt;/code&gt;</ept> is derived from the <ph id=\"ph4\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class, <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">value</ph><ept id=\"p4\">&lt;/code&gt;</ept> is equal to 10.","pos":[61,328],"source":" For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>value</code> is equal to 10."}]}],"pos":[61936,62265],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.","nodes":[{"pos":[0,217],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.","pos":[152,217]}]}],"pos":[62323,62543],"yaml":true},{"content":"Provides the implementation for operations that set member values. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as setting a value for a property.","nodes":[{"pos":[0,255],"content":"Provides the implementation for operations that set member values. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as setting a value for a property.","nodes":[{"content":"Provides the implementation for operations that set member values.","pos":[0,66]},{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class can override this method to specify dynamic behavior for operations such as setting a value for a property.","pos":[67,255],"source":" Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as setting a value for a property."}]}],"pos":[64059,64315],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \n  \n This method is called when you have statements like `sampleObject.SampleProperty = \"Test\"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.  \n  \n You can also add your own members to classes derived from the `DynamicObject` class. If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.","nodes":[{"pos":[0,351],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","pos":[0,351],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.","pos":[0,188],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object."},{"content":"When the method is not overridden, the run-time binder of the language determines the behavior.","pos":[189,284]},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[285,351]}]}]},{"pos":[358,566],"content":"This method is called when you have statements like <ph id=\"ph1\">`sampleObject.SampleProperty = \"Test\"`</ph>, where <ph id=\"ph2\">`sampleObject`</ph> is an instance of the class that is derived from the <ph id=\"ph3\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.","source":"This method is called when you have statements like `sampleObject.SampleProperty = \"Test\"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class."},{"pos":[573,1007],"content":"You can also add your own members to classes derived from the `DynamicObject` class. If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.","nodes":[{"content":"You can also add your own members to classes derived from the <ph id=\"ph1\">`DynamicObject`</ph> class.","pos":[0,84],"source":"You can also add your own members to classes derived from the `DynamicObject` class."},{"content":"If your class defines properties and also overrides the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.","pos":[85,326],"source":" If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class."},{"content":"If there is no such property, the DLR calls the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject.TrySetMember%2A&gt;</ph> method.","pos":[327,434],"source":" If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method."}]}],"pos":[64326,65342],"yaml":true,"extradata":"MT"},{"content":"Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member to which the value is being assigned. For example, for the statement <code>sampleObject.SampleProperty = \"Test\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleProperty\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.","nodes":[{"pos":[0,544],"content":"Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member to which the value is being assigned. For example, for the statement <code>sampleObject.SampleProperty = \"Test\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleProperty\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.","nodes":[{"content":"Provides information about the object that called the dynamic operation.","pos":[0,72]},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder.Name</ph><ept id=\"p1\">&lt;/code&gt;</ept> property provides the name of the member to which the value is being assigned.","pos":[73,180],"source":" The <code>binder.Name</code> property provides the name of the member to which the value is being assigned."},{"content":"For example, for the statement <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sampleObject.SampleProperty = \"Test\"</ph><ept id=\"p1\">&lt;/code&gt;</ept>, where <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">sampleObject</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an instance of the class derived from the <ph id=\"ph3\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">binder.Name</ph><ept id=\"p3\">&lt;/code&gt;</ept> returns \"SampleProperty\".","pos":[181,447],"source":" For example, for the statement <code>sampleObject.SampleProperty = \"Test\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleProperty\"."},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder.IgnoreCase</ph><ept id=\"p1\">&lt;/code&gt;</ept> property specifies whether the member name is case-sensitive.","pos":[448,544],"source":" The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive."}]}],"pos":[66845,67390],"yaml":true},{"content":"The value to set to the member. For example, for <code>sampleObject.SampleProperty = \"Test\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, the <code>value</code> is \"Test\".","nodes":[{"pos":[0,267],"content":"The value to set to the member. For example, for <code>sampleObject.SampleProperty = \"Test\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, the <code>value</code> is \"Test\".","nodes":[{"content":"The value to set to the member.","pos":[0,31]},{"content":"For example, for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">sampleObject.SampleProperty = \"Test\"</ph><ept id=\"p1\">&lt;/code&gt;</ept>, where <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">sampleObject</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an instance of the class derived from the <ph id=\"ph3\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class, the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> is \"Test\".","pos":[32,267],"source":" For example, for <code>sampleObject.SampleProperty = \"Test\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, the <code>value</code> is \"Test\"."}]}],"pos":[67451,67719],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"pos":[0,218],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[152,218]}]}],"pos":[67777,67998],"yaml":true},{"content":"Provides implementation for unary operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.","nodes":[{"pos":[0,237],"content":"Provides implementation for unary operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.","nodes":[{"content":"Provides implementation for unary operations.","pos":[0,45]},{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref href=\"System.Dynamic.DynamicObject\"&gt;&lt;/xref&gt;</ph> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.","pos":[46,237],"source":" Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement."}]}],"pos":[69578,69816],"yaml":true},{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \n  \n This method is called when you have unary operations such as negation, increment, or decrement. For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.  \n  \n You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.  \n  \n If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <xref:System.Linq.Expressions.ExpressionType>, see documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site.  \n  \n|Value|Description|C#|Visual Basic|  \n|-----------|-----------------|---------|------------------|  \n|`Decrement`|A unary decrement operation.|`a--`|Not supported.|  \n|`Increment`|A unary increment operation.|`a++`|Not supported.|  \n|`Negate`|An arithmetic negation.|`-a`|`-a`|  \n|`Not`|A logical negation.|`!a`|`Not a`|  \n|`OnesComplement`|A ones complement.|`~a`|Not supported.|  \n|`IsFalse`|A false condition value.|`a && b`|Not supported.|  \n|`IsTrue`|A true condition value.|`a &#124;&#124; b`|Not supported.|  \n|`UnaryPlus`|A unary plus.|`+a`|`+a`|  \n  \n> [!NOTE]\n>  To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.  \n>   \n>  The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation. The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.  \n>   \n>  The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation. The `And` operation is performed only if the result of the `IsFalse` operation is `false`.","nodes":[{"pos":[0,328],"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","pos":[0,328],"nodes":[{"content":"Classes derived from the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class can override this method to specify how unary operations should be performed for a dynamic object.","pos":[0,165],"source":"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object."},{"content":"When the method is not overridden, the run-time binder of the language determines the behavior.","pos":[166,261]},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[262,328]}]}]},{"pos":[335,692],"content":"This method is called when you have unary operations such as negation, increment, or decrement. For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.","nodes":[{"content":"This method is called when you have unary operations such as negation, increment, or decrement.","pos":[0,95]},{"content":"For example, if the <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph> method is overridden, this method is automatically invoked for statements like <ph id=\"ph2\">`negativeNumber = -number`</ph>, where <ph id=\"ph3\">`number`</ph> is derived from the <ph id=\"ph4\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph> class.","pos":[96,357],"source":" For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class."}]},{"pos":[699,821],"content":"You can get information about the type of the unary operation by using the <ph id=\"ph1\">`Operation`</ph> property of the <ph id=\"ph2\">`binder`</ph> parameter.","source":"You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter."},{"pos":[828,1278],"content":"If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <xref:System.Linq.Expressions.ExpressionType>, see documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site.","nodes":[{"content":"If your dynamic object is used only in C# and Visual Basic, the <ph id=\"ph1\">`binder.Operation`</ph> property can have one of the following values from the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph> enumeration.","pos":[0,196],"source":"If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration."},{"content":"However, in other languages such as IronPython or IronRuby, you can have other values.","pos":[197,283]},{"content":"For more information about <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType&gt;</ph>, see documentation on the <bpt id=\"p1\">[</bpt>CodePlex<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=141028)</ept> Web site.","pos":[284,450],"source":" For more information about <xref:System.Linq.Expressions.ExpressionType>, see documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site."}]},{"pos":[1285,1290],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[1291,1302],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[1303,1305],"content":"C#","nodes":[{"content":"C#","pos":[0,2]}]},{"pos":[1306,1318],"content":"Visual Basic","nodes":[{"content":"Visual Basic","pos":[0,12]}]},{"pos":[1398,1426],"content":"A unary decrement operation.","nodes":[{"content":"A unary decrement operation.","pos":[0,28]}]},{"pos":[1433,1447],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[1464,1492],"content":"A unary increment operation.","nodes":[{"content":"A unary increment operation.","pos":[0,28]}]},{"pos":[1499,1513],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[1527,1550],"content":"An arithmetic negation.","nodes":[{"content":"An arithmetic negation.","pos":[0,23]}]},{"pos":[1571,1590],"content":"A logical negation.","nodes":[{"content":"A logical negation.","pos":[0,19]}]},{"pos":[1625,1643],"content":"A ones complement.","nodes":[{"content":"A ones complement.","pos":[0,18]}]},{"pos":[1649,1663],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[1678,1702],"content":"A false condition value.","nodes":[{"content":"A false condition value.","pos":[0,24]}]},{"pos":[1712,1726],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[1740,1763],"content":"A true condition value.","nodes":[{"content":"A true condition value.","pos":[0,23]}]},{"pos":[1783,1797],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]},{"pos":[1814,1827],"content":"A unary plus.","nodes":[{"content":"A unary plus.","pos":[0,13]}]},{"pos":[1846,2125],"content":"[!NOTE]\n To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.","leadings":["","> "],"nodes":[{"content":"To implement <ph id=\"ph1\">`OrElse`</ph> (<ph id=\"ph2\">`a || b`</ph>) and <ph id=\"ph3\">`AndAlso`</ph> (<ph id=\"ph4\">`a &amp;&amp; b`</ph>) operations for dynamic objects in C#, you may want to implement both the <ph id=\"ph5\">&lt;xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A&gt;</ph> method and the <ph id=\"ph6\">&lt;xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A&gt;</ph> method.","pos":[9,277],"source":" To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method."}]},{"pos":[2136,2319],"content":"The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation. The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.","nodes":[{"content":"The <ph id=\"ph1\">`OrElse`</ph> operation consists of the unary <ph id=\"ph2\">`IsTrue`</ph> operation and the binary <ph id=\"ph3\">`Or`</ph> operation.","pos":[0,94],"source":"The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation."},{"content":"The <ph id=\"ph1\">`Or`</ph> operation is performed only if the result of the <ph id=\"ph2\">`IsTrue`</ph> operation is <ph id=\"ph3\">`false`</ph>.","pos":[95,183],"source":" The `Or` operation is performed only if the result of the `IsTrue` operation is `false`."}]},{"pos":[2330,2518],"content":"The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation. The `And` operation is performed only if the result of the `IsFalse` operation is `false`.","nodes":[{"content":"The <ph id=\"ph1\">`AndAlso`</ph> operation consists of the unary <ph id=\"ph2\">`IsFalse`</ph> operation and the binary <ph id=\"ph3\">`And`</ph> operation.","pos":[0,97],"source":"The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation."},{"content":"The <ph id=\"ph1\">`And`</ph> operation is performed only if the result of the <ph id=\"ph2\">`IsFalse`</ph> operation is <ph id=\"ph3\">`false`</ph>.","pos":[98,188],"source":" The `And` operation is performed only if the result of the `IsFalse` operation is `false`."}]}],"pos":[69827,72372],"yaml":true,"extradata":"MT"},{"content":"Provides information about the unary operation. The <code>binder.Operation</code> property returns an <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> object. For example, for the <code>negativeNumber = -number</code> statement, where <code>number</code> is derived from the `DynamicObject` class, <code>binder.Operation</code> returns \"Negate\".","nodes":[{"pos":[0,356],"content":"Provides information about the unary operation. The <code>binder.Operation</code> property returns an <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> object. For example, for the <code>negativeNumber = -number</code> statement, where <code>number</code> is derived from the `DynamicObject` class, <code>binder.Operation</code> returns \"Negate\".","nodes":[{"content":"Provides information about the unary operation.","pos":[0,47]},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder.Operation</ph><ept id=\"p1\">&lt;/code&gt;</ept> property returns an <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ExpressionType\"&gt;&lt;/xref&gt;</ph> object.","pos":[48,169],"source":" The <code>binder.Operation</code> property returns an <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> object."},{"content":"For example, for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">negativeNumber = -number</ph><ept id=\"p1\">&lt;/code&gt;</ept> statement, where <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">number</ph><ept id=\"p2\">&lt;/code&gt;</ept> is derived from the <ph id=\"ph3\">`DynamicObject`</ph> class, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">binder.Operation</ph><ept id=\"p3\">&lt;/code&gt;</ept> returns \"Negate\".","pos":[170,356],"source":" For example, for the <code>negativeNumber = -number</code> statement, where <code>number</code> is derived from the `DynamicObject` class, <code>binder.Operation</code> returns \"Negate\"."}]}],"pos":[73708,74065],"yaml":true},{"content":"The result of the unary operation.","nodes":[{"pos":[0,34],"content":"The result of the unary operation.","nodes":[{"content":"The result of the unary operation.","pos":[0,34]}]}],"pos":[74127,74162],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"pos":[0,218],"content":"`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` if the operation is successful; otherwise, `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, the run-time binder of the language determines the behavior.","pos":[59,151],"source":" If this method returns `false`, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)","pos":[152,218]}]}],"pos":[74220,74441],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Dynamic.DynamicObject\n  commentId: T:System.Dynamic.DynamicObject\n  id: DynamicObject\n  children:\n  - System.Dynamic.DynamicObject.#ctor\n  - System.Dynamic.DynamicObject.GetDynamicMemberNames\n  - System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)\n  - System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\n  - System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)\n  - System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)\n  - System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])\n  - System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)\n  - System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)\n  - System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\n  - System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)\n  - System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\n  - System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)\n  - System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\n  - System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\n  langs:\n  - csharp\n  name: DynamicObject\n  nameWithType: DynamicObject\n  fullName: System.Dynamic.DynamicObject\n  type: Class\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.\n  remarks: \"The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations. For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.  \\n  \\n This class can be useful if you want to create a more convenient protocol for a library. For example, if users of your library have to use syntax like `Scriptobj.SetProperty(\\\"Count\\\", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.  \\n  \\n You cannot directly create an instance of the `DynamicObject` class. To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods. For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.  \\n  \\n In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword. For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).  \\n  \\n In Visual Basic, dynamic operations are supported by late binding. For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).  \\n  \\n The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.  \\n  \\n```csharp  \\npublic class SampleDynamicObject : DynamicObject {}  \\n//...  \\ndynamic sampleObject = new SampleDynamicObject ();  \\n```  \\n  \\n```vb  \\nPublic Class SampleDynamicObject   \\n    Inherits DynamicObject  \\n'...  \\nDim sampleObject As Object = New SampleDynamicObject()  \\n```  \\n  \\n You can also add your own members to classes derived from the `DynamicObject` class. If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.  \\n  \\n The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model. For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function. For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md) and documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site.  \\n  \\n> [!NOTE]\\n>  If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.  \\n>   \\n>  If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.\"\n  example:\n  - \"Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary[\\\"Text\\\"] = \\\"Sample text\\\"` (`sampleDictionary(\\\"Text\\\") = \\\"Sample text\\\"` in Visual Basic), you can write `sampleDictionary.Text = \\\"Sample text\\\"`. Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.  \\n  \\n The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class. The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax. It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.  \\n  \\n [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]\\n [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  \\n  \\n For more examples, see [Creating Wrappers with DynamicObject](http://go.microsoft.com/fwlink/?LinkId=169008) on the C# Frequently Asked Questions blog.\"\n  syntax:\n    content: 'public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider'\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Windows.Interop.DynamicScriptObject\n  implements:\n  - System.Dynamic.IDynamicMetaObjectProvider\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.#ctor\n  commentId: M:System.Dynamic.DynamicObject.#ctor\n  id: '#ctor'\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: DynamicObject()\n  nameWithType: DynamicObject.DynamicObject()\n  fullName: DynamicObject.DynamicObject()\n  type: Constructor\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Enables derived types to initialize a new instance of the <xref href=\"System.Dynamic.DynamicObject\"></xref> type.\n  remarks: \"You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class. To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.  \\n  \\n In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword. For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).  \\n  \\n In Visual Basic, dynamic operations are supported by late binding. For more information, see [Early and Late Binding](http://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).\"\n  example:\n  - \"The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.  \\n  \\n```csharp  \\npublic class SampleDynamicObject : DynamicObject {}  \\n//...  \\ndynamic sampleObject = new SampleDynamicObject ();  \\n```  \\n  \\n```vb  \\nPublic Class SampleDynamicObject   \\n    Inherits DynamicObject  \\n'...  \\nDim sampleObject As Object = New SampleDynamicObject()  \\n```\"\n  syntax:\n    content: protected DynamicObject ();\n    parameters: []\n  overload: System.Dynamic.DynamicObject.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: douge\n- uid: System.Dynamic.DynamicObject.GetDynamicMemberNames\n  commentId: M:System.Dynamic.DynamicObject.GetDynamicMemberNames\n  id: GetDynamicMemberNames\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: GetDynamicMemberNames()\n  nameWithType: DynamicObject.GetDynamicMemberNames()\n  fullName: DynamicObject.GetDynamicMemberNames()\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Returns the enumeration of all dynamic member names.\n  remarks: This method exists for debugging purposes only.\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<string> GetDynamicMemberNames ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: A sequence that contains dynamic member names.\n  overload: System.Dynamic.DynamicObject.GetDynamicMemberNames*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)\n  commentId: M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)\n  id: GetMetaObject(System.Linq.Expressions.Expression)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: GetMetaObject(Expression)\n  nameWithType: DynamicObject.GetMetaObject(Expression)\n  fullName: DynamicObject.GetMetaObject(Expression)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides a <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.\n  syntax:\n    content: public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);\n    parameters:\n    - id: parameter\n      type: System.Linq.Expressions.Expression\n      description: The expression that represents <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> to dispatch to the dynamic virtual methods.\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: An object of the <xref href=\"System.Dynamic.DynamicMetaObject\"></xref> type.\n  overload: System.Dynamic.DynamicObject.GetMetaObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\n  id: TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TryBinaryOperation(BinaryOperationBinder, Object, Object)\n  nameWithType: DynamicObject.TryBinaryOperation(BinaryOperationBinder, Object, Object)\n  fullName: DynamicObject.TryBinaryOperation(BinaryOperationBinder, Object, Object)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides implementation for binary operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as addition and multiplication.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \\n  \\n This method is called when you have binary operations such as addition or multiplication. For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.  \\n  \\n You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.  \\n  \\n If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <xref:System.Linq.Expressions.ExpressionType>, see documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site.  \\n  \\n|Value|Description|C#|Visual Basic|  \\n|-----------|-----------------|---------|------------------|  \\n|`Add`|An addition operation without overflow checking, for numeric operands.|`a + b`|`a + b`|  \\n|`AddAssign`|An addition compound assignment operation without overflow checking, for numeric operands.|`a += b`|Not supported.|  \\n|`And`|A bitwise `AND` operation.|`a & b`|`a And b`|  \\n|`AndAssign`|A bitwise `AND` compound assignment operation.|`a &= b`|Not supported.|  \\n|`Divide`|An arithmetic division operation.|`a / b`|`a / b`|  \\n|`DivideAssign`|An arithmetic division compound assignment operation.|`a /= b`|Not supported.|  \\n|`ExclusiveOr`|A bitwise `XOR` operation.|`a ^ b`|`a Xor b`|  \\n|`ExclusiveOrAssign`|A bitwise `XOR` compound assignment operation.|`a ^= b`|Not supported.|  \\n|`GreaterThan`|A \\\"greater than\\\" comparison.|`a > b`|`a > b`|  \\n|`GreaterThanOrEqual`|A \\\"greater than or equal to\\\" comparison.|`a >= b`|Not supported.|  \\n|`LeftShift`|A bitwise left-shift operation.|`a << b`|`a << b`|  \\n|`LeftShiftAssign`|A bitwise left-shift compound assignment operation.|`a <<= b`|Not supported.|  \\n|`LessThan`|A \\\"less than\\\" comparison.|`a < b`|`a < b`|  \\n|`LessThanOrEqual`|A \\\"less than or equal to\\\" comparison.|`a <= b`|Not supported.|  \\n|`Modulo`|An arithmetic remainder operation.|`a % b`|`a Mod b`|  \\n|`ModuloAssign`|An arithmetic remainder compound assignment operation.|`a %= b`|Not supported.|  \\n|`Multiply`|A multiplication operation without overflow checking, for numeric operands.|`a * b`|`a * b`|  \\n|`MultiplyAssign`|A multiplication compound assignment operation without overflow checking, for numeric operands.|`a *= b`|Not supported.|  \\n|`NotEqual`|An inequality comparison.|`a != b`|`a <> b`|  \\n|`Or`|A bitwise or logical `OR` operation.|`a &#124; b`|`a Or b`|  \\n|`OrAssign`|A bitwise or logical `OR` compound assignment.|`a &#124;= b`|Not supported.|  \\n|`Power`|A mathematical operation of raising a number to a power.|Not supported.|`a ^ b`|  \\n|`RightShift`|A bitwise right-shift operation.|`a >> b`|`a >> b`|  \\n|`RightShiftAssign`|A bitwise right-shift compound assignment operation.|`a >>= b`|Not supported.|  \\n|`Subtract`|A subtraction operation without overflow checking, for numeric operands.|`a - b`|`a - b`|  \\n|`SubtractAssign`|A subtraction compound assignment operation without overflow checking, for numeric operands.|`a -= b`|Not supported.|  \\n  \\n> [!NOTE]\\n>  To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.  \\n>   \\n>  The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation. The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.  \\n>   \\n>  The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation. The `And` operation is performed only if the result of the `IsFalse` operation is `false`.\"\n  example:\n  - \"Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.  \\n  \\n The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class. `DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations. It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.  \\n  \\n In this example, only addition and subtraction operations are supported. If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.  \\n  \\n [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]\\n [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]\"\n  syntax:\n    content: public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);\n    parameters:\n    - id: binder\n      type: System.Dynamic.BinaryOperationBinder\n      description: Provides information about the binary operation. The <code>binder.Operation</code> property returns an <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> object. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the `DynamicObject` class, <code>binder.Operation</code> returns <code>ExpressionType.Add</code>.\n    - id: arg\n      type: System.Object\n      description: The right operand for the binary operation. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the `DynamicObject` class, <code>arg</code> is equal to <code>second</code>.\n    - id: result\n      type: System.Object\n      description: The result of the binary operation.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)'\n  overload: System.Dynamic.DynamicObject.TryBinaryOperation*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)\n  id: TryConvert(System.Dynamic.ConvertBinder,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TryConvert(ConvertBinder, Object)\n  nameWithType: DynamicObject.TryConvert(ConvertBinder, Object)\n  fullName: DynamicObject.TryConvert(ConvertBinder, Object)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides implementation for type conversion operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \\n  \\n In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.  \\n  \\n In Visual Basic, only explicit conversion is supported. If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.  \\n  \\n```csharp  \\n// Explicit conversion.  \\nString sampleExplicit = (String)sampleObject;  \\n// Implicit conversion.  \\nString sampleImplicit = sampleObject;  \\n```  \\n  \\n```vb  \\n// Explicit conversion - first variant.  \\nDim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  \\n// Explicit conversion - second variant.  \\nDim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  \\n```\"\n  example:\n  - \"Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.  \\n  \\n The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class. `DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion. It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.  \\n  \\n In this example, only conversion to strings and integers is supported. If you try to convert an object to any other type, a run-time exception is thrown.  \\n  \\n [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]\\n [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]\"\n  syntax:\n    content: public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);\n    parameters:\n    - id: binder\n      type: System.Dynamic.ConvertBinder\n      description: Provides information about the conversion operation. The <code>binder.Type</code> property provides the type to which the object must be converted. For example, for the statement <code>(String)sampleObject</code> in C# (<code>CType(sampleObject, Type)</code> in Visual Basic), where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Type</code> returns the <xref href=\"System.String\"></xref> type. The <code>binder.Explicit</code> property provides information about the kind of conversion that occurs. It returns `true` for explicit conversion and `false` for implicit conversion.\n    - id: result\n      type: System.Object\n      description: The result of the type conversion operation.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)'\n  overload: System.Dynamic.DynamicObject.TryConvert*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)\n  id: TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TryCreateInstance(CreateInstanceBinder, Object[], Object)\n  nameWithType: DynamicObject.TryCreateInstance(CreateInstanceBinder, Object[], Object)\n  fullName: DynamicObject.TryCreateInstance(CreateInstanceBinder, Object[], Object)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \\n  \\n C# and Visual Basic compilers never emit code to use this method because they do not support first-class types. This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.\"\n  syntax:\n    content: public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);\n    parameters:\n    - id: binder\n      type: System.Dynamic.CreateInstanceBinder\n      description: Provides information about the initialization operation.\n    - id: args\n      type: System.Object[]\n      description: The arguments that are passed to the object during initialization. For example, for the <code>new SampleType(100)</code> operation, where <code>SampleType</code> is the type derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100.\n    - id: result\n      type: System.Object\n      description: The result of the initialization.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)'\n  overload: System.Dynamic.DynamicObject.TryCreateInstance*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])\n  commentId: M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])\n  id: TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TryDeleteIndex(DeleteIndexBinder, Object[])\n  nameWithType: DynamicObject.TryDeleteIndex(DeleteIndexBinder, Object[])\n  fullName: DynamicObject.TryDeleteIndex(DeleteIndexBinder, Object[])\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \\n  \\n C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.\"\n  syntax:\n    content: public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);\n    parameters:\n    - id: binder\n      type: System.Dynamic.DeleteIndexBinder\n      description: Provides information about the deletion.\n    - id: indexes\n      type: System.Object[]\n      description: The indexes to be deleted.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)'\n  overload: System.Dynamic.DynamicObject.TryDeleteIndex*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: douge\n- uid: System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)\n  commentId: M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)\n  id: TryDeleteMember(System.Dynamic.DeleteMemberBinder)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TryDeleteMember(DeleteMemberBinder)\n  nameWithType: DynamicObject.TryDeleteMember(DeleteMemberBinder)\n  fullName: DynamicObject.TryDeleteMember(DeleteMemberBinder)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted. When this method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \\n  \\n C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.\"\n  syntax:\n    content: public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);\n    parameters:\n    - id: binder\n      type: System.Dynamic.DeleteMemberBinder\n      description: Provides information about the deletion.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)'\n  overload: System.Dynamic.DynamicObject.TryDeleteMember*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)\n  id: TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TryGetIndex(GetIndexBinder, Object[], Object)\n  nameWithType: DynamicObject.TryGetIndex(GetIndexBinder, Object[], Object)\n  fullName: DynamicObject.TryGetIndex(GetIndexBinder, Object[], Object)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides the implementation for operations that get a value by index. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for indexing operations.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  \\n  \\n If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.\"\n  example:\n  - \"Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.  \\n  \\n The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class. The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs. `SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index. It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.  \\n  \\n [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]\\n [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]\"\n  syntax:\n    content: public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);\n    parameters:\n    - id: binder\n      type: System.Dynamic.GetIndexBinder\n      description: Provides information about the operation.\n    - id: indexes\n      type: System.Object[]\n      description: The indexes that are used in the operation. For example, for the <code>sampleObject[3]</code> operation in C# (<code>sampleObject(3)</code> in Visual Basic), where <code>sampleObject</code> is derived from the `DynamicObject` class, <code>indexes[0]</code> is equal to 3.\n    - id: result\n      type: System.Object\n      description: The result of the index operation.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)'\n  overload: System.Dynamic.DynamicObject.TryGetIndex*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\n  id: TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TryGetMember(GetMemberBinder, Object)\n  nameWithType: DynamicObject.TryGetMember(GetMemberBinder, Object)\n  fullName: DynamicObject.TryGetMember(GetMemberBinder, Object)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides the implementation for operations that get member values. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as getting a value for a property.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  \\n  \\n This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.  \\n  \\n You can also add your own members to classes derived from the `DynamicObject` class. If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.\"\n  example:\n  - \"Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary[\\\"Text\\\"] = \\\"Sample text\\\"` (`sampleDictionary(\\\"Text\\\") = \\\"Sample text\\\"` in Visual Basic), you can write `sampleDictionary.Text = \\\"Sample text\\\"`. Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.  \\n  \\n The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class. The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax. It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.  \\n  \\n [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]\\n [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]\"\n  syntax:\n    content: public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);\n    parameters:\n    - id: binder\n      type: System.Dynamic.GetMemberBinder\n      description: Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the <code>Console.WriteLine(sampleObject.SampleProperty)</code> statement, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleProperty\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.\n    - id: result\n      type: System.Object\n      description: The result of the get operation. For example, if the method is called for a property, you can assign the property value to <code>result</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)'\n  overload: System.Dynamic.DynamicObject.TryGetMember*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)\n  id: TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TryInvoke(InvokeBinder, Object[], Object)\n  nameWithType: DynamicObject.TryInvoke(InvokeBinder, Object[], Object)\n  fullName: DynamicObject.TryInvoke(InvokeBinder, Object[], Object)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides the implementation for operations that invoke an object. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)  \\n  \\n If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.  \\n  \\n The operation for invoking an object is supported in C# but not in Visual Basic. The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.\"\n  example:\n  - \"Assume that you need a data structure to store textual and numeric representations of numbers. You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.  \\n  \\n The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class. `DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time. It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.  \\n  \\n [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]\"\n  syntax:\n    content: public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);\n    parameters:\n    - id: binder\n      type: System.Dynamic.InvokeBinder\n      description: Provides information about the invoke operation.\n    - id: args\n      type: System.Object[]\n      description: The arguments that are passed to the object during the invoke operation. For example, for the <code>sampleObject(100)</code> operation, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100.\n    - id: result\n      type: System.Object\n      description: The result of the object invocation.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.'\n  overload: System.Dynamic.DynamicObject.TryInvoke*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\n  id: TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TryInvokeMember(InvokeMemberBinder, Object[], Object)\n  nameWithType: DynamicObject.TryInvokeMember(InvokeMemberBinder, Object[], Object)\n  fullName: DynamicObject.TryInvokeMember(InvokeMemberBinder, Object[], Object)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides the implementation for operations that invoke a member. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as calling a method.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \\n  \\n If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.  \\n  \\n You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class. For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class. If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.  \\n  \\n This method does not support `ref` and `out` parameters. All parameters in the `args` array are passed by value.\"\n  example:\n  - \"Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary[\\\"Text\\\"] = \\\"Sample text\\\"` (`sampleDictionary(\\\"Text\\\") = \\\"Sample text\\\"` in Visual Basic), you can write `sampleDictionary.Text = \\\"Sample text\\\"`. Also, you want to be able to call all the standard dictionary methods on this dictionary.  \\n  \\n The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class. The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs. It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax. It also provides a `Print` method, which prints out all dictionary keys and values.  \\n  \\n [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]\\n [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]\"\n  syntax:\n    content: public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);\n    parameters:\n    - id: binder\n      type: System.Dynamic.InvokeMemberBinder\n      description: Provides information about the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleMethod\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.\n    - id: args\n      type: System.Object[]\n      description: The arguments that are passed to the object member during the invoke operation. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>args[0]</code> is equal to 100.\n    - id: result\n      type: System.Object\n      description: The result of the member invocation.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)'\n  overload: System.Dynamic.DynamicObject.TryInvokeMember*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)\n  commentId: M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)\n  id: TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TrySetIndex(SetIndexBinder, Object[], Object)\n  nameWithType: DynamicObject.TrySetIndex(SetIndexBinder, Object[], Object)\n  fullName: DynamicObject.TrySetIndex(SetIndexBinder, Object[], Object)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides the implementation for operations that set a value by index. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations that access objects by a specified index.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \\n  \\n If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.\"\n  example:\n  - \"Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.  \\n  \\n The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class. The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs. `SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index. It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.  \\n  \\n [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]\\n [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]\"\n  syntax:\n    content: public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);\n    parameters:\n    - id: binder\n      type: System.Dynamic.SetIndexBinder\n      description: Provides information about the operation.\n    - id: indexes\n      type: System.Object[]\n      description: The indexes that are used in the operation. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>indexes[0]</code> is equal to 3.\n    - id: value\n      type: System.Object\n      description: The value to set to the object that has the specified index. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>value</code> is equal to 10.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.'\n  overload: System.Dynamic.DynamicObject.TrySetIndex*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\n  commentId: M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\n  id: TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TrySetMember(SetMemberBinder, Object)\n  nameWithType: DynamicObject.TrySetMember(SetMemberBinder, Object)\n  fullName: DynamicObject.TrySetMember(SetMemberBinder, Object)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides the implementation for operations that set member values. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as setting a value for a property.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \\n  \\n This method is called when you have statements like `sampleObject.SampleProperty = \\\"Test\\\"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.  \\n  \\n You can also add your own members to classes derived from the `DynamicObject` class. If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.\"\n  example:\n  - \"Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary[\\\"Text\\\"] = \\\"Sample text\\\"` (`sampleDictionary(\\\"Text\\\") = \\\"Sample text\\\"` in Visual Basic), you can write `sampleDictionary.Text = \\\"Sample text\\\"`. Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.  \\n  \\n The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class. The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax. It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.  \\n  \\n [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]\\n [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]\"\n  syntax:\n    content: public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);\n    parameters:\n    - id: binder\n      type: System.Dynamic.SetMemberBinder\n      description: Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member to which the value is being assigned. For example, for the statement <code>sampleObject.SampleProperty = \"Test\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, <code>binder.Name</code> returns \"SampleProperty\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.\n    - id: value\n      type: System.Object\n      description: The value to set to the member. For example, for <code>sampleObject.SampleProperty = \"Test\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class, the <code>value</code> is \"Test\".\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)'\n  overload: System.Dynamic.DynamicObject.TrySetMember*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\n  id: TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  name: TryUnaryOperation(UnaryOperationBinder, Object)\n  nameWithType: DynamicObject.TryUnaryOperation(UnaryOperationBinder, Object)\n  fullName: DynamicObject.TryUnaryOperation(UnaryOperationBinder, Object)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Dynamic\n  summary: Provides implementation for unary operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\"></xref> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.\n  remarks: \"Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)  \\n  \\n This method is called when you have unary operations such as negation, increment, or decrement. For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.  \\n  \\n You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.  \\n  \\n If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <xref:System.Linq.Expressions.ExpressionType>, see documentation on the [CodePlex](http://go.microsoft.com/fwlink/?LinkId=141028) Web site.  \\n  \\n|Value|Description|C#|Visual Basic|  \\n|-----------|-----------------|---------|------------------|  \\n|`Decrement`|A unary decrement operation.|`a--`|Not supported.|  \\n|`Increment`|A unary increment operation.|`a++`|Not supported.|  \\n|`Negate`|An arithmetic negation.|`-a`|`-a`|  \\n|`Not`|A logical negation.|`!a`|`Not a`|  \\n|`OnesComplement`|A ones complement.|`~a`|Not supported.|  \\n|`IsFalse`|A false condition value.|`a && b`|Not supported.|  \\n|`IsTrue`|A true condition value.|`a &#124;&#124; b`|Not supported.|  \\n|`UnaryPlus`|A unary plus.|`+a`|`+a`|  \\n  \\n> [!NOTE]\\n>  To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.  \\n>   \\n>  The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation. The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.  \\n>   \\n>  The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation. The `And` operation is performed only if the result of the `IsFalse` operation is `false`.\"\n  example:\n  - \"Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.  \\n  \\n The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class. `DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation. Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.  \\n  \\n In this example, only the mathematical negation operation is supported. If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.  \\n  \\n [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]\\n [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]\"\n  syntax:\n    content: public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);\n    parameters:\n    - id: binder\n      type: System.Dynamic.UnaryOperationBinder\n      description: Provides information about the unary operation. The <code>binder.Operation</code> property returns an <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> object. For example, for the <code>negativeNumber = -number</code> statement, where <code>number</code> is derived from the `DynamicObject` class, <code>binder.Operation</code> returns \"Negate\".\n    - id: result\n      type: System.Object\n      description: The result of the unary operation.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`. If this method returns `false`, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)'\n  overload: System.Dynamic.DynamicObject.TryUnaryOperation*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Dynamic.DynamicObject.#ctor\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: DynamicObject()\n  nameWithType: DynamicObject.DynamicObject()\n  fullName: DynamicObject.DynamicObject()\n- uid: System.Dynamic.DynamicObject.GetDynamicMemberNames\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: GetDynamicMemberNames()\n  nameWithType: DynamicObject.GetDynamicMemberNames()\n  fullName: DynamicObject.GetDynamicMemberNames()\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.String\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Generic.IEnumerable{System.String}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<String>\n  nameWithType: IEnumerable<String>\n  fullName: System.Collections.Generic.IEnumerable<System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: GetMetaObject(Expression)\n  nameWithType: DynamicObject.GetMetaObject(Expression)\n  fullName: DynamicObject.GetMetaObject(Expression)\n- uid: System.Dynamic.DynamicMetaObject\n  parent: System.Dynamic\n  isExternal: false\n  name: DynamicMetaObject\n  nameWithType: DynamicMetaObject\n  fullName: System.Dynamic.DynamicMetaObject\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryBinaryOperation(BinaryOperationBinder, Object, Object)\n  nameWithType: DynamicObject.TryBinaryOperation(BinaryOperationBinder, Object, Object)\n  fullName: DynamicObject.TryBinaryOperation(BinaryOperationBinder, Object, Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Dynamic.BinaryOperationBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: BinaryOperationBinder\n  nameWithType: BinaryOperationBinder\n  fullName: System.Dynamic.BinaryOperationBinder\n- uid: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryConvert(ConvertBinder, Object)\n  nameWithType: DynamicObject.TryConvert(ConvertBinder, Object)\n  fullName: DynamicObject.TryConvert(ConvertBinder, Object)\n- uid: System.Dynamic.ConvertBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: ConvertBinder\n  nameWithType: ConvertBinder\n  fullName: System.Dynamic.ConvertBinder\n- uid: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryCreateInstance(CreateInstanceBinder, Object[], Object)\n  nameWithType: DynamicObject.TryCreateInstance(CreateInstanceBinder, Object[], Object)\n  fullName: DynamicObject.TryCreateInstance(CreateInstanceBinder, Object[], Object)\n- uid: System.Dynamic.CreateInstanceBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: CreateInstanceBinder\n  nameWithType: CreateInstanceBinder\n  fullName: System.Dynamic.CreateInstanceBinder\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryDeleteIndex(DeleteIndexBinder, Object[])\n  nameWithType: DynamicObject.TryDeleteIndex(DeleteIndexBinder, Object[])\n  fullName: DynamicObject.TryDeleteIndex(DeleteIndexBinder, Object[])\n- uid: System.Dynamic.DeleteIndexBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: DeleteIndexBinder\n  nameWithType: DeleteIndexBinder\n  fullName: System.Dynamic.DeleteIndexBinder\n- uid: System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryDeleteMember(DeleteMemberBinder)\n  nameWithType: DynamicObject.TryDeleteMember(DeleteMemberBinder)\n  fullName: DynamicObject.TryDeleteMember(DeleteMemberBinder)\n- uid: System.Dynamic.DeleteMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: DeleteMemberBinder\n  nameWithType: DeleteMemberBinder\n  fullName: System.Dynamic.DeleteMemberBinder\n- uid: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryGetIndex(GetIndexBinder, Object[], Object)\n  nameWithType: DynamicObject.TryGetIndex(GetIndexBinder, Object[], Object)\n  fullName: DynamicObject.TryGetIndex(GetIndexBinder, Object[], Object)\n- uid: System.Dynamic.GetIndexBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: GetIndexBinder\n  nameWithType: GetIndexBinder\n  fullName: System.Dynamic.GetIndexBinder\n- uid: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryGetMember(GetMemberBinder, Object)\n  nameWithType: DynamicObject.TryGetMember(GetMemberBinder, Object)\n  fullName: DynamicObject.TryGetMember(GetMemberBinder, Object)\n- uid: System.Dynamic.GetMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: GetMemberBinder\n  nameWithType: GetMemberBinder\n  fullName: System.Dynamic.GetMemberBinder\n- uid: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryInvoke(InvokeBinder, Object[], Object)\n  nameWithType: DynamicObject.TryInvoke(InvokeBinder, Object[], Object)\n  fullName: DynamicObject.TryInvoke(InvokeBinder, Object[], Object)\n- uid: System.Dynamic.InvokeBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: InvokeBinder\n  nameWithType: InvokeBinder\n  fullName: System.Dynamic.InvokeBinder\n- uid: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryInvokeMember(InvokeMemberBinder, Object[], Object)\n  nameWithType: DynamicObject.TryInvokeMember(InvokeMemberBinder, Object[], Object)\n  fullName: DynamicObject.TryInvokeMember(InvokeMemberBinder, Object[], Object)\n- uid: System.Dynamic.InvokeMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: InvokeMemberBinder\n  nameWithType: InvokeMemberBinder\n  fullName: System.Dynamic.InvokeMemberBinder\n- uid: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TrySetIndex(SetIndexBinder, Object[], Object)\n  nameWithType: DynamicObject.TrySetIndex(SetIndexBinder, Object[], Object)\n  fullName: DynamicObject.TrySetIndex(SetIndexBinder, Object[], Object)\n- uid: System.Dynamic.SetIndexBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: SetIndexBinder\n  nameWithType: SetIndexBinder\n  fullName: System.Dynamic.SetIndexBinder\n- uid: System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TrySetMember(SetMemberBinder, Object)\n  nameWithType: DynamicObject.TrySetMember(SetMemberBinder, Object)\n  fullName: DynamicObject.TrySetMember(SetMemberBinder, Object)\n- uid: System.Dynamic.SetMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: SetMemberBinder\n  nameWithType: SetMemberBinder\n  fullName: System.Dynamic.SetMemberBinder\n- uid: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryUnaryOperation(UnaryOperationBinder, Object)\n  nameWithType: DynamicObject.TryUnaryOperation(UnaryOperationBinder, Object)\n  fullName: DynamicObject.TryUnaryOperation(UnaryOperationBinder, Object)\n- uid: System.Dynamic.UnaryOperationBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: UnaryOperationBinder\n  nameWithType: UnaryOperationBinder\n  fullName: System.Dynamic.UnaryOperationBinder\n- uid: System.Dynamic.DynamicObject.#ctor*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: DynamicObject\n  nameWithType: DynamicObject.DynamicObject\n  fullName: DynamicObject.DynamicObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.GetDynamicMemberNames*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: GetDynamicMemberNames\n  nameWithType: DynamicObject.GetDynamicMemberNames\n  fullName: DynamicObject.GetDynamicMemberNames\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.GetMetaObject*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: GetMetaObject\n  nameWithType: DynamicObject.GetMetaObject\n  fullName: DynamicObject.GetMetaObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TryBinaryOperation*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryBinaryOperation\n  nameWithType: DynamicObject.TryBinaryOperation\n  fullName: DynamicObject.TryBinaryOperation\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TryConvert*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryConvert\n  nameWithType: DynamicObject.TryConvert\n  fullName: DynamicObject.TryConvert\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TryCreateInstance*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryCreateInstance\n  nameWithType: DynamicObject.TryCreateInstance\n  fullName: DynamicObject.TryCreateInstance\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TryDeleteIndex*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryDeleteIndex\n  nameWithType: DynamicObject.TryDeleteIndex\n  fullName: DynamicObject.TryDeleteIndex\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TryDeleteMember*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryDeleteMember\n  nameWithType: DynamicObject.TryDeleteMember\n  fullName: DynamicObject.TryDeleteMember\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TryGetIndex*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryGetIndex\n  nameWithType: DynamicObject.TryGetIndex\n  fullName: DynamicObject.TryGetIndex\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TryGetMember*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryGetMember\n  nameWithType: DynamicObject.TryGetMember\n  fullName: DynamicObject.TryGetMember\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TryInvoke*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryInvoke\n  nameWithType: DynamicObject.TryInvoke\n  fullName: DynamicObject.TryInvoke\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TryInvokeMember*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryInvokeMember\n  nameWithType: DynamicObject.TryInvokeMember\n  fullName: DynamicObject.TryInvokeMember\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TrySetIndex*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TrySetIndex\n  nameWithType: DynamicObject.TrySetIndex\n  fullName: DynamicObject.TrySetIndex\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TrySetMember*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TrySetMember\n  nameWithType: DynamicObject.TrySetMember\n  fullName: DynamicObject.TrySetMember\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Dynamic.DynamicObject.TryUnaryOperation*\n  parent: System.Dynamic.DynamicObject\n  isExternal: false\n  name: TryUnaryOperation\n  nameWithType: DynamicObject.TryUnaryOperation\n  fullName: DynamicObject.TryUnaryOperation\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Dynamic/DynamicObject.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Dynamic.IDynamicMetaObjectProvider\n  parent: System.Dynamic\n  isExternal: false\n  name: IDynamicMetaObjectProvider\n  nameWithType: IDynamicMetaObjectProvider\n  fullName: System.Dynamic.IDynamicMetaObjectProvider\n"}