{"nodes":[{"content":"Specifies the type of a Message Queuing transaction.","nodes":[{"pos":[0,52],"content":"Specifies the type of a Message Queuing transaction.","nodes":[{"content":"Specifies the type of a Message Queuing transaction.","pos":[0,52]}]}],"pos":[609,662],"yaml":true},{"content":"When you read or write a message using an overload of the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods (including <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>) that takes a `transactionType` parameter, you can specify how you are interacting with the queue. `Automatic` enables you to send and receive from external transactions (such as when you are interacting with database applications), while `Single` is used for single internal Message Queuing transactions.  \n  \n `None` enables you to receive a message from a transactional queue outside of a transaction or send a transactional message to a non-transactional queue. This is useful, for example, when routing several messages sent within a single transaction.  \n  \n If you want to send or receive a message using an internal Message Queuing transaction but not a single internal transaction, create an instance of the <xref:System.Messaging.MessageQueueTransaction> class and pass it into an overload of the <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods that takes a `transaction` parameter rather than one that takes a `transactionType` parameter.","nodes":[{"pos":[0,642],"content":"When you read or write a message using an overload of the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods (including <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>) that takes a `transactionType` parameter, you can specify how you are interacting with the queue. `Automatic` enables you to send and receive from external transactions (such as when you are interacting with database applications), while `Single` is used for single internal Message Queuing transactions.","nodes":[{"content":"When you read or write a message using an overload of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Send%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> methods (including <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%2A&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt;</ph>) that takes a <ph id=\"ph6\">`transactionType`</ph> parameter, you can specify how you are interacting with the queue.","pos":[0,435],"source":"When you read or write a message using an overload of the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods (including <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>) that takes a `transactionType` parameter, you can specify how you are interacting with the queue."},{"content":"<ph id=\"ph1\">`Automatic`</ph> enables you to send and receive from external transactions (such as when you are interacting with database applications), while <ph id=\"ph2\">`Single`</ph> is used for single internal Message Queuing transactions.","pos":[436,642],"source":"`Automatic` enables you to send and receive from external transactions (such as when you are interacting with database applications), while `Single` is used for single internal Message Queuing transactions."}]},{"pos":[649,895],"content":"`None` enables you to receive a message from a transactional queue outside of a transaction or send a transactional message to a non-transactional queue. This is useful, for example, when routing several messages sent within a single transaction.","nodes":[{"content":"<ph id=\"ph1\">`None`</ph> enables you to receive a message from a transactional queue outside of a transaction or send a transactional message to a non-transactional queue.","pos":[0,153],"source":"`None` enables you to receive a message from a transactional queue outside of a transaction or send a transactional message to a non-transactional queue."},{"content":"This is useful, for example, when routing several messages sent within a single transaction.","pos":[154,246]}]},{"pos":[902,1342],"content":"If you want to send or receive a message using an internal Message Queuing transaction but not a single internal transaction, create an instance of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> class and pass it into an overload of the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Send%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> methods that takes a <ph id=\"ph4\">`transaction`</ph> parameter rather than one that takes a <ph id=\"ph5\">`transactionType`</ph> parameter.","source":"If you want to send or receive a message using an internal Message Queuing transaction but not a single internal transaction, create an instance of the <xref:System.Messaging.MessageQueueTransaction> class and pass it into an overload of the <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods that takes a `transaction` parameter rather than one that takes a `transactionType` parameter."}],"pos":[673,2022],"yaml":true,"extradata":"MT"},{"content":"A transaction type used for Microsoft Transaction Server (MTS) or COM+ 1.0 Services. If there is already an MTS transaction context, it will be used when sending or receiving the message.","nodes":[{"pos":[0,187],"content":"A transaction type used for Microsoft Transaction Server (MTS) or COM+ 1.0 Services. If there is already an MTS transaction context, it will be used when sending or receiving the message.","nodes":[{"content":"A transaction type used for Microsoft Transaction Server (MTS) or COM+ 1.0 Services. If there is already an MTS transaction context, it will be used when sending or receiving the message.","pos":[0,187],"nodes":[{"content":"A transaction type used for Microsoft Transaction Server (MTS) or COM+ 1.0 Services.","pos":[0,84]},{"content":"If there is already an MTS transaction context, it will be used when sending or receiving the message.","pos":[85,187]}]}]}],"pos":[3131,3319],"yaml":true},{"content":"Operation will not be transactional.","nodes":[{"pos":[0,36],"content":"Operation will not be transactional.","nodes":[{"content":"Operation will not be transactional.","pos":[0,36]}]}],"pos":[4351,4388],"yaml":true},{"content":"A transaction type used for single internal transactions.","nodes":[{"pos":[0,57],"content":"A transaction type used for single internal transactions.","nodes":[{"content":"A transaction type used for single internal transactions.","pos":[0,57]}]}],"pos":[5427,5485],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.MessageQueueTransactionType\n  commentId: T:System.Messaging.MessageQueueTransactionType\n  id: MessageQueueTransactionType\n  children:\n  - System.Messaging.MessageQueueTransactionType.Automatic\n  - System.Messaging.MessageQueueTransactionType.None\n  - System.Messaging.MessageQueueTransactionType.Single\n  langs:\n  - csharp\n  name: MessageQueueTransactionType\n  nameWithType: MessageQueueTransactionType\n  fullName: System.Messaging.MessageQueueTransactionType\n  type: Enum\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Specifies the type of a Message Queuing transaction.\n  remarks: \"When you read or write a message using an overload of the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods (including <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>) that takes a `transactionType` parameter, you can specify how you are interacting with the queue. `Automatic` enables you to send and receive from external transactions (such as when you are interacting with database applications), while `Single` is used for single internal Message Queuing transactions.  \\n  \\n `None` enables you to receive a message from a transactional queue outside of a transaction or send a transactional message to a non-transactional queue. This is useful, for example, when routing several messages sent within a single transaction.  \\n  \\n If you want to send or receive a message using an internal Message Queuing transaction but not a single internal transaction, create an instance of the <xref:System.Messaging.MessageQueueTransaction> class and pass it into an overload of the <xref:System.Messaging.MessageQueue.Send%2A> or <xref:System.Messaging.MessageQueue.Receive%2A> methods that takes a `transaction` parameter rather than one that takes a `transactionType` parameter.\"\n  syntax:\n    content: public enum MessageQueueTransactionType\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransactionType.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueueTransactionType.Automatic\n  commentId: F:System.Messaging.MessageQueueTransactionType.Automatic\n  id: Automatic\n  parent: System.Messaging.MessageQueueTransactionType\n  langs:\n  - csharp\n  name: Automatic\n  nameWithType: MessageQueueTransactionType.Automatic\n  fullName: MessageQueueTransactionType.Automatic\n  type: Field\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: A transaction type used for Microsoft Transaction Server (MTS) or COM+ 1.0 Services. If there is already an MTS transaction context, it will be used when sending or receiving the message.\n  syntax:\n    content: Automatic\n    return:\n      type: System.Messaging.MessageQueueTransactionType\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransactionType.xml\n- uid: System.Messaging.MessageQueueTransactionType.None\n  commentId: F:System.Messaging.MessageQueueTransactionType.None\n  id: None\n  parent: System.Messaging.MessageQueueTransactionType\n  langs:\n  - csharp\n  name: None\n  nameWithType: MessageQueueTransactionType.None\n  fullName: MessageQueueTransactionType.None\n  type: Field\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Operation will not be transactional.\n  syntax:\n    content: None\n    return:\n      type: System.Messaging.MessageQueueTransactionType\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransactionType.xml\n- uid: System.Messaging.MessageQueueTransactionType.Single\n  commentId: F:System.Messaging.MessageQueueTransactionType.Single\n  id: Single\n  parent: System.Messaging.MessageQueueTransactionType\n  langs:\n  - csharp\n  name: Single\n  nameWithType: MessageQueueTransactionType.Single\n  fullName: MessageQueueTransactionType.Single\n  type: Field\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: A transaction type used for single internal transactions.\n  syntax:\n    content: Single\n    return:\n      type: System.Messaging.MessageQueueTransactionType\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueueTransactionType.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Messaging.MessageQueueTransactionType.Automatic\n  parent: System.Messaging.MessageQueueTransactionType\n  isExternal: false\n  name: Automatic\n  nameWithType: MessageQueueTransactionType.Automatic\n  fullName: MessageQueueTransactionType.Automatic\n- uid: System.Messaging.MessageQueueTransactionType\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueTransactionType\n  nameWithType: MessageQueueTransactionType\n  fullName: System.Messaging.MessageQueueTransactionType\n- uid: System.Messaging.MessageQueueTransactionType.None\n  parent: System.Messaging.MessageQueueTransactionType\n  isExternal: false\n  name: None\n  nameWithType: MessageQueueTransactionType.None\n  fullName: MessageQueueTransactionType.None\n- uid: System.Messaging.MessageQueueTransactionType.Single\n  parent: System.Messaging.MessageQueueTransactionType\n  isExternal: false\n  name: Single\n  nameWithType: MessageQueueTransactionType.Single\n  fullName: MessageQueueTransactionType.Single\n"}