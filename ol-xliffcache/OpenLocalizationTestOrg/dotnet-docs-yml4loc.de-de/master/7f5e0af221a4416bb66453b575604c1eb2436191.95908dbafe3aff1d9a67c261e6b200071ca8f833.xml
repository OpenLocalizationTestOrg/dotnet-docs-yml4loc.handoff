{"nodes":[{"content":"Represents the method that handles calls from a <xref href=\"System.Threading.Timer\"></xref>.","nodes":[{"pos":[0,92],"content":"Represents the method that handles calls from a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph>.","source":"Represents the method that handles calls from a <xref href=\"System.Threading.Timer\"></xref>."}],"pos":[383,476],"yaml":true},{"content":"Use a `TimerCallback` delegate to specify the method that is called by a <xref:System.Threading.Timer>. This method does not execute in the thread that created the timer; it executes in a separate thread pool thread that is provided by the system. The `TimerCallback` delegate invokes the method once after the start time elapses, and continues to invoke it once per timer interval until the <xref:System.Threading.Timer.Dispose%2A> method is called, or until the <xref:System.Threading.Timer.Change%2A?displayProperty=fullName> method is called with the interval value <xref:System.Threading.Timeout.Infinite>.  \n  \n> [!NOTE]\n>  Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.  \n  \n The timer delegate is specified when the timer is constructed, and cannot be changed. The start time for a `Timer` is passed in the `dueTime` parameter of the `Timer` constructors, and the period is passed in the `period` parameter. For an example that demonstrates creating and using a `TimerCallback` delegate, see <xref:System.Threading.Timer?displayProperty=fullName>.","nodes":[{"pos":[0,611],"content":"Use a `TimerCallback` delegate to specify the method that is called by a <xref:System.Threading.Timer>. This method does not execute in the thread that created the timer; it executes in a separate thread pool thread that is provided by the system. The `TimerCallback` delegate invokes the method once after the start time elapses, and continues to invoke it once per timer interval until the <xref:System.Threading.Timer.Dispose%2A> method is called, or until the <xref:System.Threading.Timer.Change%2A?displayProperty=fullName> method is called with the interval value <xref:System.Threading.Timeout.Infinite>.","nodes":[{"content":"Use a <ph id=\"ph1\">`TimerCallback`</ph> delegate to specify the method that is called by a <ph id=\"ph2\">&lt;xref:System.Threading.Timer&gt;</ph>.","pos":[0,103],"source":"Use a `TimerCallback` delegate to specify the method that is called by a <xref:System.Threading.Timer>."},{"content":"This method does not execute in the thread that created the timer; it executes in a separate thread pool thread that is provided by the system.","pos":[104,247]},{"content":"The <ph id=\"ph1\">`TimerCallback`</ph> delegate invokes the method once after the start time elapses, and continues to invoke it once per timer interval until the <ph id=\"ph2\">&lt;xref:System.Threading.Timer.Dispose%2A&gt;</ph> method is called, or until the <ph id=\"ph3\">&lt;xref:System.Threading.Timer.Change%2A?displayProperty=fullName&gt;</ph> method is called with the interval value <ph id=\"ph4\">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph>.","pos":[248,611],"source":" The `TimerCallback` delegate invokes the method once after the start time elapses, and continues to invoke it once per timer interval until the <xref:System.Threading.Timer.Dispose%2A> method is called, or until the <xref:System.Threading.Timer.Change%2A?displayProperty=fullName> method is called with the interval value <xref:System.Threading.Timeout.Infinite>."}]},{"pos":[619,950],"content":"[!NOTE]\n Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.","leadings":["","> "],"nodes":[{"content":" Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.","pos":[8,329],"nodes":[{"content":"Callbacks can occur after the <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Dispose&gt;</ph> method overload has been called, because the timer queues callbacks for execution by thread pool threads.","pos":[1,174],"source":" Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph> method overload to wait until all callbacks have completed.","pos":[175,321],"source":" You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed."}]}]},{"pos":[957,1329],"content":"The timer delegate is specified when the timer is constructed, and cannot be changed. The start time for a `Timer` is passed in the `dueTime` parameter of the `Timer` constructors, and the period is passed in the `period` parameter. For an example that demonstrates creating and using a `TimerCallback` delegate, see <xref:System.Threading.Timer?displayProperty=fullName>.","nodes":[{"content":"The timer delegate is specified when the timer is constructed, and cannot be changed.","pos":[0,85]},{"content":"The start time for a <ph id=\"ph1\">`Timer`</ph> is passed in the <ph id=\"ph2\">`dueTime`</ph> parameter of the <ph id=\"ph3\">`Timer`</ph> constructors, and the period is passed in the <ph id=\"ph4\">`period`</ph> parameter.","pos":[86,232],"source":" The start time for a `Timer` is passed in the `dueTime` parameter of the `Timer` constructors, and the period is passed in the `period` parameter."},{"content":"For an example that demonstrates creating and using a <ph id=\"ph1\">`TimerCallback`</ph> delegate, see <ph id=\"ph2\">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph>.","pos":[233,372],"source":" For an example that demonstrates creating and using a `TimerCallback` delegate, see <xref:System.Threading.Timer?displayProperty=fullName>."}]}],"pos":[487,1824],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.TimerCallback\n  commentId: T:System.Threading.TimerCallback\n  id: TimerCallback\n  langs:\n  - csharp\n  name: TimerCallback\n  nameWithType: TimerCallback\n  fullName: System.Threading.TimerCallback\n  type: Delegate\n  assemblies:\n  - System.Threading.Timer\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Represents the method that handles calls from a <xref href=\"System.Threading.Timer\"></xref>.\n  remarks: \"Use a `TimerCallback` delegate to specify the method that is called by a <xref:System.Threading.Timer>. This method does not execute in the thread that created the timer; it executes in a separate thread pool thread that is provided by the system. The `TimerCallback` delegate invokes the method once after the start time elapses, and continues to invoke it once per timer interval until the <xref:System.Threading.Timer.Dispose%2A> method is called, or until the <xref:System.Threading.Timer.Change%2A?displayProperty=fullName> method is called with the interval value <xref:System.Threading.Timeout.Infinite>.  \\n  \\n> [!NOTE]\\n>  Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.  \\n  \\n The timer delegate is specified when the timer is constructed, and cannot be changed. The start time for a `Timer` is passed in the `dueTime` parameter of the `Timer` constructors, and the period is passed in the `period` parameter. For an example that demonstrates creating and using a `TimerCallback` delegate, see <xref:System.Threading.Timer?displayProperty=fullName>.\"\n  example:\n  - \"The following code example shows how to create the delegate used with the `Timer` class.  \\n  \\n [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]\\n [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public delegate void TimerCallback(object state);\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/TimerCallback.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}