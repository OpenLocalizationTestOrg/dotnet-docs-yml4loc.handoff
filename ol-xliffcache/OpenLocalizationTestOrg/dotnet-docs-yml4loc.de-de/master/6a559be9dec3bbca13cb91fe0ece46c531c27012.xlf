<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a559be9dec3bbca13cb91fe0ece46c531c27012</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Nullable-1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e660042c3152d55009f6f2cb2c88de3dd39e14b7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">547e2098b8323ecab5b6883266452e3fad669e2d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a value type that can be assigned <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type is said to be nullable if it can be assigned a value or can be assigned <ph id="ph1">`null`</ph>, which means the type has no value whatsoever.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, all reference types, such as <ph id="ph1">&lt;xref:System.String&gt;</ph>, are nullable, but all value types, such as <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, are not.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>In C# and Visual Basic, you mark a value type as nullable by using the <ph id="ph1">`?`</ph> notation after the value type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">`int?`</ph> in C# or <ph id="ph2">`Integer?`</ph> in Visual Basic declares an integer value type that can be assigned <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> structure supports using only a value type as a nullable type because reference types are nullable by design.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Nullable&gt;</ph> class provides complementary support for the <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Nullable&gt;</ph> class supports obtaining the underlying type of a nullable type, and comparison and equality operations on pairs of nullable types whose underlying value type does not support generic comparison and equality operations.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Fundamental Properties</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The two fundamental members of the <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> structure are the <ph id="ph2">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property for a <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> object is <ph id="ph3">`true`</ph>, the value of the object can be accessed with the <ph id="ph4">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property is <ph id="ph2">`false`</ph>, the value of the object is undefined and an attempt to access the <ph id="ph3">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property throws an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Boxing and Unboxing</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a nullable type is boxed, the common language runtime automatically boxes the underlying value of the <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> object, not the <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> object itself.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, if the <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the contents of the <ph id="ph3">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property is boxed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the underlying value of a nullable type is unboxed, the common language runtime creates a new <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> structure initialized to the underlying value.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`HasValue`</ph> property of a nullable type is <ph id="ph2">`false`</ph>, the result of a boxing operation is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consequently, if a boxed nullable type is passed to a method that expects an object argument, that method must be prepared to handle the case where the argument is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`null`</ph> is unboxed into a nullable type, the common language runtime creates a new <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> structure and initializes its <ph id="ph3">`HasValue`</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> and Windows Runtime Components</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph>, you can include a <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> type as a member of a structure exported in a WinMD library.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Previously, this was not supported.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The underlying value type of the <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> generic type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> structure to the specified value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Nullable%601.%23ctor%2A&gt;</ph> constructor initializes the <ph id="ph2">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property of the new <ph id="ph3">&lt;xref:System.Nullable%601&gt;</ph> object to <ph id="ph4">`true`</ph>, and the <ph id="ph5">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property to the value of the <ph id="ph6">`value`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A value type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Indicates whether the current <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object is equal to a specified object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property of the current <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> structure is <ph id="ph3">`true`</ph> and the <ph id="ph4">`other`</ph> argument is not <ph id="ph5">`null`</ph>, equality is determined by passing the <ph id="ph6">`other`</ph> parameter to the <ph id="ph7">`Equals`</ph> method of the underlying value of the current <ph id="ph8">&lt;xref:System.Nullable%601&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">other</ph><ept id="p1">&lt;/code&gt;</ept> parameter is equal to the current <ph id="ph3">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This table describes how equality is defined for the compared values:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph2">`false`</ph>, and the <ph id="ph3">&lt;code&gt;other&lt;/code&gt;</ph> parameter is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>That is, two null values are equal by definition.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph2">`true`</ph>, and the value returned by the <ph id="ph3">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property is equal to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph4">other</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property for the current <ph id="ph2">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> structure is <ph id="ph3">`true`</ph>, and the <ph id="ph4">&lt;code&gt;other&lt;/code&gt;</ph> parameter is <ph id="ph5">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property for the current <ph id="ph2">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> structure is <ph id="ph3">`false`</ph>, and the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph4">other</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not <ph id="ph5">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property for the current <ph id="ph2">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> structure is <ph id="ph3">`true`</ph>, and the value returned by the <ph id="ph4">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property is not equal to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph5">other</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Retrieves the hash code of the object returned by the <ph id="ph1">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The hash code of the object returned by the <ph id="ph1">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property if the <ph id="ph2">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph3">`true`</ph>, or zero if the <ph id="ph4">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the current <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object, or the object's default value.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Nullable%601.GetValueOrDefault%2A&gt;</ph> method returns a value even if the <ph id="ph2">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property is <ph id="ph3">`false`</ph> (unlike the <ph id="ph4">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property, which throws an exception).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property if the  <ph id="ph2">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph3">`true`</ph>; otherwise, the default value of the current <ph id="ph4">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The type of the default value is the type argument of the current <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object, and the value of the default value consists solely of binary zeroes.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the current <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object, or the specified default value.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Nullable%601.GetValueOrDefault%2A&gt;</ph> method returns a value even if the <ph id="ph2">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property is <ph id="ph3">`false`</ph> (unlike the <ph id="ph4">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property, which throws an exception).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A value to return if the <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Nullable`1.Value"&gt;&lt;/xref&gt;</ph> property if the <ph id="ph2">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph3">`true`</ph>; otherwise, the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph4">defaultValue</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object has a valid value of its underlying type.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the value of the current <ph id="ph3">&lt;xref:System.Nullable%601&gt;</ph> object can be accessed with the <ph id="ph4">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, attempting to access its value throws an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the current <ph id="ph2">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object has a value; <ph id="ph3">`false`</ph> if the current <ph id="ph4">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object has no value.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns the text representation of the value of the current <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Nullable%601.ToString%2A&gt;</ph> property returns the string yielded by calling the <ph id="ph2">`ToString`</ph> property of the object returned by the <ph id="ph3">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The text representation of the value of the current <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object if the <ph id="ph2">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph3">`true`</ph>, or an empty string ("") if the <ph id="ph4">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets the value of the current <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object if it has been assigned a valid underlying value.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a value of type <ph id="ph1">`T`</ph> has not been assigned to the <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> object, you can compare it to <ph id="ph3">`null`</ph> and retrieve its <ph id="ph4">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property, but you cannot access its <ph id="ph5">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property or call its other members.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The value of the current <ph id="ph1">&lt;xref href="System.Nullable`1"&gt;&lt;/xref&gt;</ph> object if the <ph id="ph2">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An exception is thrown if the <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Nullable`1.HasValue"&gt;&lt;/xref&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>