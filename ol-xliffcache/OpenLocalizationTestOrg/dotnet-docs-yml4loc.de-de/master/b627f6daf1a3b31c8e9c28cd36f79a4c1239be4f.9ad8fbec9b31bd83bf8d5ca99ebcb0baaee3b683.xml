{"nodes":[{"content":"Represents a record sequence stored in a <xref href=\"System.IO.Log.LogStore\"></xref>.","nodes":[{"pos":[0,85],"content":"Represents a record sequence stored in a <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogStore\"&gt;&lt;/xref&gt;</ph>.","source":"Represents a record sequence stored in a <xref href=\"System.IO.Log.LogStore\"></xref>."}],"pos":[6612,6698],"yaml":true},{"content":"The <xref:System.IO.Log.LogRecordSequence> class provides an implementation of the record sequence interface on top of a Common Log File System (CLFS) log. In addition to the standard record-oriented features, it provides a policy model for avoiding log-full conditions, and multiplexing of clients on the same physical file. It works with the <xref:System.IO.Log.LogStore> class, which provides an interface for directly manipulating and managing a CLFS log file. The relationship between the <xref:System.IO.Log.LogStore> class and the <xref:System.IO.Log.LogRecordSequence> class is similar to the relationship between a disk file and a <xref:System.IO.FileStream> object. The disk file provides the concrete storage, and has attributes such as length and last access time; while the <xref:System.IO.FileStream> object provides a view on the file that can be used to read from it and write to it. Similarly, the <xref:System.IO.Log.LogStore> class has attributes like a policy and a collection of disk extents; and the <xref:System.IO.Log.LogRecordSequence> class provides a record-oriented mechanism for reading and writing data.","nodes":[{"pos":[0,1133],"content":"The <xref:System.IO.Log.LogRecordSequence> class provides an implementation of the record sequence interface on top of a Common Log File System (CLFS) log. In addition to the standard record-oriented features, it provides a policy model for avoiding log-full conditions, and multiplexing of clients on the same physical file. It works with the <xref:System.IO.Log.LogStore> class, which provides an interface for directly manipulating and managing a CLFS log file. The relationship between the <xref:System.IO.Log.LogStore> class and the <xref:System.IO.Log.LogRecordSequence> class is similar to the relationship between a disk file and a <xref:System.IO.FileStream> object. The disk file provides the concrete storage, and has attributes such as length and last access time; while the <xref:System.IO.FileStream> object provides a view on the file that can be used to read from it and write to it. Similarly, the <xref:System.IO.Log.LogStore> class has attributes like a policy and a collection of disk extents; and the <xref:System.IO.Log.LogRecordSequence> class provides a record-oriented mechanism for reading and writing data.","nodes":[{"content":"The <xref:System.IO.Log.LogRecordSequence> class provides an implementation of the record sequence interface on top of a Common Log File System (CLFS) log. In addition to the standard record-oriented features, it provides a policy model for avoiding log-full conditions, and multiplexing of clients on the same physical file. It works with the <xref:System.IO.Log.LogStore> class, which provides an interface for directly manipulating and managing a CLFS log file. The relationship between the <xref:System.IO.Log.LogStore> class and the <xref:System.IO.Log.LogRecordSequence> class is similar to the relationship between a disk file and a <xref:System.IO.FileStream> object. The disk file provides the concrete storage, and has attributes such as length and last access time; while the <xref:System.IO.FileStream> object provides a view on the file that can be used to read from it and write to it. Similarly, the <xref:System.IO.Log.LogStore> class has attributes like a policy and a collection of disk extents; and the <xref:System.IO.Log.LogRecordSequence> class provides a record-oriented mechanism for reading and writing data.","pos":[0,1133],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> class provides an implementation of the record sequence interface on top of a Common Log File System (CLFS) log.","pos":[0,155],"source":"The <xref:System.IO.Log.LogRecordSequence> class provides an implementation of the record sequence interface on top of a Common Log File System (CLFS) log."},{"content":"In addition to the standard record-oriented features, it provides a policy model for avoiding log-full conditions, and multiplexing of clients on the same physical file.","pos":[156,325]},{"content":"It works with the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogStore&gt;</ph> class, which provides an interface for directly manipulating and managing a CLFS log file.","pos":[326,464],"source":" It works with the <xref:System.IO.Log.LogStore> class, which provides an interface for directly manipulating and managing a CLFS log file."},{"content":"The relationship between the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogStore&gt;</ph> class and the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> class is similar to the relationship between a disk file and a <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> object.","pos":[465,675],"source":" The relationship between the <xref:System.IO.Log.LogStore> class and the <xref:System.IO.Log.LogRecordSequence> class is similar to the relationship between a disk file and a <xref:System.IO.FileStream> object."},{"content":"The disk file provides the concrete storage, and has attributes such as length and last access time; while the <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> object provides a view on the file that can be used to read from it and write to it.","pos":[676,899],"source":" The disk file provides the concrete storage, and has attributes such as length and last access time; while the <xref:System.IO.FileStream> object provides a view on the file that can be used to read from it and write to it."},{"content":"Similarly, the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogStore&gt;</ph> class has attributes like a policy and a collection of disk extents; and the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> class provides a record-oriented mechanism for reading and writing data.","pos":[900,1133],"source":" Similarly, the <xref:System.IO.Log.LogStore> class has attributes like a policy and a collection of disk extents; and the <xref:System.IO.Log.LogRecordSequence> class provides a record-oriented mechanism for reading and writing data."}]}]}],"pos":[6709,7843],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with the specified log store.","nodes":[{"pos":[0,122],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> class with the specified log store.","source":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with the specified log store."}],"pos":[9742,9865],"yaml":true},{"content":"The buffer size determines the maximum size of the record that can be appended or read. In this constructor, a default value of 64 is set. The desired number of buffers is set to 10.","nodes":[{"pos":[0,182],"content":"The buffer size determines the maximum size of the record that can be appended or read. In this constructor, a default value of 64 is set. The desired number of buffers is set to 10.","nodes":[{"content":"The buffer size determines the maximum size of the record that can be appended or read. In this constructor, a default value of 64 is set. The desired number of buffers is set to 10.","pos":[0,182],"nodes":[{"content":"The buffer size determines the maximum size of the record that can be appended or read.","pos":[0,87]},{"content":"In this constructor, a default value of 64 is set.","pos":[88,138]},{"content":"The desired number of buffers is set to 10.","pos":[139,182]}]}]}],"pos":[9876,10059],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.Log.LogStore\"></xref> that this record sequence should use.","nodes":[{"pos":[0,85],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogStore\"&gt;&lt;/xref&gt;</ph> that this record sequence should use.","source":"The <xref href=\"System.IO.Log.LogStore\"></xref> that this record sequence should use."}],"pos":[10231,10317],"yaml":true},{"content":"<code>logStore</code> is invalid.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;logStore&lt;/code&gt;</ph> is invalid.","source":"<code>logStore</code> is invalid."}],"pos":[10476,10510],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store and the access mode.","nodes":[{"pos":[0,152],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> class with a specified path to the log store and the access mode.","source":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store and the access mode."}],"pos":[11583,11736],"yaml":true},{"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path and mode. It is given read/write access to the store, and the store is opened sharing Read access.","nodes":[{"pos":[0,256],"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path and mode. It is given read/write access to the store, and the store is opened sharing Read access.","nodes":[{"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path and mode. It is given read/write access to the store, and the store is opened sharing Read access.","pos":[0,256],"nodes":[{"content":"This constructor initializes a new <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> on a new <ph id=\"ph2\">&lt;xref:System.IO.Log.LogStore&gt;</ph> object that it opens with the specified path and mode.","pos":[0,167],"source":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path and mode."},{"content":"It is given read/write access to the store, and the store is opened sharing Read access.","pos":[168,256]}]}]}],"pos":[11747,12004],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the base file of the log store to open.","nodes":[{"pos":[0,71],"content":"A relative or absolute path for the base file of the log store to open.","nodes":[{"content":"A relative or absolute path for the base file of the log store to open.","pos":[0,71]}]}],"pos":[12168,12240],"yaml":true},{"content":"One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store.","nodes":[{"pos":[0,106],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileMode\"&gt;&lt;/xref&gt;</ph> values that determines how to open or create the store.","source":"One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store."}],"pos":[12305,12412],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[12579,12608],"yaml":true},{"content":"<code>path</code> is an empty string (\"\").  \n  \n -or-  \n  \n <code>path</code> contains only white space.  \n  \n -or-  \n  \n <code>path</code> contains one or more invalid characters.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\").","source":"<code>path</code> is an empty string (\"\")."},{"pos":[49,53],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[60,104],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains only white space.","source":"<code>path</code> contains only white space."},{"pos":[111,115],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[122,180],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains one or more invalid characters.","source":"<code>path</code> contains one or more invalid characters."}],"pos":[12702,12895],"yaml":true},{"content":"<code>mode</code> contains an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.","source":"<code>mode</code> contains an invalid value."}],"pos":[13009,13054],"yaml":true},{"content":"The file cannot be found.","nodes":[{"pos":[0,25],"content":"The file cannot be found.","nodes":[{"content":"The file cannot be found.","pos":[0,25]}]}],"pos":[13162,13188],"yaml":true},{"content":"An I/O error occurs when opening the log store.","nodes":[{"pos":[0,47],"content":"An I/O error occurs when opening the log store.","nodes":[{"content":"An I/O error occurs when opening the log store.","pos":[0,47]}]}],"pos":[13276,13324],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[13438,13511],"yaml":true},{"content":"This operation is not supported.","nodes":[{"pos":[0,32],"content":"This operation is not supported.","nodes":[{"content":"This operation is not supported.","pos":[0,32]}]}],"pos":[13613,13646],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[13746,13815],"yaml":true},{"content":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.","nodes":[{"pos":[0,283],"content":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> cannot be used because the required Common Log File System (CLFS) component is not installed.","pos":[0,146],"source":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed."},{"content":"Install the CLFS component if it is available for your platform, or use the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph> class.","pos":[147,283],"source":" Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class."}]}],"pos":[13933,14217],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with the specified log store, buffer size for each record, and buffer number.","nodes":[{"pos":[0,170],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> class with the specified log store, buffer size for each record, and buffer number.","source":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with the specified log store, buffer size for each record, and buffer number."}],"pos":[15356,15527],"yaml":true},{"content":"Use this constructor if you want to specify values for `bufferSize` and `bufferCount` and do not want to use the default value of 64 for `bufferSize` and 10 for `bufferCount`.","nodes":[{"pos":[0,175],"content":"Use this constructor if you want to specify values for <ph id=\"ph1\">`bufferSize`</ph> and <ph id=\"ph2\">`bufferCount`</ph> and do not want to use the default value of 64 for <ph id=\"ph3\">`bufferSize`</ph> and 10 for <ph id=\"ph4\">`bufferCount`</ph>.","source":"Use this constructor if you want to specify values for `bufferSize` and `bufferCount` and do not want to use the default value of 64 for `bufferSize` and 10 for `bufferCount`."}],"pos":[15538,15714],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IO.Log.LogStore\"></xref> that this record sequence should use.","nodes":[{"pos":[0,85],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogStore\"&gt;&lt;/xref&gt;</ph> that this record sequence should use.","source":"The <xref href=\"System.IO.Log.LogStore\"></xref> that this record sequence should use."}],"pos":[15919,16005],"yaml":true},{"content":"The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.","nodes":[{"pos":[0,121],"content":"The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.","nodes":[{"content":"The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.","pos":[0,121],"nodes":[{"content":"The desired buffer size in bytes.","pos":[0,33]},{"content":"The buffer size determines the maximum size of the record that can be appended or read.","pos":[34,121]}]}]}],"pos":[16070,16192],"yaml":true},{"content":"The desired number of buffers.","nodes":[{"pos":[0,30],"content":"The desired number of buffers.","nodes":[{"content":"The desired number of buffers.","pos":[0,30]}]}],"pos":[16258,16289],"yaml":true},{"content":"<code>logStore</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;logStore&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>logStore</code> is `null`."}],"pos":[16456,16489],"yaml":true},{"content":"<code>bufferSize</code> is negative or zero.  \n  \n -or-  \n  \n <code>bufferCount</code> is negative or zero.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.","source":"<code>bufferSize</code> is negative or zero."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,107],"content":"<ph id=\"ph1\">&lt;code&gt;bufferCount&lt;/code&gt;</ph> is negative or zero.","source":"<code>bufferCount</code> is negative or zero."}],"pos":[16603,16717],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store and the access and share modes.","nodes":[{"pos":[0,163],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> class with a specified path to the log store and the access and share modes.","source":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store and the access and share modes."}],"pos":[17889,18053],"yaml":true},{"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing Read access.","nodes":[{"pos":[0,217],"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing Read access.","nodes":[{"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing Read access.","pos":[0,217],"nodes":[{"content":"This constructor initializes a new <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> on a new <ph id=\"ph2\">&lt;xref:System.IO.Log.LogStore&gt;</ph> object that it opens with the specified path, mode, and access.","pos":[0,176],"source":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access."},{"content":"The store is opened sharing Read access.","pos":[177,217]}]}]}],"pos":[18064,18282],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the base file of the log store to open.","nodes":[{"pos":[0,71],"content":"A relative or absolute path for the base file of the log store to open.","nodes":[{"content":"A relative or absolute path for the base file of the log store to open.","pos":[0,71]}]}],"pos":[18475,18547],"yaml":true},{"content":"One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store.","nodes":[{"pos":[0,106],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileMode\"&gt;&lt;/xref&gt;</ph> values that determines how to open or create the store.","source":"One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store."}],"pos":[18612,18719],"yaml":true},{"content":"One of the <xref href=\"System.IO.FileAccess\"></xref> values that determines how the file can be accessed by the <xref href=\"System.IO.Log.LogStore\"></xref>.","nodes":[{"pos":[0,156],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph> values that determines how the file can be accessed by the <ph id=\"ph2\">&lt;xref href=\"System.IO.Log.LogStore\"&gt;&lt;/xref&gt;</ph>.","source":"One of the <xref href=\"System.IO.FileAccess\"></xref> values that determines how the file can be accessed by the <xref href=\"System.IO.Log.LogStore\"></xref>."}],"pos":[18788,18945],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[19112,19141],"yaml":true},{"content":"<code>path</code> is an empty string (\"\").  \n  \n -or-  \n  \n <code>path</code> contains only white space.  \n  \n -or-  \n  \n <code>path</code> contains one or more invalid characters.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\").","source":"<code>path</code> is an empty string (\"\")."},{"pos":[49,53],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[60,104],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains only white space.","source":"<code>path</code> contains only white space."},{"pos":[111,115],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[122,180],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains one or more invalid characters.","source":"<code>path</code> contains one or more invalid characters."}],"pos":[19235,19428],"yaml":true},{"content":"<code>mode</code> contains an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.","source":"<code>mode</code> contains an invalid value."}],"pos":[19542,19587],"yaml":true},{"content":"The file cannot be found.","nodes":[{"pos":[0,25],"content":"The file cannot be found.","nodes":[{"content":"The file cannot be found.","pos":[0,25]}]}],"pos":[19695,19721],"yaml":true},{"content":"An I/O error occurs when opening the log store.","nodes":[{"pos":[0,47],"content":"An I/O error occurs when opening the log store.","nodes":[{"content":"An I/O error occurs when opening the log store.","pos":[0,47]}]}],"pos":[19809,19857],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[19971,20044],"yaml":true},{"content":"This operation is not supported.","nodes":[{"pos":[0,32],"content":"This operation is not supported.","nodes":[{"content":"This operation is not supported.","pos":[0,32]}]}],"pos":[20146,20179],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[20279,20348],"yaml":true},{"content":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.","nodes":[{"pos":[0,283],"content":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> cannot be used because the required Common Log File System (CLFS) component is not installed.","pos":[0,146],"source":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed."},{"content":"Install the CLFS component if it is available for your platform, or use the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph> class.","pos":[147,283],"source":" Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class."}]}],"pos":[20466,20750],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store and the access mode.","nodes":[{"pos":[0,152],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> class with a specified path to the log store and the access mode.","source":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store and the access mode."}],"pos":[22015,22168],"yaml":true},{"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing the specified access.","nodes":[{"pos":[0,226],"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing the specified access.","nodes":[{"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing the specified access.","pos":[0,226],"nodes":[{"content":"This constructor initializes a new <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> on a new <ph id=\"ph2\">&lt;xref:System.IO.Log.LogStore&gt;</ph> object that it opens with the specified path, mode, and access.","pos":[0,176],"source":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access."},{"content":"The store is opened sharing the specified access.","pos":[177,226]}]}]}],"pos":[22179,22406],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the base file of the log store to open.","nodes":[{"pos":[0,71],"content":"A relative or absolute path for the base file of the log store to open.","nodes":[{"content":"A relative or absolute path for the base file of the log store to open.","pos":[0,71]}]}],"pos":[23007,23079],"yaml":true},{"content":"One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store.","nodes":[{"pos":[0,106],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileMode\"&gt;&lt;/xref&gt;</ph> values that determines how to open or create the store.","source":"One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store."}],"pos":[23144,23251],"yaml":true},{"content":"One of the <xref href=\"System.IO.FileAccess\"></xref> values that determines how the file can be accessed by the <xref href=\"System.IO.Log.LogStore\"></xref>.","nodes":[{"pos":[0,156],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph> values that determines how the file can be accessed by the <ph id=\"ph2\">&lt;xref href=\"System.IO.Log.LogStore\"&gt;&lt;/xref&gt;</ph>.","source":"One of the <xref href=\"System.IO.FileAccess\"></xref> values that determines how the file can be accessed by the <xref href=\"System.IO.Log.LogStore\"></xref>."}],"pos":[23320,23477],"yaml":true},{"content":"One of the <xref href=\"System.IO.FileShare\"></xref> values that determines how the log store will be shared among processes.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileShare\"&gt;&lt;/xref&gt;</ph> values that determines how the log store will be shared among processes.","source":"One of the <xref href=\"System.IO.FileShare\"></xref> values that determines how the log store will be shared among processes."}],"pos":[23544,23669],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[23836,23865],"yaml":true},{"content":"<code>path</code> is an empty string (\"\").  \n  \n -or-  \n  \n <code>path</code> contains only white space.  \n  \n -or-  \n  \n <code>path</code> contains one or more invalid characters.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\").","source":"<code>path</code> is an empty string (\"\")."},{"pos":[49,53],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[60,104],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains only white space.","source":"<code>path</code> contains only white space."},{"pos":[111,115],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[122,180],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains one or more invalid characters.","source":"<code>path</code> contains one or more invalid characters."}],"pos":[23959,24152],"yaml":true},{"content":"<code>mode</code> contains an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.","source":"<code>mode</code> contains an invalid value."}],"pos":[24266,24311],"yaml":true},{"content":"The file cannot be found.","nodes":[{"pos":[0,25],"content":"The file cannot be found.","nodes":[{"content":"The file cannot be found.","pos":[0,25]}]}],"pos":[24419,24445],"yaml":true},{"content":"An I/O error occurs when opening the log store.","nodes":[{"pos":[0,47],"content":"An I/O error occurs when opening the log store.","nodes":[{"content":"An I/O error occurs when opening the log store.","pos":[0,47]}]}],"pos":[24533,24581],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[24695,24768],"yaml":true},{"content":"This operation is not supported.","nodes":[{"pos":[0,32],"content":"This operation is not supported.","nodes":[{"content":"This operation is not supported.","pos":[0,32]}]}],"pos":[24870,24903],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[25003,25072],"yaml":true},{"content":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.","nodes":[{"pos":[0,283],"content":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> cannot be used because the required Common Log File System (CLFS) component is not installed.","pos":[0,146],"source":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed."},{"content":"Install the CLFS component if it is available for your platform, or use the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph> class.","pos":[147,283],"source":" Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class."}]}],"pos":[25190,25474],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store, file permission, access and share modes, and the buffer size and count for records.","nodes":[{"pos":[0,216],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> class with a specified path to the log store, file permission, access and share modes, and the buffer size and count for records.","source":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store, file permission, access and share modes, and the buffer size and count for records."}],"pos":[26859,27076],"yaml":true},{"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing the specified access.","nodes":[{"pos":[0,226],"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing the specified access.","nodes":[{"content":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing the specified access.","pos":[0,226],"nodes":[{"content":"This constructor initializes a new <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> on a new <ph id=\"ph2\">&lt;xref:System.IO.Log.LogStore&gt;</ph> object that it opens with the specified path, mode, and access.","pos":[0,176],"source":"This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access."},{"content":"The store is opened sharing the specified access.","pos":[177,226]}]}]}],"pos":[27087,27314],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the base file of the log store to open.","nodes":[{"pos":[0,71],"content":"A relative or absolute path for the base file of the log store to open.","nodes":[{"content":"A relative or absolute path for the base file of the log store to open.","pos":[0,71]}]}],"pos":[27567,27639],"yaml":true},{"content":"One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store.","nodes":[{"pos":[0,106],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileMode\"&gt;&lt;/xref&gt;</ph> values that determines how to open or create the store.","source":"One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store."}],"pos":[27704,27811],"yaml":true},{"content":"One of the <xref href=\"System.IO.FileAccess\"></xref> values that determines how the file can be accessed by the <xref href=\"System.IO.Log.LogStore\"></xref>.","nodes":[{"pos":[0,156],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph> values that determines how the file can be accessed by the <ph id=\"ph2\">&lt;xref href=\"System.IO.Log.LogStore\"&gt;&lt;/xref&gt;</ph>.","source":"One of the <xref href=\"System.IO.FileAccess\"></xref> values that determines how the file can be accessed by the <xref href=\"System.IO.Log.LogStore\"></xref>."}],"pos":[27880,28037],"yaml":true},{"content":"One of the <xref href=\"System.IO.FileShare\"></xref> values that determines how the log store will be shared among processes.","nodes":[{"pos":[0,124],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileShare\"&gt;&lt;/xref&gt;</ph> values that determines how the log store will be shared among processes.","source":"One of the <xref href=\"System.IO.FileShare\"></xref> values that determines how the log store will be shared among processes."}],"pos":[28104,28229],"yaml":true},{"content":"The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.","nodes":[{"pos":[0,121],"content":"The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.","nodes":[{"content":"The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.","pos":[0,121],"nodes":[{"content":"The desired buffer size in bytes.","pos":[0,33]},{"content":"The buffer size determines the maximum size of the record that can be appended or read.","pos":[34,121]}]}]}],"pos":[28294,28416],"yaml":true},{"content":"The desired number of buffers.","nodes":[{"pos":[0,30],"content":"The desired number of buffers.","nodes":[{"content":"The desired number of buffers.","pos":[0,30]}]}],"pos":[28482,28513],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[28680,28709],"yaml":true},{"content":"<code>path</code> is an empty string (\"\").  \n  \n -or-  \n  \n <code>path</code> contains only white space.  \n  \n -or-  \n  \n <code>path</code> contains one or more invalid characters.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\").","source":"<code>path</code> is an empty string (\"\")."},{"pos":[49,53],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[60,104],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains only white space.","source":"<code>path</code> contains only white space."},{"pos":[111,115],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[122,180],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains one or more invalid characters.","source":"<code>path</code> contains one or more invalid characters."}],"pos":[28803,28996],"yaml":true},{"content":"<code>mode</code> contains an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.","source":"<code>mode</code> contains an invalid value."}],"pos":[29110,29155],"yaml":true},{"content":"The file cannot be found.","nodes":[{"pos":[0,25],"content":"The file cannot be found.","nodes":[{"content":"The file cannot be found.","pos":[0,25]}]}],"pos":[29263,29289],"yaml":true},{"content":"An I/O error occurs when opening the log store.","nodes":[{"pos":[0,47],"content":"An I/O error occurs when opening the log store.","nodes":[{"content":"An I/O error occurs when opening the log store.","pos":[0,47]}]}],"pos":[29377,29425],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[29539,29612],"yaml":true},{"content":"This operation is not supported.","nodes":[{"pos":[0,32],"content":"This operation is not supported.","nodes":[{"content":"This operation is not supported.","pos":[0,32]}]}],"pos":[29714,29747],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[29847,29916],"yaml":true},{"content":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.","nodes":[{"pos":[0,283],"content":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> cannot be used because the required Common Log File System (CLFS) component is not installed.","pos":[0,146],"source":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed."},{"content":"Install the CLFS component if it is available for your platform, or use the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph> class.","pos":[147,283],"source":" Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class."}]}],"pos":[30034,30318],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class.","nodes":[{"pos":[0,93],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class."}],"pos":[31874,31968],"yaml":true},{"content":"A relative or absolute path for the base file of the log store to open.","nodes":[{"pos":[0,71],"content":"A relative or absolute path for the base file of the log store to open.","nodes":[{"content":"A relative or absolute path for the base file of the log store to open.","pos":[0,71]}]}],"pos":[32278,32350],"yaml":true},{"content":"A valid <xref href=\"System.IO.FileMode\"></xref> value that determines how to open or create the store.","nodes":[{"pos":[0,102],"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.IO.FileMode\"&gt;&lt;/xref&gt;</ph> value that determines how to open or create the store.","source":"A valid <xref href=\"System.IO.FileMode\"></xref> value that determines how to open or create the store."}],"pos":[32415,32518],"yaml":true},{"content":"A valid <xref href=\"System.IO.FileAccess\"></xref> value that determines how the log store can be accessed.","nodes":[{"pos":[0,106],"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph> value that determines how the log store can be accessed.","source":"A valid <xref href=\"System.IO.FileAccess\"></xref> value that determines how the log store can be accessed."}],"pos":[32587,32694],"yaml":true},{"content":"A valid <xref href=\"System.IO.FileShare\"></xref> value that determines how the log store will be shared among processes.","nodes":[{"pos":[0,120],"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.IO.FileShare\"&gt;&lt;/xref&gt;</ph> value that determines how the log store will be shared among processes.","source":"A valid <xref href=\"System.IO.FileShare\"></xref> value that determines how the log store will be shared among processes."}],"pos":[32761,32882],"yaml":true},{"content":"The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.","nodes":[{"pos":[0,121],"content":"The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.","nodes":[{"content":"The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.","pos":[0,121],"nodes":[{"content":"The desired buffer size in bytes.","pos":[0,33]},{"content":"The buffer size determines the maximum size of the record that can be appended or read.","pos":[34,121]}]}]}],"pos":[32947,33069],"yaml":true},{"content":"The desired number of buffers.","nodes":[{"pos":[0,30],"content":"The desired number of buffers.","nodes":[{"content":"The desired number of buffers.","pos":[0,30]}]}],"pos":[33135,33166],"yaml":true},{"content":"A valid <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> value that specifies the security to set on the newly created store if the store must be created.","nodes":[{"pos":[0,169],"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.FileSecurity\"&gt;&lt;/xref&gt;</ph> value that specifies the security to set on the newly created store if the store must be created.","source":"A valid <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> value that specifies the security to set on the newly created store if the store must be created."}],"pos":[33263,33433],"yaml":true},{"content":"The file specified by <code>path</code> is not valid.  \n  \n -or-  \n  \n The specified log store file name is not valid.  \n  \n -or-  \n  \n <code>mode</code> has a value of <xref href=\"System.IO.FileMode.CreateNew\"></xref>, and cannot be used without write access.  \n  \n -or-  \n  \n <code>mode</code> has a value of <xref href=\"System.IO.FileMode.OpenOrCreate\"></xref>, and cannot be used without write access.","nodes":[{"pos":[0,53],"content":"The file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not valid.","source":"The file specified by <code>path</code> is not valid."},{"pos":[60,64],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[71,118],"content":"The specified log store file name is not valid.","nodes":[{"content":"The specified log store file name is not valid.","pos":[0,47]}]},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,260],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> has a value of <ph id=\"ph2\">&lt;xref href=\"System.IO.FileMode.CreateNew\"&gt;&lt;/xref&gt;</ph>, and cannot be used without write access.","source":"<code>mode</code> has a value of <xref href=\"System.IO.FileMode.CreateNew\"></xref>, and cannot be used without write access."},{"pos":[267,271],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[278,405],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> has a value of <ph id=\"ph2\">&lt;xref href=\"System.IO.FileMode.OpenOrCreate\"&gt;&lt;/xref&gt;</ph>, and cannot be used without write access.","source":"<code>mode</code> has a value of <xref href=\"System.IO.FileMode.OpenOrCreate\"></xref>, and cannot be used without write access."}],"pos":[33592,34016],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[34118,34159],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[34273,34320],"yaml":true},{"content":"The file specified by <code>path</code> cannot be found.","nodes":[{"pos":[0,56],"content":"The file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be found.","source":"The file specified by <code>path</code> cannot be found."}],"pos":[34428,34485],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The file specified by <code>path</code> cannot be accessed because it is in use by another process.  \n  \n -or-  \n  \n The file specified by <code>path</code> cannot be created because the file or directory already exists.  \n  \n -or-  \n  \n The log handle could not be bound to the thread pool.  \n  \n -or-  \n  \n The specified log file format or version is invalid.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,191],"content":"The file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be accessed because it is in use by another process.","source":"The file specified by <code>path</code> cannot be accessed because it is in use by another process."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,312],"content":"The file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be created because the file or directory already exists.","source":"The file specified by <code>path</code> cannot be created because the file or directory already exists."},{"pos":[319,323],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[330,383],"content":"The log handle could not be bound to the thread pool.","nodes":[{"content":"The log handle could not be bound to the thread pool.","pos":[0,53]}]},{"pos":[390,394],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[401,453],"content":"The specified log file format or version is invalid.","nodes":[{"content":"The specified log file format or version is invalid.","pos":[0,52]}]}],"pos":[34573,35045],"yaml":true},{"content":"This operation is not supported.","nodes":[{"pos":[0,32],"content":"This operation is not supported.","nodes":[{"content":"This operation is not supported.","pos":[0,32]}]}],"pos":[35147,35180],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[35286,35349],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[35449,35518],"yaml":true},{"content":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.","nodes":[{"pos":[0,283],"content":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> cannot be used because the required Common Log File System (CLFS) component is not installed.","pos":[0,146],"source":"<xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed."},{"content":"Install the CLFS component if it is available for your platform, or use the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph> class.","pos":[147,283],"source":" Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class."}]}],"pos":[35636,35920],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[36036,36065],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[36179,36252],"yaml":true},{"content":"Moves the base sequence number of the log forward. This method cannot be inherited.","nodes":[{"pos":[0,83],"content":"Moves the base sequence number of the log forward. This method cannot be inherited.","nodes":[{"content":"Moves the base sequence number of the log forward. This method cannot be inherited.","pos":[0,83],"nodes":[{"content":"Moves the base sequence number of the log forward.","pos":[0,50]},{"content":"This method cannot be inherited.","pos":[51,83]}]}]}],"pos":[37384,37468],"yaml":true},{"content":"This method is often used with the <xref:System.IO.Log.LogRecordSequence.TailPinned> event to free up space in a record. The <xref:System.IO.Log.LogRecordSequence.TailPinned> event indicates that the tail of the sequence (that is, the base sequence number) needs to be moved forward to free up space. Freeing space can be done by either writing restart areas using the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method, or truncating the log and using the <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method to advance the base sequence number of a log to the one specified by the `newBaseSequenceNumber` parameter. The code sample in the Example section demonstrates the second approach.  \n  \n Note that calling this method is the same as setting a new base sequence number using the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method, except that no restart record is written to the log.","nodes":[{"pos":[0,727],"content":"This method is often used with the <xref:System.IO.Log.LogRecordSequence.TailPinned> event to free up space in a record. The <xref:System.IO.Log.LogRecordSequence.TailPinned> event indicates that the tail of the sequence (that is, the base sequence number) needs to be moved forward to free up space. Freeing space can be done by either writing restart areas using the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method, or truncating the log and using the <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method to advance the base sequence number of a log to the one specified by the `newBaseSequenceNumber` parameter. The code sample in the Example section demonstrates the second approach.","nodes":[{"content":"This method is often used with the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.TailPinned&gt;</ph> event to free up space in a record.","pos":[0,120],"source":"This method is often used with the <xref:System.IO.Log.LogRecordSequence.TailPinned> event to free up space in a record."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.TailPinned&gt;</ph> event indicates that the tail of the sequence (that is, the base sequence number) needs to be moved forward to free up space.","pos":[121,300],"source":" The <xref:System.IO.Log.LogRecordSequence.TailPinned> event indicates that the tail of the sequence (that is, the base sequence number) needs to be moved forward to free up space."},{"content":"Freeing space can be done by either writing restart areas using the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A&gt;</ph> method, or truncating the log and using the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A&gt;</ph> method to advance the base sequence number of a log to the one specified by the <ph id=\"ph3\">`newBaseSequenceNumber`</ph> parameter.","pos":[301,654],"source":" Freeing space can be done by either writing restart areas using the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method, or truncating the log and using the <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method to advance the base sequence number of a log to the one specified by the `newBaseSequenceNumber` parameter."},{"content":"The code sample in the Example section demonstrates the second approach.","pos":[655,727]}]},{"pos":[734,943],"content":"Note that calling this method is the same as setting a new base sequence number using the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method, except that no restart record is written to the log.","nodes":[{"content":"Note that calling this method is the same as setting a new base sequence number using the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A&gt;</ph> method, except that no restart record is written to the log.","pos":[0,209],"source":"Note that calling this method is the same as setting a new base sequence number using the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method, except that no restart record is written to the log."}]}],"pos":[37479,38427],"yaml":true,"extradata":"MT"},{"content":"Specifies the new base <xref href=\"System.IO.Log.SequenceNumber\"></xref> for the log. This must lie in the range between the current base sequence number and the last sequence number of the log inclusively.","nodes":[{"pos":[0,206],"content":"Specifies the new base <xref href=\"System.IO.Log.SequenceNumber\"></xref> for the log. This must lie in the range between the current base sequence number and the last sequence number of the log inclusively.","nodes":[{"content":"Specifies the new base <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.SequenceNumber\"&gt;&lt;/xref&gt;</ph> for the log.","pos":[0,85],"source":"Specifies the new base <xref href=\"System.IO.Log.SequenceNumber\"></xref> for the log."},{"content":"This must lie in the range between the current base sequence number and the last sequence number of the log inclusively.","pos":[86,206]}]}],"pos":[39709,39916],"yaml":true},{"content":"<code>newBaseSequenceNumber</code> is not valid for this sequence.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSequenceNumber&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>newBaseSequenceNumber</code> is not valid for this sequence."}],"pos":[40095,40162],"yaml":true},{"content":"A new or existing archive tail or base of the active log is invalid.  \n  \n -or-  \n  \n <code>newBaseSequenceNumber</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,68],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]},{"pos":[75,79],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[86,188],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSequenceNumber&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>newBaseSequenceNumber</code> is not between the base and last sequence numbers of this sequence."}],"pos":[40276,40471],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[40559,40724],"yaml":true},{"content":"The specified log does not have any extents. One or more extents must be created before a record sequence may be used.","nodes":[{"pos":[0,118],"content":"The specified log does not have any extents. One or more extents must be created before a record sequence may be used.","nodes":[{"content":"The specified log does not have any extents. One or more extents must be created before a record sequence may be used.","pos":[0,118],"nodes":[{"content":"The specified log does not have any extents.","pos":[0,44]},{"content":"One or more extents must be created before a record sequence may be used.","pos":[45,118]}]}]}],"pos":[40834,40953],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[41059,41122],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[41222,41291],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[41405,41478],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[41594,41623],"yaml":true},{"content":"Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,161],"content":"Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Appends a log record to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.IRecordSequence\"&gt;&lt;/xref&gt;</ph>, using space previously reserved in the sequence.","pos":[0,128],"source":"Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>, using space previously reserved in the sequence."},{"content":"This method cannot be inherited.","pos":[129,161]}]}],"pos":[43277,43439],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,512],"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","nodes":[{"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id=\"ph1\">`reservations`</ph> parameter.","pos":[0,136],"source":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter."},{"content":"If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","pos":[137,293]}]},{"pos":[519,815],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.LogRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,296],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method."}]}],"pos":[43450,44272],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[44655,44739],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[44824,44892],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[44977,45035],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[45130,45249],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this record.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record."}],"pos":[45339,45465],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[45537,45585],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,191],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,275],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[45745,46031],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[46133,46174],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence."}],"pos":[46288,46411],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[46499,46664],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[46766,46862],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[46968,47031],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[47131,47200],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[47316,47345],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[47459,47532],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[47662,47758],"yaml":true},{"content":"Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,161],"content":"Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Appends a log record to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.IRecordSequence\"&gt;&lt;/xref&gt;</ph>, using space previously reserved in the sequence.","pos":[0,128],"source":"Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>, using space previously reserved in the sequence."},{"content":"This method cannot be inherited.","pos":[129,161]}]}],"pos":[49535,49697],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,512],"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","nodes":[{"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id=\"ph1\">`reservations`</ph> parameter.","pos":[0,136],"source":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter."},{"content":"If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","pos":[137,293]}]},{"pos":[519,813],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.IRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,294],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method."}]}],"pos":[49708,50528],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[50975,51059],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[51140,51208],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[51293,51351],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[51446,51565],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this record.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record."}],"pos":[51655,51781],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[51853,51901],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,191],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,275],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[52061,52347],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[52449,52490],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence."}],"pos":[52604,52727],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[52815,52980],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[53082,53178],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[53284,53347],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[53447,53516],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[53632,53661],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[53775,53848],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[53978,54074],"yaml":true},{"content":"Writes a log record to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,113],"content":"Writes a log record to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Writes a log record to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,80],"source":"Writes a log record to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[81,113]}]}],"pos":[55551,55665],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,515],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.LogRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,296],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method."}]}],"pos":[55676,56196],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[56915,56999],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[57084,57152],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[57237,57295],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[57390,57509],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[57581,57629],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,191],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,275],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[57789,58075],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[58177,58218],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence."}],"pos":[58332,58455],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[58543,58708],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[58810,58906],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[59012,59075],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[59175,59244],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[59360,59389],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[59503,59576],"yaml":true},{"content":"Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,112],"content":"Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Appends a log record to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.IRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,79],"source":"Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[80,112]}]}],"pos":[61176,61289],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,515],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.LogRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,296],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method."}]}],"pos":[61300,61820],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[62217,62301],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[62382,62450],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[62535,62593],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[62688,62807],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[62879,62927],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,191],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,275],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[63087,63373],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[63475,63516],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence."}],"pos":[63630,63753],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[63841,64006],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[64108,64204],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[64310,64373],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[64473,64542],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[64658,64687],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[64801,64874],"yaml":true},{"content":"Gets the sequence number of the first valid record in the current <xref href=\"System.IO.Log.LogRecordSequence\"></xref>.","nodes":[{"pos":[0,119],"content":"Gets the sequence number of the first valid record in the current <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the sequence number of the first valid record in the current <xref href=\"System.IO.Log.LogRecordSequence\"></xref>."}],"pos":[65828,65948],"yaml":true},{"content":"Valid sequence numbers are greater than or equal to <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>.  \n  \n The value of this property can be changed by calling the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method or <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method.","nodes":[{"pos":[0,188],"content":"Valid sequence numbers are greater than or equal to <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>.","nodes":[{"content":"Valid sequence numbers are greater than or equal to <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A&gt;</ph> and less than <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A&gt;</ph>.","pos":[0,188],"source":"Valid sequence numbers are greater than or equal to <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>."}]},{"pos":[195,396],"content":"The value of this property can be changed by calling the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method or <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method.","nodes":[{"content":"The value of this property can be changed by calling the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A&gt;</ph> method or <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A&gt;</ph> method.","pos":[0,201],"source":"The value of this property can be changed by calling the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method or <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method."}]}],"pos":[65959,66360],"yaml":true,"extradata":"MT"},{"content":"The lowest sequence number that corresponds to a valid record in the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>.","nodes":[{"pos":[0,122],"content":"The lowest sequence number that corresponds to a valid record in the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph>.","source":"The lowest sequence number that corresponds to a valid record in the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>."}],"pos":[66920,67043],"yaml":true},{"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"pos":[0,66],"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"content":"The property was accessed after the sequence has been disposed of.","pos":[0,66]}]}],"pos":[67227,67294],"yaml":true},{"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"pos":[0,73],"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous append operation. This method cannot be inherited.","pos":[0,73],"nodes":[{"content":"Begins an asynchronous append operation.","pos":[0,40]},{"content":"This method cannot be inherited.","pos":[41,73]}]}]}],"pos":[68975,69049],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,451],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,451],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.EndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,228],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[229,451],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[458,670],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[677,973],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.LogRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,296],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method."}]}],"pos":[69060,70040],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[70400,70484],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[70569,70637],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[70722,70780],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[70875,70994],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[71065,71142],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[71203,71310],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous append, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending."}],"pos":[71373,71488],"yaml":true},{"content":"<code>nextUndoRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;nextUndoRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>nextUndoRecord</code> or <code>previousRecord</code> is not valid for this sequence."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,195],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[202,206],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[213,279],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[71653,71943],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[72045,72086],"yaml":true},{"content":"<code>nextUndoRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">&lt;code&gt;nextUndoRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>nextUndoRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence."}],"pos":[72200,72327],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[72415,72580],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[72682,72778],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[72884,72947],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[73047,73116],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[73232,73261],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[73375,73448],"yaml":true},{"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"pos":[0,73],"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous append operation. This method cannot be inherited.","pos":[0,73],"nodes":[{"content":"Begins an asynchronous append operation.","pos":[0,40]},{"content":"This method cannot be inherited.","pos":[41,73]}]}]}],"pos":[75252,75326],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,451],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,451],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.EndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,228],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[229,451],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[458,670],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[677,973],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.LogRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,296],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method."}]}],"pos":[75337,76317],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[76741,76825],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[76906,76974],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[77059,77117],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[77212,77331],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[77402,77479],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[77540,77647],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous append, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending."}],"pos":[77710,77825],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,191],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,275],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[77990,78276],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[78378,78419],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence."}],"pos":[78533,78656],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[78744,78909],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[79011,79107],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[79213,79276],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[79376,79445],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[79561,79590],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[79704,79777],"yaml":true},{"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"pos":[0,73],"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous append operation. This method cannot be inherited.","pos":[0,73],"nodes":[{"content":"Begins an asynchronous append operation.","pos":[0,40]},{"content":"This method cannot be inherited.","pos":[41,73]}]}]}],"pos":[81635,81709],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,451],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,451],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.EndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,228],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[229,451],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[458,670],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[677,970],"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","nodes":[{"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id=\"ph1\">`reservations`</ph> parameter.","pos":[0,136],"source":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter."},{"content":"If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","pos":[137,293]}]},{"pos":[977,1273],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.LogRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,296],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method."}]}],"pos":[81720,83002],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[83412,83496],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[83581,83649],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[83734,83792],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[83887,84006],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this record.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record."}],"pos":[84096,84222],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[84293,84370],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[84431,84538],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous append, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending."}],"pos":[84601,84716],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,191],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,275],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[84881,85167],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[85269,85310],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence."}],"pos":[85424,85547],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[85635,85800],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[85902,85998],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[86104,86167],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[86267,86336],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[86452,86481],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[86595,86668],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[86798,86894],"yaml":true},{"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"pos":[0,73],"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous append operation. This method cannot be inherited.","pos":[0,73],"nodes":[{"content":"Begins an asynchronous append operation.","pos":[0,40]},{"content":"This method cannot be inherited.","pos":[41,73]}]}]}],"pos":[88875,88949],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,451],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,451],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.EndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,228],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[229,451],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[458,670],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[677,970],"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","nodes":[{"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id=\"ph1\">`reservations`</ph> parameter.","pos":[0,136],"source":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter."},{"content":"If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","pos":[137,293]}]},{"pos":[977,1273],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.LogRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,296],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method."}]}],"pos":[88960,90242],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[90716,90800],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[90881,90949],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[91034,91092],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[91187,91306],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this record.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record."}],"pos":[91396,91522],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[91593,91670],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[91731,91838],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous append, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending."}],"pos":[91901,92016],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,191],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,275],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[92181,92467],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[92569,92610],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence."}],"pos":[92724,92847],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[92935,93100],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[93202,93298],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[93404,93467],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[93567,93636],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[93752,93781],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[93895,93968],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[94098,94194],"yaml":true},{"content":"Begins an asynchronous flush operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,121],"content":"Begins an asynchronous flush operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous flush operation, using space previously reserved in the sequence. This method cannot be inherited.","pos":[0,121],"nodes":[{"content":"Begins an asynchronous flush operation, using space previously reserved in the sequence.","pos":[0,88]},{"content":"This method cannot be inherited.","pos":[89,121]}]}]}],"pos":[95410,95532],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately. If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.LogRecordSequence> are durably written.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method is called.","nodes":[{"pos":[0,431],"content":"You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately. If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately. If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,431],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by the current method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.EndFlush%2A&gt;</ph> method to ensure that the flush completes and resources are freed appropriately.","pos":[0,216],"source":"You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately."},{"content":"If an error occurs during an asynchronous flush, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndFlush%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[217,431],"source":" If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[438,573],"content":"Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.LogRecordSequence> are durably written.","nodes":[{"content":"Calling this method ensures that all records that have been appended to the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> are durably written.","pos":[0,135],"source":"Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.LogRecordSequence> are durably written."}]},{"pos":[580,943],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method is called.","pos":[0,363],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndFlush%2A&gt;</ph> method is called.","pos":[136,363],"source":" Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method is called."}]}]}],"pos":[95543,96493],"yaml":true,"extradata":"MT"},{"content":"The sequence number of the latest record that must be written. If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.","nodes":[{"pos":[0,166],"content":"The sequence number of the latest record that must be written. If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.","nodes":[{"content":"The sequence number of the latest record that must be written.","pos":[0,62]},{"content":"If this <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.SequenceNumber\"&gt;&lt;/xref&gt;</ph> is invalid, then all records must be written.","pos":[63,166],"source":" If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written."}]}],"pos":[96733,96900],"yaml":true},{"content":"An optional asynchronous callback, to be called when the flush is complete.","nodes":[{"pos":[0,75],"content":"An optional asynchronous callback, to be called when the flush is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the flush is complete.","pos":[0,75]}]}],"pos":[96971,97047],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous flush request from other requests.","nodes":[{"pos":[0,105],"content":"A user-provided object that distinguishes this particular asynchronous flush request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous flush request from other requests.","pos":[0,105]}]}],"pos":[97108,97214],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous flush operation, which could still be pending.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous flush operation, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous flush operation, which could still be pending."}],"pos":[97277,97401],"yaml":true},{"content":"<code>sequenceNumber</code> is not valid for this sequence.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;sequenceNumber&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>sequenceNumber</code> is not valid for this sequence."}],"pos":[97565,97625],"yaml":true},{"content":"<code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">&lt;code&gt;sequenceNumber&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence."}],"pos":[97739,97835],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[97923,97998],"yaml":true},{"content":"The specified log does not have any extents. One or more extents must be created before a record sequence can be used.","nodes":[{"pos":[0,118],"content":"The specified log does not have any extents. One or more extents must be created before a record sequence can be used.","nodes":[{"content":"The specified log does not have any extents. One or more extents must be created before a record sequence can be used.","pos":[0,118],"nodes":[{"content":"The specified log does not have any extents.","pos":[0,44]},{"content":"One or more extents must be created before a record sequence can be used.","pos":[45,118]}]}]}],"pos":[98108,98227],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[98329,98425],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[98531,98594],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[98694,98763],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[98879,98908],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[99022,99095],"yaml":true},{"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"pos":[0,85],"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","pos":[0,85],"nodes":[{"content":"Begins an asynchronous reserve and append operation.","pos":[0,52]},{"content":"This method cannot be inherited.","pos":[53,85]}]}]}],"pos":[101085,101171],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \n  \n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"pos":[0,471],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,471],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,238],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[239,471],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[478,690],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[697,870],"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","pos":[0,173],"nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.","pos":[0,130]},{"content":"If the append fails, no space is reserved.","pos":[131,173]}]}]},{"pos":[877,1176],"content":"Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method may complete before the record has been written.","pos":[0,70]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.LogRecordSequence.Flush%2A&gt;</ph> method.","pos":[71,299],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method."}]},{"pos":[1183,1558],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","pos":[0,375],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.","pos":[136,375],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called."}]}]}],"pos":[101182,102751],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[103201,103285],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[103370,103438],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[103523,103581],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[103676,103795],"yaml":true},{"content":"The reservation collection to make reservations in.","nodes":[{"pos":[0,51],"content":"The reservation collection to make reservations in.","nodes":[{"content":"The reservation collection to make reservations in.","pos":[0,51]}]}],"pos":[103894,103946],"yaml":true},{"content":"The reservations to make, in bytes.","nodes":[{"pos":[0,35],"content":"The reservations to make, in bytes.","nodes":[{"content":"The reservations to make, in bytes.","pos":[0,35]}]}],"pos":[104015,104051],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[104122,104199],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[104260,104367],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending.","nodes":[{"pos":[0,118],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents this asynchronous operation, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending."}],"pos":[104430,104549],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,191],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,275],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[104724,105010],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[105112,105153],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence."}],"pos":[105267,105390],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[105478,105643],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[105745,105841],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[105947,106010],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[106110,106179],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[106295,106324],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[106438,106511],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[106641,106737],"yaml":true},{"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"pos":[0,85],"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","pos":[0,85],"nodes":[{"content":"Begins an asynchronous reserve and append operation.","pos":[0,52]},{"content":"This method cannot be inherited.","pos":[53,85]}]}]}],"pos":[108850,108936],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \n  \n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"pos":[0,471],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,471],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A&gt;</ph> method to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,238],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[239,471],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[478,690],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[697,870],"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","pos":[0,173],"nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.","pos":[0,130]},{"content":"If the append fails, no space is reserved.","pos":[131,173]}]}]},{"pos":[877,1176],"content":"Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method may complete before the record has been written.","pos":[0,70]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.LogRecordSequence.Flush%2A&gt;</ph> method.","pos":[71,299],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method."}]},{"pos":[1183,1558],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","pos":[0,375],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.","pos":[136,375],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called."}]}]}],"pos":[108947,110516],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[111030,111114],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[111195,111263],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[111348,111406],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[111501,111620],"yaml":true},{"content":"The reservation collection to make reservations in.","nodes":[{"pos":[0,51],"content":"The reservation collection to make reservations in.","nodes":[{"content":"The reservation collection to make reservations in.","pos":[0,51]}]}],"pos":[111719,111771],"yaml":true},{"content":"The reservations to make, in bytes.","nodes":[{"pos":[0,35],"content":"The reservations to make, in bytes.","nodes":[{"content":"The reservations to make, in bytes.","pos":[0,35]}]}],"pos":[111840,111876],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[111947,112024],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[112085,112192],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending.","nodes":[{"pos":[0,118],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents this asynchronous operation, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending."}],"pos":[112255,112374],"yaml":true},{"content":"One or more of the arguments is invalid.","nodes":[{"pos":[0,40],"content":"One or more of the arguments is invalid.","nodes":[{"content":"One or more of the arguments is invalid.","pos":[0,40]}]}],"pos":[112549,112590],"yaml":true},{"content":"An I/O error occurred while appending the record.","nodes":[{"pos":[0,49],"content":"An I/O error occurred while appending the record.","nodes":[{"content":"An I/O error occurred while appending the record.","pos":[0,49]}]}],"pos":[112678,112728],"yaml":true},{"content":"The record sequence could not make enough free space to contain the new record, or to make the reservation.","nodes":[{"pos":[0,107],"content":"The record sequence could not make enough free space to contain the new record, or to make the reservation.","nodes":[{"content":"The record sequence could not make enough free space to contain the new record, or to make the reservation.","pos":[0,107]}]}],"pos":[112844,112952],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[113058,113121],"yaml":true},{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,134],"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","pos":[0,134],"nodes":[{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence.","pos":[0,101]},{"content":"This method cannot be inherited.","pos":[102,134]}]}]}],"pos":[114862,114997],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \n  \n If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called.","nodes":[{"pos":[0,505],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,505],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A&gt;</ph> method to ensure that the restart area write operation has completed and resources can be freed appropriately.","pos":[0,250],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[251,505],"source":" If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[512,724],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[731,911],"content":"When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,180],"nodes":[{"content":"When the operation successfully completes, the base sequence number has been updated.","pos":[0,85]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[86,180]}]}]},{"pos":[918,1254],"content":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","nodes":[{"content":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","pos":[0,336],"nodes":[{"content":"If a <ph id=\"ph1\">&lt;xref:System.IO.Log.ReservationCollection&gt;</ph> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.","pos":[0,189],"source":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection."},{"content":"If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","pos":[190,336]}]}]},{"pos":[1261,1636],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called.","pos":[0,375],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called.","pos":[136,375],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called."}]}]}],"pos":[115008,116655],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[117051,117135],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[117219,117346],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this restart area.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area."}],"pos":[117445,117577],"yaml":true},{"content":"An optional asynchronous callback, to be called when the restart area write is complete.","nodes":[{"pos":[0,88],"content":"An optional asynchronous callback, to be called when the restart area write is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the restart area write is complete.","pos":[0,88]}]}],"pos":[117648,117737],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","nodes":[{"pos":[0,118],"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","pos":[0,118]}]}],"pos":[117798,117917],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending.","nodes":[{"pos":[0,136],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous restart area write operation, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending."}],"pos":[117980,118117],"yaml":true},{"content":"<code>newBaseSeqNum</code> is not valid for this sequence.  \n  \n -or-  \n  \n The specified log enumeration start sequence number is invalid.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservationCollection</code> was not created by this record sequence.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>newBaseSeqNum</code> is not valid for this sequence."},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,139],"content":"The specified log enumeration start sequence number is invalid.","nodes":[{"content":"The specified log enumeration start sequence number is invalid.","pos":[0,63]}]},{"pos":[146,150],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[157,244],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[251,255],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[262,337],"content":"<ph id=\"ph1\">&lt;code&gt;reservationCollection&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservationCollection</code> was not created by this record sequence."}],"pos":[118292,118644],"yaml":true},{"content":"One or more of the parameters is `null`.","nodes":[{"pos":[0,40],"content":"One or more of the parameters is <ph id=\"ph1\">`null`</ph>.","source":"One or more of the parameters is `null`."}],"pos":[118746,118787],"yaml":true},{"content":"A new or existing archive tail or base of the active log is invalid.  \n  \n -or-  \n  \n <code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,68],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]},{"pos":[75,79],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[86,180],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence."}],"pos":[118901,119088],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[119176,119341],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[119447,119510],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[119610,119679],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[119793,119866],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[119982,120011],"yaml":true},{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,134],"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","pos":[0,134],"nodes":[{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence.","pos":[0,101]},{"content":"This method cannot be inherited.","pos":[102,134]}]}]}],"pos":[121629,121764],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \n  \n If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called.","nodes":[{"pos":[0,505],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,505],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A&gt;</ph> method to ensure that the restart area write operation has completed and resources can be freed appropriately.","pos":[0,250],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[251,505],"source":" If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[512,724],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[731,911],"content":"When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,180],"nodes":[{"content":"When the operation successfully completes, the base sequence number has been updated.","pos":[0,85]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[86,180]}]}]},{"pos":[918,1254],"content":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","nodes":[{"content":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","pos":[0,336],"nodes":[{"content":"If a <ph id=\"ph1\">&lt;xref:System.IO.Log.ReservationCollection&gt;</ph> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.","pos":[0,189],"source":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection."},{"content":"If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","pos":[190,336]}]}]},{"pos":[1261,1636],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called.","pos":[0,375],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called.","pos":[136,375],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called."}]}]}],"pos":[121775,123422],"yaml":true,"extradata":"MT"},{"content":"Byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,73],"content":"Byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"Byte array segments that will be concatenated and appended as the record.","pos":[0,73]}]}],"pos":[123740,123814],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[123898,124025],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this restart area.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area."}],"pos":[124114,124246],"yaml":true},{"content":"An optional asynchronous callback, to be called when the restart area write is complete.","nodes":[{"pos":[0,88],"content":"An optional asynchronous callback, to be called when the restart area write is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the restart area write is complete.","pos":[0,88]}]}],"pos":[124317,124406],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","nodes":[{"pos":[0,118],"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","pos":[0,118]}]}],"pos":[124467,124586],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending.","nodes":[{"pos":[0,136],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous restart area write operation, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending."}],"pos":[124649,124786],"yaml":true},{"content":"<code>newBaseSeqNum</code> is not valid for this sequence.  \n  \n -or-  \n  \n The specified log enumeration start sequence number is invalid.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservation</code> was not created by this record sequence.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>newBaseSeqNum</code> is not valid for this sequence."},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,139],"content":"The specified log enumeration start sequence number is invalid.","nodes":[{"content":"The specified log enumeration start sequence number is invalid.","pos":[0,63]}]},{"pos":[146,150],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[157,244],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[251,255],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[262,327],"content":"<ph id=\"ph1\">&lt;code&gt;reservation&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservation</code> was not created by this record sequence."}],"pos":[124961,125303],"yaml":true},{"content":"One or more of the parameters is `null`.","nodes":[{"pos":[0,40],"content":"One or more of the parameters is <ph id=\"ph1\">`null`</ph>.","source":"One or more of the parameters is `null`."}],"pos":[125405,125446],"yaml":true},{"content":"A new or existing archive tail or base of the active log is invalid.  \n  \n -or-  \n  \n <code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,68],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]},{"pos":[75,79],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[86,180],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence."}],"pos":[125560,125747],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[125835,126000],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[126106,126169],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[126269,126338],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[126452,126525],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[126641,126670],"yaml":true},{"content":"Creates a new <xref href=\"System.IO.Log.ReservationCollection\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,104],"content":"Creates a new <xref href=\"System.IO.Log.ReservationCollection\"></xref>. This method cannot be inherited.","nodes":[{"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,71],"source":"Creates a new <xref href=\"System.IO.Log.ReservationCollection\"></xref>."},{"content":"This method cannot be inherited.","pos":[72,104]}]}],"pos":[127682,127787],"yaml":true},{"content":"The newly created <xref href=\"System.IO.Log.ReservationCollection\"></xref>.","nodes":[{"pos":[0,75],"content":"The newly created <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph>.","source":"The newly created <xref href=\"System.IO.Log.ReservationCollection\"></xref>."}],"pos":[129658,129734],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[129921,129990],"yaml":true},{"content":"Releases the resources used by the component.","nodes":[{"pos":[0,45],"content":"Releases the resources used by the component.","nodes":[{"content":"Releases the resources used by the component.","pos":[0,45]}]}],"pos":[130882,130928],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[131843,131906],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[132006,132075],"yaml":true},{"content":"Ends an asynchronous append operation. This method cannot be inherited.","nodes":[{"pos":[0,71],"content":"Ends an asynchronous append operation. This method cannot be inherited.","nodes":[{"content":"Ends an asynchronous append operation. This method cannot be inherited.","pos":[0,71],"nodes":[{"content":"Ends an asynchronous append operation.","pos":[0,38]},{"content":"This method cannot be inherited.","pos":[39,71]}]}]}],"pos":[133078,133150],"yaml":true},{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> is called.  \n  \n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginAppend%2A> method.","nodes":[{"pos":[0,243],"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> is called.","nodes":[{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> is called.","pos":[0,243],"nodes":[{"content":"This method blocks until the I/O operation has completed.","pos":[0,57]},{"content":"Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndAppend%2A&gt;</ph> is called.","pos":[58,243],"source":" Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> is called."}]}]},{"pos":[250,403],"content":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginAppend%2A> method.","nodes":[{"content":"This method must be called exactly once on every <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.BeginAppend%2A&gt;</ph> method.","pos":[0,153],"source":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginAppend%2A> method."}]}],"pos":[133161,133569],"yaml":true,"extradata":"MT"},{"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"pos":[0,56],"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"content":"A reference to the outstanding asynchronous I/O request.","pos":[0,56]}]}],"pos":[133745,133802],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[133874,133922],"yaml":true},{"content":"<code>result</code> is invalid.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;result&lt;/code&gt;</ph> is invalid.","source":"<code>result</code> is invalid."}],"pos":[134085,134117],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[134205,134370],"yaml":true},{"content":"`End` has already been called for this asynchronous operation.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`End`</ph> has already been called for this asynchronous operation.","source":"`End` has already been called for this asynchronous operation."}],"pos":[134480,134545],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[134647,134743],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[134849,134912],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[135012,135081],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[135197,135226],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[135340,135413],"yaml":true},{"content":"Ends an asynchronous flush operation. This method cannot be inherited.","nodes":[{"pos":[0,70],"content":"Ends an asynchronous flush operation. This method cannot be inherited.","nodes":[{"content":"Ends an asynchronous flush operation. This method cannot be inherited.","pos":[0,70],"nodes":[{"content":"Ends an asynchronous flush operation.","pos":[0,37]},{"content":"This method cannot be inherited.","pos":[38,70]}]}]}],"pos":[136410,136481],"yaml":true},{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> is called.  \n  \n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginFlush%2A> method.","nodes":[{"pos":[0,242],"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> is called.","nodes":[{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> is called.","pos":[0,242],"nodes":[{"content":"This method blocks until the I/O operation has completed.","pos":[0,57]},{"content":"Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndFlush%2A&gt;</ph> is called.","pos":[58,242],"source":" Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> is called."}]}]},{"pos":[249,401],"content":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginFlush%2A> method.","nodes":[{"content":"This method must be called exactly once on every <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.BeginFlush%2A&gt;</ph> method.","pos":[0,152],"source":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginFlush%2A> method."}]}],"pos":[136492,136898],"yaml":true,"extradata":"MT"},{"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"pos":[0,56],"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"content":"A reference to the outstanding asynchronous I/O request.","pos":[0,56]}]}],"pos":[137073,137130],"yaml":true},{"content":"The sequence number of the last record written.","nodes":[{"pos":[0,47],"content":"The sequence number of the last record written.","nodes":[{"content":"The sequence number of the last record written.","pos":[0,47]}]}],"pos":[137202,137250],"yaml":true},{"content":"<code>result</code> is invalid.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;result&lt;/code&gt;</ph> is invalid.","source":"<code>result</code> is invalid."}],"pos":[137412,137444],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[137532,137607],"yaml":true},{"content":"`End` has already been called for this asynchronous operation.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`End`</ph> has already been called for this asynchronous operation.","source":"`End` has already been called for this asynchronous operation."}],"pos":[137717,137782],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[137884,137980],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[138086,138149],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[138249,138318],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[138434,138463],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[138577,138650],"yaml":true},{"content":"Ends an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"pos":[0,83],"content":"Ends an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"content":"Ends an asynchronous reserve and append operation. This method cannot be inherited.","pos":[0,83],"nodes":[{"content":"Ends an asynchronous reserve and append operation.","pos":[0,50]},{"content":"This method cannot be inherited.","pos":[51,83]}]}]}],"pos":[139713,139797],"yaml":true},{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> is called.  \n  \n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginReserveAndAppend%2A> method.","nodes":[{"pos":[0,253],"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> is called.","nodes":[{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> is called.","pos":[0,253],"nodes":[{"content":"This method blocks until the I/O operation has completed.","pos":[0,57]},{"content":"Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A&gt;</ph> is called.","pos":[58,253],"source":" Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> is called."}]}]},{"pos":[260,423],"content":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginReserveAndAppend%2A> method.","nodes":[{"content":"This method must be called exactly once on every <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.BeginReserveAndAppend%2A&gt;</ph> method.","pos":[0,163],"source":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginReserveAndAppend%2A> method."}]}],"pos":[139808,140236],"yaml":true,"extradata":"MT"},{"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"pos":[0,56],"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"content":"A reference to the outstanding asynchronous I/O request.","pos":[0,56]}]}],"pos":[140422,140479],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[140551,140599],"yaml":true},{"content":"<code>result</code> is invalid.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;result&lt;/code&gt;</ph> is invalid.","source":"<code>result</code> is invalid."}],"pos":[140772,140804],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[140892,141057],"yaml":true},{"content":"`End` has already been called for this asynchronous operation.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`End`</ph> has already been called for this asynchronous operation.","source":"`End` has already been called for this asynchronous operation."}],"pos":[141167,141232],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[141334,141430],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[141536,141599],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[141699,141768],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[141884,141913],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[142027,142100],"yaml":true},{"content":"Ends an asynchronous restart area write operation. This method cannot be inherited.","nodes":[{"pos":[0,83],"content":"Ends an asynchronous restart area write operation. This method cannot be inherited.","nodes":[{"content":"Ends an asynchronous restart area write operation. This method cannot be inherited.","pos":[0,83],"nodes":[{"content":"Ends an asynchronous restart area write operation.","pos":[0,50]},{"content":"This method cannot be inherited.","pos":[51,83]}]}]}],"pos":[143163,143247],"yaml":true},{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> is called.  \n  \n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginWriteRestartArea%2A> method.","nodes":[{"pos":[0,253],"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> is called.","nodes":[{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> is called.","pos":[0,253],"nodes":[{"content":"This method blocks until the I/O operation has completed.","pos":[0,57]},{"content":"Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A&gt;</ph> is called.","pos":[58,253],"source":" Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> is called."}]}]},{"pos":[260,423],"content":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginWriteRestartArea%2A> method.","nodes":[{"content":"This method must be called exactly once on every <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.BeginWriteRestartArea%2A&gt;</ph> method.","pos":[0,163],"source":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginWriteRestartArea%2A> method."}]}],"pos":[143258,143686],"yaml":true,"extradata":"MT"},{"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"pos":[0,56],"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"content":"A reference to the outstanding asynchronous I/O request.","pos":[0,56]}]}],"pos":[143872,143929],"yaml":true},{"content":"The sequence number of the written log record.","nodes":[{"pos":[0,46],"content":"The sequence number of the written log record.","nodes":[{"content":"The sequence number of the written log record.","pos":[0,46]}]}],"pos":[144001,144048],"yaml":true},{"content":"<code>result</code> is not valid.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;result&lt;/code&gt;</ph> is not valid.","source":"<code>result</code> is not valid."}],"pos":[144221,144255],"yaml":true},{"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"pos":[0,68],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]}],"pos":[144369,144438],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[144526,144601],"yaml":true},{"content":"`End` has already been called for this asynchronous operation.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`End`</ph> has already been called for this asynchronous operation.","source":"`End` has already been called for this asynchronous operation."}],"pos":[144711,144776],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[144882,144945],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[145045,145114],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[145228,145301],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[145417,145446],"yaml":true},{"content":"Ensures that all appended records have been written. This method cannot be inherited.","nodes":[{"pos":[0,85],"content":"Ensures that all appended records have been written. This method cannot be inherited.","nodes":[{"content":"Ensures that all appended records have been written. This method cannot be inherited.","pos":[0,85],"nodes":[{"content":"Ensures that all appended records have been written.","pos":[0,52]},{"content":"This method cannot be inherited.","pos":[53,85]}]}]}],"pos":[146326,146412],"yaml":true},{"content":"Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.LogRecordSequence> have been durably written.","nodes":[{"pos":[0,141],"content":"Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.LogRecordSequence> have been durably written.","nodes":[{"content":"Calling this method ensures that all records that have been appended to the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence&gt;</ph> have been durably written.","pos":[0,141],"source":"Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.LogRecordSequence> have been durably written."}]}],"pos":[146423,146565],"yaml":true,"extradata":"MT"},{"content":"The sequence number of the last record written.","nodes":[{"pos":[0,47],"content":"The sequence number of the last record written.","nodes":[{"content":"The sequence number of the last record written.","pos":[0,47]}]}],"pos":[146725,146773],"yaml":true},{"content":"An I/O error occurred while flushing the data.","nodes":[{"pos":[0,46],"content":"An I/O error occurred while flushing the data.","nodes":[{"content":"An I/O error occurred while flushing the data.","pos":[0,46]}]}],"pos":[146926,146973],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[147079,147142],"yaml":true},{"content":"This operation is not supported.","nodes":[{"pos":[0,32],"content":"This operation is not supported.","nodes":[{"content":"This operation is not supported.","pos":[0,32]}]}],"pos":[147244,147277],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[147377,147446],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[147560,147633],"yaml":true},{"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"pos":[0,85],"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"content":"The record sequence could not make enough free space to contain the new restart area.","pos":[0,85]}]}],"pos":[147749,147835],"yaml":true},{"content":"The specified log does not have any extents. One or more extents must be created before a record sequence can be used.","nodes":[{"pos":[0,118],"content":"The specified log does not have any extents. One or more extents must be created before a record sequence can be used.","nodes":[{"content":"The specified log does not have any extents. One or more extents must be created before a record sequence can be used.","pos":[0,118],"nodes":[{"content":"The specified log does not have any extents.","pos":[0,44]},{"content":"One or more extents must be created before a record sequence can be used.","pos":[45,118]}]}]}],"pos":[147945,148064],"yaml":true},{"content":"Ensures that all appended records up to and including the record with the specified sequence number have been durably written. This method cannot be inherited.","nodes":[{"pos":[0,159],"content":"Ensures that all appended records up to and including the record with the specified sequence number have been durably written. This method cannot be inherited.","nodes":[{"content":"Ensures that all appended records up to and including the record with the specified sequence number have been durably written. This method cannot be inherited.","pos":[0,159],"nodes":[{"content":"Ensures that all appended records up to and including the record with the specified sequence number have been durably written.","pos":[0,126]},{"content":"This method cannot be inherited.","pos":[127,159]}]}]}],"pos":[149076,149236],"yaml":true},{"content":"Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.","nodes":[{"pos":[0,143],"content":"Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.","nodes":[{"content":"Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.","pos":[0,143]}]}],"pos":[149247,149391],"yaml":true,"extradata":"MT"},{"content":"The sequence number of the latest record that must be written. If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.","nodes":[{"pos":[0,166],"content":"The sequence number of the latest record that must be written. If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.","nodes":[{"content":"The sequence number of the latest record that must be written.","pos":[0,62]},{"content":"If this <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.SequenceNumber\"&gt;&lt;/xref&gt;</ph> is invalid, then all records must be written.","pos":[63,166],"source":" If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written."}]}],"pos":[149604,149771],"yaml":true},{"content":"The sequence number of the last record written.","nodes":[{"pos":[0,47],"content":"The sequence number of the last record written.","nodes":[{"content":"The sequence number of the last record written.","pos":[0,47]}]}],"pos":[149843,149891],"yaml":true},{"content":"<code>sequenceNumber</code> is not valid for this sequence.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;sequenceNumber&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>sequenceNumber</code> is not valid for this sequence."}],"pos":[150050,150110],"yaml":true},{"content":"<code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">&lt;code&gt;sequenceNumber&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence."}],"pos":[150224,150320],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[150408,150483],"yaml":true},{"content":"The specified log does not have any extents. One or more extents must be created before a record sequence can be used.","nodes":[{"pos":[0,118],"content":"The specified log does not have any extents. One or more extents must be created before a record sequence can be used.","nodes":[{"content":"The specified log does not have any extents. One or more extents must be created before a record sequence can be used.","pos":[0,118],"nodes":[{"content":"The specified log does not have any extents.","pos":[0,44]},{"content":"One or more extents must be created before a record sequence can be used.","pos":[45,118]}]}]}],"pos":[150593,150712],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[150814,150910],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[151016,151079],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[151179,151248],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[151364,151393],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[151507,151580],"yaml":true},{"content":"Gets the sequence number which is greater than the last record appended","nodes":[{"pos":[0,71],"content":"Gets the sequence number which is greater than the last record appended","nodes":[{"content":"Gets the sequence number which is greater than the last record appended","pos":[0,71]}]}],"pos":[152534,152606],"yaml":true},{"content":"This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record. Valid sequence numbers are greater than or equal to <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.","nodes":[{"pos":[0,355],"content":"This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record. Valid sequence numbers are greater than or equal to <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.","nodes":[{"content":"This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record. Valid sequence numbers are greater than or equal to <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.","pos":[0,355],"nodes":[{"content":"This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.","pos":[0,126]},{"content":"Valid sequence numbers are greater than or equal to <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A&gt;</ph> and less than <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A&gt;</ph>.","pos":[127,315],"source":" Valid sequence numbers are greater than or equal to <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>."},{"content":"All other sequence numbers are invalid.","pos":[316,355]}]}]}],"pos":[152617,152973],"yaml":true,"extradata":"MT"},{"content":"A sequence number which is greater than the last record appended.","nodes":[{"pos":[0,65],"content":"A sequence number which is greater than the last record appended.","nodes":[{"content":"A sequence number which is greater than the last record appended.","pos":[0,65]}]}],"pos":[153132,153198],"yaml":true},{"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"pos":[0,66],"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"content":"The property was accessed after the sequence has been disposed of.","pos":[0,66]}]}],"pos":[153382,153449],"yaml":true},{"content":"Gets the <xref href=\"System.IO.Log.LogStore\"></xref> that contains the data for this record sequence. This method cannot be inherited.","nodes":[{"pos":[0,134],"content":"Gets the <xref href=\"System.IO.Log.LogStore\"></xref> that contains the data for this record sequence. This method cannot be inherited.","nodes":[{"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogStore\"&gt;&lt;/xref&gt;</ph> that contains the data for this record sequence.","pos":[0,101],"source":"Gets the <xref href=\"System.IO.Log.LogStore\"></xref> that contains the data for this record sequence."},{"content":"This method cannot be inherited.","pos":[102,134]}]}],"pos":[154343,154478],"yaml":true},{"content":"The <xref href=\"System.IO.Log.LogStore\"></xref> that contains the data for this record sequence.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogStore\"&gt;&lt;/xref&gt;</ph> that contains the data for this record sequence.","source":"The <xref href=\"System.IO.Log.LogStore\"></xref> that contains the data for this record sequence."}],"pos":[155025,155122],"yaml":true},{"content":"Gets the maximum size of a record that can be added to this record sequence.","nodes":[{"pos":[0,76],"content":"Gets the maximum size of a record that can be added to this record sequence.","nodes":[{"content":"Gets the maximum size of a record that can be added to this record sequence.","pos":[0,76]}]}],"pos":[156153,156230],"yaml":true},{"content":"The maximum size of a record that can be added to this record sequence.","nodes":[{"pos":[0,71],"content":"The maximum size of a record that can be added to this record sequence.","nodes":[{"content":"The maximum size of a record that can be added to this record sequence.","pos":[0,71]}]}],"pos":[156350,156422],"yaml":true},{"content":"Returns an enumerable collection of records in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,93],"content":"Returns an enumerable collection of records in the sequence. This method cannot be inherited.","nodes":[{"content":"Returns an enumerable collection of records in the sequence. This method cannot be inherited.","pos":[0,93],"nodes":[{"content":"Returns an enumerable collection of records in the sequence.","pos":[0,60]},{"content":"This method cannot be inherited.","pos":[61,93]}]}]}],"pos":[157759,157853],"yaml":true},{"content":"This method returns an enumerable collection of records in the sequence. The order of the enumerated records depends on the value of the `logRecordEnum` parameter.","nodes":[{"pos":[0,163],"content":"This method returns an enumerable collection of records in the sequence. The order of the enumerated records depends on the value of the `logRecordEnum` parameter.","nodes":[{"content":"This method returns an enumerable collection of records in the sequence.","pos":[0,72]},{"content":"The order of the enumerated records depends on the value of the <ph id=\"ph1\">`logRecordEnum`</ph> parameter.","pos":[73,163],"source":" The order of the enumerated records depends on the value of the `logRecordEnum` parameter."}]}],"pos":[157864,158028],"yaml":true,"extradata":"MT"},{"content":"The sequence number of the first record where the reading starts.","nodes":[{"pos":[0,65],"content":"The sequence number of the first record where the reading starts.","nodes":[{"content":"The sequence number of the first record where the reading starts.","pos":[0,65]}]}],"pos":[158706,158772],"yaml":true},{"content":"A valid <xref href=\"System.IO.Log.LogRecordEnumeratorType\"></xref> value that specifies the manner (that is, forward or backward) in which records should be read from a <xref href=\"System.IO.Log.LogRecordSequence\"></xref>.","nodes":[{"pos":[0,222],"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordEnumeratorType\"&gt;&lt;/xref&gt;</ph> value that specifies the manner (that is, forward or backward) in which records should be read from a <ph id=\"ph2\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph>.","source":"A valid <xref href=\"System.IO.Log.LogRecordEnumeratorType\"></xref> value that specifies the manner (that is, forward or backward) in which records should be read from a <xref href=\"System.IO.Log.LogRecordSequence\"></xref>."}],"pos":[158865,159088],"yaml":true},{"content":"An enumerable collection of records in the sequence.","nodes":[{"pos":[0,52],"content":"An enumerable collection of records in the sequence.","nodes":[{"content":"An enumerable collection of records in the sequence.","pos":[0,52]}]}],"pos":[159195,159248],"yaml":true},{"content":"<code>start</code> is not valid for this sequence.  \n  \n -or-  \n  \n <code>logRecordEnum</code> is invalid.  \n  \n -or-  \n  \n The specified element was not found in the collection.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;start&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>start</code> is not valid for this sequence."},{"pos":[57,61],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[68,106],"content":"<ph id=\"ph1\">&lt;code&gt;logRecordEnum&lt;/code&gt;</ph> is invalid.","source":"<code>logRecordEnum</code> is invalid."},{"pos":[113,117],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[124,178],"content":"The specified element was not found in the collection.","nodes":[{"content":"The specified element was not found in the collection.","pos":[0,54]}]}],"pos":[159416,159605],"yaml":true},{"content":"<code>start</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;start&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>start</code> is not between the base and last sequence numbers of this sequence."}],"pos":[159719,159806],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.  \n  \n -or  \n  \n The buffer size used to write the log record is larger than the buffer size being used to read it.  \n  \n -or-  \n  \n The record sequence is corrupted.  \n  \n -or-  \n  \n The specified log file format or version is invalid.  \n  \n -or-  \n  \n The record was written with an incompatible version of the record sequence.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]},{"pos":[165,168],"content":"-or","nodes":[{"content":"-or","pos":[0,3]}]},{"pos":[175,273],"content":"The buffer size used to write the log record is larger than the buffer size being used to read it.","nodes":[{"content":"The buffer size used to write the log record is larger than the buffer size being used to read it.","pos":[0,98]}]},{"pos":[280,284],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[291,324],"content":"The record sequence is corrupted.","nodes":[{"content":"The record sequence is corrupted.","pos":[0,33]}]},{"pos":[331,335],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[342,394],"content":"The specified log file format or version is invalid.","nodes":[{"content":"The specified log file format or version is invalid.","pos":[0,52]}]},{"pos":[401,405],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[412,487],"content":"The record was written with an incompatible version of the record sequence.","nodes":[{"content":"The record was written with an incompatible version of the record sequence.","pos":[0,75]}]}],"pos":[159894,160404],"yaml":true},{"content":"The operation is invalid because the enumeration has not been started. A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made.","nodes":[{"pos":[0,155],"content":"The operation is invalid because the enumeration has not been started. A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made.","nodes":[{"content":"The operation is invalid because the enumeration has not been started.","pos":[0,70]},{"content":"A call to <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator.MoveNext\"&gt;&lt;/xref&gt;</ph> must be made.","pos":[71,155],"source":" A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made."}]}],"pos":[160514,160670],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[160776,160839],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[160939,161008],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[161122,161195],"yaml":true},{"content":"Returns an enumerable collection of the restart areas in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,103],"content":"Returns an enumerable collection of the restart areas in the sequence. This method cannot be inherited.","nodes":[{"content":"Returns an enumerable collection of the restart areas in the sequence. This method cannot be inherited.","pos":[0,103],"nodes":[{"content":"Returns an enumerable collection of the restart areas in the sequence.","pos":[0,70]},{"content":"This method cannot be inherited.","pos":[71,103]}]}]}],"pos":[162141,162245],"yaml":true},{"content":"The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number. Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.","nodes":[{"pos":[0,258],"content":"The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number. Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.","nodes":[{"content":"The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number. Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.","pos":[0,258],"nodes":[{"content":"The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number.","pos":[0,139]},{"content":"Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.","pos":[140,258]}]}]}],"pos":[162256,162515],"yaml":true,"extradata":"MT"},{"content":"An enumerable collection of the restart areas in the sequence.","nodes":[{"pos":[0,62],"content":"An enumerable collection of the restart areas in the sequence.","nodes":[{"content":"An enumerable collection of the restart areas in the sequence.","pos":[0,62]}]}],"pos":[162756,162819],"yaml":true},{"content":"<code>start</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;start&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>start</code> is not between the base and last sequence numbers of this sequence."}],"pos":[163009,163096],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.  \n  \n -or  \n  \n The buffer size used to write the log record is larger than the buffer size being used to read it.  \n  \n -or-  \n  \n The record sequence is corrupted.  \n  \n -or-  \n  \n The specified log file format or version is invalid.  \n  \n -or-  \n  \n The record was written with an incompatible version of the record sequence.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]},{"pos":[165,168],"content":"-or","nodes":[{"content":"-or","pos":[0,3]}]},{"pos":[175,273],"content":"The buffer size used to write the log record is larger than the buffer size being used to read it.","nodes":[{"content":"The buffer size used to write the log record is larger than the buffer size being used to read it.","pos":[0,98]}]},{"pos":[280,284],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[291,324],"content":"The record sequence is corrupted.","nodes":[{"content":"The record sequence is corrupted.","pos":[0,33]}]},{"pos":[331,335],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[342,394],"content":"The specified log file format or version is invalid.","nodes":[{"content":"The specified log file format or version is invalid.","pos":[0,52]}]},{"pos":[401,405],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[412,487],"content":"The record was written with an incompatible version of the record sequence.","nodes":[{"content":"The record was written with an incompatible version of the record sequence.","pos":[0,75]}]}],"pos":[163184,163694],"yaml":true},{"content":"The operation is invalid because the enumeration has not been started. A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made.  \n  \n -or  \n  \n The enumeration has ended.","nodes":[{"pos":[0,155],"content":"The operation is invalid because the enumeration has not been started. A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made.","nodes":[{"content":"The operation is invalid because the enumeration has not been started.","pos":[0,70]},{"content":"A call to <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator.MoveNext\"&gt;&lt;/xref&gt;</ph> must be made.","pos":[71,155],"source":" A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made."}]},{"pos":[162,165],"content":"-or","nodes":[{"content":"-or","pos":[0,3]}]},{"pos":[172,198],"content":"The enumeration has ended.","nodes":[{"content":"The enumeration has ended.","pos":[0,26]}]}],"pos":[163804,164011],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[164117,164180],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[164280,164349],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[164463,164536],"yaml":true},{"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","nodes":[{"pos":[0,111],"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","nodes":[{"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","pos":[0,111],"nodes":[{"content":"Automatically makes a single reservation and appends a record to the sequence.","pos":[0,78]},{"content":"This method cannot be inherited.","pos":[79,111]}]}]}],"pos":[166445,166557],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \n  \n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,392],"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","pos":[0,173],"nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.","pos":[0,130]},{"content":"If the append fails, no space is reserved.","pos":[131,173]}]}]},{"pos":[399,698],"content":"Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method may complete before the record has been written.","pos":[0,70]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.LogRecordSequence.Flush%2A&gt;</ph> method.","pos":[71,299],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method."}]}],"pos":[166568,167273],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[167760,167844],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[167925,167993],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[168078,168136],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[168231,168350],"yaml":true},{"content":"The reservation collection to make reservations in.","nodes":[{"pos":[0,51],"content":"The reservation collection to make reservations in.","nodes":[{"content":"The reservation collection to make reservations in.","pos":[0,51]}]}],"pos":[168449,168501],"yaml":true},{"content":"The reservations to make, in bytes.","nodes":[{"pos":[0,35],"content":"The reservations to make, in bytes.","nodes":[{"content":"The reservations to make, in bytes.","pos":[0,35]}]}],"pos":[168570,168606],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[168678,168726],"yaml":true},{"content":"One or more of the arguments is invalid.","nodes":[{"pos":[0,40],"content":"One or more of the arguments is invalid.","nodes":[{"content":"One or more of the arguments is invalid.","pos":[0,40]}]}],"pos":[168896,168937],"yaml":true},{"content":"An I/O error occurred while appending the record.","nodes":[{"pos":[0,49],"content":"An I/O error occurred while appending the record.","nodes":[{"content":"An I/O error occurred while appending the record.","pos":[0,49]}]}],"pos":[169025,169075],"yaml":true},{"content":"The record sequence could not make enough free space to contain the new record, or to make the reservation.","nodes":[{"pos":[0,107],"content":"The record sequence could not make enough free space to contain the new record, or to make the reservation.","nodes":[{"content":"The record sequence could not make enough free space to contain the new record, or to make the reservation.","pos":[0,107]}]}],"pos":[169191,169299],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[169405,169468],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[169570,169611],"yaml":true},{"content":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">&lt;code&gt;userRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence."}],"pos":[169725,169848],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[169950,170046],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[170146,170215],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[170329,170402],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[170532,170628],"yaml":true},{"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","nodes":[{"pos":[0,111],"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","nodes":[{"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","pos":[0,111],"nodes":[{"content":"Automatically makes a single reservation and appends a record to the sequence.","pos":[0,78]},{"content":"This method cannot be inherited.","pos":[79,111]}]}]}],"pos":[172414,172526],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \n  \n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,392],"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","pos":[0,173],"nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.","pos":[0,130]},{"content":"If the append fails, no space is reserved.","pos":[131,173]}]}]},{"pos":[399,698],"content":"Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method may complete before the record has been written.","pos":[0,70]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.LogRecordSequence.Flush%2A&gt;</ph> method.","pos":[71,299],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method."}]}],"pos":[172537,173242],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[174742,174826],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[174911,174979],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[175064,175122],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[175217,175336],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the collection to make reservations in.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the collection to make reservations in.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the collection to make reservations in."}],"pos":[175435,175548],"yaml":true},{"content":"The reservations to make, in bytes.","nodes":[{"pos":[0,35],"content":"The reservations to make, in bytes.","nodes":[{"content":"The reservations to make, in bytes.","pos":[0,35]}]}],"pos":[175617,175653],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[175725,175773],"yaml":true},{"content":"<code>nextUndoRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;nextUndoRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>nextUndoRecord</code> or <code>previousRecord</code> is not valid for this sequence."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,195],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[202,206],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[213,279],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[175943,176233],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[176335,176376],"yaml":true},{"content":"<code>nextUndoRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">&lt;code&gt;nextUndoRecord&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;previousRecord&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>nextUndoRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence."}],"pos":[176490,176617],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[176705,176870],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[176972,177068],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[177174,177237],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[177337,177406],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[177522,177551],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[177665,177738],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[177868,177964],"yaml":true},{"content":"Gets the total number of bytes that have been reserved.","nodes":[{"pos":[0,55],"content":"Gets the total number of bytes that have been reserved.","nodes":[{"content":"Gets the total number of bytes that have been reserved.","pos":[0,55]}]}],"pos":[178888,178944],"yaml":true},{"content":"The total size of all reservations made in this record sequence.","nodes":[{"pos":[0,64],"content":"The total size of all reservations made in this record sequence.","nodes":[{"content":"The total size of all reservations made in this record sequence.","pos":[0,64]}]}],"pos":[179058,179123],"yaml":true},{"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"pos":[0,66],"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"content":"The property was accessed after the sequence has been disposed of.","pos":[0,66]}]}],"pos":[179302,179369],"yaml":true},{"content":"Gets the sequence number of the restart area closest to the end of the log.","nodes":[{"pos":[0,75],"content":"Gets the sequence number of the restart area closest to the end of the log.","nodes":[{"content":"Gets the sequence number of the restart area closest to the end of the log.","pos":[0,75]}]}],"pos":[180341,180417],"yaml":true},{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n Using the <xref:System.IO.Log.LogRecordSequence.SetLastRecord%2A> method, you can remove the most recently written restart area.","nodes":[{"pos":[0,473],"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,473],"nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation.","pos":[0,104]},{"content":"The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.","pos":[105,229]},{"content":"When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.","pos":[230,344]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[345,473]}]}]},{"pos":[480,608],"content":"Using the <xref:System.IO.Log.LogRecordSequence.SetLastRecord%2A> method, you can remove the most recently written restart area.","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.SetLastRecord%2A&gt;</ph> method, you can remove the most recently written restart area.","pos":[0,128],"source":"Using the <xref:System.IO.Log.LogRecordSequence.SetLastRecord%2A> method, you can remove the most recently written restart area."}]}],"pos":[180428,181041],"yaml":true,"extradata":"MT"},{"content":"The sequence number of the restart area closest to the end of the log.","nodes":[{"pos":[0,70],"content":"The sequence number of the restart area closest to the end of the log.","nodes":[{"content":"The sequence number of the restart area closest to the end of the log.","pos":[0,70]}]}],"pos":[181203,181274],"yaml":true},{"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"pos":[0,66],"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"content":"The property was accessed after the sequence has been disposed of.","pos":[0,66]}]}],"pos":[181461,181528],"yaml":true},{"content":"Gets or sets a value indicating whether or not appends are automatically retried if the log is full.","nodes":[{"pos":[0,100],"content":"Gets or sets a value indicating whether or not appends are automatically retried if the log is full.","nodes":[{"content":"Gets or sets a value indicating whether or not appends are automatically retried if the log is full.","pos":[0,100]}]}],"pos":[182440,182541],"yaml":true},{"content":"If the value of this property is `true`, and an <xref:System.IO.Log.LogRecordSequence.Append%2A> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append.","nodes":[{"pos":[0,223],"content":"If the value of this property is <ph id=\"ph1\">`true`</ph>, and an <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.Append%2A&gt;</ph> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append.","source":"If the value of this property is `true`, and an <xref:System.IO.Log.LogRecordSequence.Append%2A> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append."}],"pos":[182552,182776],"yaml":true,"extradata":"MT"},{"content":"`true` if appends are automatically retried if the log is full; otherwise, `false`. The default is `true`.","nodes":[{"pos":[0,106],"content":"`true` if appends are automatically retried if the log is full; otherwise, `false`. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if appends are automatically retried if the log is full; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,83],"source":"`true` if appends are automatically retried if the log is full; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[84,106],"source":" The default is `true`."}]}],"pos":[183287,183396],"yaml":true},{"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"pos":[0,66],"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"content":"The property was accessed after the sequence has been disposed of.","pos":[0,66]}]}],"pos":[183573,183640],"yaml":true},{"content":"Sets the last record in the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>.","nodes":[{"pos":[0,81],"content":"Sets the last record in the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph>.","source":"Sets the last record in the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>."}],"pos":[184700,184782],"yaml":true},{"content":"The specified sequence number must be larger than the base sequence number.  \n  \n When this method completes, all records that had previously been appended with sequence numbers greater than the specified sequence number are inaccessible.","nodes":[{"pos":[0,75],"content":"The specified sequence number must be larger than the base sequence number.","nodes":[{"content":"The specified sequence number must be larger than the base sequence number.","pos":[0,75]}]},{"pos":[82,238],"content":"When this method completes, all records that had previously been appended with sequence numbers greater than the specified sequence number are inaccessible.","nodes":[{"content":"When this method completes, all records that had previously been appended with sequence numbers greater than the specified sequence number are inaccessible.","pos":[0,156]}]}],"pos":[184793,185036],"yaml":true,"extradata":"MT"},{"content":"The new last sequence number in the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>.  \n  \n This should refer to a current valid record   currently in the log.","nodes":[{"pos":[0,89],"content":"The new last sequence number in the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph>.","source":"The new last sequence number in the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>."},{"pos":[96,163],"content":"This should refer to a current valid record   currently in the log.","nodes":[{"content":"This should refer to a current valid record   currently in the log.","pos":[0,67]}]}],"pos":[185233,185403],"yaml":true},{"content":"<code>sequenceNumber</code> is not valid for this sequence.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;sequenceNumber&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>sequenceNumber</code> is not valid for this sequence."}],"pos":[185570,185630],"yaml":true},{"content":"A new or existing archive tail or base of the active log is invalid.  \n  \n -or-  \n  \n <code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,68],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]},{"pos":[75,79],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[86,181],"content":"<ph id=\"ph1\">&lt;code&gt;sequenceNumber&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence."}],"pos":[185744,185932],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The end of the log has been reached.  \n  \n -or-  \n  \n The specified log file format or version is invalid.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,128],"content":"The end of the log has been reached.","nodes":[{"content":"The end of the log has been reached.","pos":[0,36]}]},{"pos":[135,139],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[146,198],"content":"The specified log file format or version is invalid.","nodes":[{"content":"The specified log file format or version is invalid.","pos":[0,52]}]}],"pos":[186020,186229],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[186335,186398],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[186498,186567],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[186681,186754],"yaml":true},{"content":"Signals the need to move the tail of the sequence.","nodes":[{"pos":[0,50],"content":"Signals the need to move the tail of the sequence.","nodes":[{"content":"Signals the need to move the tail of the sequence.","pos":[0,50]}]}],"pos":[187657,187708],"yaml":true},{"content":"You can fire this event when the record sequence has run out of space. When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.  \n  \n The event can be fired at any time when the record sequence decides that it must free up space, for any reason. For example, the CLFS policy engine may decide to fire the event when it determines that the tails of two log clients sharing the same log file are too far apart. Freeing space can be done by either writing restart areas, or truncating the log and using the <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method to clear space. The code sample in the Example section demonstrates the second approach.  \n  \n You can also call the <xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A> method outside of the <xref:System.IO.Log.LogRecordSequence.TailPinned> event to free space. A restart area is similar to a checkpoint in other log processing systems. Calling this method indicates that the application considers all prior records before the restart area as fully completed, and usable for future record appends. Similar to any other records, the record written by this method requires actual free space in the log to function.","nodes":[{"pos":[0,192],"content":"You can fire this event when the record sequence has run out of space. When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.","nodes":[{"content":"You can fire this event when the record sequence has run out of space. When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.","pos":[0,192],"nodes":[{"content":"You can fire this event when the record sequence has run out of space.","pos":[0,70]},{"content":"When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.","pos":[71,192]}]}]},{"pos":[199,732],"content":"The event can be fired at any time when the record sequence decides that it must free up space, for any reason. For example, the CLFS policy engine may decide to fire the event when it determines that the tails of two log clients sharing the same log file are too far apart. Freeing space can be done by either writing restart areas, or truncating the log and using the <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method to clear space. The code sample in the Example section demonstrates the second approach.","nodes":[{"content":"The event can be fired at any time when the record sequence decides that it must free up space, for any reason. For example, the CLFS policy engine may decide to fire the event when it determines that the tails of two log clients sharing the same log file are too far apart. Freeing space can be done by either writing restart areas, or truncating the log and using the <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method to clear space. The code sample in the Example section demonstrates the second approach.","pos":[0,533],"nodes":[{"content":"The event can be fired at any time when the record sequence decides that it must free up space, for any reason.","pos":[0,111]},{"content":"For example, the CLFS policy engine may decide to fire the event when it determines that the tails of two log clients sharing the same log file are too far apart.","pos":[112,274]},{"content":"Freeing space can be done by either writing restart areas, or truncating the log and using the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A&gt;</ph> method to clear space.","pos":[275,460],"source":" Freeing space can be done by either writing restart areas, or truncating the log and using the <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method to clear space."},{"content":"The code sample in the Example section demonstrates the second approach.","pos":[461,533]}]}]},{"pos":[739,1264],"content":"You can also call the <xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A> method outside of the <xref:System.IO.Log.LogRecordSequence.TailPinned> event to free space. A restart area is similar to a checkpoint in other log processing systems. Calling this method indicates that the application considers all prior records before the restart area as fully completed, and usable for future record appends. Similar to any other records, the record written by this method requires actual free space in the log to function.","nodes":[{"content":"You can also call the <xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A> method outside of the <xref:System.IO.Log.LogRecordSequence.TailPinned> event to free space. A restart area is similar to a checkpoint in other log processing systems. Calling this method indicates that the application considers all prior records before the restart area as fully completed, and usable for future record appends. Similar to any other records, the record written by this method requires actual free space in the log to function.","pos":[0,525],"nodes":[{"content":"You can also call the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A&gt;</ph> method outside of the <ph id=\"ph2\">&lt;xref:System.IO.Log.LogRecordSequence.TailPinned&gt;</ph> event to free space.","pos":[0,174],"source":"You can also call the <xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A> method outside of the <xref:System.IO.Log.LogRecordSequence.TailPinned> event to free space."},{"content":"A restart area is similar to a checkpoint in other log processing systems.","pos":[175,249]},{"content":"Calling this method indicates that the application considers all prior records before the restart area as fully completed, and usable for future record appends.","pos":[250,410]},{"content":"Similar to any other records, the record written by this method requires actual free space in the log to function.","pos":[411,525]}]}]}],"pos":[187719,188990],"yaml":true,"extradata":"MT"},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,115],"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,82],"source":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[83,115]}]}],"pos":[191246,191362],"yaml":true},{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \n  \n The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"pos":[0,473],"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,473],"nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation.","pos":[0,104]},{"content":"The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.","pos":[105,229]},{"content":"When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.","pos":[230,344]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[345,473]}]}]},{"pos":[480,583],"content":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,103],"source":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[590,796],"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,206],"nodes":[{"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record.","pos":[0,110]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[111,206]}]}]}],"pos":[191373,192176],"yaml":true,"extradata":"MT"},{"content":"An array segment that will be concatenated and appended as the record.","nodes":[{"pos":[0,70],"content":"An array segment that will be concatenated and appended as the record.","nodes":[{"content":"An array segment that will be concatenated and appended as the record.","pos":[0,70]}]}],"pos":[192374,192445],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[192517,192566],"yaml":true},{"content":"One or more of the arguments is invalid.","nodes":[{"pos":[0,40],"content":"One or more of the arguments is invalid.","nodes":[{"content":"One or more of the arguments is invalid.","pos":[0,40]}]}],"pos":[192736,192777],"yaml":true},{"content":"An I/O error occurred while writing the restart area.","nodes":[{"pos":[0,53],"content":"An I/O error occurred while writing the restart area.","nodes":[{"content":"An I/O error occurred while writing the restart area.","pos":[0,53]}]}],"pos":[192865,192919],"yaml":true},{"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"pos":[0,85],"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"content":"The record sequence could not make enough free space to contain the new restart area.","pos":[0,85]}]}],"pos":[193035,193121],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[193227,193290],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[193392,193433],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[193547,193620],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[193720,193789],"yaml":true},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,115],"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,82],"source":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[83,115]}]}],"pos":[195014,195130],"yaml":true},{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \n  \n The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"pos":[0,473],"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,473],"nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation.","pos":[0,104]},{"content":"The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.","pos":[105,229]},{"content":"When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.","pos":[230,344]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[345,473]}]}]},{"pos":[480,583],"content":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,103],"source":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[590,796],"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,206],"nodes":[{"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record.","pos":[0,110]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[111,206]}]}]}],"pos":[195141,195944],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[196210,196294],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[196366,196415],"yaml":true},{"content":"One or more of the arguments is invalid.","nodes":[{"pos":[0,40],"content":"One or more of the arguments is invalid.","nodes":[{"content":"One or more of the arguments is invalid.","pos":[0,40]}]}],"pos":[196585,196626],"yaml":true},{"content":"An I/O error occurred while writing the restart area.","nodes":[{"pos":[0,53],"content":"An I/O error occurred while writing the restart area.","nodes":[{"content":"An I/O error occurred while writing the restart area.","pos":[0,53]}]}],"pos":[196714,196768],"yaml":true},{"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"pos":[0,85],"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"content":"The record sequence could not make enough free space to contain the new restart area.","pos":[0,85]}]}],"pos":[196884,196970],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[197076,197139],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[197241,197282],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[197396,197469],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[197569,197638],"yaml":true},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> and updates the base sequence number. This method cannot be inherited.","nodes":[{"pos":[0,152],"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> and updates the base sequence number. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> and updates the base sequence number.","pos":[0,119],"source":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> and updates the base sequence number."},{"content":"This method cannot be inherited.","pos":[120,152]}]}],"pos":[198875,199028],"yaml":true},{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \n  \n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \n  \n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"pos":[0,473],"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,473],"nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation.","pos":[0,104]},{"content":"The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.","pos":[105,229]},{"content":"When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.","pos":[230,344]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[345,473]}]}]},{"pos":[480,583],"content":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,103],"source":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[590,824],"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,234],"nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.","pos":[0,138]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[139,234]}]}]},{"pos":[831,1009],"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,178],"nodes":[{"content":"When this method successfully completes, the base sequence number has been updated.","pos":[0,83]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[84,178]}]}]},{"pos":[1016,1391],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","pos":[0,375],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.","pos":[136,375],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called."}]}]}],"pos":[199039,200441],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[200683,200767],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[200851,200978],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[201050,201099],"yaml":true},{"content":"One or more of the arguments is invalid.","nodes":[{"pos":[0,40],"content":"One or more of the arguments is invalid.","nodes":[{"content":"One or more of the arguments is invalid.","pos":[0,40]}]}],"pos":[201269,201310],"yaml":true},{"content":"An I/O error occurred while writing the restart area.","nodes":[{"pos":[0,53],"content":"An I/O error occurred while writing the restart area.","nodes":[{"content":"An I/O error occurred while writing the restart area.","pos":[0,53]}]}],"pos":[201398,201452],"yaml":true},{"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"pos":[0,85],"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"content":"The record sequence could not make enough free space to contain the new restart area.","pos":[0,85]}]}],"pos":[201568,201654],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[201760,201823],"yaml":true},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> and updates the base sequence number. This method cannot be inherited.","nodes":[{"pos":[0,152],"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> and updates the base sequence number. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> and updates the base sequence number.","pos":[0,119],"source":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> and updates the base sequence number."},{"content":"This method cannot be inherited.","pos":[120,152]}]}],"pos":[203183,203336],"yaml":true},{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \n  \n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \n  \n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"pos":[0,473],"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,473],"nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation.","pos":[0,104]},{"content":"The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.","pos":[105,229]},{"content":"When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.","pos":[230,344]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[345,473]}]}]},{"pos":[480,583],"content":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,103],"source":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[590,824],"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,234],"nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.","pos":[0,138]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[139,234]}]}]},{"pos":[831,1009],"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,178],"nodes":[{"content":"When this method successfully completes, the base sequence number has been updated.","pos":[0,83]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[84,178]}]}]},{"pos":[1016,1391],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","pos":[0,375],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.","pos":[136,375],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called."}]}]}],"pos":[203347,204749],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[205059,205143],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[205227,205354],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[205426,205475],"yaml":true},{"content":"One or more of the arguments is invalid.","nodes":[{"pos":[0,40],"content":"One or more of the arguments is invalid.","nodes":[{"content":"One or more of the arguments is invalid.","pos":[0,40]}]}],"pos":[205645,205686],"yaml":true},{"content":"An I/O error occurred while writing the restart area.","nodes":[{"pos":[0,53],"content":"An I/O error occurred while writing the restart area.","nodes":[{"content":"An I/O error occurred while writing the restart area.","pos":[0,53]}]}],"pos":[205774,205828],"yaml":true},{"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"pos":[0,85],"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"content":"The record sequence could not make enough free space to contain the new restart area.","pos":[0,85]}]}],"pos":[205944,206030],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[206136,206199],"yaml":true},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> using a reservation, and updates the base sequence number. This method cannot be inherited.","nodes":[{"pos":[0,173],"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> using a reservation, and updates the base sequence number. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> using a reservation, and updates the base sequence number.","pos":[0,140],"source":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> using a reservation, and updates the base sequence number."},{"content":"This method cannot be inherited.","pos":[141,173]}]}],"pos":[207613,207787],"yaml":true},{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \n  \n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \n  \n If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.  \n  \n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"pos":[0,473],"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,473],"nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation.","pos":[0,104]},{"content":"The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.","pos":[105,229]},{"content":"When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.","pos":[230,344]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[345,473]}]}]},{"pos":[480,583],"content":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,103],"source":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[590,824],"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,234],"nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.","pos":[0,138]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[139,234]}]}]},{"pos":[831,1139],"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","nodes":[{"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","pos":[0,308],"nodes":[{"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.","pos":[0,158]},{"content":"If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","pos":[159,308]}]}]},{"pos":[1146,1324],"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,178],"nodes":[{"content":"When this method successfully completes, the base sequence number has been updated.","pos":[0,83]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[84,178]}]}]},{"pos":[1331,1706],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","pos":[0,375],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.","pos":[136,375],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called."}]}]}],"pos":[207798,209517],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[209809,209893],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[209977,210104],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this restart area.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area."}],"pos":[210194,210326],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[210398,210447],"yaml":true},{"content":"One or more of the arguments is invalid.","nodes":[{"pos":[0,40],"content":"One or more of the arguments is invalid.","nodes":[{"content":"One or more of the arguments is invalid.","pos":[0,40]}]}],"pos":[210617,210658],"yaml":true},{"content":"An I/O error occurred while writing the restart area.","nodes":[{"pos":[0,53],"content":"An I/O error occurred while writing the restart area.","nodes":[{"content":"An I/O error occurred while writing the restart area.","pos":[0,53]}]}],"pos":[210746,210800],"yaml":true},{"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"pos":[0,85],"content":"The record sequence could not make enough free space to contain the new restart area.","nodes":[{"content":"The record sequence could not make enough free space to contain the new restart area.","pos":[0,85]}]}],"pos":[210916,211002],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[211108,211171],"yaml":true},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> using a reservation, and updates the base sequence number. This method cannot be inherited.","nodes":[{"pos":[0,173],"content":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> using a reservation, and updates the base sequence number. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph> using a reservation, and updates the base sequence number.","pos":[0,140],"source":"Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> using a reservation, and updates the base sequence number."},{"content":"This method cannot be inherited.","pos":[141,173]}]}],"pos":[212708,212882],"yaml":true},{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \n  \n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \n  \n If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.  \n  \n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"pos":[0,473],"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,473],"nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation.","pos":[0,104]},{"content":"The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.","pos":[105,229]},{"content":"When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.","pos":[230,344]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[345,473]}]}]},{"pos":[480,583],"content":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,103],"source":"A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[590,824],"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,234],"nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.","pos":[0,138]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[139,234]}]}]},{"pos":[831,1139],"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","nodes":[{"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","pos":[0,308],"nodes":[{"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.","pos":[0,158]},{"content":"If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","pos":[159,308]}]}]},{"pos":[1146,1324],"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,178],"nodes":[{"content":"When this method successfully completes, the base sequence number has been updated.","pos":[0,83]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[84,178]}]}]},{"pos":[1331,1706],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.","pos":[0,375],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.","pos":[136,375],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called."}]}]}],"pos":[212893,214612],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[214981,215065],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[215149,215276],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this restart area.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area."}],"pos":[215375,215507],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[215579,215628],"yaml":true},{"content":"<code>newBaseSeqNum</code> is not valid for this sequence.  \n  \n -or-  \n  \n The specified log enumeration start sequence number is invalid.  \n  \n -or-  \n  \n <code>data</code> cannot be appended because it is larger than the maximum record size.  \n  \n -or-  \n  \n <code>reservationCollection</code> was not created by this record sequence.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>newBaseSeqNum</code> is not valid for this sequence."},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,139],"content":"The specified log enumeration start sequence number is invalid.","nodes":[{"content":"The specified log enumeration start sequence number is invalid.","pos":[0,63]}]},{"pos":[146,150],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[157,244],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> cannot be appended because it is larger than the maximum record size.","source":"<code>data</code> cannot be appended because it is larger than the maximum record size."},{"pos":[251,255],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[262,337],"content":"<ph id=\"ph1\">&lt;code&gt;reservationCollection&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservationCollection</code> was not created by this record sequence."}],"pos":[215798,216150],"yaml":true},{"content":"One or more of the parameters is `null`.","nodes":[{"pos":[0,40],"content":"One or more of the parameters is <ph id=\"ph1\">`null`</ph>.","source":"One or more of the parameters is `null`."}],"pos":[216252,216293],"yaml":true},{"content":"A new or existing archive tail or base of the active log is invalid.  \n  \n -or-  \n  \n <code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,68],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]},{"pos":[75,79],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[86,180],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence."}],"pos":[216407,216594],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.  \n  \n -or-  \n  \n The request could not be performed because of an I/O device error.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,158],"content":"The request could not be performed because of an I/O device error.","nodes":[{"content":"The request could not be performed because of an I/O device error.","pos":[0,66]}]}],"pos":[216682,216847],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[216953,217016],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[217116,217185],"yaml":true},{"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"pos":[0,72],"content":"Access for the specified log sequence is denied by the operating system.","nodes":[{"content":"Access for the specified log sequence is denied by the operating system.","pos":[0,72]}]}],"pos":[217299,217372],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[217488,217517],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.Log.LogRecordSequence\n  commentId: T:System.IO.Log.LogRecordSequence\n  id: LogRecordSequence\n  children:\n  - System.IO.Log.LogRecordSequence.#ctor(System.IO.Log.LogStore)\n  - System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode)\n  - System.IO.Log.LogRecordSequence.#ctor(System.IO.Log.LogStore,System.Int32,System.Int32)\n  - System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)\n  - System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  - System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32)\n  - System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32,System.Security.AccessControl.FileSecurity)\n  - System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)\n  - System.IO.Log.LogRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  - System.IO.Log.LogRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  - System.IO.Log.LogRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  - System.IO.Log.LogRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  - System.IO.Log.LogRecordSequence.BaseSequenceNumber\n  - System.IO.Log.LogRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  - System.IO.Log.LogRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  - System.IO.Log.LogRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  - System.IO.Log.LogRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  - System.IO.Log.LogRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)\n  - System.IO.Log.LogRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  - System.IO.Log.LogRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  - System.IO.Log.LogRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  - System.IO.Log.LogRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  - System.IO.Log.LogRecordSequence.CreateReservationCollection\n  - System.IO.Log.LogRecordSequence.Dispose\n  - System.IO.Log.LogRecordSequence.EndAppend(System.IAsyncResult)\n  - System.IO.Log.LogRecordSequence.EndFlush(System.IAsyncResult)\n  - System.IO.Log.LogRecordSequence.EndReserveAndAppend(System.IAsyncResult)\n  - System.IO.Log.LogRecordSequence.EndWriteRestartArea(System.IAsyncResult)\n  - System.IO.Log.LogRecordSequence.Flush\n  - System.IO.Log.LogRecordSequence.Flush(System.IO.Log.SequenceNumber)\n  - System.IO.Log.LogRecordSequence.LastSequenceNumber\n  - System.IO.Log.LogRecordSequence.LogStore\n  - System.IO.Log.LogRecordSequence.MaximumRecordLength\n  - System.IO.Log.LogRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)\n  - System.IO.Log.LogRecordSequence.ReadRestartAreas\n  - System.IO.Log.LogRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  - System.IO.Log.LogRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  - System.IO.Log.LogRecordSequence.ReservedBytes\n  - System.IO.Log.LogRecordSequence.RestartSequenceNumber\n  - System.IO.Log.LogRecordSequence.RetryAppend\n  - System.IO.Log.LogRecordSequence.SetLastRecord(System.IO.Log.SequenceNumber)\n  - System.IO.Log.LogRecordSequence.TailPinned\n  - System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})\n  - System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})\n  - System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)\n  - System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)\n  - System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  - System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  langs:\n  - csharp\n  name: LogRecordSequence\n  nameWithType: LogRecordSequence\n  fullName: System.IO.Log.LogRecordSequence\n  type: Class\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Represents a record sequence stored in a <xref href=\"System.IO.Log.LogStore\"></xref>.\n  remarks: The <xref:System.IO.Log.LogRecordSequence> class provides an implementation of the record sequence interface on top of a Common Log File System (CLFS) log. In addition to the standard record-oriented features, it provides a policy model for avoiding log-full conditions, and multiplexing of clients on the same physical file. It works with the <xref:System.IO.Log.LogStore> class, which provides an interface for directly manipulating and managing a CLFS log file. The relationship between the <xref:System.IO.Log.LogStore> class and the <xref:System.IO.Log.LogRecordSequence> class is similar to the relationship between a disk file and a <xref:System.IO.FileStream> object. The disk file provides the concrete storage, and has attributes such as length and last access time; while the <xref:System.IO.FileStream> object provides a view on the file that can be used to read from it and write to it. Similarly, the <xref:System.IO.Log.LogStore> class has attributes like a policy and a collection of disk extents; and the <xref:System.IO.Log.LogRecordSequence> class provides a record-oriented mechanism for reading and writing data.\n  example:\n  - \"This example shows how to use the <xref:System.IO.Log.LogRecordSequence> class:  \\n  \\n [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]\\n [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]\"\n  syntax:\n    content: 'public sealed class LogRecordSequence : IDisposable, System.IO.Log.IRecordSequence'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  - System.IO.Log.IRecordSequence\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.IO.Log.LogStore)\n  commentId: M:System.IO.Log.LogRecordSequence.#ctor(System.IO.Log.LogStore)\n  id: '#ctor(System.IO.Log.LogStore)'\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: LogRecordSequence(LogStore)\n  nameWithType: LogRecordSequence.LogRecordSequence(LogStore)\n  fullName: LogRecordSequence.LogRecordSequence(LogStore)\n  type: Constructor\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with the specified log store.\n  remarks: The buffer size determines the maximum size of the record that can be appended or read. In this constructor, a default value of 64 is set. The desired number of buffers is set to 10.\n  syntax:\n    content: public LogRecordSequence (System.IO.Log.LogStore logStore);\n    parameters:\n    - id: logStore\n      type: System.IO.Log.LogStore\n      description: The <xref href=\"System.IO.Log.LogStore\"></xref> that this record sequence should use.\n  overload: System.IO.Log.LogRecordSequence.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>logStore</code> is invalid.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode)\n  commentId: M:System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode)\n  id: '#ctor(System.String,System.IO.FileMode)'\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: LogRecordSequence(String, FileMode)\n  nameWithType: LogRecordSequence.LogRecordSequence(String, FileMode)\n  fullName: LogRecordSequence.LogRecordSequence(String, FileMode)\n  type: Constructor\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store and the access mode.\n  remarks: This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path and mode. It is given read/write access to the store, and the store is opened sharing Read access.\n  syntax:\n    content: public LogRecordSequence (string path, System.IO.FileMode mode);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the base file of the log store to open.\n    - id: mode\n      type: System.IO.FileMode\n      description: One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store.\n  overload: System.IO.Log.LogRecordSequence.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\").  \\n  \\n -or-  \\n  \\n <code>path</code> contains only white space.  \\n  \\n -or-  \\n  \\n <code>path</code> contains one or more invalid characters.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>mode</code> contains an invalid value.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs when opening the log store.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This operation is not supported.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: <xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.IO.Log.LogStore,System.Int32,System.Int32)\n  commentId: M:System.IO.Log.LogRecordSequence.#ctor(System.IO.Log.LogStore,System.Int32,System.Int32)\n  id: '#ctor(System.IO.Log.LogStore,System.Int32,System.Int32)'\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: LogRecordSequence(LogStore, Int32, Int32)\n  nameWithType: LogRecordSequence.LogRecordSequence(LogStore, Int32, Int32)\n  fullName: LogRecordSequence.LogRecordSequence(LogStore, Int32, Int32)\n  type: Constructor\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with the specified log store, buffer size for each record, and buffer number.\n  remarks: Use this constructor if you want to specify values for `bufferSize` and `bufferCount` and do not want to use the default value of 64 for `bufferSize` and 10 for `bufferCount`.\n  syntax:\n    content: public LogRecordSequence (System.IO.Log.LogStore logStore, int bufferSize, int bufferCount);\n    parameters:\n    - id: logStore\n      type: System.IO.Log.LogStore\n      description: The <xref href=\"System.IO.Log.LogStore\"></xref> that this record sequence should use.\n    - id: bufferSize\n      type: System.Int32\n      description: The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.\n    - id: bufferCount\n      type: System.Int32\n      description: The desired number of buffers.\n  overload: System.IO.Log.LogRecordSequence.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>logStore</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>bufferSize</code> is negative or zero.  \\n  \\n -or-  \\n  \\n <code>bufferCount</code> is negative or zero.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)\n  commentId: M:System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)\n  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)'\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: LogRecordSequence(String, FileMode, FileAccess)\n  nameWithType: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess)\n  fullName: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess)\n  type: Constructor\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store and the access and share modes.\n  remarks: This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing Read access.\n  syntax:\n    content: public LogRecordSequence (string path, System.IO.FileMode mode, System.IO.FileAccess access);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the base file of the log store to open.\n    - id: mode\n      type: System.IO.FileMode\n      description: One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store.\n    - id: access\n      type: System.IO.FileAccess\n      description: One of the <xref href=\"System.IO.FileAccess\"></xref> values that determines how the file can be accessed by the <xref href=\"System.IO.Log.LogStore\"></xref>.\n  overload: System.IO.Log.LogRecordSequence.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\").  \\n  \\n -or-  \\n  \\n <code>path</code> contains only white space.  \\n  \\n -or-  \\n  \\n <code>path</code> contains one or more invalid characters.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>mode</code> contains an invalid value.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs when opening the log store.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This operation is not supported.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: <xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  commentId: M:System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)'\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: LogRecordSequence(String, FileMode, FileAccess, FileShare)\n  nameWithType: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare)\n  fullName: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare)\n  type: Constructor\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store and the access mode.\n  remarks: This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing the specified access.\n  example:\n  - \"This example shows how to use this <xref:System.IO.Log.LogRecordSequence> constructor:  \\n  \\n [!code-csharp[S_UELogRecordSequence#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#1)]\\n [!code-vb[S_UELogRecordSequence#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#1)]\"\n  syntax:\n    content: public LogRecordSequence (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the base file of the log store to open.\n    - id: mode\n      type: System.IO.FileMode\n      description: One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store.\n    - id: access\n      type: System.IO.FileAccess\n      description: One of the <xref href=\"System.IO.FileAccess\"></xref> values that determines how the file can be accessed by the <xref href=\"System.IO.Log.LogStore\"></xref>.\n    - id: share\n      type: System.IO.FileShare\n      description: One of the <xref href=\"System.IO.FileShare\"></xref> values that determines how the log store will be shared among processes.\n  overload: System.IO.Log.LogRecordSequence.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\").  \\n  \\n -or-  \\n  \\n <code>path</code> contains only white space.  \\n  \\n -or-  \\n  \\n <code>path</code> contains one or more invalid characters.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>mode</code> contains an invalid value.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs when opening the log store.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This operation is not supported.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: <xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32)\n  commentId: M:System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32)\n  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32)'\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32)\n  nameWithType: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32)\n  fullName: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32)\n  type: Constructor\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class with a specified path to the log store, file permission, access and share modes, and the buffer size and count for records.\n  remarks: This constructor initializes a new <xref:System.IO.Log.LogRecordSequence> on a new <xref:System.IO.Log.LogStore> object that it opens with the specified path, mode, and access. The store is opened sharing the specified access.\n  syntax:\n    content: public LogRecordSequence (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, int bufferCount);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the base file of the log store to open.\n    - id: mode\n      type: System.IO.FileMode\n      description: One of the <xref href=\"System.IO.FileMode\"></xref> values that determines how to open or create the store.\n    - id: access\n      type: System.IO.FileAccess\n      description: One of the <xref href=\"System.IO.FileAccess\"></xref> values that determines how the file can be accessed by the <xref href=\"System.IO.Log.LogStore\"></xref>.\n    - id: share\n      type: System.IO.FileShare\n      description: One of the <xref href=\"System.IO.FileShare\"></xref> values that determines how the log store will be shared among processes.\n    - id: bufferSize\n      type: System.Int32\n      description: The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.\n    - id: bufferCount\n      type: System.Int32\n      description: The desired number of buffers.\n  overload: System.IO.Log.LogRecordSequence.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\").  \\n  \\n -or-  \\n  \\n <code>path</code> contains only white space.  \\n  \\n -or-  \\n  \\n <code>path</code> contains one or more invalid characters.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>mode</code> contains an invalid value.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs when opening the log store.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This operation is not supported.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: <xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32,System.Security.AccessControl.FileSecurity)\n  commentId: M:System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32,System.Security.AccessControl.FileSecurity)\n  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32,System.Security.AccessControl.FileSecurity)'\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32, FileSecurity)\n  nameWithType: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32, FileSecurity)\n  fullName: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32, FileSecurity)\n  type: Constructor\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Initializes a new instance of the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> class.\n  syntax:\n    content: public LogRecordSequence (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, int bufferCount, System.Security.AccessControl.FileSecurity fileSecurity);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the base file of the log store to open.\n    - id: mode\n      type: System.IO.FileMode\n      description: A valid <xref href=\"System.IO.FileMode\"></xref> value that determines how to open or create the store.\n    - id: access\n      type: System.IO.FileAccess\n      description: A valid <xref href=\"System.IO.FileAccess\"></xref> value that determines how the log store can be accessed.\n    - id: share\n      type: System.IO.FileShare\n      description: A valid <xref href=\"System.IO.FileShare\"></xref> value that determines how the log store will be shared among processes.\n    - id: bufferSize\n      type: System.Int32\n      description: The desired buffer size in bytes. The buffer size determines the maximum size of the record that can be appended or read.\n    - id: bufferCount\n      type: System.Int32\n      description: The desired number of buffers.\n    - id: fileSecurity\n      type: System.Security.AccessControl.FileSecurity\n      description: A valid <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> value that specifies the security to set on the newly created store if the store must be created.\n  overload: System.IO.Log.LogRecordSequence.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The file specified by <code>path</code> is not valid.  \\n  \\n -or-  \\n  \\n The specified log store file name is not valid.  \\n  \\n -or-  \\n  \\n <code>mode</code> has a value of <xref href=\\\"System.IO.FileMode.CreateNew\\\"></xref>, and cannot be used without write access.  \\n  \\n -or-  \\n  \\n <code>mode</code> has a value of <xref href=\\\"System.IO.FileMode.OpenOrCreate\\\"></xref>, and cannot be used without write access.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified by <code>path</code> cannot be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The file specified by <code>path</code> cannot be accessed because it is in use by another process.  \\n  \\n -or-  \\n  \\n The file specified by <code>path</code> cannot be created because the file or directory already exists.  \\n  \\n -or-  \\n  \\n The log handle could not be bound to the thread pool.  \\n  \\n -or-  \\n  \\n The specified log file format or version is invalid.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This operation is not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: <xref href=\"System.IO.Log.LogRecordSequence\"></xref> cannot be used because the required Common Log File System (CLFS) component is not installed. Install the CLFS component if it is available for your platform, or use the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)\n  commentId: M:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)\n  id: AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: AdvanceBaseSequenceNumber(SequenceNumber)\n  nameWithType: LogRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)\n  fullName: LogRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Moves the base sequence number of the log forward. This method cannot be inherited.\n  remarks: \"This method is often used with the <xref:System.IO.Log.LogRecordSequence.TailPinned> event to free up space in a record. The <xref:System.IO.Log.LogRecordSequence.TailPinned> event indicates that the tail of the sequence (that is, the base sequence number) needs to be moved forward to free up space. Freeing space can be done by either writing restart areas using the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method, or truncating the log and using the <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method to advance the base sequence number of a log to the one specified by the `newBaseSequenceNumber` parameter. The code sample in the Example section demonstrates the second approach.  \\n  \\n Note that calling this method is the same as setting a new base sequence number using the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method, except that no restart record is written to the log.\"\n  example:\n  - \"This example shows how to use the <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method with the <xref:System.IO.Log.LogRecordSequence.TailPinned> event to free up space in a log sequence.  \\n  \\n```  \\nrecordSequence.RetryAppend = true;  \\nrecordSequence.TailPinned += new EventHandler<TailPinnedEventArgs>(HandleTailPinned);  \\n  \\nvoid HandleTailPinned(object sender, TailPinnedEventArgs tailPinnedEventArgs)  \\n{  \\n   // tailPinnedEventArgs.TargetSequenceNumber is the target   \\n   // sequence number to free up space to.    \\n   // However, this sequence number is not necessarily valid.  We have  \\n   // to use this sequence number as a starting point for finding a  \\n   // valid point within the log to advance toward. You need to  \\n   // identify a record with a sequence number equal to, or greater  \\n   // than TargetSequenceNumber; let's call this   \\n   // realTargetSequenceNumber. Once found, move the base  \\n  \\n   recordSequence.AdvanceBaseSequenceNumber(realTargetSequenceNumber);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public void AdvanceBaseSequenceNumber (System.IO.Log.SequenceNumber newBaseSequenceNumber);\n    parameters:\n    - id: newBaseSequenceNumber\n      type: System.IO.Log.SequenceNumber\n      description: Specifies the new base <xref href=\"System.IO.Log.SequenceNumber\"></xref> for the log. This must lie in the range between the current base sequence number and the last sequence number of the log inclusively.\n  overload: System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>newBaseSequenceNumber</code> is not valid for this sequence.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"A new or existing archive tail or base of the active log is invalid.  \\n  \\n -or-  \\n  \\n <code>newBaseSequenceNumber</code> is not between the base and last sequence numbers of this sequence.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The specified log does not have any extents. One or more extents must be created before a record sequence may be used.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  commentId: M:System.IO.Log.LogRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  id: Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  nameWithType: LogRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  fullName: LogRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber Append (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservations\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.LogRecordSequence.Append*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservations</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  commentId: M:System.IO.Log.LogRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  id: Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  nameWithType: LogRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  fullName: LogRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.IRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: userRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservations\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.LogRecordSequence.Append*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservations</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  commentId: M:System.IO.Log.LogRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  id: Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  nameWithType: LogRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  fullName: LogRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a log record to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.\"\n  example:\n  - \"The following example demonstrates how to use this method to append a log record to the sequence.  \\n  \\n [!code-csharp[S_UELogRecordSequence#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#13)]\\n [!code-vb[S_UELogRecordSequence#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#13)]\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber Append (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.LogRecordSequence.Append*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservations</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  commentId: M:System.IO.Log.LogRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  id: Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  nameWithType: LogRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  fullName: LogRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Appends a log record to the <xref href=\"System.IO.Log.IRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: userRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.LogRecordSequence.Append*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservations</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.BaseSequenceNumber\n  commentId: P:System.IO.Log.LogRecordSequence.BaseSequenceNumber\n  id: BaseSequenceNumber\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: BaseSequenceNumber\n  nameWithType: LogRecordSequence.BaseSequenceNumber\n  fullName: LogRecordSequence.BaseSequenceNumber\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the sequence number of the first valid record in the current <xref href=\"System.IO.Log.LogRecordSequence\"></xref>.\n  remarks: \"Valid sequence numbers are greater than or equal to <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>.  \\n  \\n The value of this property can be changed by calling the <xref:System.IO.Log.LogRecordSequence.WriteRestartArea%2A> method or <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method.\"\n  example:\n  - \"This example shows how to use the <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A> member in a loop.  \\n  \\n [!code-csharp[S_UELogRecordSequence#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#10)]\\n [!code-vb[S_UELogRecordSequence#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#10)]\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The lowest sequence number that corresponds to a valid record in the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>.\n  overload: System.IO.Log.LogRecordSequence.BaseSequenceNumber*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The property was accessed after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.LogRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  id: BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous append operation. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public IAsyncResult BeginAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.\n  overload: System.IO.Log.LogRecordSequence.BeginAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>nextUndoRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservations</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>nextUndoRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.LogRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  id: BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous append operation. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public IAsyncResult BeginAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: userRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.\n  overload: System.IO.Log.LogRecordSequence.BeginAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservations</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.LogRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  id: BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous append operation. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public IAsyncResult BeginAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservations\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.\n  overload: System.IO.Log.LogRecordSequence.BeginAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservations</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.LogRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  id: BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous append operation. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public IAsyncResult BeginAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: userRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservations\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.\n  overload: System.IO.Log.LogRecordSequence.BeginAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservations</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.LogRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)\n  id: BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: BeginFlush(SequenceNumber, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginFlush(SequenceNumber, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginFlush(SequenceNumber, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous flush operation, using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately. If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.LogRecordSequence> are durably written.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> method is called.\"\n  syntax:\n    content: public IAsyncResult BeginFlush (System.IO.Log.SequenceNumber sequenceNumber, AsyncCallback callback, object state);\n    parameters:\n    - id: sequenceNumber\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the latest record that must be written. If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the flush is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous flush request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous flush operation, which could still be pending.\n  overload: System.IO.Log.LogRecordSequence.BeginFlush*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>sequenceNumber</code> is not valid for this sequence.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The specified log does not have any extents. One or more extents must be created before a record sequence can be used.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.LogRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  id: BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous reserve and append operation. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \\n  \\n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.\"\n  syntax:\n    content: public IAsyncResult BeginReserveAndAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservationCollection\n      type: System.IO.Log.ReservationCollection\n      description: The reservation collection to make reservations in.\n    - id: reservations\n      type: System.Int64[]\n      description: The reservations to make, in bytes.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending.\n  overload: System.IO.Log.LogRecordSequence.BeginReserveAndAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>userRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservations</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.LogRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  id: BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous reserve and append operation. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \\n  \\n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.\"\n  syntax:\n    content: public IAsyncResult BeginReserveAndAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: userRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservationCollection\n      type: System.IO.Log.ReservationCollection\n      description: The reservation collection to make reservations in.\n    - id: reservations\n      type: System.Int64[]\n      description: The reservations to make, in bytes.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending.\n  overload: System.IO.Log.LogRecordSequence.BeginReserveAndAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One or more of the arguments is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while appending the record.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence could not make enough free space to contain the new record, or to make the reservation.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.LogRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  id: BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \\n  \\n If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called.\"\n  syntax:\n    content: public IAsyncResult BeginWriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservationCollection, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    - id: reservationCollection\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the restart area write is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending.\n  overload: System.IO.Log.LogRecordSequence.BeginWriteRestartArea*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>newBaseSeqNum</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n The specified log enumeration start sequence number is invalid.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservationCollection</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the parameters is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"A new or existing archive tail or base of the active log is invalid.  \\n  \\n -or-  \\n  \\n <code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.LogRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  id: BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method to ensure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \\n  \\n If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> method is called.\"\n  syntax:\n    content: public IAsyncResult BeginWriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: Byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    - id: reservation\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the restart area write is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending.\n  overload: System.IO.Log.LogRecordSequence.BeginWriteRestartArea*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>newBaseSeqNum</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n The specified log enumeration start sequence number is invalid.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservation</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the parameters is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"A new or existing archive tail or base of the active log is invalid.  \\n  \\n -or-  \\n  \\n <code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.CreateReservationCollection\n  commentId: M:System.IO.Log.LogRecordSequence.CreateReservationCollection\n  id: CreateReservationCollection\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: CreateReservationCollection()\n  nameWithType: LogRecordSequence.CreateReservationCollection()\n  fullName: LogRecordSequence.CreateReservationCollection()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Creates a new <xref href=\"System.IO.Log.ReservationCollection\"></xref>. This method cannot be inherited.\n  remarks: ''\n  example:\n  - \"Reservations can be performed in two ways as shown in the following examples. You can adopt the practices in the samples for robust processing. Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.  \\n  \\n```  \\n//Using the ReserveAndAppend Method  \\nReservationCollection reservations = recordSequence.CreateReservationCollection();  \\nlong[] lengthOfUndoRecords = new long[] { 1000 };  \\nrecordSequence.ReserveAndAppend(recordData,  \\n                                                     userSqn,  \\n                                                     previousSqn,  \\n                                                     RecordSequenceAppendOptions.None,  \\n                                                     reservations,  \\n                                                     lengthOfUndoRecords);  \\nrecordSequence.Append(undoRecordData,    // If necessary …  \\n                                    userSqn,  \\n                                    previousSqn,  \\n                                    RecordSequenceAppendOptions.ForceFlush,  \\n                                    reservations);  \\n  \\n// Using the Manual Approach  \\nReservationCollection reservations = recordSequence.CreateReservationCollection();  \\nreservations.Add(lengthOfUndoRecord);  \\ntry  \\n{  \\n   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  \\n}  \\ncatch (Exception)  \\n{  \\n   reservations.Remove(lengthOfUndoRecord);  \\n   throw;  \\n}  \\n  \\nrecordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  \\n```\"\n  syntax:\n    content: public System.IO.Log.ReservationCollection CreateReservationCollection ();\n    parameters: []\n    return:\n      type: System.IO.Log.ReservationCollection\n      description: The newly created <xref href=\"System.IO.Log.ReservationCollection\"></xref>.\n  overload: System.IO.Log.LogRecordSequence.CreateReservationCollection*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.Dispose\n  commentId: M:System.IO.Log.LogRecordSequence.Dispose\n  id: Dispose\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: LogRecordSequence.Dispose()\n  fullName: LogRecordSequence.Dispose()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Releases the resources used by the component.\n  remarks: ''\n  example:\n  - \"This example shows how to use <xref:System.IO.Log.LogRecordSequence.Dispose%2A> to release resources:  \\n  \\n [!code-csharp[S_UELogRecordSequence#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#11)]\\n [!code-vb[S_UELogRecordSequence#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#11)]  \\n  \\n [!code-csharp[S_UELogRecordSequence#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#12)] \\n [!code-vb[S_UELogRecordSequence#12](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#12)]\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.IO.Log.LogRecordSequence.Dispose*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.EndAppend(System.IAsyncResult)\n  commentId: M:System.IO.Log.LogRecordSequence.EndAppend(System.IAsyncResult)\n  id: EndAppend(System.IAsyncResult)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: EndAppend(IAsyncResult)\n  nameWithType: LogRecordSequence.EndAppend(IAsyncResult)\n  fullName: LogRecordSequence.EndAppend(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ends an asynchronous append operation. This method cannot be inherited.\n  remarks: \"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndAppend%2A> is called.  \\n  \\n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginAppend%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber EndAppend (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: A reference to the outstanding asynchronous I/O request.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.LogRecordSequence.EndAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>result</code> is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: '`End` has already been called for this asynchronous operation.'\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.EndFlush(System.IAsyncResult)\n  commentId: M:System.IO.Log.LogRecordSequence.EndFlush(System.IAsyncResult)\n  id: EndFlush(System.IAsyncResult)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: EndFlush(IAsyncResult)\n  nameWithType: LogRecordSequence.EndFlush(IAsyncResult)\n  fullName: LogRecordSequence.EndFlush(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ends an asynchronous flush operation. This method cannot be inherited.\n  remarks: \"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndFlush%2A> is called.  \\n  \\n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginFlush%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber EndFlush (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: A reference to the outstanding asynchronous I/O request.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the last record written.\n  overload: System.IO.Log.LogRecordSequence.EndFlush*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>result</code> is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: '`End` has already been called for this asynchronous operation.'\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.EndReserveAndAppend(System.IAsyncResult)\n  commentId: M:System.IO.Log.LogRecordSequence.EndReserveAndAppend(System.IAsyncResult)\n  id: EndReserveAndAppend(System.IAsyncResult)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: EndReserveAndAppend(IAsyncResult)\n  nameWithType: LogRecordSequence.EndReserveAndAppend(IAsyncResult)\n  fullName: LogRecordSequence.EndReserveAndAppend(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ends an asynchronous reserve and append operation. This method cannot be inherited.\n  remarks: \"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> is called.  \\n  \\n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginReserveAndAppend%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber EndReserveAndAppend (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: A reference to the outstanding asynchronous I/O request.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.LogRecordSequence.EndReserveAndAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>result</code> is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: '`End` has already been called for this asynchronous operation.'\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.EndWriteRestartArea(System.IAsyncResult)\n  commentId: M:System.IO.Log.LogRecordSequence.EndWriteRestartArea(System.IAsyncResult)\n  id: EndWriteRestartArea(System.IAsyncResult)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: EndWriteRestartArea(IAsyncResult)\n  nameWithType: LogRecordSequence.EndWriteRestartArea(IAsyncResult)\n  fullName: LogRecordSequence.EndWriteRestartArea(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ends an asynchronous restart area write operation. This method cannot be inherited.\n  remarks: \"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.LogRecordSequence.EndWriteRestartArea%2A> is called.  \\n  \\n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.LogRecordSequence.BeginWriteRestartArea%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber EndWriteRestartArea (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: A reference to the outstanding asynchronous I/O request.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written log record.\n  overload: System.IO.Log.LogRecordSequence.EndWriteRestartArea*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>result</code> is not valid.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: A new or existing archive tail or base of the active log is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: '`End` has already been called for this asynchronous operation.'\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.Flush\n  commentId: M:System.IO.Log.LogRecordSequence.Flush\n  id: Flush\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: LogRecordSequence.Flush()\n  fullName: LogRecordSequence.Flush()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ensures that all appended records have been written. This method cannot be inherited.\n  remarks: Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.LogRecordSequence> have been durably written.\n  syntax:\n    content: public System.IO.Log.SequenceNumber Flush ();\n    parameters: []\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the last record written.\n  overload: System.IO.Log.LogRecordSequence.Flush*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while flushing the data.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This operation is not supported.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence could not make enough free space to contain the new restart area.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The specified log does not have any extents. One or more extents must be created before a record sequence can be used.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.Flush(System.IO.Log.SequenceNumber)\n  commentId: M:System.IO.Log.LogRecordSequence.Flush(System.IO.Log.SequenceNumber)\n  id: Flush(System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: Flush(SequenceNumber)\n  nameWithType: LogRecordSequence.Flush(SequenceNumber)\n  fullName: LogRecordSequence.Flush(SequenceNumber)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ensures that all appended records up to and including the record with the specified sequence number have been durably written. This method cannot be inherited.\n  remarks: Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.\n  syntax:\n    content: public System.IO.Log.SequenceNumber Flush (System.IO.Log.SequenceNumber sequenceNumber);\n    parameters:\n    - id: sequenceNumber\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the latest record that must be written. If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the last record written.\n  overload: System.IO.Log.LogRecordSequence.Flush*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>sequenceNumber</code> is not valid for this sequence.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The specified log does not have any extents. One or more extents must be created before a record sequence can be used.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.LastSequenceNumber\n  commentId: P:System.IO.Log.LogRecordSequence.LastSequenceNumber\n  id: LastSequenceNumber\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: LastSequenceNumber\n  nameWithType: LogRecordSequence.LastSequenceNumber\n  fullName: LogRecordSequence.LastSequenceNumber\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the sequence number which is greater than the last record appended\n  remarks: This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record. Valid sequence numbers are greater than or equal to <xref:System.IO.Log.LogRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.\n  syntax:\n    content: public System.IO.Log.SequenceNumber LastSequenceNumber { get; }\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: A sequence number which is greater than the last record appended.\n  overload: System.IO.Log.LogRecordSequence.LastSequenceNumber*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The property was accessed after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.LogStore\n  commentId: P:System.IO.Log.LogRecordSequence.LogStore\n  id: LogStore\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: LogStore\n  nameWithType: LogRecordSequence.LogStore\n  fullName: LogRecordSequence.LogStore\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the <xref href=\"System.IO.Log.LogStore\"></xref> that contains the data for this record sequence. This method cannot be inherited.\n  remarks: ''\n  example:\n  - \"This example shows how to use the <xref:System.IO.Log.LogRecordSequence.LogStore%2A> member to add extents.  \\n  \\n [!code-csharp[S_UELogRecordSequence#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#11)]\\n [!code-vb[S_UELogRecordSequence#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#11)]\"\n  syntax:\n    content: public System.IO.Log.LogStore LogStore { get; }\n    return:\n      type: System.IO.Log.LogStore\n      description: The <xref href=\"System.IO.Log.LogStore\"></xref> that contains the data for this record sequence.\n  overload: System.IO.Log.LogRecordSequence.LogStore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.MaximumRecordLength\n  commentId: P:System.IO.Log.LogRecordSequence.MaximumRecordLength\n  id: MaximumRecordLength\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: MaximumRecordLength\n  nameWithType: LogRecordSequence.MaximumRecordLength\n  fullName: LogRecordSequence.MaximumRecordLength\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the maximum size of a record that can be added to this record sequence.\n  syntax:\n    content: public long MaximumRecordLength { get; }\n    return:\n      type: System.Int64\n      description: The maximum size of a record that can be added to this record sequence.\n  overload: System.IO.Log.LogRecordSequence.MaximumRecordLength*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)\n  commentId: M:System.IO.Log.LogRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)\n  id: ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n  nameWithType: LogRecordSequence.ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n  fullName: LogRecordSequence.ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Returns an enumerable collection of records in the sequence. This method cannot be inherited.\n  remarks: This method returns an enumerable collection of records in the sequence. The order of the enumerated records depends on the value of the `logRecordEnum` parameter.\n  example:\n  - \"This example shows how to use <xref:System.IO.Log.LogRecordSequence.ReadLogRecords%2A> in a loop.  \\n  \\n [!code-csharp[S_UELogRecordSequence#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mymultiplexlog.cs#10)]\\n [!code-vb[S_UELogRecordSequence#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mymultiplexlog.vb#10)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord> ReadLogRecords (System.IO.Log.SequenceNumber start, System.IO.Log.LogRecordEnumeratorType logRecordEnum);\n    parameters:\n    - id: start\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the first record where the reading starts.\n    - id: logRecordEnum\n      type: System.IO.Log.LogRecordEnumeratorType\n      description: A valid <xref href=\"System.IO.Log.LogRecordEnumeratorType\"></xref> value that specifies the manner (that is, forward or backward) in which records should be read from a <xref href=\"System.IO.Log.LogRecordSequence\"></xref>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}\n      description: An enumerable collection of records in the sequence.\n  overload: System.IO.Log.LogRecordSequence.ReadLogRecords*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>start</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n <code>logRecordEnum</code> is invalid.  \\n  \\n -or-  \\n  \\n The specified element was not found in the collection.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>start</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.  \\n  \\n -or  \\n  \\n The buffer size used to write the log record is larger than the buffer size being used to read it.  \\n  \\n -or-  \\n  \\n The record sequence is corrupted.  \\n  \\n -or-  \\n  \\n The specified log file format or version is invalid.  \\n  \\n -or-  \\n  \\n The record was written with an incompatible version of the record sequence.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The operation is invalid because the enumeration has not been started. A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.ReadRestartAreas\n  commentId: M:System.IO.Log.LogRecordSequence.ReadRestartAreas\n  id: ReadRestartAreas\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: ReadRestartAreas()\n  nameWithType: LogRecordSequence.ReadRestartAreas()\n  fullName: LogRecordSequence.ReadRestartAreas()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Returns an enumerable collection of the restart areas in the sequence. This method cannot be inherited.\n  remarks: The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number. Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord> ReadRestartAreas ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}\n      description: An enumerable collection of the restart areas in the sequence.\n  overload: System.IO.Log.LogRecordSequence.ReadRestartAreas*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>start</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.  \\n  \\n -or  \\n  \\n The buffer size used to write the log record is larger than the buffer size being used to read it.  \\n  \\n -or-  \\n  \\n The record sequence is corrupted.  \\n  \\n -or-  \\n  \\n The specified log file format or version is invalid.  \\n  \\n -or-  \\n  \\n The record was written with an incompatible version of the record sequence.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The operation is invalid because the enumeration has not been started. A call to <xref href=\\\"System.Collections.IEnumerator.MoveNext\\\"></xref> must be made.  \\n  \\n -or  \\n  \\n The enumeration has ended.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  commentId: M:System.IO.Log.LogRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  id: ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  nameWithType: LogRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  fullName: LogRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \\n  \\n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber ReserveAndAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber userRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: userRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservationCollection\n      type: System.IO.Log.ReservationCollection\n      description: The reservation collection to make reservations in.\n    - id: reservations\n      type: System.Int64[]\n      description: The reservations to make, in bytes.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.LogRecordSequence.ReserveAndAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One or more of the arguments is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while appending the record.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence could not make enough free space to contain the new record, or to make the reservation.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>userRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  commentId: M:System.IO.Log.LogRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  id: ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  nameWithType: LogRecordSequence.ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  fullName: LogRecordSequence.ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \\n  \\n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.LogRecordSequence.Flush%2A> method.\"\n  example:\n  - \"The following example shows how to use this method to make reservations. Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.  \\n  \\n```  \\nReservationCollection reservations = recordSequence.CreateReservationCollection();  \\nlong[] lengthOfUndoRecords = new long[] { 1000 };  \\nrecordSequence.ReserveAndAppend(recordData,  \\n                                                     userSqn,  \\n                                                     previousSqn,  \\n                                                     RecordSequenceAppendOptions.None,  \\n                                                     reservations,  \\n                                                     lengthOfUndoRecords);  \\nrecordSequence.Append(undoRecordData,    // If necessary …  \\n                                    userSqn,  \\n                                    previousSqn,  \\n                                    RecordSequenceAppendOptions.ForceFlush,  \\n                                    reservations);  \\n```\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber ReserveAndAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservationCollection\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the collection to make reservations in.\n    - id: reservations\n      type: System.Int64[]\n      description: The reservations to make, in bytes.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.LogRecordSequence.ReserveAndAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>nextUndoRecord</code> or <code>previousRecord</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservations</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>nextUndoRecord</code> or <code>previousRecord</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.ReservedBytes\n  commentId: P:System.IO.Log.LogRecordSequence.ReservedBytes\n  id: ReservedBytes\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: ReservedBytes\n  nameWithType: LogRecordSequence.ReservedBytes\n  fullName: LogRecordSequence.ReservedBytes\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the total number of bytes that have been reserved.\n  syntax:\n    content: public long ReservedBytes { get; }\n    return:\n      type: System.Int64\n      description: The total size of all reservations made in this record sequence.\n  overload: System.IO.Log.LogRecordSequence.ReservedBytes*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The property was accessed after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.RestartSequenceNumber\n  commentId: P:System.IO.Log.LogRecordSequence.RestartSequenceNumber\n  id: RestartSequenceNumber\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: RestartSequenceNumber\n  nameWithType: LogRecordSequence.RestartSequenceNumber\n  fullName: LogRecordSequence.RestartSequenceNumber\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the sequence number of the restart area closest to the end of the log.\n  remarks: \"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n Using the <xref:System.IO.Log.LogRecordSequence.SetLastRecord%2A> method, you can remove the most recently written restart area.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber RestartSequenceNumber { get; }\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the restart area closest to the end of the log.\n  overload: System.IO.Log.LogRecordSequence.RestartSequenceNumber*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The property was accessed after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.RetryAppend\n  commentId: P:System.IO.Log.LogRecordSequence.RetryAppend\n  id: RetryAppend\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: RetryAppend\n  nameWithType: LogRecordSequence.RetryAppend\n  fullName: LogRecordSequence.RetryAppend\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets or sets a value indicating whether or not appends are automatically retried if the log is full.\n  remarks: If the value of this property is `true`, and an <xref:System.IO.Log.LogRecordSequence.Append%2A> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append.\n  example:\n  - \"This example shows how to use the <xref:System.IO.Log.LogRecordSequence.RetryAppend%2A> property.  \\n  \\n [!code-csharp[S_UELogRecordSequence#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#3)]\\n [!code-vb[S_UELogRecordSequence#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#3)]\"\n  syntax:\n    content: public bool RetryAppend { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if appends are automatically retried if the log is full; otherwise, `false`. The default is `true`.'\n  overload: System.IO.Log.LogRecordSequence.RetryAppend*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The property was accessed after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.SetLastRecord(System.IO.Log.SequenceNumber)\n  commentId: M:System.IO.Log.LogRecordSequence.SetLastRecord(System.IO.Log.SequenceNumber)\n  id: SetLastRecord(System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: SetLastRecord(SequenceNumber)\n  nameWithType: LogRecordSequence.SetLastRecord(SequenceNumber)\n  fullName: LogRecordSequence.SetLastRecord(SequenceNumber)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Sets the last record in the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>.\n  remarks: \"The specified sequence number must be larger than the base sequence number.  \\n  \\n When this method completes, all records that had previously been appended with sequence numbers greater than the specified sequence number are inaccessible.\"\n  syntax:\n    content: public void SetLastRecord (System.IO.Log.SequenceNumber sequenceNumber);\n    parameters:\n    - id: sequenceNumber\n      type: System.IO.Log.SequenceNumber\n      description: \"The new last sequence number in the <xref href=\\\"System.IO.Log.LogRecordSequence\\\"></xref>.  \\n  \\n This should refer to a current valid record   currently in the log.\"\n  overload: System.IO.Log.LogRecordSequence.SetLastRecord*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>sequenceNumber</code> is not valid for this sequence.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"A new or existing archive tail or base of the active log is invalid.  \\n  \\n -or-  \\n  \\n <code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The end of the log has been reached.  \\n  \\n -or-  \\n  \\n The specified log file format or version is invalid.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.TailPinned\n  commentId: E:System.IO.Log.LogRecordSequence.TailPinned\n  id: TailPinned\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: TailPinned\n  nameWithType: LogRecordSequence.TailPinned\n  fullName: LogRecordSequence.TailPinned\n  type: Event\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Signals the need to move the tail of the sequence.\n  remarks: \"You can fire this event when the record sequence has run out of space. When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.  \\n  \\n The event can be fired at any time when the record sequence decides that it must free up space, for any reason. For example, the CLFS policy engine may decide to fire the event when it determines that the tails of two log clients sharing the same log file are too far apart. Freeing space can be done by either writing restart areas, or truncating the log and using the <xref:System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber%2A> method to clear space. The code sample in the Example section demonstrates the second approach.  \\n  \\n You can also call the <xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A> method outside of the <xref:System.IO.Log.LogRecordSequence.TailPinned> event to free space. A restart area is similar to a checkpoint in other log processing systems. Calling this method indicates that the application considers all prior records before the restart area as fully completed, and usable for future record appends. Similar to any other records, the record written by this method requires actual free space in the log to function.\"\n  example:\n  - \"This example shows how to use the <xref:System.IO.Log.LogRecordSequence.TailPinned> event.  \\n  \\n```  \\nrecordSequence.RetryAppend = true;  \\nrecordSequence.TailPinned += new EventHandler<TailPinnedEventArgs>(HandleTailPinned);  \\n  \\nvoid HandleTailPinned(object sender, TailPinnedEventArgs tailPinnedEventArgs)  \\n{  \\n   // tailPinnedEventArgs.TargetSequenceNumber is the target   \\n   // sequence number to free up space to.    \\n   // However, this sequence number is not necessarily valid.  We have  \\n   // to use this sequence number as a starting point for finding a  \\n   // valid point within the log to advance toward. You need to  \\n   // identify a record with a sequence number equal to, or greater  \\n   // than TargetSequenceNumber; let's call this   \\n   // realTargetSequenceNumber. Once found, move the base  \\n  \\n   recordSequence.AdvanceBaseSequenceNumber(realTargetSequenceNumber);  \\n  \\n}  \\n```\"\n  syntax:\n    content: public event EventHandler<System.IO.Log.TailPinnedEventArgs> TailPinned;\n    return:\n      type: System.EventHandler{System.IO.Log.TailPinnedEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})\n  commentId: M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})\n  id: WriteRestartArea(System.ArraySegment{System.Byte})\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(ArraySegment<Byte>)\n  nameWithType: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>)\n  fullName: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: An array segment that will be concatenated and appended as the record.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.LogRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One or more of the arguments is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while writing the restart area.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence could not make enough free space to contain the new restart area.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})\n  commentId: M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})\n  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(IList<ArraySegment<Byte>>)\n  nameWithType: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)\n  fullName: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.LogRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One or more of the arguments is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while writing the restart area.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence could not make enough free space to contain the new restart area.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)\n  commentId: M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)\n  id: WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n  nameWithType: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n  fullName: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> and updates the base sequence number. This method cannot be inherited.\n  remarks: \"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \\n  \\n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSeqNum);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.LogRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One or more of the arguments is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while writing the restart area.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence could not make enough free space to contain the new restart area.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)\n  commentId: M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)\n  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n  nameWithType: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n  fullName: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> and updates the base sequence number. This method cannot be inherited.\n  remarks: \"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \\n  \\n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSeqNum);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.LogRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One or more of the arguments is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while writing the restart area.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence could not make enough free space to contain the new restart area.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  commentId: M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  id: WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n  nameWithType: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n  fullName: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> using a reservation, and updates the base sequence number. This method cannot be inherited.\n  remarks: \"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \\n  \\n If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.  \\n  \\n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservations);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    - id: reservations\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.LogRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One or more of the arguments is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while writing the restart area.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence could not make enough free space to contain the new restart area.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  commentId: M:System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.LogRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n  nameWithType: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n  fullName: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.LogRecordSequence\"></xref> using a reservation, and updates the base sequence number. This method cannot be inherited.\n  remarks: \"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.LogRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \\n  \\n If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.  \\n  \\n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.LogRecordSequence.EndReserveAndAppend%2A> method is called.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservationCollection);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    - id: reservationCollection\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.LogRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>newBaseSeqNum</code> is not valid for this sequence.  \\n  \\n -or-  \\n  \\n The specified log enumeration start sequence number is invalid.  \\n  \\n -or-  \\n  \\n <code>data</code> cannot be appended because it is larger than the maximum record size.  \\n  \\n -or-  \\n  \\n <code>reservationCollection</code> was not created by this record sequence.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the parameters is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"A new or existing archive tail or base of the active log is invalid.  \\n  \\n -or-  \\n  \\n <code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The request could not be performed because of an unexpected I/O exception.  \\n  \\n -or-  \\n  \\n The request could not be performed because of an I/O device error.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log sequence is denied by the operating system.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.IO.FileNotFoundException\n  parent: System.IO\n  isExternal: false\n  name: FileNotFoundException\n  nameWithType: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.PlatformNotSupportedException\n  parent: System\n  isExternal: false\n  name: PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.IO.Log.SequenceFullException\n  parent: System.IO.Log\n  isExternal: false\n  name: SequenceFullException\n  nameWithType: SequenceFullException\n  fullName: System.IO.Log.SequenceFullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.IO.Log.ReservationNotFoundException\n  parent: System.IO.Log\n  isExternal: false\n  name: ReservationNotFoundException\n  nameWithType: ReservationNotFoundException\n  fullName: System.IO.Log.ReservationNotFoundException\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.IO.Log.LogStore)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LogRecordSequence(LogStore)\n  nameWithType: LogRecordSequence.LogRecordSequence(LogStore)\n  fullName: LogRecordSequence.LogRecordSequence(LogStore)\n- uid: System.IO.Log.LogStore\n  parent: System.IO.Log\n  isExternal: false\n  name: LogStore\n  nameWithType: LogStore\n  fullName: System.IO.Log.LogStore\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LogRecordSequence(String, FileMode)\n  nameWithType: LogRecordSequence.LogRecordSequence(String, FileMode)\n  fullName: LogRecordSequence.LogRecordSequence(String, FileMode)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.FileMode\n  parent: System.IO\n  isExternal: false\n  name: FileMode\n  nameWithType: FileMode\n  fullName: System.IO.FileMode\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.IO.Log.LogStore,System.Int32,System.Int32)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LogRecordSequence(LogStore, Int32, Int32)\n  nameWithType: LogRecordSequence.LogRecordSequence(LogStore, Int32, Int32)\n  fullName: LogRecordSequence.LogRecordSequence(LogStore, Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LogRecordSequence(String, FileMode, FileAccess)\n  nameWithType: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess)\n  fullName: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess)\n- uid: System.IO.FileAccess\n  parent: System.IO\n  isExternal: false\n  name: FileAccess\n  nameWithType: FileAccess\n  fullName: System.IO.FileAccess\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LogRecordSequence(String, FileMode, FileAccess, FileShare)\n  nameWithType: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare)\n  fullName: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare)\n- uid: System.IO.FileShare\n  parent: System.IO\n  isExternal: false\n  name: FileShare\n  nameWithType: FileShare\n  fullName: System.IO.FileShare\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32)\n  nameWithType: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32)\n  fullName: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32)\n- uid: System.IO.Log.LogRecordSequence.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Int32,System.Security.AccessControl.FileSecurity)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32, FileSecurity)\n  nameWithType: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32, FileSecurity)\n  fullName: LogRecordSequence.LogRecordSequence(String, FileMode, FileAccess, FileShare, Int32, Int32, FileSecurity)\n- uid: System.Security.AccessControl.FileSecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: FileSecurity\n  nameWithType: FileSecurity\n  fullName: System.Security.AccessControl.FileSecurity\n- uid: System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: AdvanceBaseSequenceNumber(SequenceNumber)\n  nameWithType: LogRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)\n  fullName: LogRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)\n- uid: System.IO.Log.SequenceNumber\n  parent: System.IO.Log\n  isExternal: false\n  name: SequenceNumber\n  nameWithType: SequenceNumber\n  fullName: System.IO.Log.SequenceNumber\n- uid: System.IO.Log.LogRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  nameWithType: LogRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  fullName: LogRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n- uid: System.ArraySegment`1\n  name: ArraySegment<T>\n  nameWithType: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.ArraySegment{System.Byte}\n  parent: System\n  isExternal: false\n  name: ArraySegment<Byte>\n  nameWithType: ArraySegment<Byte>\n  fullName: System.ArraySegment<System.Byte>\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: System.ArraySegment\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.Log.RecordAppendOptions\n  parent: System.IO.Log\n  isExternal: false\n  name: RecordAppendOptions\n  nameWithType: RecordAppendOptions\n  fullName: System.IO.Log.RecordAppendOptions\n- uid: System.IO.Log.ReservationCollection\n  parent: System.IO.Log\n  isExternal: false\n  name: ReservationCollection\n  nameWithType: ReservationCollection\n  fullName: System.IO.Log.ReservationCollection\n- uid: System.IO.Log.LogRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  nameWithType: LogRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  fullName: LogRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n- uid: System.Collections.Generic.IList`1\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<ArraySegment<Byte>>\n  nameWithType: IList<ArraySegment<Byte>>\n  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: System.ArraySegment\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.Log.LogRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  nameWithType: LogRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  fullName: LogRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n- uid: System.IO.Log.LogRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  nameWithType: LogRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  fullName: LogRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n- uid: System.IO.Log.LogRecordSequence.BaseSequenceNumber\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BaseSequenceNumber\n  nameWithType: LogRecordSequence.BaseSequenceNumber\n  fullName: LogRecordSequence.BaseSequenceNumber\n- uid: System.IO.Log.LogRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.IO.Log.LogRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n- uid: System.IO.Log.LogRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n- uid: System.IO.Log.LogRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n- uid: System.IO.Log.LogRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginFlush(SequenceNumber, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginFlush(SequenceNumber, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginFlush(SequenceNumber, AsyncCallback, Object)\n- uid: System.IO.Log.LogRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n- uid: System.Int64\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Int64[]\n  parent: System\n  isExternal: false\n  name: Int64[]\n  nameWithType: Int64[]\n  fullName: System.Int64[]\n  spec.csharp:\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.Log.LogRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n- uid: System.IO.Log.LogRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n- uid: System.IO.Log.LogRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  nameWithType: LogRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  fullName: LogRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n- uid: System.IO.Log.LogRecordSequence.CreateReservationCollection\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: CreateReservationCollection()\n  nameWithType: LogRecordSequence.CreateReservationCollection()\n  fullName: LogRecordSequence.CreateReservationCollection()\n- uid: System.IO.Log.LogRecordSequence.Dispose\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: Dispose()\n  nameWithType: LogRecordSequence.Dispose()\n  fullName: LogRecordSequence.Dispose()\n- uid: System.IO.Log.LogRecordSequence.EndAppend(System.IAsyncResult)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: EndAppend(IAsyncResult)\n  nameWithType: LogRecordSequence.EndAppend(IAsyncResult)\n  fullName: LogRecordSequence.EndAppend(IAsyncResult)\n- uid: System.IO.Log.LogRecordSequence.EndFlush(System.IAsyncResult)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: EndFlush(IAsyncResult)\n  nameWithType: LogRecordSequence.EndFlush(IAsyncResult)\n  fullName: LogRecordSequence.EndFlush(IAsyncResult)\n- uid: System.IO.Log.LogRecordSequence.EndReserveAndAppend(System.IAsyncResult)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: EndReserveAndAppend(IAsyncResult)\n  nameWithType: LogRecordSequence.EndReserveAndAppend(IAsyncResult)\n  fullName: LogRecordSequence.EndReserveAndAppend(IAsyncResult)\n- uid: System.IO.Log.LogRecordSequence.EndWriteRestartArea(System.IAsyncResult)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: EndWriteRestartArea(IAsyncResult)\n  nameWithType: LogRecordSequence.EndWriteRestartArea(IAsyncResult)\n  fullName: LogRecordSequence.EndWriteRestartArea(IAsyncResult)\n- uid: System.IO.Log.LogRecordSequence.Flush\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: Flush()\n  nameWithType: LogRecordSequence.Flush()\n  fullName: LogRecordSequence.Flush()\n- uid: System.IO.Log.LogRecordSequence.Flush(System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: Flush(SequenceNumber)\n  nameWithType: LogRecordSequence.Flush(SequenceNumber)\n  fullName: LogRecordSequence.Flush(SequenceNumber)\n- uid: System.IO.Log.LogRecordSequence.LastSequenceNumber\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LastSequenceNumber\n  nameWithType: LogRecordSequence.LastSequenceNumber\n  fullName: LogRecordSequence.LastSequenceNumber\n- uid: System.IO.Log.LogRecordSequence.LogStore\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LogStore\n  nameWithType: LogRecordSequence.LogStore\n  fullName: LogRecordSequence.LogStore\n- uid: System.IO.Log.LogRecordSequence.MaximumRecordLength\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: MaximumRecordLength\n  nameWithType: LogRecordSequence.MaximumRecordLength\n  fullName: LogRecordSequence.MaximumRecordLength\n- uid: System.IO.Log.LogRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n  nameWithType: LogRecordSequence.ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n  fullName: LogRecordSequence.ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.IO.Log.LogRecord\n  name: LogRecord\n  nameWithType: LogRecord\n  fullName: System.IO.Log.LogRecord\n- uid: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<LogRecord>\n  nameWithType: IEnumerable<LogRecord>\n  fullName: System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.Log.LogRecord\n    name: LogRecord\n    nameWithType: LogRecord\n    fullName: System.IO.Log.LogRecord\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.Log.LogRecordEnumeratorType\n  parent: System.IO.Log\n  isExternal: false\n  name: LogRecordEnumeratorType\n  nameWithType: LogRecordEnumeratorType\n  fullName: System.IO.Log.LogRecordEnumeratorType\n- uid: System.IO.Log.LogRecordSequence.ReadRestartAreas\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: ReadRestartAreas()\n  nameWithType: LogRecordSequence.ReadRestartAreas()\n  fullName: LogRecordSequence.ReadRestartAreas()\n- uid: System.IO.Log.LogRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  nameWithType: LogRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  fullName: LogRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n- uid: System.IO.Log.LogRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  nameWithType: LogRecordSequence.ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  fullName: LogRecordSequence.ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n- uid: System.IO.Log.LogRecordSequence.ReservedBytes\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: ReservedBytes\n  nameWithType: LogRecordSequence.ReservedBytes\n  fullName: LogRecordSequence.ReservedBytes\n- uid: System.IO.Log.LogRecordSequence.RestartSequenceNumber\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: RestartSequenceNumber\n  nameWithType: LogRecordSequence.RestartSequenceNumber\n  fullName: LogRecordSequence.RestartSequenceNumber\n- uid: System.IO.Log.LogRecordSequence.RetryAppend\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: RetryAppend\n  nameWithType: LogRecordSequence.RetryAppend\n  fullName: LogRecordSequence.RetryAppend\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.Log.LogRecordSequence.SetLastRecord(System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: SetLastRecord(SequenceNumber)\n  nameWithType: LogRecordSequence.SetLastRecord(SequenceNumber)\n  fullName: LogRecordSequence.SetLastRecord(SequenceNumber)\n- uid: System.IO.Log.LogRecordSequence.TailPinned\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: TailPinned\n  nameWithType: LogRecordSequence.TailPinned\n  fullName: LogRecordSequence.TailPinned\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.IO.Log.TailPinnedEventArgs\n  name: TailPinnedEventArgs\n  nameWithType: TailPinnedEventArgs\n  fullName: System.IO.Log.TailPinnedEventArgs\n- uid: System.EventHandler{System.IO.Log.TailPinnedEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<TailPinnedEventArgs>\n  nameWithType: EventHandler<TailPinnedEventArgs>\n  fullName: System.EventHandler<System.IO.Log.TailPinnedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.Log.TailPinnedEventArgs\n    name: TailPinnedEventArgs\n    nameWithType: TailPinnedEventArgs\n    fullName: System.IO.Log.TailPinnedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: WriteRestartArea(ArraySegment<Byte>)\n  nameWithType: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>)\n  fullName: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>)\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: WriteRestartArea(IList<ArraySegment<Byte>>)\n  nameWithType: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)\n  fullName: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n  nameWithType: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n  fullName: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n  nameWithType: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n  fullName: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n  nameWithType: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n  fullName: LogRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n  nameWithType: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n  fullName: LogRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n- uid: System.IO.Log.LogRecordSequence.Append*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: Append\n  nameWithType: LogRecordSequence.Append\n  fullName: LogRecordSequence.Append\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.WriteRestartArea*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: WriteRestartArea\n  nameWithType: LogRecordSequence.WriteRestartArea\n  fullName: LogRecordSequence.WriteRestartArea\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.#ctor*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LogRecordSequence\n  nameWithType: LogRecordSequence.LogRecordSequence\n  fullName: LogRecordSequence.LogRecordSequence\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.AdvanceBaseSequenceNumber*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: AdvanceBaseSequenceNumber\n  nameWithType: LogRecordSequence.AdvanceBaseSequenceNumber\n  fullName: LogRecordSequence.AdvanceBaseSequenceNumber\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.BaseSequenceNumber*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BaseSequenceNumber\n  nameWithType: LogRecordSequence.BaseSequenceNumber\n  fullName: LogRecordSequence.BaseSequenceNumber\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.BeginAppend*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginAppend\n  nameWithType: LogRecordSequence.BeginAppend\n  fullName: LogRecordSequence.BeginAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.BeginFlush*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginFlush\n  nameWithType: LogRecordSequence.BeginFlush\n  fullName: LogRecordSequence.BeginFlush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.BeginReserveAndAppend*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginReserveAndAppend\n  nameWithType: LogRecordSequence.BeginReserveAndAppend\n  fullName: LogRecordSequence.BeginReserveAndAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.BeginWriteRestartArea*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: BeginWriteRestartArea\n  nameWithType: LogRecordSequence.BeginWriteRestartArea\n  fullName: LogRecordSequence.BeginWriteRestartArea\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.CreateReservationCollection*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: CreateReservationCollection\n  nameWithType: LogRecordSequence.CreateReservationCollection\n  fullName: LogRecordSequence.CreateReservationCollection\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.Dispose*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: Dispose\n  nameWithType: LogRecordSequence.Dispose\n  fullName: LogRecordSequence.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.EndAppend*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: EndAppend\n  nameWithType: LogRecordSequence.EndAppend\n  fullName: LogRecordSequence.EndAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.EndFlush*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: EndFlush\n  nameWithType: LogRecordSequence.EndFlush\n  fullName: LogRecordSequence.EndFlush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.EndReserveAndAppend*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: EndReserveAndAppend\n  nameWithType: LogRecordSequence.EndReserveAndAppend\n  fullName: LogRecordSequence.EndReserveAndAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.EndWriteRestartArea*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: EndWriteRestartArea\n  nameWithType: LogRecordSequence.EndWriteRestartArea\n  fullName: LogRecordSequence.EndWriteRestartArea\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.Flush*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: Flush\n  nameWithType: LogRecordSequence.Flush\n  fullName: LogRecordSequence.Flush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.LastSequenceNumber*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LastSequenceNumber\n  nameWithType: LogRecordSequence.LastSequenceNumber\n  fullName: LogRecordSequence.LastSequenceNumber\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.LogStore*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: LogStore\n  nameWithType: LogRecordSequence.LogStore\n  fullName: LogRecordSequence.LogStore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.MaximumRecordLength*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: MaximumRecordLength\n  nameWithType: LogRecordSequence.MaximumRecordLength\n  fullName: LogRecordSequence.MaximumRecordLength\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.ReadLogRecords*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: ReadLogRecords\n  nameWithType: LogRecordSequence.ReadLogRecords\n  fullName: LogRecordSequence.ReadLogRecords\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.ReadRestartAreas*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: ReadRestartAreas\n  nameWithType: LogRecordSequence.ReadRestartAreas\n  fullName: LogRecordSequence.ReadRestartAreas\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.ReserveAndAppend*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: ReserveAndAppend\n  nameWithType: LogRecordSequence.ReserveAndAppend\n  fullName: LogRecordSequence.ReserveAndAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.ReservedBytes*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: ReservedBytes\n  nameWithType: LogRecordSequence.ReservedBytes\n  fullName: LogRecordSequence.ReservedBytes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.RestartSequenceNumber*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: RestartSequenceNumber\n  nameWithType: LogRecordSequence.RestartSequenceNumber\n  fullName: LogRecordSequence.RestartSequenceNumber\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.RetryAppend*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: RetryAppend\n  nameWithType: LogRecordSequence.RetryAppend\n  fullName: LogRecordSequence.RetryAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.IO.Log.LogRecordSequence.SetLastRecord*\n  parent: System.IO.Log.LogRecordSequence\n  isExternal: false\n  name: SetLastRecord\n  nameWithType: LogRecordSequence.SetLastRecord\n  fullName: LogRecordSequence.SetLastRecord\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/LogRecordSequence.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n- uid: System.IO.Log.IRecordSequence\n  parent: System.IO.Log\n  isExternal: false\n  name: IRecordSequence\n  nameWithType: IRecordSequence\n  fullName: System.IO.Log.IRecordSequence\n"}