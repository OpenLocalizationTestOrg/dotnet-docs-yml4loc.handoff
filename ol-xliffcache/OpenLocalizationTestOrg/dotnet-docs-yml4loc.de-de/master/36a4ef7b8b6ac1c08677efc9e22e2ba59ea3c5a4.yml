### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  commentId: T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  id: NameObjectCollectionBase.KeysCollection
  children:
  - System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count
  - System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator
  - System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#IsSynchronized
  - System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: NameObjectCollectionBase.KeysCollection
  nameWithType: NameObjectCollectionBase.KeysCollection
  fullName: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  type: Class
  assemblies:
  - System.Collections.Specialized
  - System
  - netstandard
  namespace: System.Collections.Specialized
  summary: Represents a collection of the <xref href="System.String"></xref> keys of a collection.
  syntax:
    content: 'public class NameObjectCollectionBase.KeysCollection : System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count
  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count
  id: Count
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  langs:
  - csharp
  name: Count
  nameWithType: NameObjectCollectionBase.KeysCollection.Count
  fullName: NameObjectCollectionBase.KeysCollection.Count
  type: Property
  assemblies:
  - System.Collections.Specialized
  - System
  - netstandard
  namespace: System.Collections.Specialized
  summary: Gets the number of keys in the <xref href="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></xref>.
  remarks: Retrieving the value of this property is an O(1) operation.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of keys in the <xref href="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></xref>.
  overload: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get(System.Int32)
  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get(System.Int32)
  id: Get(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  langs:
  - csharp
  name: Get(Int32)
  nameWithType: NameObjectCollectionBase.KeysCollection.Get(Int32)
  fullName: NameObjectCollectionBase.KeysCollection.Get(Int32)
  type: Method
  assemblies:
  - System.Collections.Specialized
  - System
  - netstandard
  namespace: System.Collections.Specialized
  summary: Gets the key at the specified index of the collection.
  remarks: This method is an O(1) operation.
  syntax:
    content: public virtual string Get (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the key to get from the collection.
    return:
      type: System.String
      description: A <xref href="System.String"></xref> that contains the key at the specified index of the collection.
  overload: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is outside the valid range of indexes for the collection.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator
  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: NameObjectCollectionBase.KeysCollection.GetEnumerator()
  fullName: NameObjectCollectionBase.KeysCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Collections.Specialized
  - System
  - netstandard
  namespace: System.Collections.Specialized
  summary: Returns an enumerator that iterates through the <xref href="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></xref>.
  remarks: "This enumerator returns the keys of the collection as strings.  \n  \n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n This method is an O(1) operation."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> for the <xref href="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></xref>.
  overload: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item(System.Int32)
  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: NameObjectCollectionBase.KeysCollection.Item(Int32)
  fullName: NameObjectCollectionBase.KeysCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Collections.Specialized
  - System
  - netstandard
  namespace: System.Collections.Specialized
  summary: Gets the entry at the specified index of the collection.
  remarks: "This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]` (In Visual Basic, `myCollection(index)`).  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item%2A> property. Visual Basic implements <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item%2A> as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation."
  syntax:
    content: public string this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the entry to locate in the collection.
    return:
      type: System.String
      description: The <xref href="System.String"></xref> key of the entry at the specified index of the collection.
  overload: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is outside the valid range of indexes for the collection.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  langs:
  - csharp
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: NameObjectCollectionBase.KeysCollection.ICollection.CopyTo(Array, Int32)
  fullName: NameObjectCollectionBase.KeysCollection.ICollection.CopyTo(Array, Int32)
  type: Method
  assemblies:
  - System.Collections.Specialized
  - System
  - netstandard
  namespace: System.Collections.Specialized
  summary: Copies the entire <xref href="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></xref> to a compatible one-dimensional <xref href="System.Array"></xref>, starting at the specified index of the target array.
  remarks: "The specified array must be of a compatible type.  \n  \n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count%2A>."
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.KeysCollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: The type of the source <xref href="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></xref> cannot be cast automatically to the type of the destination <code>array</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: NameObjectCollectionBase.KeysCollection.ICollection.IsSynchronized
  fullName: NameObjectCollectionBase.KeysCollection.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.Collections.Specialized
  - System
  - netstandard
  namespace: System.Collections.Specialized
  summary: Gets a value indicating whether access to the <xref href="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></xref> is synchronized (thread safe).
  remarks: "Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>, not directly on the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> object.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/cpp/source.cpp#1)]\n [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/cs/source.cs#1)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/vb/source.vb#1)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true` if access to the <xref href="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></xref> is synchronized (thread safe); otherwise, `false`. The default is `false`.'
  overload: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: NameObjectCollectionBase.KeysCollection.ICollection.SyncRoot
  fullName: NameObjectCollectionBase.KeysCollection.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.Collections.Specialized
  - System
  - netstandard
  namespace: System.Collections.Specialized
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></xref>.
  remarks: "Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>, not directly on the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> object.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/cpp/source.cpp#1)]\n [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/cs/source.cs#1)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.KeysCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.specialized.nameobjectcollectionbase.keyscollection/vb/source.vb#1)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"></xref>.
  overload: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  parent: System
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: Count
  nameWithType: NameObjectCollectionBase.KeysCollection.Count
  fullName: NameObjectCollectionBase.KeysCollection.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: Get(Int32)
  nameWithType: NameObjectCollectionBase.KeysCollection.Get(Int32)
  fullName: NameObjectCollectionBase.KeysCollection.Get(Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: NameObjectCollectionBase.KeysCollection.GetEnumerator()
  fullName: NameObjectCollectionBase.KeysCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: NameObjectCollectionBase.KeysCollection.Item(Int32)
  fullName: NameObjectCollectionBase.KeysCollection.Item(Int32)
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: NameObjectCollectionBase.KeysCollection.ICollection.CopyTo(Array, Int32)
  fullName: NameObjectCollectionBase.KeysCollection.ICollection.CopyTo(Array, Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: NameObjectCollectionBase.KeysCollection.ICollection.IsSynchronized
  fullName: NameObjectCollectionBase.KeysCollection.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: NameObjectCollectionBase.KeysCollection.ICollection.SyncRoot
  fullName: NameObjectCollectionBase.KeysCollection.ICollection.SyncRoot
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count*
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: Count
  nameWithType: NameObjectCollectionBase.KeysCollection.Count
  fullName: NameObjectCollectionBase.KeysCollection.Count
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get*
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: Get
  nameWithType: NameObjectCollectionBase.KeysCollection.Get
  fullName: NameObjectCollectionBase.KeysCollection.Get
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator*
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: NameObjectCollectionBase.KeysCollection.GetEnumerator
  fullName: NameObjectCollectionBase.KeysCollection.GetEnumerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item*
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: Item
  nameWithType: NameObjectCollectionBase.KeysCollection.Item
  fullName: NameObjectCollectionBase.KeysCollection.Item
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: NameObjectCollectionBase.KeysCollection.System.Collections.ICollection.CopyTo
  fullName: NameObjectCollectionBase.KeysCollection.System.Collections.ICollection.CopyTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: NameObjectCollectionBase.KeysCollection.System.Collections.ICollection.IsSynchronized
  fullName: NameObjectCollectionBase.KeysCollection.System.Collections.ICollection.IsSynchronized
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: NameObjectCollectionBase.KeysCollection.System.Collections.ICollection.SyncRoot
  fullName: NameObjectCollectionBase.KeysCollection.System.Collections.ICollection.SyncRoot
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Specialized/NameObjectCollectionBase+KeysCollection.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: Enumerable.Cast<TResult>(IEnumerable)
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: Enumerable.OfType<TResult>(IEnumerable)
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  isExternal: false
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: ParallelEnumerable.AsParallel(IEnumerable)
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: Queryable.AsQueryable(IEnumerable)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
