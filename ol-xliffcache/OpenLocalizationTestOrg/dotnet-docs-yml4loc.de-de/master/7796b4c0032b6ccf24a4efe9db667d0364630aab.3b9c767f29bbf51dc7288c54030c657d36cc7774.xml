{"nodes":[{"content":"Provides methods for setting and capturing the compressed stack on the current thread. This class cannot be inherited.","nodes":[{"pos":[0,118],"content":"Provides methods for setting and capturing the compressed stack on the current thread. This class cannot be inherited.","nodes":[{"content":"Provides methods for setting and capturing the compressed stack on the current thread. This class cannot be inherited.","pos":[0,118],"nodes":[{"content":"Provides methods for setting and capturing the compressed stack on the current thread.","pos":[0,86]},{"content":"This class cannot be inherited.","pos":[87,118]}]}]}],"pos":[821,940],"yaml":true},{"content":"The compressed stack is a compact representation of all the code access security information on the call stack, such as <xref:System.Security.CodeAccessPermission.Deny%2A> and <xref:System.Security.CodeAccessPermission.Assert%2A> actions. For example, if a <xref:System.Security.CodeAccessPermission.Deny%2A> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.  \n  \n The <xref:System.Threading.CompressedStack>class is used internally by the <xref:System.Security.SecurityContext> class. For example, the <xref:System.Security.SecurityContext.Capture%2A?displayProperty=fullName> method captures the compressed stack for the current call stack, along with impersonation and culture information. The <xref:System.Security.SecurityContext> class is used in turn by the <xref:System.Threading.ExecutionContext> class to flow context across threads, for example when scheduling thread pool tasks.  \n  \n This class is not used in ordinary application programming.","nodes":[{"pos":[0,557],"content":"The compressed stack is a compact representation of all the code access security information on the call stack, such as <xref:System.Security.CodeAccessPermission.Deny%2A> and <xref:System.Security.CodeAccessPermission.Assert%2A> actions. For example, if a <xref:System.Security.CodeAccessPermission.Deny%2A> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.","nodes":[{"content":"The compressed stack is a compact representation of all the code access security information on the call stack, such as <xref:System.Security.CodeAccessPermission.Deny%2A> and <xref:System.Security.CodeAccessPermission.Assert%2A> actions. For example, if a <xref:System.Security.CodeAccessPermission.Deny%2A> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.","pos":[0,557],"nodes":[{"content":"The compressed stack is a compact representation of all the code access security information on the call stack, such as <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> actions.","pos":[0,238],"source":"The compressed stack is a compact representation of all the code access security information on the call stack, such as <xref:System.Security.CodeAccessPermission.Deny%2A> and <xref:System.Security.CodeAccessPermission.Assert%2A> actions."},{"content":"For example, if a <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.","pos":[239,557],"source":" For example, if a <xref:System.Security.CodeAccessPermission.Deny%2A> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack."}]}]},{"pos":[564,1089],"content":"The <xref:System.Threading.CompressedStack>class is used internally by the <xref:System.Security.SecurityContext> class. For example, the <xref:System.Security.SecurityContext.Capture%2A?displayProperty=fullName> method captures the compressed stack for the current call stack, along with impersonation and culture information. The <xref:System.Security.SecurityContext> class is used in turn by the <xref:System.Threading.ExecutionContext> class to flow context across threads, for example when scheduling thread pool tasks.","nodes":[{"content":"The <xref:System.Threading.CompressedStack>class is used internally by the <xref:System.Security.SecurityContext> class. For example, the <xref:System.Security.SecurityContext.Capture%2A?displayProperty=fullName> method captures the compressed stack for the current call stack, along with impersonation and culture information. The <xref:System.Security.SecurityContext> class is used in turn by the <xref:System.Threading.ExecutionContext> class to flow context across threads, for example when scheduling thread pool tasks.","pos":[0,525],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.CompressedStack&gt;</ph>class is used internally by the <ph id=\"ph2\">&lt;xref:System.Security.SecurityContext&gt;</ph> class.","pos":[0,120],"source":"The <xref:System.Threading.CompressedStack>class is used internally by the <xref:System.Security.SecurityContext> class."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Security.SecurityContext.Capture%2A?displayProperty=fullName&gt;</ph> method captures the compressed stack for the current call stack, along with impersonation and culture information.","pos":[121,327],"source":" For example, the <xref:System.Security.SecurityContext.Capture%2A?displayProperty=fullName> method captures the compressed stack for the current call stack, along with impersonation and culture information."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.SecurityContext&gt;</ph> class is used in turn by the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> class to flow context across threads, for example when scheduling thread pool tasks.","pos":[328,525],"source":" The <xref:System.Security.SecurityContext> class is used in turn by the <xref:System.Threading.ExecutionContext> class to flow context across threads, for example when scheduling thread pool tasks."}]}]},{"pos":[1096,1155],"content":"This class is not used in ordinary application programming.","nodes":[{"content":"This class is not used in ordinary application programming.","pos":[0,59]}]}],"pos":[951,2113],"yaml":true,"extradata":"MT"},{"content":"Captures the compressed stack from the current thread.","nodes":[{"pos":[0,54],"content":"Captures the compressed stack from the current thread.","nodes":[{"content":"Captures the compressed stack from the current thread.","pos":[0,54]}]}],"pos":[3742,3797],"yaml":true},{"content":"Captures all the code access security information on the call stack, such as <xref:System.Security.CodeAccessPermission.Deny%2A> and <xref:System.Security.CodeAccessPermission.Assert%2A> actions, in a compressed format. For example, if a <xref:System.Security.CodeAccessPermission.Deny%2A> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.  \n  \n The captured compressed stack can be applied to another thread.","nodes":[{"pos":[0,538],"content":"Captures all the code access security information on the call stack, such as <xref:System.Security.CodeAccessPermission.Deny%2A> and <xref:System.Security.CodeAccessPermission.Assert%2A> actions, in a compressed format. For example, if a <xref:System.Security.CodeAccessPermission.Deny%2A> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.","nodes":[{"content":"Captures all the code access security information on the call stack, such as <xref:System.Security.CodeAccessPermission.Deny%2A> and <xref:System.Security.CodeAccessPermission.Assert%2A> actions, in a compressed format. For example, if a <xref:System.Security.CodeAccessPermission.Deny%2A> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.","pos":[0,538],"nodes":[{"content":"Captures all the code access security information on the call stack, such as <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> actions, in a compressed format.","pos":[0,219],"source":"Captures all the code access security information on the call stack, such as <xref:System.Security.CodeAccessPermission.Deny%2A> and <xref:System.Security.CodeAccessPermission.Assert%2A> actions, in a compressed format."},{"content":"For example, if a <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.","pos":[220,538],"source":" For example, if a <xref:System.Security.CodeAccessPermission.Deny%2A> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack."}]}]},{"pos":[545,608],"content":"The captured compressed stack can be applied to another thread.","nodes":[{"content":"The captured compressed stack can be applied to another thread.","pos":[0,63]}]}],"pos":[3808,4421],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.CompressedStack\"></xref> object.","nodes":[{"pos":[0,63],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.CompressedStack\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.Threading.CompressedStack\"></xref> object."}],"pos":[4598,4662],"yaml":true},{"content":"Creates a copy of the current compressed stack.","nodes":[{"pos":[0,47],"content":"Creates a copy of the current compressed stack.","nodes":[{"content":"Creates a copy of the current compressed stack.","pos":[0,47]}]}],"pos":[5886,5934],"yaml":true},{"content":"This method is useful for creating a copy of the current compressed stack to apply to another thread.","nodes":[{"pos":[0,101],"content":"This method is useful for creating a copy of the current compressed stack to apply to another thread.","nodes":[{"content":"This method is useful for creating a copy of the current compressed stack to apply to another thread.","pos":[0,101]}]}],"pos":[5945,6047],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.CompressedStack\"></xref> object representing the current compressed stack.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.CompressedStack\"&gt;&lt;/xref&gt;</ph> object representing the current compressed stack.","source":"A <xref href=\"System.Threading.CompressedStack\"></xref> object representing the current compressed stack."}],"pos":[6287,6393],"yaml":true},{"content":"Gets the compressed stack for the current thread.","nodes":[{"pos":[0,49],"content":"Gets the compressed stack for the current thread.","nodes":[{"content":"Gets the compressed stack for the current thread.","pos":[0,49]}]}],"pos":[7743,7793],"yaml":true},{"content":"If security is enabled, the current compressed stack is returned. If security is disabled, <xref:System.Threading.CompressedStack.GetCompressedStack%2A> returns an empty <xref:System.Threading.CompressedStack> object.  \n  \n> [!NOTE]\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to prevent it from being called from untrusted code; only the immediate caller is required to have <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName> permission. For important limitations on using the `LinkDemand` member, see [Demand vs. LinkDemand](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5).  \n  \n> [!NOTE]\n>  This member also makes a link demand for the ECMA public key, which is not a valid cryptographic key but a pseudo key. Within the .NET Framework the link demand for the ECMA pseudo key is automatically converted to a link demand for the Microsoft public key. The security exception is based on the Microsoft public key, not the ECMA pseudo key.","nodes":[{"pos":[0,217],"content":"If security is enabled, the current compressed stack is returned. If security is disabled, <xref:System.Threading.CompressedStack.GetCompressedStack%2A> returns an empty <xref:System.Threading.CompressedStack> object.","nodes":[{"content":"If security is enabled, the current compressed stack is returned. If security is disabled, <xref:System.Threading.CompressedStack.GetCompressedStack%2A> returns an empty <xref:System.Threading.CompressedStack> object.","pos":[0,217],"nodes":[{"content":"If security is enabled, the current compressed stack is returned.","pos":[0,65]},{"content":"If security is disabled, <ph id=\"ph1\">&lt;xref:System.Threading.CompressedStack.GetCompressedStack%2A&gt;</ph> returns an empty <ph id=\"ph2\">&lt;xref:System.Threading.CompressedStack&gt;</ph> object.","pos":[66,217],"source":" If security is disabled, <xref:System.Threading.CompressedStack.GetCompressedStack%2A> returns an empty <xref:System.Threading.CompressedStack> object."}]}]},{"pos":[225,702],"content":"[!NOTE]\n This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to prevent it from being called from untrusted code; only the immediate caller is required to have <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName> permission. For important limitations on using the `LinkDemand` member, see [Demand vs. LinkDemand](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5).","leadings":["","> "],"nodes":[{"content":" This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to prevent it from being called from untrusted code; only the immediate caller is required to have <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName> permission. For important limitations on using the `LinkDemand` member, see [Demand vs. LinkDemand](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5).","pos":[8,475],"nodes":[{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityAction?displayProperty=fullName&gt;</ph> to prevent it from being called from untrusted code; only the immediate caller is required to have <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName&gt;</ph> permission.","pos":[1,308],"source":" This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to prevent it from being called from untrusted code; only the immediate caller is required to have <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName> permission."},{"content":"For important limitations on using the <ph id=\"ph1\">`LinkDemand`</ph> member, see <bpt id=\"p1\">[</bpt>Demand vs. LinkDemand<ept id=\"p1\">](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5)</ept>.","pos":[309,467],"source":" For important limitations on using the `LinkDemand` member, see [Demand vs. LinkDemand](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5)."}]}]},{"pos":[710,1065],"content":"[!NOTE]\n This member also makes a link demand for the ECMA public key, which is not a valid cryptographic key but a pseudo key. Within the .NET Framework the link demand for the ECMA pseudo key is automatically converted to a link demand for the Microsoft public key. The security exception is based on the Microsoft public key, not the ECMA pseudo key.","leadings":["","> "],"nodes":[{"content":" This member also makes a link demand for the ECMA public key, which is not a valid cryptographic key but a pseudo key. Within the .NET Framework the link demand for the ECMA pseudo key is automatically converted to a link demand for the Microsoft public key. The security exception is based on the Microsoft public key, not the ECMA pseudo key.","pos":[8,353],"nodes":[{"content":"This member also makes a link demand for the ECMA public key, which is not a valid cryptographic key but a pseudo key.","pos":[1,119]},{"content":"Within the .NET Framework the link demand for the ECMA pseudo key is automatically converted to a link demand for the Microsoft public key.","pos":[120,259]},{"content":"The security exception is based on the Microsoft public key, not the ECMA pseudo key.","pos":[260,345]}]}]}],"pos":[7804,8878],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.CompressedStack\"></xref> for the current thread.","nodes":[{"pos":[0,79],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.CompressedStack\"&gt;&lt;/xref&gt;</ph> for the current thread.","source":"A <xref href=\"System.Threading.CompressedStack\"></xref> for the current thread."}],"pos":[9117,9197],"yaml":true},{"content":"A caller in the call chain does not have permission to access unmanaged code.  \n  \n -or-  \n  \n The request for <xref href=\"System.Security.Permissions.StrongNameIdentityPermission\"></xref> failed.","nodes":[{"pos":[0,77],"content":"A caller in the call chain does not have permission to access unmanaged code.","nodes":[{"content":"A caller in the call chain does not have permission to access unmanaged code.","pos":[0,77]}]},{"pos":[84,88],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[95,196],"content":"The request for <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.StrongNameIdentityPermission\"&gt;&lt;/xref&gt;</ph> failed.","source":"The request for <xref href=\"System.Security.Permissions.StrongNameIdentityPermission\"></xref> failed."}],"pos":[9388,9593],"yaml":true},{"content":"Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the logical context information needed to recreate an instance of this execution context.","nodes":[{"pos":[0,178],"content":"Sets the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object with the logical context information needed to recreate an instance of this execution context.","source":"Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the logical context information needed to recreate an instance of this execution context."}],"pos":[11217,11396],"yaml":true},{"content":"<xref:System.Threading.CompressedStack.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.  \n  \n For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.","nodes":[{"pos":[0,322],"content":"<xref:System.Threading.CompressedStack.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.","nodes":[{"content":"<xref:System.Threading.CompressedStack.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.","pos":[0,322],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.CompressedStack.GetObjectData%2A&gt;</ph> sets a <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with the logical call context information.","pos":[0,160],"source":"<xref:System.Threading.CompressedStack.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information."},{"content":"During deserialization, the execution context object is reconstituted from the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> transmitted over the stream.","pos":[161,322],"source":" During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream."}]}]},{"pos":[329,409],"content":"For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.","nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>.","pos":[0,80],"source":"For more information, see <xref:System.Runtime.Serialization.SerializationInfo>."}]}],"pos":[11407,11821],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object to be populated with serialization information.","nodes":[{"pos":[0,126],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object to be populated with serialization information.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object to be populated with serialization information."}],"pos":[12140,12267],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> structure representing the destination context of the serialization.","nodes":[{"pos":[0,139],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> structure representing the destination context of the serialization.","source":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> structure representing the destination context of the serialization."}],"pos":[12362,12502],"yaml":true},{"content":"<code>info</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>info</code> is `null`."}],"pos":[12678,12707],"yaml":true},{"content":"Runs a method in the specified compressed stack on the current thread.","nodes":[{"pos":[0,70],"content":"Runs a method in the specified compressed stack on the current thread.","nodes":[{"content":"Runs a method in the specified compressed stack on the current thread.","pos":[0,70]}]}],"pos":[14247,14318],"yaml":true},{"content":"The compressed stack is returned to its previous state when the method completes.","nodes":[{"pos":[0,81],"content":"The compressed stack is returned to its previous state when the method completes.","nodes":[{"content":"The compressed stack is returned to its previous state when the method completes.","pos":[0,81]}]}],"pos":[14329,14411],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.CompressedStack\"></xref> to set.","nodes":[{"pos":[0,65],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CompressedStack\"&gt;&lt;/xref&gt;</ph> to set.","source":"The <xref href=\"System.Threading.CompressedStack\"></xref> to set."}],"pos":[14723,14789],"yaml":true},{"content":"A <xref href=\"System.Threading.ContextCallback\"></xref> that represents the method to be run in the specified security context.","nodes":[{"pos":[0,127],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.ContextCallback\"&gt;&lt;/xref&gt;</ph> that represents the method to be run in the specified security context.","source":"A <xref href=\"System.Threading.ContextCallback\"></xref> that represents the method to be run in the specified security context."}],"pos":[14872,15000],"yaml":true},{"content":"The object to be passed to the callback method.","nodes":[{"pos":[0,47],"content":"The object to be passed to the callback method.","nodes":[{"content":"The object to be passed to the callback method.","pos":[0,47]}]}],"pos":[15061,15109],"yaml":true},{"content":"<code>compressedStack</code> is `null`.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;compressedStack&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>compressedStack</code> is `null`."}],"pos":[15267,15307],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.CompressedStack\n  commentId: T:System.Threading.CompressedStack\n  id: CompressedStack\n  children:\n  - System.Threading.CompressedStack.Capture\n  - System.Threading.CompressedStack.CreateCopy\n  - System.Threading.CompressedStack.GetCompressedStack\n  - System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)\n  langs:\n  - csharp\n  name: CompressedStack\n  nameWithType: CompressedStack\n  fullName: System.Threading.CompressedStack\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: Provides methods for setting and capturing the compressed stack on the current thread. This class cannot be inherited.\n  remarks: \"The compressed stack is a compact representation of all the code access security information on the call stack, such as <xref:System.Security.CodeAccessPermission.Deny%2A> and <xref:System.Security.CodeAccessPermission.Assert%2A> actions. For example, if a <xref:System.Security.CodeAccessPermission.Deny%2A> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.  \\n  \\n The <xref:System.Threading.CompressedStack>class is used internally by the <xref:System.Security.SecurityContext> class. For example, the <xref:System.Security.SecurityContext.Capture%2A?displayProperty=fullName> method captures the compressed stack for the current call stack, along with impersonation and culture information. The <xref:System.Security.SecurityContext> class is used in turn by the <xref:System.Threading.ExecutionContext> class to flow context across threads, for example when scheduling thread pool tasks.  \\n  \\n This class is not used in ordinary application programming.\"\n  syntax:\n    content: 'public sealed class CompressedStack : System.Runtime.Serialization.ISerializable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CompressedStack.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CompressedStack.Capture\n  commentId: M:System.Threading.CompressedStack.Capture\n  id: Capture\n  parent: System.Threading.CompressedStack\n  langs:\n  - csharp\n  name: Capture()\n  nameWithType: CompressedStack.Capture()\n  fullName: CompressedStack.Capture()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: Captures the compressed stack from the current thread.\n  remarks: \"Captures all the code access security information on the call stack, such as <xref:System.Security.CodeAccessPermission.Deny%2A> and <xref:System.Security.CodeAccessPermission.Assert%2A> actions, in a compressed format. For example, if a <xref:System.Security.CodeAccessPermission.Deny%2A> action is two stack frames up from the current frame and there are no other code access security annotations between there and the current frame, the compressed stack records only that information, without having to serialize the entire call stack.  \\n  \\n The captured compressed stack can be applied to another thread.\"\n  syntax:\n    content: public static System.Threading.CompressedStack Capture ();\n    parameters: []\n    return:\n      type: System.Threading.CompressedStack\n      description: A <xref href=\"System.Threading.CompressedStack\"></xref> object.\n  overload: System.Threading.CompressedStack.Capture*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CompressedStack.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CompressedStack.CreateCopy\n  commentId: M:System.Threading.CompressedStack.CreateCopy\n  id: CreateCopy\n  parent: System.Threading.CompressedStack\n  langs:\n  - csharp\n  name: CreateCopy()\n  nameWithType: CompressedStack.CreateCopy()\n  fullName: CompressedStack.CreateCopy()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: Creates a copy of the current compressed stack.\n  remarks: This method is useful for creating a copy of the current compressed stack to apply to another thread.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Threading.CompressedStack CreateCopy ();\n    parameters: []\n    return:\n      type: System.Threading.CompressedStack\n      description: A <xref href=\"System.Threading.CompressedStack\"></xref> object representing the current compressed stack.\n  overload: System.Threading.CompressedStack.CreateCopy*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CompressedStack.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CompressedStack.GetCompressedStack\n  commentId: M:System.Threading.CompressedStack.GetCompressedStack\n  id: GetCompressedStack\n  parent: System.Threading.CompressedStack\n  langs:\n  - csharp\n  name: GetCompressedStack()\n  nameWithType: CompressedStack.GetCompressedStack()\n  fullName: CompressedStack.GetCompressedStack()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: Gets the compressed stack for the current thread.\n  remarks: \"If security is enabled, the current compressed stack is returned. If security is disabled, <xref:System.Threading.CompressedStack.GetCompressedStack%2A> returns an empty <xref:System.Threading.CompressedStack> object.  \\n  \\n> [!NOTE]\\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to prevent it from being called from untrusted code; only the immediate caller is required to have <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName> permission. For important limitations on using the `LinkDemand` member, see [Demand vs. LinkDemand](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5).  \\n  \\n> [!NOTE]\\n>  This member also makes a link demand for the ECMA public key, which is not a valid cryptographic key but a pseudo key. Within the .NET Framework the link demand for the ECMA pseudo key is automatically converted to a link demand for the Microsoft public key. The security exception is based on the Microsoft public key, not the ECMA pseudo key.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static System.Threading.CompressedStack GetCompressedStack ();\n    parameters: []\n    return:\n      type: System.Threading.CompressedStack\n      description: A <xref href=\"System.Threading.CompressedStack\"></xref> for the current thread.\n  overload: System.Threading.CompressedStack.GetCompressedStack*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"A caller in the call chain does not have permission to access unmanaged code.  \\n  \\n -or-  \\n  \\n The request for <xref href=\\\"System.Security.Permissions.StrongNameIdentityPermission\\\"></xref> failed.\"\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CompressedStack.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Threading.CompressedStack\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: CompressedStack.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: CompressedStack.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the logical context information needed to recreate an instance of this execution context.\n  remarks: \"<xref:System.Threading.CompressedStack.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.  \\n  \\n For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object to be populated with serialization information.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> structure representing the destination context of the serialization.\n  overload: System.Threading.CompressedStack.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>info</code> is `null`.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CompressedStack.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)\n  commentId: M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)\n  id: Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)\n  parent: System.Threading.CompressedStack\n  langs:\n  - csharp\n  name: Run(CompressedStack, ContextCallback, Object)\n  nameWithType: CompressedStack.Run(CompressedStack, ContextCallback, Object)\n  fullName: CompressedStack.Run(CompressedStack, ContextCallback, Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: Runs a method in the specified compressed stack on the current thread.\n  remarks: The compressed stack is returned to its previous state when the method completes.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static void Run (System.Threading.CompressedStack compressedStack, System.Threading.ContextCallback callback, object state);\n    parameters:\n    - id: compressedStack\n      type: System.Threading.CompressedStack\n      description: The <xref href=\"System.Threading.CompressedStack\"></xref> to set.\n    - id: callback\n      type: System.Threading.ContextCallback\n      description: A <xref href=\"System.Threading.ContextCallback\"></xref> that represents the method to be run in the specified security context.\n    - id: state\n      type: System.Object\n      description: The object to be passed to the callback method.\n  overload: System.Threading.CompressedStack.Run*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>compressedStack</code> is `null`.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CompressedStack.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Threading.CompressedStack.Capture\n  parent: System.Threading.CompressedStack\n  isExternal: false\n  name: Capture()\n  nameWithType: CompressedStack.Capture()\n  fullName: CompressedStack.Capture()\n- uid: System.Threading.CompressedStack\n  parent: System.Threading\n  isExternal: false\n  name: CompressedStack\n  nameWithType: CompressedStack\n  fullName: System.Threading.CompressedStack\n- uid: System.Threading.CompressedStack.CreateCopy\n  parent: System.Threading.CompressedStack\n  isExternal: false\n  name: CreateCopy()\n  nameWithType: CompressedStack.CreateCopy()\n  fullName: CompressedStack.CreateCopy()\n- uid: System.Threading.CompressedStack.GetCompressedStack\n  parent: System.Threading.CompressedStack\n  isExternal: false\n  name: GetCompressedStack()\n  nameWithType: CompressedStack.GetCompressedStack()\n  fullName: CompressedStack.GetCompressedStack()\n- uid: System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Threading.CompressedStack\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: CompressedStack.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: CompressedStack.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)\n  parent: System.Threading.CompressedStack\n  isExternal: false\n  name: Run(CompressedStack, ContextCallback, Object)\n  nameWithType: CompressedStack.Run(CompressedStack, ContextCallback, Object)\n  fullName: CompressedStack.Run(CompressedStack, ContextCallback, Object)\n- uid: System.Threading.ContextCallback\n  parent: System.Threading\n  isExternal: false\n  name: ContextCallback\n  nameWithType: ContextCallback\n  fullName: System.Threading.ContextCallback\n- uid: System.Threading.CompressedStack.Capture*\n  parent: System.Threading.CompressedStack\n  isExternal: false\n  name: Capture\n  nameWithType: CompressedStack.Capture\n  fullName: CompressedStack.Capture\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CompressedStack.xml\n- uid: System.Threading.CompressedStack.CreateCopy*\n  parent: System.Threading.CompressedStack\n  isExternal: false\n  name: CreateCopy\n  nameWithType: CompressedStack.CreateCopy\n  fullName: CompressedStack.CreateCopy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CompressedStack.xml\n- uid: System.Threading.CompressedStack.GetCompressedStack*\n  parent: System.Threading.CompressedStack\n  isExternal: false\n  name: GetCompressedStack\n  nameWithType: CompressedStack.GetCompressedStack\n  fullName: CompressedStack.GetCompressedStack\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CompressedStack.xml\n- uid: System.Threading.CompressedStack.GetObjectData*\n  parent: System.Threading.CompressedStack\n  isExternal: false\n  name: GetObjectData\n  nameWithType: CompressedStack.GetObjectData\n  fullName: CompressedStack.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CompressedStack.xml\n- uid: System.Threading.CompressedStack.Run*\n  parent: System.Threading.CompressedStack\n  isExternal: false\n  name: Run\n  nameWithType: CompressedStack.Run\n  fullName: CompressedStack.Run\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CompressedStack.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}